(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
Polymer({ is: 'demo-footer' });

},{}],2:[function(require,module,exports){
Polymer({ is: 'demo-header' });

},{}],3:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
require("../demo-header");
require("../demo-footer");
var learnjs_1 = require("../learnjs");
var imagenet_util = require("../models/imagenet_util");
var squeezenet_1 = require("../models/squeezenet");
var polymer_spec_1 = require("../polymer-spec");
exports.ImagenetDemoPolymer = polymer_spec_1.PolymerElement({
    is: 'imagenet-demo',
    properties: {
        layerNames: Array,
        selectedLayerName: String,
        inputNames: Array,
        selectedInputName: String
    }
});
var NUM_CLASSES = 1000;
var IMAGE_SIZE = 227;
var TOP_K_CLASSES = 5;
var INPUT_NAMES = ['cat', 'dog1', 'dog2', 'beerbottle', 'piano', 'saxophone'];
var ImagenetDemo = (function (_super) {
    __extends(ImagenetDemo, _super);
    function ImagenetDemo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ImagenetDemo.prototype.ready = function () {
        var _this = this;
        this.inferenceCanvas =
            this.querySelector('#inference-canvas');
        this.staticImgElement =
            this.querySelector('#staticImg');
        this.webcamVideoElement =
            this.querySelector('#webcamVideo');
        this.layerNames = [];
        this.selectedLayerName = 'conv_1';
        var inputDropdown = this.querySelector('#input-dropdown');
        inputDropdown.addEventListener('iron-activate', function (event) {
            var selectedInputName = event.detail.selected;
            if (selectedInputName === 'webcam') {
                _this.webcamVideoElement.style.display = '';
                _this.staticImgElement.style.display = 'none';
            }
            else {
                _this.webcamVideoElement.style.display = 'none';
                _this.staticImgElement.style.display = '';
            }
            _this.staticImgElement.src = 'images/' + event.detail.selected + '.jpg';
        });
        if (navigator.getUserMedia) {
            navigator.getUserMedia({ video: true }, function (stream) {
                _this.webcamVideoElement.src = window.URL.createObjectURL(stream);
                _this.initWithWebcam();
            }, function (error) {
                console.log(error);
                _this.initWithoutWebcam();
            });
        }
        else {
            this.initWithoutWebcam();
        }
        this.gl = learnjs_1.gpgpu_util.createWebGLContext(this.inferenceCanvas);
        this.gpgpu = new learnjs_1.GPGPUContext(this.gl);
        this.math = new learnjs_1.NDArrayMathGPU(this.gpgpu);
        this.mathCPU = new learnjs_1.NDArrayMathCPU();
        this.squeezeNet = new squeezenet_1.SqueezeNet(this.gpgpu, this.math);
        this.squeezeNet.loadVariables().then(function () {
            requestAnimationFrame(function () { return _this.animate(); });
        });
        this.renderGrayscaleChannelsCollageShader =
            imagenet_util.getRenderGrayscaleChannelsCollageShader(this.gpgpu);
    };
    ImagenetDemo.prototype.initWithoutWebcam = function () {
        this.inputNames = INPUT_NAMES;
        this.selectedInputName = 'cat';
        this.staticImgElement.src = 'images/cat.jpg';
        this.webcamVideoElement.style.display = 'none';
        this.staticImgElement.style.display = '';
        if (location.protocol !== 'https:') {
            this.querySelector('#ssl-message').style.display =
                'block';
        }
        this.querySelector('#webcam-message').style.display =
            'block';
    };
    ImagenetDemo.prototype.initWithWebcam = function () {
        var inputNames = INPUT_NAMES.slice();
        inputNames.unshift('webcam');
        this.inputNames = inputNames;
        this.selectedInputName = 'webcam';
    };
    ImagenetDemo.prototype.animate = function () {
        var _this = this;
        var startTime = performance.now();
        var isWebcam = this.selectedInputName === 'webcam';
        var canvasTextureShape = [IMAGE_SIZE, IMAGE_SIZE];
        var canvasTexture = this.math.getTextureManager().acquireTexture(canvasTextureShape);
        var element = isWebcam ? this.webcamVideoElement : this.staticImgElement;
        this.gpgpu.uploadPixelDataToTexture(canvasTexture, element);
        this.math.scope(function (keep, track) {
            var preprocessedInput = track(_this.squeezeNet.preprocessColorTextureToArray3D(canvasTexture, canvasTextureShape));
            var inferenceResult = _this.squeezeNet.infer(preprocessedInput);
            var namedActivations = inferenceResult.namedActivations;
            _this.layerNames = Object.keys(namedActivations);
            _this.layerNames.forEach(function (layerName) { return track(namedActivations[layerName]); });
            var topClassesToProbability = _this.squeezeNet.getTopKClasses(inferenceResult.logits, TOP_K_CLASSES);
            var count = 0;
            for (var className in topClassesToProbability) {
                if (!(className in topClassesToProbability)) {
                    continue;
                }
                document.getElementById('class' + count).innerHTML = className;
                document.getElementById('prob' + count).innerHTML =
                    '' + Math.floor(1000 * topClassesToProbability[className]) / 1000;
                count++;
            }
            var endTime = performance.now();
            _this.querySelector('#totalTime').innerHTML =
                'last inference time: ' +
                    Math.floor(1000 * (endTime - startTime)) / 1000 + 'ms';
            var activationNDArray = namedActivations[_this.selectedLayerName];
            var maxValues = _this.math.maxPool(activationNDArray, activationNDArray.shape[1], activationNDArray.shape[1], 0);
            var minValues = _this.math.minPool(activationNDArray, activationNDArray.shape[1], activationNDArray.shape[1], 0);
            var imagesPerRow = Math.ceil(Math.sqrt(activationNDArray.shape[2]));
            var numRows = Math.ceil(activationNDArray.shape[2] / imagesPerRow);
            _this.inferenceCanvas.width = imagesPerRow * activationNDArray.shape[0];
            _this.inferenceCanvas.height = numRows * activationNDArray.shape[0];
            imagenet_util.renderGrayscaleChannelsCollage(_this.gpgpu, _this.renderGrayscaleChannelsCollageShader, activationNDArray.getTexture(), minValues.getTexture(), maxValues.getTexture(), activationNDArray.getTextureShapeRC(), activationNDArray.shape[0], activationNDArray.shape[2], _this.inferenceCanvas.width, numRows);
        });
        this.math.getTextureManager().releaseTexture(canvasTexture, canvasTextureShape);
        requestAnimationFrame(function () { return _this.animate(); });
    };
    return ImagenetDemo;
}(exports.ImagenetDemoPolymer));
exports.ImagenetDemo = ImagenetDemo;
document.registerElement(ImagenetDemo.prototype.is, ImagenetDemo);

},{"../demo-footer":1,"../demo-header":2,"../learnjs":4,"../models/imagenet_util":6,"../models/squeezenet":7,"../polymer-spec":8}],4:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("../src/index"));

},{"../src/index":15}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IMAGENET_CLASSES = {
    0: 'tench, Tinca tinca',
    1: 'goldfish, Carassius auratus',
    2: 'great white shark, white shark, man-eater, man-eating shark, Carcharodon carcharias',
    3: 'tiger shark, Galeocerdo cuvieri',
    4: 'hammerhead, hammerhead shark',
    5: 'electric ray, crampfish, numbfish, torpedo',
    6: 'stingray',
    7: 'cock',
    8: 'hen',
    9: 'ostrich, Struthio camelus',
    10: 'brambling, Fringilla montifringilla',
    11: 'goldfinch, Carduelis carduelis',
    12: 'house finch, linnet, Carpodacus mexicanus',
    13: 'junco, snowbird',
    14: 'indigo bunting, indigo finch, indigo bird, Passerina cyanea',
    15: 'robin, American robin, Turdus migratorius',
    16: 'bulbul',
    17: 'jay',
    18: 'magpie',
    19: 'chickadee',
    20: 'water ouzel, dipper',
    21: 'kite',
    22: 'bald eagle, American eagle, Haliaeetus leucocephalus',
    23: 'vulture',
    24: 'great grey owl, great gray owl, Strix nebulosa',
    25: 'European fire salamander, Salamandra salamandra',
    26: 'common newt, Triturus vulgaris',
    27: 'eft',
    28: 'spotted salamander, Ambystoma maculatum',
    29: 'axolotl, mud puppy, Ambystoma mexicanum',
    30: 'bullfrog, Rana catesbeiana',
    31: 'tree frog, tree-frog',
    32: 'tailed frog, bell toad, ribbed toad, tailed toad, Ascaphus trui',
    33: 'loggerhead, loggerhead turtle, Caretta caretta',
    34: 'leatherback turtle, leatherback, leathery turtle, Dermochelys coriacea',
    35: 'mud turtle',
    36: 'terrapin',
    37: 'box turtle, box tortoise',
    38: 'banded gecko',
    39: 'common iguana, iguana, Iguana iguana',
    40: 'American chameleon, anole, Anolis carolinensis',
    41: 'whiptail, whiptail lizard',
    42: 'agama',
    43: 'frilled lizard, Chlamydosaurus kingi',
    44: 'alligator lizard',
    45: 'Gila monster, Heloderma suspectum',
    46: 'green lizard, Lacerta viridis',
    47: 'African chameleon, Chamaeleo chamaeleon',
    48: 'Komodo dragon, Komodo lizard, dragon lizard, giant lizard, Varanus komodoensis',
    49: 'African crocodile, Nile crocodile, Crocodylus niloticus',
    50: 'American alligator, Alligator mississipiensis',
    51: 'triceratops',
    52: 'thunder snake, worm snake, Carphophis amoenus',
    53: 'ringneck snake, ring-necked snake, ring snake',
    54: 'hognose snake, puff adder, sand viper',
    55: 'green snake, grass snake',
    56: 'king snake, kingsnake',
    57: 'garter snake, grass snake',
    58: 'water snake',
    59: 'vine snake',
    60: 'night snake, Hypsiglena torquata',
    61: 'boa constrictor, Constrictor constrictor',
    62: 'rock python, rock snake, Python sebae',
    63: 'Indian cobra, Naja naja',
    64: 'green mamba',
    65: 'sea snake',
    66: 'horned viper, cerastes, sand viper, horned asp, Cerastes cornutus',
    67: 'diamondback, diamondback rattlesnake, Crotalus adamanteus',
    68: 'sidewinder, horned rattlesnake, Crotalus cerastes',
    69: 'trilobite',
    70: 'harvestman, daddy longlegs, Phalangium opilio',
    71: 'scorpion',
    72: 'black and gold garden spider, Argiope aurantia',
    73: 'barn spider, Araneus cavaticus',
    74: 'garden spider, Aranea diademata',
    75: 'black widow, Latrodectus mactans',
    76: 'tarantula',
    77: 'wolf spider, hunting spider',
    78: 'tick',
    79: 'centipede',
    80: 'black grouse',
    81: 'ptarmigan',
    82: 'ruffed grouse, partridge, Bonasa umbellus',
    83: 'prairie chicken, prairie grouse, prairie fowl',
    84: 'peacock',
    85: 'quail',
    86: 'partridge',
    87: 'African grey, African gray, Psittacus erithacus',
    88: 'macaw',
    89: 'sulphur-crested cockatoo, Kakatoe galerita, Cacatua galerita',
    90: 'lorikeet',
    91: 'coucal',
    92: 'bee eater',
    93: 'hornbill',
    94: 'hummingbird',
    95: 'jacamar',
    96: 'toucan',
    97: 'drake',
    98: 'red-breasted merganser, Mergus serrator',
    99: 'goose',
    100: 'black swan, Cygnus atratus',
    101: 'tusker',
    102: 'echidna, spiny anteater, anteater',
    103: 'platypus, duckbill, duckbilled platypus, duck-billed platypus, Ornithorhynchus anatinus',
    104: 'wallaby, brush kangaroo',
    105: 'koala, koala bear, kangaroo bear, native bear, Phascolarctos cinereus',
    106: 'wombat',
    107: 'jelly fish',
    108: 'sea anemone, anemone',
    109: 'brain coral',
    110: 'flatworm, platyhelminth',
    111: 'nematode, nematode worm, roundworm',
    112: 'conch',
    113: 'snail',
    114: 'slug',
    115: 'sea slug, nudibranch',
    116: 'chiton, coat-of-mail shell, sea cradle, polyplacophore',
    117: 'chambered nautilus, pearly nautilus, nautilus',
    118: 'Dungeness crab, Cancer magister',
    119: 'rock crab, Cancer irroratus',
    120: 'fiddler crab',
    121: 'king crab, Alaska crab, Alaskan king crab, Alaska king crab, Paralithodes camtschatica',
    122: 'American lobster, Northern lobster, Maine lobster, Homarus americanus',
    123: 'spiny lobster, langouste, rock lobster, crawfish, crayfish, sea crawfish',
    124: 'crayfish, crawfish, crawdad, crawdaddy',
    125: 'hermit crab',
    126: 'isopod',
    127: 'white stork, Ciconia ciconia',
    128: 'black stork, Ciconia nigra',
    129: 'spoonbill',
    130: 'flamingo',
    131: 'little blue heron, Egretta caerulea',
    132: 'American egret, great white heron, Egretta albus',
    133: 'bittern',
    134: 'crane',
    135: 'limpkin, Aramus pictus',
    136: 'European gallinule, Porphyrio porphyrio',
    137: 'American coot, marsh hen, mud hen, water hen, Fulica americana',
    138: 'bustard',
    139: 'ruddy turnstone, Arenaria interpres',
    140: 'red-backed sandpiper, dunlin, Erolia alpina',
    141: 'redshank, Tringa totanus',
    142: 'dowitcher',
    143: 'oystercatcher, oyster catcher',
    144: 'pelican',
    145: 'king penguin, Aptenodytes patagonica',
    146: 'albatross, mollymawk',
    147: 'grey whale, gray whale, devilfish, Eschrichtius gibbosus, Eschrichtius robustus',
    148: 'killer whale, killer, orca, grampus, sea wolf, Orcinus orca',
    149: 'dugong, Dugong dugon',
    150: 'sea lion',
    151: 'Chihuahua',
    152: 'Japanese spaniel',
    153: 'Maltese dog, Maltese terrier, Maltese',
    154: 'Pekinese, Pekingese, Peke',
    155: 'Shih-Tzu',
    156: 'Blenheim spaniel',
    157: 'papillon',
    158: 'toy terrier',
    159: 'Rhodesian ridgeback',
    160: 'Afghan hound, Afghan',
    161: 'basset, basset hound',
    162: 'beagle',
    163: 'bloodhound, sleuthhound',
    164: 'bluetick',
    165: 'black-and-tan coonhound',
    166: 'Walker hound, Walker foxhound',
    167: 'English foxhound',
    168: 'redbone',
    169: 'borzoi, Russian wolfhound',
    170: 'Irish wolfhound',
    171: 'Italian greyhound',
    172: 'whippet',
    173: 'Ibizan hound, Ibizan Podenco',
    174: 'Norwegian elkhound, elkhound',
    175: 'otterhound, otter hound',
    176: 'Saluki, gazelle hound',
    177: 'Scottish deerhound, deerhound',
    178: 'Weimaraner',
    179: 'Staffordshire bullterrier, Staffordshire bull terrier',
    180: 'American Staffordshire terrier, Staffordshire terrier, American pit bull terrier, pit bull terrier',
    181: 'Bedlington terrier',
    182: 'Border terrier',
    183: 'Kerry blue terrier',
    184: 'Irish terrier',
    185: 'Norfolk terrier',
    186: 'Norwich terrier',
    187: 'Yorkshire terrier',
    188: 'wire-haired fox terrier',
    189: 'Lakeland terrier',
    190: 'Sealyham terrier, Sealyham',
    191: 'Airedale, Airedale terrier',
    192: 'cairn, cairn terrier',
    193: 'Australian terrier',
    194: 'Dandie Dinmont, Dandie Dinmont terrier',
    195: 'Boston bull, Boston terrier',
    196: 'miniature schnauzer',
    197: 'giant schnauzer',
    198: 'standard schnauzer',
    199: 'Scotch terrier, Scottish terrier, Scottie',
    200: 'Tibetan terrier, chrysanthemum dog',
    201: 'silky terrier, Sydney silky',
    202: 'soft-coated wheaten terrier',
    203: 'West Highland white terrier',
    204: 'Lhasa, Lhasa apso',
    205: 'flat-coated retriever',
    206: 'curly-coated retriever',
    207: 'golden retriever',
    208: 'Labrador retriever',
    209: 'Chesapeake Bay retriever',
    210: 'German short-haired pointer',
    211: 'vizsla, Hungarian pointer',
    212: 'English setter',
    213: 'Irish setter, red setter',
    214: 'Gordon setter',
    215: 'Brittany spaniel',
    216: 'clumber, clumber spaniel',
    217: 'English springer, English springer spaniel',
    218: 'Welsh springer spaniel',
    219: 'cocker spaniel, English cocker spaniel, cocker',
    220: 'Sussex spaniel',
    221: 'Irish water spaniel',
    222: 'kuvasz',
    223: 'schipperke',
    224: 'groenendael',
    225: 'malinois',
    226: 'briard',
    227: 'kelpie',
    228: 'komondor',
    229: 'Old English sheepdog, bobtail',
    230: 'Shetland sheepdog, Shetland sheep dog, Shetland',
    231: 'collie',
    232: 'Border collie',
    233: 'Bouvier des Flandres, Bouviers des Flandres',
    234: 'Rottweiler',
    235: 'German shepherd, German shepherd dog, German police dog, alsatian',
    236: 'Doberman, Doberman pinscher',
    237: 'miniature pinscher',
    238: 'Greater Swiss Mountain dog',
    239: 'Bernese mountain dog',
    240: 'Appenzeller',
    241: 'EntleBucher',
    242: 'boxer',
    243: 'bull mastiff',
    244: 'Tibetan mastiff',
    245: 'French bulldog',
    246: 'Great Dane',
    247: 'Saint Bernard, St Bernard',
    248: 'Eskimo dog, husky',
    249: 'malamute, malemute, Alaskan malamute',
    250: 'Siberian husky',
    251: 'dalmatian, coach dog, carriage dog',
    252: 'affenpinscher, monkey pinscher, monkey dog',
    253: 'basenji',
    254: 'pug, pug-dog',
    255: 'Leonberg',
    256: 'Newfoundland, Newfoundland dog',
    257: 'Great Pyrenees',
    258: 'Samoyed, Samoyede',
    259: 'Pomeranian',
    260: 'chow, chow chow',
    261: 'keeshond',
    262: 'Brabancon griffon',
    263: 'Pembroke, Pembroke Welsh corgi',
    264: 'Cardigan, Cardigan Welsh corgi',
    265: 'toy poodle',
    266: 'miniature poodle',
    267: 'standard poodle',
    268: 'Mexican hairless',
    269: 'timber wolf, grey wolf, gray wolf, Canis lupus',
    270: 'white wolf, Arctic wolf, Canis lupus tundrarum',
    271: 'red wolf, maned wolf, Canis rufus, Canis niger',
    272: 'coyote, prairie wolf, brush wolf, Canis latrans',
    273: 'dingo, warrigal, warragal, Canis dingo',
    274: 'dhole, Cuon alpinus',
    275: 'African hunting dog, hyena dog, Cape hunting dog, Lycaon pictus',
    276: 'hyena, hyaena',
    277: 'red fox, Vulpes vulpes',
    278: 'kit fox, Vulpes macrotis',
    279: 'Arctic fox, white fox, Alopex lagopus',
    280: 'grey fox, gray fox, Urocyon cinereoargenteus',
    281: 'tabby, tabby cat',
    282: 'tiger cat',
    283: 'Persian cat',
    284: 'Siamese cat, Siamese',
    285: 'Egyptian cat',
    286: 'cougar, puma, catamount, mountain lion, painter, panther, Felis concolor',
    287: 'lynx, catamount',
    288: 'leopard, Panthera pardus',
    289: 'snow leopard, ounce, Panthera uncia',
    290: 'jaguar, panther, Panthera onca, Felis onca',
    291: 'lion, king of beasts, Panthera leo',
    292: 'tiger, Panthera tigris',
    293: 'cheetah, chetah, Acinonyx jubatus',
    294: 'brown bear, bruin, Ursus arctos',
    295: 'American black bear, black bear, Ursus americanus, Euarctos americanus',
    296: 'ice bear, polar bear, Ursus Maritimus, Thalarctos maritimus',
    297: 'sloth bear, Melursus ursinus, Ursus ursinus',
    298: 'mongoose',
    299: 'meerkat, mierkat',
    300: 'tiger beetle',
    301: 'ladybug, ladybeetle, lady beetle, ladybird, ladybird beetle',
    302: 'ground beetle, carabid beetle',
    303: 'long-horned beetle, longicorn, longicorn beetle',
    304: 'leaf beetle, chrysomelid',
    305: 'dung beetle',
    306: 'rhinoceros beetle',
    307: 'weevil',
    308: 'fly',
    309: 'bee',
    310: 'ant, emmet, pismire',
    311: 'grasshopper, hopper',
    312: 'cricket',
    313: 'walking stick, walkingstick, stick insect',
    314: 'cockroach, roach',
    315: 'mantis, mantid',
    316: 'cicada, cicala',
    317: 'leafhopper',
    318: 'lacewing, lacewing fly',
    319: 'dragonfly, darning needle, devil\'s darning needle, sewing needle, snake feeder, snake doctor, mosquito hawk, skeeter hawk',
    320: 'damselfly',
    321: 'admiral',
    322: 'ringlet, ringlet butterfly',
    323: 'monarch, monarch butterfly, milkweed butterfly, Danaus plexippus',
    324: 'cabbage butterfly',
    325: 'sulphur butterfly, sulfur butterfly',
    326: 'lycaenid, lycaenid butterfly',
    327: 'starfish, sea star',
    328: 'sea urchin',
    329: 'sea cucumber, holothurian',
    330: 'wood rabbit, cottontail, cottontail rabbit',
    331: 'hare',
    332: 'Angora, Angora rabbit',
    333: 'hamster',
    334: 'porcupine, hedgehog',
    335: 'fox squirrel, eastern fox squirrel, Sciurus niger',
    336: 'marmot',
    337: 'beaver',
    338: 'guinea pig, Cavia cobaya',
    339: 'sorrel',
    340: 'zebra',
    341: 'hog, pig, grunter, squealer, Sus scrofa',
    342: 'wild boar, boar, Sus scrofa',
    343: 'warthog',
    344: 'hippopotamus, hippo, river horse, Hippopotamus amphibius',
    345: 'ox',
    346: 'water buffalo, water ox, Asiatic buffalo, Bubalus bubalis',
    347: 'bison',
    348: 'ram, tup',
    349: 'bighorn, bighorn sheep, cimarron, Rocky Mountain bighorn, Rocky Mountain sheep, Ovis canadensis',
    350: 'ibex, Capra ibex',
    351: 'hartebeest',
    352: 'impala, Aepyceros melampus',
    353: 'gazelle',
    354: 'Arabian camel, dromedary, Camelus dromedarius',
    355: 'llama',
    356: 'weasel',
    357: 'mink',
    358: 'polecat, fitch, foulmart, foumart, Mustela putorius',
    359: 'black-footed ferret, ferret, Mustela nigripes',
    360: 'otter',
    361: 'skunk, polecat, wood pussy',
    362: 'badger',
    363: 'armadillo',
    364: 'three-toed sloth, ai, Bradypus tridactylus',
    365: 'orangutan, orang, orangutang, Pongo pygmaeus',
    366: 'gorilla, Gorilla gorilla',
    367: 'chimpanzee, chimp, Pan troglodytes',
    368: 'gibbon, Hylobates lar',
    369: 'siamang, Hylobates syndactylus, Symphalangus syndactylus',
    370: 'guenon, guenon monkey',
    371: 'patas, hussar monkey, Erythrocebus patas',
    372: 'baboon',
    373: 'macaque',
    374: 'langur',
    375: 'colobus, colobus monkey',
    376: 'proboscis monkey, Nasalis larvatus',
    377: 'marmoset',
    378: 'capuchin, ringtail, Cebus capucinus',
    379: 'howler monkey, howler',
    380: 'titi, titi monkey',
    381: 'spider monkey, Ateles geoffroyi',
    382: 'squirrel monkey, Saimiri sciureus',
    383: 'Madagascar cat, ring-tailed lemur, Lemur catta',
    384: 'indri, indris, Indri indri, Indri brevicaudatus',
    385: 'Indian elephant, Elephas maximus',
    386: 'African elephant, Loxodonta africana',
    387: 'lesser panda, red panda, panda, bear cat, cat bear, Ailurus fulgens',
    388: 'giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca',
    389: 'barracouta, snoek',
    390: 'eel',
    391: 'coho, cohoe, coho salmon, blue jack, silver salmon, Oncorhynchus kisutch',
    392: 'rock beauty, Holocanthus tricolor',
    393: 'anemone fish',
    394: 'sturgeon',
    395: 'gar, garfish, garpike, billfish, Lepisosteus osseus',
    396: 'lionfish',
    397: 'puffer, pufferfish, blowfish, globefish',
    398: 'abacus',
    399: 'abaya',
    400: 'academic gown, academic robe, judge\'s robe',
    401: 'accordion, piano accordion, squeeze box',
    402: 'acoustic guitar',
    403: 'aircraft carrier, carrier, flattop, attack aircraft carrier',
    404: 'airliner',
    405: 'airship, dirigible',
    406: 'altar',
    407: 'ambulance',
    408: 'amphibian, amphibious vehicle',
    409: 'analog clock',
    410: 'apiary, bee house',
    411: 'apron',
    412: 'ashcan, trash can, garbage can, wastebin, ash bin, ash-bin, ashbin, dustbin, trash barrel, trash bin',
    413: 'assault rifle, assault gun',
    414: 'backpack, back pack, knapsack, packsack, rucksack, haversack',
    415: 'bakery, bakeshop, bakehouse',
    416: 'balance beam, beam',
    417: 'balloon',
    418: 'ballpoint, ballpoint pen, ballpen, Biro',
    419: 'Band Aid',
    420: 'banjo',
    421: 'bannister, banister, balustrade, balusters, handrail',
    422: 'barbell',
    423: 'barber chair',
    424: 'barbershop',
    425: 'barn',
    426: 'barometer',
    427: 'barrel, cask',
    428: 'barrow, garden cart, lawn cart, wheelbarrow',
    429: 'baseball',
    430: 'basketball',
    431: 'bassinet',
    432: 'bassoon',
    433: 'bathing cap, swimming cap',
    434: 'bath towel',
    435: 'bathtub, bathing tub, bath, tub',
    436: 'beach wagon, station wagon, wagon, estate car, beach waggon, station waggon, waggon',
    437: 'beacon, lighthouse, beacon light, pharos',
    438: 'beaker',
    439: 'bearskin, busby, shako',
    440: 'beer bottle',
    441: 'beer glass',
    442: 'bell cote, bell cot',
    443: 'bib',
    444: 'bicycle-built-for-two, tandem bicycle, tandem',
    445: 'bikini, two-piece',
    446: 'binder, ring-binder',
    447: 'binoculars, field glasses, opera glasses',
    448: 'birdhouse',
    449: 'boathouse',
    450: 'bobsled, bobsleigh, bob',
    451: 'bolo tie, bolo, bola tie, bola',
    452: 'bonnet, poke bonnet',
    453: 'bookcase',
    454: 'bookshop, bookstore, bookstall',
    455: 'bottlecap',
    456: 'bow',
    457: 'bow tie, bow-tie, bowtie',
    458: 'brass, memorial tablet, plaque',
    459: 'brassiere, bra, bandeau',
    460: 'breakwater, groin, groyne, mole, bulwark, seawall, jetty',
    461: 'breastplate, aegis, egis',
    462: 'broom',
    463: 'bucket, pail',
    464: 'buckle',
    465: 'bulletproof vest',
    466: 'bullet train, bullet',
    467: 'butcher shop, meat market',
    468: 'cab, hack, taxi, taxicab',
    469: 'caldron, cauldron',
    470: 'candle, taper, wax light',
    471: 'cannon',
    472: 'canoe',
    473: 'can opener, tin opener',
    474: 'cardigan',
    475: 'car mirror',
    476: 'carousel, carrousel, merry-go-round, roundabout, whirligig',
    477: 'carpenter\'s kit, tool kit',
    478: 'carton',
    479: 'car wheel',
    480: 'cash machine, cash dispenser, automated teller machine, automatic teller machine, automated teller, automatic teller, ATM',
    481: 'cassette',
    482: 'cassette player',
    483: 'castle',
    484: 'catamaran',
    485: 'CD player',
    486: 'cello, violoncello',
    487: 'cellular telephone, cellular phone, cellphone, cell, mobile phone',
    488: 'chain',
    489: 'chainlink fence',
    490: 'chain mail, ring mail, mail, chain armor, chain armour, ring armor, ring armour',
    491: 'chain saw, chainsaw',
    492: 'chest',
    493: 'chiffonier, commode',
    494: 'chime, bell, gong',
    495: 'china cabinet, china closet',
    496: 'Christmas stocking',
    497: 'church, church building',
    498: 'cinema, movie theater, movie theatre, movie house, picture palace',
    499: 'cleaver, meat cleaver, chopper',
    500: 'cliff dwelling',
    501: 'cloak',
    502: 'clog, geta, patten, sabot',
    503: 'cocktail shaker',
    504: 'coffee mug',
    505: 'coffeepot',
    506: 'coil, spiral, volute, whorl, helix',
    507: 'combination lock',
    508: 'computer keyboard, keypad',
    509: 'confectionery, confectionary, candy store',
    510: 'container ship, containership, container vessel',
    511: 'convertible',
    512: 'corkscrew, bottle screw',
    513: 'cornet, horn, trumpet, trump',
    514: 'cowboy boot',
    515: 'cowboy hat, ten-gallon hat',
    516: 'cradle',
    517: 'crane',
    518: 'crash helmet',
    519: 'crate',
    520: 'crib, cot',
    521: 'Crock Pot',
    522: 'croquet ball',
    523: 'crutch',
    524: 'cuirass',
    525: 'dam, dike, dyke',
    526: 'desk',
    527: 'desktop computer',
    528: 'dial telephone, dial phone',
    529: 'diaper, nappy, napkin',
    530: 'digital clock',
    531: 'digital watch',
    532: 'dining table, board',
    533: 'dishrag, dishcloth',
    534: 'dishwasher, dish washer, dishwashing machine',
    535: 'disk brake, disc brake',
    536: 'dock, dockage, docking facility',
    537: 'dogsled, dog sled, dog sleigh',
    538: 'dome',
    539: 'doormat, welcome mat',
    540: 'drilling platform, offshore rig',
    541: 'drum, membranophone, tympan',
    542: 'drumstick',
    543: 'dumbbell',
    544: 'Dutch oven',
    545: 'electric fan, blower',
    546: 'electric guitar',
    547: 'electric locomotive',
    548: 'entertainment center',
    549: 'envelope',
    550: 'espresso maker',
    551: 'face powder',
    552: 'feather boa, boa',
    553: 'file, file cabinet, filing cabinet',
    554: 'fireboat',
    555: 'fire engine, fire truck',
    556: 'fire screen, fireguard',
    557: 'flagpole, flagstaff',
    558: 'flute, transverse flute',
    559: 'folding chair',
    560: 'football helmet',
    561: 'forklift',
    562: 'fountain',
    563: 'fountain pen',
    564: 'four-poster',
    565: 'freight car',
    566: 'French horn, horn',
    567: 'frying pan, frypan, skillet',
    568: 'fur coat',
    569: 'garbage truck, dustcart',
    570: 'gasmask, respirator, gas helmet',
    571: 'gas pump, gasoline pump, petrol pump, island dispenser',
    572: 'goblet',
    573: 'go-kart',
    574: 'golf ball',
    575: 'golfcart, golf cart',
    576: 'gondola',
    577: 'gong, tam-tam',
    578: 'gown',
    579: 'grand piano, grand',
    580: 'greenhouse, nursery, glasshouse',
    581: 'grille, radiator grille',
    582: 'grocery store, grocery, food market, market',
    583: 'guillotine',
    584: 'hair slide',
    585: 'hair spray',
    586: 'half track',
    587: 'hammer',
    588: 'hamper',
    589: 'hand blower, blow dryer, blow drier, hair dryer, hair drier',
    590: 'hand-held computer, hand-held microcomputer',
    591: 'handkerchief, hankie, hanky, hankey',
    592: 'hard disc, hard disk, fixed disk',
    593: 'harmonica, mouth organ, harp, mouth harp',
    594: 'harp',
    595: 'harvester, reaper',
    596: 'hatchet',
    597: 'holster',
    598: 'home theater, home theatre',
    599: 'honeycomb',
    600: 'hook, claw',
    601: 'hoopskirt, crinoline',
    602: 'horizontal bar, high bar',
    603: 'horse cart, horse-cart',
    604: 'hourglass',
    605: 'iPod',
    606: 'iron, smoothing iron',
    607: 'jack-o\'-lantern',
    608: 'jean, blue jean, denim',
    609: 'jeep, landrover',
    610: 'jersey, T-shirt, tee shirt',
    611: 'jigsaw puzzle',
    612: 'jinrikisha, ricksha, rickshaw',
    613: 'joystick',
    614: 'kimono',
    615: 'knee pad',
    616: 'knot',
    617: 'lab coat, laboratory coat',
    618: 'ladle',
    619: 'lampshade, lamp shade',
    620: 'laptop, laptop computer',
    621: 'lawn mower, mower',
    622: 'lens cap, lens cover',
    623: 'letter opener, paper knife, paperknife',
    624: 'library',
    625: 'lifeboat',
    626: 'lighter, light, igniter, ignitor',
    627: 'limousine, limo',
    628: 'liner, ocean liner',
    629: 'lipstick, lip rouge',
    630: 'Loafer',
    631: 'lotion',
    632: 'loudspeaker, speaker, speaker unit, loudspeaker system, speaker system',
    633: 'loupe, jeweler\'s loupe',
    634: 'lumbermill, sawmill',
    635: 'magnetic compass',
    636: 'mailbag, postbag',
    637: 'mailbox, letter box',
    638: 'maillot',
    639: 'maillot, tank suit',
    640: 'manhole cover',
    641: 'maraca',
    642: 'marimba, xylophone',
    643: 'mask',
    644: 'matchstick',
    645: 'maypole',
    646: 'maze, labyrinth',
    647: 'measuring cup',
    648: 'medicine chest, medicine cabinet',
    649: 'megalith, megalithic structure',
    650: 'microphone, mike',
    651: 'microwave, microwave oven',
    652: 'military uniform',
    653: 'milk can',
    654: 'minibus',
    655: 'miniskirt, mini',
    656: 'minivan',
    657: 'missile',
    658: 'mitten',
    659: 'mixing bowl',
    660: 'mobile home, manufactured home',
    661: 'Model T',
    662: 'modem',
    663: 'monastery',
    664: 'monitor',
    665: 'moped',
    666: 'mortar',
    667: 'mortarboard',
    668: 'mosque',
    669: 'mosquito net',
    670: 'motor scooter, scooter',
    671: 'mountain bike, all-terrain bike, off-roader',
    672: 'mountain tent',
    673: 'mouse, computer mouse',
    674: 'mousetrap',
    675: 'moving van',
    676: 'muzzle',
    677: 'nail',
    678: 'neck brace',
    679: 'necklace',
    680: 'nipple',
    681: 'notebook, notebook computer',
    682: 'obelisk',
    683: 'oboe, hautboy, hautbois',
    684: 'ocarina, sweet potato',
    685: 'odometer, hodometer, mileometer, milometer',
    686: 'oil filter',
    687: 'organ, pipe organ',
    688: 'oscilloscope, scope, cathode-ray oscilloscope, CRO',
    689: 'overskirt',
    690: 'oxcart',
    691: 'oxygen mask',
    692: 'packet',
    693: 'paddle, boat paddle',
    694: 'paddlewheel, paddle wheel',
    695: 'padlock',
    696: 'paintbrush',
    697: 'pajama, pyjama, pj\'s, jammies',
    698: 'palace',
    699: 'panpipe, pandean pipe, syrinx',
    700: 'paper towel',
    701: 'parachute, chute',
    702: 'parallel bars, bars',
    703: 'park bench',
    704: 'parking meter',
    705: 'passenger car, coach, carriage',
    706: 'patio, terrace',
    707: 'pay-phone, pay-station',
    708: 'pedestal, plinth, footstall',
    709: 'pencil box, pencil case',
    710: 'pencil sharpener',
    711: 'perfume, essence',
    712: 'Petri dish',
    713: 'photocopier',
    714: 'pick, plectrum, plectron',
    715: 'pickelhaube',
    716: 'picket fence, paling',
    717: 'pickup, pickup truck',
    718: 'pier',
    719: 'piggy bank, penny bank',
    720: 'pill bottle',
    721: 'pillow',
    722: 'ping-pong ball',
    723: 'pinwheel',
    724: 'pirate, pirate ship',
    725: 'pitcher, ewer',
    726: 'plane, carpenter\'s plane, woodworking plane',
    727: 'planetarium',
    728: 'plastic bag',
    729: 'plate rack',
    730: 'plow, plough',
    731: 'plunger, plumber\'s helper',
    732: 'Polaroid camera, Polaroid Land camera',
    733: 'pole',
    734: 'police van, police wagon, paddy wagon, patrol wagon, wagon, black Maria',
    735: 'poncho',
    736: 'pool table, billiard table, snooker table',
    737: 'pop bottle, soda bottle',
    738: 'pot, flowerpot',
    739: 'potter\'s wheel',
    740: 'power drill',
    741: 'prayer rug, prayer mat',
    742: 'printer',
    743: 'prison, prison house',
    744: 'projectile, missile',
    745: 'projector',
    746: 'puck, hockey puck',
    747: 'punching bag, punch bag, punching ball, punchball',
    748: 'purse',
    749: 'quill, quill pen',
    750: 'quilt, comforter, comfort, puff',
    751: 'racer, race car, racing car',
    752: 'racket, racquet',
    753: 'radiator',
    754: 'radio, wireless',
    755: 'radio telescope, radio reflector',
    756: 'rain barrel',
    757: 'recreational vehicle, RV, R.V.',
    758: 'reel',
    759: 'reflex camera',
    760: 'refrigerator, icebox',
    761: 'remote control, remote',
    762: 'restaurant, eating house, eating place, eatery',
    763: 'revolver, six-gun, six-shooter',
    764: 'rifle',
    765: 'rocking chair, rocker',
    766: 'rotisserie',
    767: 'rubber eraser, rubber, pencil eraser',
    768: 'rugby ball',
    769: 'rule, ruler',
    770: 'running shoe',
    771: 'safe',
    772: 'safety pin',
    773: 'saltshaker, salt shaker',
    774: 'sandal',
    775: 'sarong',
    776: 'sax, saxophone',
    777: 'scabbard',
    778: 'scale, weighing machine',
    779: 'school bus',
    780: 'schooner',
    781: 'scoreboard',
    782: 'screen, CRT screen',
    783: 'screw',
    784: 'screwdriver',
    785: 'seat belt, seatbelt',
    786: 'sewing machine',
    787: 'shield, buckler',
    788: 'shoe shop, shoe-shop, shoe store',
    789: 'shoji',
    790: 'shopping basket',
    791: 'shopping cart',
    792: 'shovel',
    793: 'shower cap',
    794: 'shower curtain',
    795: 'ski',
    796: 'ski mask',
    797: 'sleeping bag',
    798: 'slide rule, slipstick',
    799: 'sliding door',
    800: 'slot, one-armed bandit',
    801: 'snorkel',
    802: 'snowmobile',
    803: 'snowplow, snowplough',
    804: 'soap dispenser',
    805: 'soccer ball',
    806: 'sock',
    807: 'solar dish, solar collector, solar furnace',
    808: 'sombrero',
    809: 'soup bowl',
    810: 'space bar',
    811: 'space heater',
    812: 'space shuttle',
    813: 'spatula',
    814: 'speedboat',
    815: 'spider web, spider\'s web',
    816: 'spindle',
    817: 'sports car, sport car',
    818: 'spotlight, spot',
    819: 'stage',
    820: 'steam locomotive',
    821: 'steel arch bridge',
    822: 'steel drum',
    823: 'stethoscope',
    824: 'stole',
    825: 'stone wall',
    826: 'stopwatch, stop watch',
    827: 'stove',
    828: 'strainer',
    829: 'streetcar, tram, tramcar, trolley, trolley car',
    830: 'stretcher',
    831: 'studio couch, day bed',
    832: 'stupa, tope',
    833: 'submarine, pigboat, sub, U-boat',
    834: 'suit, suit of clothes',
    835: 'sundial',
    836: 'sunglass',
    837: 'sunglasses, dark glasses, shades',
    838: 'sunscreen, sunblock, sun blocker',
    839: 'suspension bridge',
    840: 'swab, swob, mop',
    841: 'sweatshirt',
    842: 'swimming trunks, bathing trunks',
    843: 'swing',
    844: 'switch, electric switch, electrical switch',
    845: 'syringe',
    846: 'table lamp',
    847: 'tank, army tank, armored combat vehicle, armoured combat vehicle',
    848: 'tape player',
    849: 'teapot',
    850: 'teddy, teddy bear',
    851: 'television, television system',
    852: 'tennis ball',
    853: 'thatch, thatched roof',
    854: 'theater curtain, theatre curtain',
    855: 'thimble',
    856: 'thresher, thrasher, threshing machine',
    857: 'throne',
    858: 'tile roof',
    859: 'toaster',
    860: 'tobacco shop, tobacconist shop, tobacconist',
    861: 'toilet seat',
    862: 'torch',
    863: 'totem pole',
    864: 'tow truck, tow car, wrecker',
    865: 'toyshop',
    866: 'tractor',
    867: 'trailer truck, tractor trailer, trucking rig, rig, articulated lorry, semi',
    868: 'tray',
    869: 'trench coat',
    870: 'tricycle, trike, velocipede',
    871: 'trimaran',
    872: 'tripod',
    873: 'triumphal arch',
    874: 'trolleybus, trolley coach, trackless trolley',
    875: 'trombone',
    876: 'tub, vat',
    877: 'turnstile',
    878: 'typewriter keyboard',
    879: 'umbrella',
    880: 'unicycle, monocycle',
    881: 'upright, upright piano',
    882: 'vacuum, vacuum cleaner',
    883: 'vase',
    884: 'vault',
    885: 'velvet',
    886: 'vending machine',
    887: 'vestment',
    888: 'viaduct',
    889: 'violin, fiddle',
    890: 'volleyball',
    891: 'waffle iron',
    892: 'wall clock',
    893: 'wallet, billfold, notecase, pocketbook',
    894: 'wardrobe, closet, press',
    895: 'warplane, military plane',
    896: 'washbasin, handbasin, washbowl, lavabo, wash-hand basin',
    897: 'washer, automatic washer, washing machine',
    898: 'water bottle',
    899: 'water jug',
    900: 'water tower',
    901: 'whiskey jug',
    902: 'whistle',
    903: 'wig',
    904: 'window screen',
    905: 'window shade',
    906: 'Windsor tie',
    907: 'wine bottle',
    908: 'wing',
    909: 'wok',
    910: 'wooden spoon',
    911: 'wool, woolen, woollen',
    912: 'worm fence, snake fence, snake-rail fence, Virginia fence',
    913: 'wreck',
    914: 'yawl',
    915: 'yurt',
    916: 'web site, website, internet site, site',
    917: 'comic book',
    918: 'crossword puzzle, crossword',
    919: 'street sign',
    920: 'traffic light, traffic signal, stoplight',
    921: 'book jacket, dust cover, dust jacket, dust wrapper',
    922: 'menu',
    923: 'plate',
    924: 'guacamole',
    925: 'consomme',
    926: 'hot pot, hotpot',
    927: 'trifle',
    928: 'ice cream, icecream',
    929: 'ice lolly, lolly, lollipop, popsicle',
    930: 'French loaf',
    931: 'bagel, beigel',
    932: 'pretzel',
    933: 'cheeseburger',
    934: 'hotdog, hot dog, red hot',
    935: 'mashed potato',
    936: 'head cabbage',
    937: 'broccoli',
    938: 'cauliflower',
    939: 'zucchini, courgette',
    940: 'spaghetti squash',
    941: 'acorn squash',
    942: 'butternut squash',
    943: 'cucumber, cuke',
    944: 'artichoke, globe artichoke',
    945: 'bell pepper',
    946: 'cardoon',
    947: 'mushroom',
    948: 'Granny Smith',
    949: 'strawberry',
    950: 'orange',
    951: 'lemon',
    952: 'fig',
    953: 'pineapple, ananas',
    954: 'banana',
    955: 'jackfruit, jak, jack',
    956: 'custard apple',
    957: 'pomegranate',
    958: 'hay',
    959: 'carbonara',
    960: 'chocolate sauce, chocolate syrup',
    961: 'dough',
    962: 'meat loaf, meatloaf',
    963: 'pizza, pizza pie',
    964: 'potpie',
    965: 'burrito',
    966: 'red wine',
    967: 'espresso',
    968: 'cup',
    969: 'eggnog',
    970: 'alp',
    971: 'bubble',
    972: 'cliff, drop, drop-off',
    973: 'coral reef',
    974: 'geyser',
    975: 'lakeside, lakeshore',
    976: 'promontory, headland, head, foreland',
    977: 'sandbar, sand bar',
    978: 'seashore, coast, seacoast, sea-coast',
    979: 'valley, vale',
    980: 'volcano',
    981: 'ballplayer, baseball player',
    982: 'groom, bridegroom',
    983: 'scuba diver',
    984: 'rapeseed',
    985: 'daisy',
    986: 'yellow lady\'s slipper, yellow lady-slipper, Cypripedium calceolus, Cypripedium parviflorum',
    987: 'corn',
    988: 'acorn',
    989: 'hip, rose hip, rosehip',
    990: 'buckeye, horse chestnut, conker',
    991: 'coral fungus',
    992: 'agaric',
    993: 'gyromitra',
    994: 'stinkhorn, carrion fungus',
    995: 'earthstar',
    996: 'hen-of-the-woods, hen of the woods, Polyporus frondosus, Grifola frondosa',
    997: 'bolete',
    998: 'ear, spike, capitulum',
    999: 'toilet tissue, toilet paper, bathroom tissue'
};

},{}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var webgl_util = require("../../src/math/webgl/webgl_util");
function getUnpackAndPreprocessInputShader(gpgpu, inputShapeRC) {
    var fragmentShaderSource = "\n    precision highp float;\n    uniform sampler2D source;\n    varying vec2 resultUV;\n\n    const vec2 inputShapeCR = vec2(" + inputShapeRC[1] + ".0, " + inputShapeRC[0] + ".0);\n\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    void main() {\n      vec2 outputCR = floor(gl_FragCoord.xy);\n\n      vec2 sourceCR = vec2(floor(outputCR[0] / 3.0), outputCR[1]);\n      vec2 sourceUV = (sourceCR + halfCR) / inputShapeCR;\n\n      vec4 sourceValue = texture2D(source, sourceUV) * 255.0;\n\n      float channelValue = 0.0;\n      int channel = int(mod(outputCR[0], 3.0));\n\n      if (channel == 0) {\n        channelValue = sourceValue.r - 103.939;\n      } else if (channel == 1) {\n        channelValue = sourceValue.g - 116.779;\n      } else if (channel == 2) {\n        channelValue = sourceValue.b - 123.68;\n      }\n\n      gl_FragColor = vec4(channelValue, 0, 0, 0);\n    }";
    return gpgpu.createProgram(fragmentShaderSource);
}
exports.getUnpackAndPreprocessInputShader = getUnpackAndPreprocessInputShader;
function preprocessInput(gpgpu, preprocessInputShader, sourceTex, resultTex, shapeRowCol) {
    gpgpu.setOutputMatrixTexture(resultTex, shapeRowCol[0], shapeRowCol[1]);
    gpgpu.setProgram(preprocessInputShader);
    gpgpu.setInputMatrixTexture(sourceTex, 'source', 0);
    gpgpu.executeProgram();
}
exports.preprocessInput = preprocessInput;
function getRenderGrayscaleChannelsCollageShader(gpgpu) {
    var fragmentShaderSource = "\n    precision highp float;\n    uniform sampler2D source;\n    uniform sampler2D minValues;\n    uniform sampler2D maxValues;\n    varying vec2 resultUV;\n\n    uniform float imageSize;\n    uniform float channels;\n    uniform float imagesPerRow;\n    uniform vec2 inputShapeCR;\n\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    void main() {\n      vec2 outputCR = floor(gl_FragCoord.xy);\n\n      float imageRow = floor(outputCR[1] / imageSize);\n      float imageCol = mod(outputCR[0], imageSize);\n\n      float currentChannel = floor(outputCR[0] / imageSize) +\n          imageRow * imagesPerRow;\n\n      // When the number of channels is not square, we render white to fill in\n      // the output texture.\n      if (currentChannel > channels) {\n        gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n        return;\n      }\n\n      float sourceC = channels * imageCol + currentChannel;\n      float sourceR = mod(outputCR[1], imageSize);\n\n      vec2 sourceUV = (vec2(sourceC, sourceR) + halfCR) / inputShapeCR;\n\n      // Flip the vertical axis of the texture for display since we represent\n      // image textures as vertically flipped.\n      float sourceValue = texture2D(\n          source, vec2(sourceUV.s, 1.0 - sourceUV.t)).r;\n\n      // Normalize the value by sampling the minValues and maxValues texture\n      // which contain min and max per channel.\n      vec2 minMaxValuesShapeCR = vec2(channels, 1);\n      vec2 minMaxValuesCR = vec2(currentChannel, 0);\n      vec2 minMaxValuesUV = (minMaxValuesCR + halfCR) / minMaxValuesShapeCR;\n\n      float minValue = texture2D(minValues, minMaxValuesUV).r;\n      float maxValue = texture2D(maxValues, minMaxValuesUV).r;\n\n      float normalizedValue = (sourceValue - minValue) / (maxValue - minValue);\n\n      gl_FragColor = vec4(\n          normalizedValue, normalizedValue, normalizedValue, 1);\n    }\n  ";
    return gpgpu.createProgram(fragmentShaderSource);
}
exports.getRenderGrayscaleChannelsCollageShader = getRenderGrayscaleChannelsCollageShader;
function renderGrayscaleChannelsCollage(gpgpu, unpackChannelsShader, sourceTex, minValuesTex, maxValuesTex, inputShapeRC, imageSize, channels, textureSize, numRows) {
    webgl_util.bindCanvasToFramebuffer(gpgpu.gl);
    gpgpu.setProgram(unpackChannelsShader);
    gpgpu.setInputMatrixTexture(sourceTex, 'source', 0);
    gpgpu.setInputMatrixTexture(minValuesTex, 'minValues', 1);
    gpgpu.setInputMatrixTexture(maxValuesTex, 'maxValues', 2);
    var imageSizeLoc = gpgpu.getUniformLocation('imageSize');
    gpgpu.gl.uniform1f(imageSizeLoc, imageSize);
    var channelsLoc = gpgpu.getUniformLocation('channels');
    gpgpu.gl.uniform1f(channelsLoc, channels);
    var imagesPerRowLoc = gpgpu.getUniformLocation('imagesPerRow');
    gpgpu.gl.uniform1f(imagesPerRowLoc, Math.floor(textureSize / imageSize));
    var inputShapeCRLoc = gpgpu.getUniformLocation('inputShapeCR');
    gpgpu.gl.uniform2f(inputShapeCRLoc, inputShapeRC[1], inputShapeRC[0]);
    gpgpu.executeProgram();
}
exports.renderGrayscaleChannelsCollage = renderGrayscaleChannelsCollage;

},{"../../src/math/webgl/webgl_util":62}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var checkpoint_loader_1 = require("../../src/checkpoint_loader");
var math_cpu_1 = require("../../src/math/math_cpu");
var ndarray_1 = require("../../src/math/ndarray");
var imagenet_classes = require("./imagenet_classes");
var imagenet_util = require("./imagenet_util");
var IMAGE_SIZE = 227;
var NUM_CLASSES = 1000;
var GOOGLE_CLOUD_STORAGE_DIR = 'https://storage.googleapis.com/learnjs-data/checkpoint_zoo/';
var SqueezeNet = (function () {
    function SqueezeNet(gpgpu, math) {
        this.gpgpu = gpgpu;
        this.math = math;
        this.preprocessInputShader =
            imagenet_util.getUnpackAndPreprocessInputShader(gpgpu, [IMAGE_SIZE, IMAGE_SIZE]);
    }
    SqueezeNet.prototype.loadVariables = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var checkpointLoader = new checkpoint_loader_1.CheckpointLoader(GOOGLE_CLOUD_STORAGE_DIR + 'squeezenet1_1/');
            checkpointLoader.getAllVariables().then(function (variables) {
                _this.variables = variables;
                resolve();
            });
        });
    };
    SqueezeNet.prototype.preprocessColorTextureToArray3D = function (rgbTexture, imageDimensions) {
        var preprocessResultShapeRC = [imageDimensions[0], imageDimensions[0] * 3];
        var preprocessResultTexture = this.math.getTextureManager().acquireTexture(preprocessResultShapeRC);
        imagenet_util.preprocessInput(this.gpgpu, this.preprocessInputShader, rgbTexture, preprocessResultTexture, preprocessResultShapeRC);
        return ndarray_1.NDArray.make([imageDimensions[0], imageDimensions[0], 3], {
            texture: preprocessResultTexture,
            textureShapeRC: preprocessResultShapeRC
        });
    };
    SqueezeNet.prototype.infer = function (preprocessedInput) {
        var _this = this;
        var namedActivations = {};
        var avgpool10 = this.math.scope(function (keep) {
            var conv1 = _this.math.conv2d(preprocessedInput, _this.variables['conv1_W:0'], _this.variables['conv1_b:0'], 2, 0);
            var conv1relu = keep(_this.math.relu(conv1));
            namedActivations['conv_1'] = conv1relu;
            var pool1 = keep(_this.math.maxPool(conv1relu, 3, 2, 0));
            namedActivations['maxpool_1'] = pool1;
            var fire2 = keep(_this.fireModule(pool1, 2));
            namedActivations['fire2'] = fire2;
            var fire3 = keep(_this.fireModule(fire2, 3));
            namedActivations['fire3'] = fire3;
            var fire3Reshape2d = fire3.as2D(fire3.shape[0], fire3.shape[1] * fire3.shape[2]);
            var fire3Sliced2d = _this.math.slice2D(fire3Reshape2d, [0, 0], [fire3.shape[0] - 1, (fire3.shape[1] - 1) * fire3.shape[2]]);
            var fire3Sliced = fire3Sliced2d.as3D(fire3.shape[0] - 1, fire3.shape[1] - 1, fire3.shape[2]);
            var pool2 = keep(_this.math.maxPool(fire3Sliced, 3, 2, 0));
            namedActivations['maxpool_2'] = pool2;
            var fire4 = keep(_this.fireModule(pool2, 4));
            namedActivations['fire4'] = fire4;
            var fire5 = keep(_this.fireModule(fire4, 5));
            namedActivations['fire5'] = fire5;
            var pool3 = keep(_this.math.maxPool(fire5, 3, 2, 0));
            namedActivations['maxpool_3'] = pool3;
            var fire6 = keep(_this.fireModule(pool3, 6));
            namedActivations['fire6'] = fire6;
            var fire7 = keep(_this.fireModule(fire6, 7));
            namedActivations['fire7'] = fire7;
            var fire8 = keep(_this.fireModule(fire7, 8));
            namedActivations['fire8'] = fire8;
            var fire9 = keep(_this.fireModule(fire8, 9));
            namedActivations['fire9'] = fire9;
            var conv10 = keep(_this.math.conv2d(fire9, _this.variables['conv10_W:0'], _this.variables['conv10_b:0'], 1, 0));
            namedActivations['conv10'] = conv10;
            return _this.math.avgPool(conv10, conv10.shape[0], 1, 0).as1D();
        });
        return { namedActivations: namedActivations, logits: avgpool10 };
    };
    SqueezeNet.prototype.fireModule = function (input, fireId) {
        var y1 = this.math.conv2d(input, this.variables['fire' + fireId + '/squeeze1x1_W:0'], this.variables['fire' + fireId + '/squeeze1x1_b:0'], 1, 0);
        var y2 = this.math.relu(y1);
        var left1 = this.math.conv2d(y2, this.variables['fire' + fireId + '/expand1x1_W:0'], this.variables['fire' + fireId + '/expand1x1_b:0'], 1, 0);
        var left2 = this.math.relu(left1);
        var right1 = this.math.conv2d(y2, this.variables['fire' + fireId + '/expand3x3_W:0'], this.variables['fire' + fireId + '/expand3x3_b:0'], 1, 1);
        var right2 = this.math.relu(right1);
        return this.math.concat3D(left2, right2, 2);
    };
    SqueezeNet.prototype.getTopKClasses = function (logits, topK) {
        var predictions = this.math.softmax(logits);
        var topk = new math_cpu_1.NDArrayMathCPU().topK(predictions, topK);
        var topkIndices = topk.indices.getValues();
        var topkValues = topk.values.getValues();
        var topClassesToProbability = {};
        for (var i = 0; i < topkIndices.length; i++) {
            topClassesToProbability[imagenet_classes
                .IMAGENET_CLASSES[topkIndices[i]]] =
                topkValues[i];
        }
        return topClassesToProbability;
    };
    return SqueezeNet;
}());
exports.SqueezeNet = SqueezeNet;

},{"../../src/checkpoint_loader":9,"../../src/math/math_cpu":24,"../../src/math/ndarray":26,"./imagenet_classes":5,"./imagenet_util":6}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function PolymerElement(spec) {
    return Polymer.Class(spec);
}
exports.PolymerElement = PolymerElement;

},{}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ndarray_1 = require("./math/ndarray");
var MANIFEST_FILE = 'manifest.json';
var CheckpointLoader = (function () {
    function CheckpointLoader(urlPath) {
        this.urlPath = urlPath;
        if (this.urlPath.charAt(this.urlPath.length - 1) !== '/') {
            this.urlPath += '/';
        }
    }
    CheckpointLoader.prototype.loadManifest = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', _this.urlPath + MANIFEST_FILE);
            xhr.onload = function () {
                _this.checkpointManifest = JSON.parse(xhr.responseText);
                resolve();
            };
            xhr.onerror = function (error) {
                throw new Error(MANIFEST_FILE + " not found at " + _this.urlPath + ". " + error);
            };
            xhr.send();
        });
    };
    CheckpointLoader.prototype.getCheckpointManifest = function () {
        var _this = this;
        if (this.checkpointManifest == null) {
            return new Promise(function (resolve, reject) {
                _this.loadManifest().then(function () {
                    resolve(_this.checkpointManifest);
                });
            });
        }
        return new Promise(function (resolve, reject) {
            resolve(_this.checkpointManifest);
        });
    };
    CheckpointLoader.prototype.getAllVariables = function () {
        var _this = this;
        if (this.variables != null) {
            return new Promise(function (resolve, reject) {
                resolve(_this.variables);
            });
        }
        return new Promise(function (resolve, reject) {
            _this.getCheckpointManifest().then(function (checkpointDefinition) {
                var variableNames = Object.keys(_this.checkpointManifest);
                var variablePromises = [];
                for (var i = 0; i < variableNames.length; i++) {
                    variablePromises.push(_this.getVariable(variableNames[i]));
                }
                Promise.all(variablePromises).then(function (variables) {
                    _this.variables = {};
                    for (var i = 0; i < variables.length; i++) {
                        _this.variables[variableNames[i]] = variables[i];
                    }
                    resolve(_this.variables);
                });
            });
        });
    };
    CheckpointLoader.prototype.getVariable = function (varName) {
        var _this = this;
        if (!(varName in this.checkpointManifest)) {
            throw new Error('Cannot load non-existant variable ' + varName);
        }
        var variableRequestPromiseMethod = function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            xhr.responseType = 'arraybuffer';
            var fname = _this.checkpointManifest[varName].filename;
            xhr.open('GET', _this.urlPath + fname);
            xhr.onload = function () {
                var values = new Float32Array(xhr.response);
                var ndarray = ndarray_1.NDArray.make(_this.checkpointManifest[varName].shape, { values: values });
                resolve(ndarray);
            };
            xhr.onerror = function (error) {
                throw new Error('Could not fetch variable ' + varName + ': ' + error);
            };
            xhr.send();
        };
        if (this.checkpointManifest == null) {
            return new Promise(function (resolve, reject) {
                _this.loadManifest().then(function () {
                    new Promise(variableRequestPromiseMethod).then(resolve);
                });
            });
        }
        return new Promise(variableRequestPromiseMethod);
    };
    return CheckpointLoader;
}());
exports.CheckpointLoader = CheckpointLoader;

},{"./math/ndarray":26}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ndarray_1 = require("./math/ndarray");
var util = require("./util");
var STATS_SAMPLE_PERCENTAGE = 0.1;
var InMemoryDataset = (function () {
    function InMemoryDataset(dataShapes) {
        this.dataShapes = dataShapes;
        this.normalizationInfo = {};
    }
    InMemoryDataset.prototype.getDataShape = function (dataIndex) {
        return this.dataShapes[dataIndex];
    };
    InMemoryDataset.prototype.getData = function () {
        return this.dataset;
    };
    InMemoryDataset.prototype.getStats = function () {
        var _this = this;
        if (this.dataset == null) {
            throw new Error('Data is null.');
        }
        return this.dataset.map(function (d) { return _this.getStatsForData(d); });
    };
    InMemoryDataset.prototype.getStatsForData = function (data) {
        var inputMin = Number.POSITIVE_INFINITY;
        var inputMax = Number.NEGATIVE_INFINITY;
        var exampleIndices = data.map(function (example, i) { return i; });
        util.shuffle(exampleIndices);
        exampleIndices =
            exampleIndices.slice(exampleIndices.length * STATS_SAMPLE_PERCENTAGE);
        for (var i = 0; i < exampleIndices.length; i++) {
            var inputValues = data[exampleIndices[i]].getValues();
            for (var j = 0; j < inputValues.length; j++) {
                inputMin = Math.min(inputMin, inputValues[j]);
                inputMax = Math.max(inputMax, inputValues[j]);
            }
        }
        return {
            inputMin: inputMin,
            inputMax: inputMax,
            exampleCount: data.length,
            shape: data[0].shape,
        };
    };
    InMemoryDataset.prototype.normalizeExamplesToRange = function (examples, curLowerBounds, curUpperBounds, newLowerBounds, newUpperBounds) {
        var curBoundsIsPerDimension = (curUpperBounds instanceof Float32Array &&
            curLowerBounds instanceof Float32Array);
        var newBoundsIsPerDimension = (newLowerBounds instanceof Float32Array &&
            newUpperBounds instanceof Float32Array);
        var inputSize = util.sizeFromShape(examples[0].shape);
        var newExamples = [];
        examples.forEach(function (example) {
            var inputValues = example.getValues();
            var normalizedValues = new Float32Array(inputSize);
            for (var j = 0; j < inputSize; j++) {
                var curLowerBound = curBoundsIsPerDimension ?
                    curLowerBounds[j] :
                    curLowerBounds;
                var curUpperBound = curBoundsIsPerDimension ?
                    curUpperBounds[j] :
                    curUpperBounds;
                var curRange = curUpperBound - curLowerBound;
                var newLowerBound = newBoundsIsPerDimension ?
                    newLowerBounds[j] :
                    newLowerBounds;
                var newUpperBound = newBoundsIsPerDimension ?
                    newUpperBounds[j] :
                    newUpperBounds;
                var newRange = newUpperBound - newLowerBound;
                if (curRange === 0) {
                    normalizedValues[j] = newLowerBound;
                }
                else {
                    normalizedValues[j] = newLowerBound +
                        newRange * (inputValues[j] - curLowerBound) / curRange;
                }
            }
            newExamples.push(ndarray_1.NDArray.make(example.shape, { values: normalizedValues }));
        });
        return newExamples;
    };
    InMemoryDataset.prototype.computeBounds = function (dataIndex) {
        var _this = this;
        if (this.dataset == null) {
            throw new Error('Data is null.');
        }
        var size = util.sizeFromShape(this.dataset[dataIndex][0].shape);
        this.normalizationInfo[dataIndex] = {
            isNormalized: false,
            minValues: new Float32Array(size),
            maxValues: new Float32Array(size)
        };
        for (var i = 0; i < size; i++) {
            this.normalizationInfo[dataIndex].minValues[i] = Number.POSITIVE_INFINITY;
            this.normalizationInfo[dataIndex].maxValues[i] = Number.NEGATIVE_INFINITY;
        }
        this.dataset[dataIndex].forEach(function (example) {
            var inputValues = example.getValues();
            for (var k = 0; k < size; k++) {
                _this.normalizationInfo[dataIndex].minValues[k] = Math.min(_this.normalizationInfo[dataIndex].minValues[k], inputValues[k]);
                _this.normalizationInfo[dataIndex].maxValues[k] = Math.max(_this.normalizationInfo[dataIndex].maxValues[k], inputValues[k]);
            }
        });
    };
    InMemoryDataset.prototype.normalizeWithinBounds = function (dataIndex, lowerBound, upperBound) {
        if (this.dataset == null) {
            throw new Error('Data is null.');
        }
        if (dataIndex >= this.dataset.length) {
            throw new Error('dataIndex out of bounds.');
        }
        if (this.normalizationInfo[dataIndex] == null) {
            this.computeBounds(dataIndex);
        }
        var curLowerBounds;
        var curUpperBounds;
        if (this.normalizationInfo[dataIndex].isNormalized) {
            curLowerBounds = this.normalizationInfo[dataIndex].lowerBound;
            curUpperBounds = this.normalizationInfo[dataIndex].upperBound;
        }
        else {
            curLowerBounds = this.normalizationInfo[dataIndex].minValues;
            curUpperBounds = this.normalizationInfo[dataIndex].maxValues;
        }
        this.dataset[dataIndex] = this.normalizeExamplesToRange(this.dataset[dataIndex], curLowerBounds, curUpperBounds, lowerBound, upperBound);
        this.normalizationInfo[dataIndex].isNormalized = true;
        this.normalizationInfo[dataIndex].lowerBound = lowerBound;
        this.normalizationInfo[dataIndex].upperBound = upperBound;
    };
    InMemoryDataset.prototype.isNormalized = function (dataIndex) {
        return this.normalizationInfo != null &&
            this.normalizationInfo[dataIndex].isNormalized;
    };
    InMemoryDataset.prototype.removeNormalization = function (dataIndex) {
        if (this.dataset == null) {
            throw new Error('Training or test data is null.');
        }
        if (!this.isNormalized(dataIndex)) {
            return;
        }
        this.dataset[dataIndex] = this.normalizeExamplesToRange(this.dataset[dataIndex], this.normalizationInfo[dataIndex].lowerBound, this.normalizationInfo[dataIndex].upperBound, this.normalizationInfo[dataIndex].minValues, this.normalizationInfo[dataIndex].maxValues);
        this.normalizationInfo[dataIndex].isNormalized = false;
    };
    InMemoryDataset.prototype.unnormalizeExamples = function (examples, dataIndex) {
        if (!this.isNormalized(dataIndex)) {
            return examples;
        }
        return this.normalizeExamplesToRange(examples, this.normalizationInfo[dataIndex].lowerBound, this.normalizationInfo[dataIndex].upperBound, this.normalizationInfo[dataIndex].minValues, this.normalizationInfo[dataIndex].maxValues);
    };
    InMemoryDataset.prototype.dispose = function () {
        if (this.dataset == null) {
            return;
        }
        for (var i = 0; i < this.dataset.length; i++) {
            for (var j = 0; j < this.dataset[i].length; j++) {
                this.dataset[i][j].dispose();
            }
        }
        this.dataset = [];
    };
    return InMemoryDataset;
}());
exports.InMemoryDataset = InMemoryDataset;

},{"./math/ndarray":26,"./util":90}],11:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var graph_layers_1 = require("./graph_layers");
var concat3d_util = require("./math/concat3d_util");
var conv_util = require("./math/conv_util");
var ndarray_1 = require("./math/ndarray");
var util = require("./util");
var Graph = (function () {
    function Graph() {
        this.nodes = [];
        this.layers = new graph_layers_1.GraphLayers(this);
    }
    Graph.prototype.variable = function (name, data) {
        return this.addNodeAndReturnOutput(new VariableNode(this, name, data));
    };
    Graph.prototype.placeholder = function (name, shape) {
        return this.addNodeAndReturnOutput(new PlaceholderNode(this, name, shape));
    };
    Graph.prototype.constant = function (value) {
        var finalValue;
        if (typeof value === 'number') {
            finalValue = ndarray_1.Scalar.new(value);
        }
        else if (value instanceof ndarray_1.NDArray) {
            finalValue = value;
        }
        else if (value instanceof Array) {
            var vals = new Float32Array(util.flatten(value));
            finalValue = ndarray_1.NDArray.make(util.inferShape(value), { values: vals });
        }
        else {
            throw new Error('unimplemented constant type.');
        }
        return this.addNodeAndReturnOutput(new ConstantNode(this, finalValue));
    };
    Graph.prototype.reshape = function (x, shape) {
        return this.addNodeAndReturnOutput(new ReshapeNode(this, 'Reshape', x, shape));
    };
    Graph.prototype.fusedLinearCombination = function (x1, x2, c1, c2) {
        return this.addNodeAndReturnOutput(new FusedLinearCombinationNode(this, x1, x2, c1, c2));
    };
    Graph.prototype.add = function (x1, x2) {
        return this.addNodeAndReturnOutput(new AddNode(this, x1, x2));
    };
    Graph.prototype.subtract = function (x1, x2) {
        return this.addNodeAndReturnOutput(new SubtractNode(this, x1, x2));
    };
    Graph.prototype.multiply = function (x1, x2) {
        return this.addNodeAndReturnOutput(new MultiplyNode(this, x1, x2));
    };
    Graph.prototype.divide = function (x1, x2) {
        return this.addNodeAndReturnOutput(new DivideNode(this, x1, x2));
    };
    Graph.prototype.reduceSum = function (x) {
        return this.addNodeAndReturnOutput(new ReduceSumNode(this, x));
    };
    Graph.prototype.concat3d = function (x1, x2, axis) {
        return this.addNodeAndReturnOutput(new Concat3DNode(this, x1, x2, axis));
    };
    Graph.prototype.matmul = function (x1, x2) {
        return this.addNodeAndReturnOutput(new MatMulNode(this, x1, x2));
    };
    Graph.prototype.conv2d = function (x, w, b, fieldSize, outputDepth, stride, zeroPad) {
        if (stride === void 0) { stride = 1; }
        return this.addNodeAndReturnOutput(new Convolution2DNode(this, x, w, b, fieldSize, outputDepth, stride, zeroPad));
    };
    Graph.prototype.maxPool = function (x, fieldSize, stride, zeroPad) {
        if (stride === void 0) { stride = 1; }
        return this.addNodeAndReturnOutput(new MaxPoolNode(this, x, fieldSize, stride, zeroPad));
    };
    Graph.prototype.exp = function (x) {
        return this.addNodeAndReturnOutput(new ExpNode(this, x));
    };
    Graph.prototype.log = function (x) {
        return this.addNodeAndReturnOutput(new LogNode(this, x));
    };
    Graph.prototype.relu = function (x) {
        return this.addNodeAndReturnOutput(new ReLUNode(this, x));
    };
    Graph.prototype.tanh = function (x) {
        return this.addNodeAndReturnOutput(new TanHNode(this, x));
    };
    Graph.prototype.sigmoid = function (x) {
        return this.addNodeAndReturnOutput(new SigmoidNode(this, x));
    };
    Graph.prototype.square = function (x) {
        return this.addNodeAndReturnOutput(new SquareNode(this, x));
    };
    Graph.prototype.softmax = function (x) {
        return this.addNodeAndReturnOutput(new SoftmaxNode(this, x));
    };
    Graph.prototype.softmaxCrossEntropyCost = function (x, target) {
        return this.addNodeAndReturnOutput(new SoftmaxCrossEntropyCostNode(this, x, target));
    };
    Graph.prototype.meanSquaredCost = function (label, prediction) {
        return this.addNodeAndReturnOutput(new MeanSquaredCostNode(this, label, prediction));
    };
    Graph.prototype.argmax = function (x) {
        return this.addNodeAndReturnOutput(new ArgMaxNode(this, x));
    };
    Graph.prototype.argmaxEquals = function (x1, x2) {
        return this.addNodeAndReturnOutput(new ArgMaxEqualsNode(this, x1, x2));
    };
    Graph.prototype.addNodeAndReturnOutput = function (node) {
        this.nodes.push(node);
        node.validate();
        return node.output;
    };
    Graph.prototype.getNodes = function () {
        return this.nodes;
    };
    return Graph;
}());
exports.Graph = Graph;
var Tensor = (function () {
    function Tensor(shape) {
        this.shape = shape;
        this.id = Tensor.nextID++;
    }
    return Tensor;
}());
Tensor.nextID = 0;
exports.Tensor = Tensor;
var Node = (function () {
    function Node(graph, name, inputs, output) {
        this.graph = graph;
        this.name = name;
        this.inputs = inputs;
        this.output = output;
        this.id = Node.nextID++;
        output.node = this;
    }
    return Node;
}());
Node.nextID = 0;
exports.Node = Node;
var VariableNode = (function (_super) {
    __extends(VariableNode, _super);
    function VariableNode(graph, name, data) {
        var _this = _super.call(this, graph, name, {}, new Tensor(data.shape)) || this;
        _this.data = data;
        return _this;
    }
    VariableNode.prototype.validate = function () {
        util.assert(this.data != null, 'Error adding variable op: Data for variable \'' + this.name +
            '\' is null or undefined');
    };
    return VariableNode;
}(Node));
exports.VariableNode = VariableNode;
var PlaceholderNode = (function (_super) {
    __extends(PlaceholderNode, _super);
    function PlaceholderNode(graph, name, shape) {
        return _super.call(this, graph, name, {}, new Tensor(shape)) || this;
    }
    PlaceholderNode.prototype.validate = function () { };
    return PlaceholderNode;
}(Node));
exports.PlaceholderNode = PlaceholderNode;
var ConstantNode = (function (_super) {
    __extends(ConstantNode, _super);
    function ConstantNode(graph, data) {
        var _this = _super.call(this, graph, 'Constant', {}, new Tensor(data.shape)) || this;
        _this.data = data;
        return _this;
    }
    ConstantNode.prototype.validate = function () {
        util.assert(this.data != null, 'Error adding constant: data for placeholder \'' + this.name +
            '\' is null or undefined');
    };
    return ConstantNode;
}(Node));
exports.ConstantNode = ConstantNode;
var ReshapeNode = (function (_super) {
    __extends(ReshapeNode, _super);
    function ReshapeNode(graph, name, x, shape) {
        var _this = _super.call(this, graph, name, { x: x }, new Tensor(shape)) || this;
        _this.name = name;
        _this.x = x;
        _this.shape = shape;
        return _this;
    }
    ReshapeNode.prototype.validate = function () {
        var xSize = util.sizeFromShape(this.x.shape);
        var shapeSize = util.sizeFromShape(this.shape);
        util.assert(xSize === shapeSize, 'Error making reshape operation: input Tensor to reshape \'' +
            this.name + '\' of shape (' + this.x.shape +
            ') does not match size of requested shape ' + this.shape + '.');
    };
    return ReshapeNode;
}(Node));
ReshapeNode.X = 'x';
exports.ReshapeNode = ReshapeNode;
var FusedLinearCombinationNode = (function (_super) {
    __extends(FusedLinearCombinationNode, _super);
    function FusedLinearCombinationNode(graph, t1, t2, c1, c2) {
        var _this = _super.call(this, graph, 'Linear Combination', { t1: t1, t2: t2, c1: c1, c2: c2 }, new Tensor(t1.shape)) || this;
        _this.t1 = t1;
        _this.t2 = t2;
        _this.c1 = c1;
        _this.c2 = c2;
        return _this;
    }
    FusedLinearCombinationNode.prototype.validate = function () {
        util.assertShapesMatch(this.t1.shape, this.t2.shape);
        if (!util.isScalarShape(this.c1.shape)) {
            throw new Error('Error adding fusedLinearCombination: c1 is not a scalar, got ' +
                'shape: ' + this.c1.shape);
        }
        if (!util.isScalarShape(this.c2.shape)) {
            throw new Error('Error adding fusedLinearCombination: c2 is not a scalar, got ' +
                'shape: ' + this.c2.shape);
        }
    };
    return FusedLinearCombinationNode;
}(Node));
FusedLinearCombinationNode.T1 = 't1';
FusedLinearCombinationNode.T2 = 't2';
FusedLinearCombinationNode.C1 = 'c1';
FusedLinearCombinationNode.C2 = 'c2';
exports.FusedLinearCombinationNode = FusedLinearCombinationNode;
var AddNode = (function (_super) {
    __extends(AddNode, _super);
    function AddNode(graph, t1, t2) {
        var _this = _super.call(this, graph, 'Add', { t1: t1, t2: t2 }, new Tensor(util.sizeFromShape(t1.shape) === 1 ? t2.shape : t1.shape)) || this;
        _this.t1 = t1;
        _this.t2 = t2;
        return _this;
    }
    AddNode.prototype.validate = function () {
        util.assert(util.sizeFromShape(this.t1.shape) === 1 ||
            util.sizeFromShape(this.t2.shape) === 1 ||
            util.arraysEqual(this.t1.shape, this.t2.shape), 'Error adding add operation op: one of inputs must be scalar or the ' +
            'shapes ' + this.t1.shape + ' and ' + this.t2.shape +
            ' must match.');
    };
    return AddNode;
}(Node));
AddNode.T1 = 't1';
AddNode.T2 = 't2';
exports.AddNode = AddNode;
var SubtractNode = (function (_super) {
    __extends(SubtractNode, _super);
    function SubtractNode(graph, t1, t2) {
        var _this = _super.call(this, graph, 'Subtract', { t1: t1, t2: t2 }, new Tensor(util.sizeFromShape(t1.shape) === 1 ? t2.shape : t1.shape)) || this;
        _this.t1 = t1;
        _this.t2 = t2;
        return _this;
    }
    SubtractNode.prototype.validate = function () {
        util.assert(util.sizeFromShape(this.t1.shape) === 1 ||
            util.sizeFromShape(this.t2.shape) === 1 ||
            util.arraysEqual(this.t1.shape, this.t2.shape), 'Error adding subtract op: one of inputs must be scalar or the ' +
            'shapes ' + this.t1.shape + ' and ' + this.t2.shape +
            ' must match.');
    };
    return SubtractNode;
}(Node));
SubtractNode.T1 = 't1';
SubtractNode.T2 = 't2';
exports.SubtractNode = SubtractNode;
var MultiplyNode = (function (_super) {
    __extends(MultiplyNode, _super);
    function MultiplyNode(graph, t1, t2) {
        var _this = _super.call(this, graph, 'Multiply', { t1: t1, t2: t2 }, new Tensor(util.sizeFromShape(t1.shape) === 1 ? t2.shape : t1.shape)) || this;
        _this.t1 = t1;
        _this.t2 = t2;
        return _this;
    }
    MultiplyNode.prototype.validate = function () {
        util.assert(util.sizeFromShape(this.t1.shape) === 1 ||
            util.sizeFromShape(this.t2.shape) === 1 ||
            util.arraysEqual(this.t1.shape, this.t2.shape), 'Error adding multiply op: one of inputs must be scalar or the ' +
            'shapes ' + this.t1.shape + ' and ' + this.t2.shape +
            ' must match.');
    };
    return MultiplyNode;
}(Node));
MultiplyNode.T1 = 't1';
MultiplyNode.T2 = 't2';
exports.MultiplyNode = MultiplyNode;
var DivideNode = (function (_super) {
    __extends(DivideNode, _super);
    function DivideNode(graph, t1, t2) {
        var _this = _super.call(this, graph, 'Divide', { t1: t1, t2: t2 }, new Tensor(util.sizeFromShape(t1.shape) === 1 ? t2.shape : t1.shape)) || this;
        _this.t1 = t1;
        _this.t2 = t2;
        return _this;
    }
    DivideNode.prototype.validate = function () {
        util.assert(util.sizeFromShape(this.t1.shape) === 1 ||
            util.sizeFromShape(this.t2.shape) === 1 ||
            util.arraysEqual(this.t1.shape, this.t2.shape), 'Error adding divide op: one of inputs must be scalar or the ' +
            'shapes ' + this.t1.shape + ' and ' + this.t2.shape +
            ' must match.');
    };
    return DivideNode;
}(Node));
DivideNode.T1 = 't1';
DivideNode.T2 = 't2';
exports.DivideNode = DivideNode;
var ReduceSumNode = (function (_super) {
    __extends(ReduceSumNode, _super);
    function ReduceSumNode(graph, x) {
        return _super.call(this, graph, 'ReduceSum', { x: x }, new Tensor([])) || this;
    }
    ReduceSumNode.prototype.validate = function () { };
    return ReduceSumNode;
}(Node));
ReduceSumNode.X = 'x';
exports.ReduceSumNode = ReduceSumNode;
var Concat3DNode = (function (_super) {
    __extends(Concat3DNode, _super);
    function Concat3DNode(graph, x1, x2, axis) {
        var _this = _super.call(this, graph, 'Concat3D', { x1: x1, x2: x2 }, new Tensor(concat3d_util.computeConcat3DOutputShape(x1.shape, x2.shape, axis))) || this;
        _this.x1 = x1;
        _this.x2 = x2;
        _this.axis = axis;
        return _this;
    }
    Concat3DNode.prototype.validate = function () {
        concat3d_util.assertConcat3DShapesMatch(this.x1.shape, this.x2.shape, this.axis);
    };
    return Concat3DNode;
}(Node));
Concat3DNode.X1 = 'x1';
Concat3DNode.X2 = 'x2';
Concat3DNode.AXIS = 'axis';
exports.Concat3DNode = Concat3DNode;
function getMatMulOutputShape(x1Shape, x2Shape) {
    if (x1Shape.length === 1 && x2Shape.length === 1) {
        return [1];
    }
    else if (x1Shape.length === 1 && x2Shape.length === 2) {
        return [x2Shape[1]];
    }
    else if (x1Shape.length === 2 && x2Shape.length === 1) {
        return [x1Shape[0]];
    }
    return [x1Shape[0], x2Shape[1]];
}
var MatMulNode = (function (_super) {
    __extends(MatMulNode, _super);
    function MatMulNode(graph, x1, x2) {
        var _this = _super.call(this, graph, 'MatMul', { x1: x1, x2: x2 }, new Tensor(getMatMulOutputShape(x1.shape, x2.shape))) || this;
        _this.x1 = x1;
        _this.x2 = x2;
        return _this;
    }
    MatMulNode.prototype.validate = function () {
        if (this.x1.shape.length === 2 && this.x2.shape.length === 2) {
            util.assert(this.x1.shape[1] === this.x2.shape[0], 'Error adding matmul op: inner shapes of matrices with shapes ' +
                this.x1.shape + ' and ' + this.x2.shape + ' must match.');
        }
        else if (this.x1.shape.length === 2 && this.x2.shape.length === 1) {
            util.assert(this.x1.shape[1] === this.x2.shape[0], 'Error adding matmul op: second dimension of matrix with shape ' +
                this.x1.shape + ' must match size of vector with shape ' +
                this.x2.shape + '.');
        }
        else if (this.x1.shape.length === 1 && this.x2.shape.length === 2) {
            util.assert(this.x1.shape[0] === this.x2.shape[0], 'Error adding matmul op: size of vector with shape ' + this.x1.shape +
                ' must match first dimension of matrix with ' +
                'shape ' + this.x2.shape + '.');
        }
        else {
            throw new Error('Error adding matmul op: inputs must be vectors or matrices.');
        }
    };
    return MatMulNode;
}(Node));
MatMulNode.X1 = 'x1';
MatMulNode.X2 = 'x2';
exports.MatMulNode = MatMulNode;
var Convolution2DNode = (function (_super) {
    __extends(Convolution2DNode, _super);
    function Convolution2DNode(graph, x, w, b, fieldSize, outputDepth, stride, zeroPad) {
        if (stride === void 0) { stride = 1; }
        var _this = _super.call(this, graph, 'Convolution 2D', { x: x, w: w, b: b }, new Tensor(conv_util.computeOutputShape3D(x.shape, fieldSize, outputDepth, stride, zeroPad))) || this;
        _this.x = x;
        _this.w = w;
        _this.b = b;
        _this.fieldSize = fieldSize;
        _this.outputDepth = outputDepth;
        _this.stride = stride;
        _this.zeroPad = zeroPad;
        return _this;
    }
    Convolution2DNode.prototype.validate = function () {
        util.assert(this.x.shape.length === 3, 'Error adding conv2d op: input must be of rank 3, but got shape: ' +
            this.x.shape + '.');
        util.assert(this.w.shape.length === 4, 'Error adding conv2d op: weights must be of rank 4, but got shape: ' +
            this.w.shape + '.');
        util.assert(this.b.shape.length === 1, 'Error adding conv2d op: biases must be of rank 1, but got shape: ' +
            this.b.shape + '.');
        util.assert(this.x.shape[2] === this.w.shape[2], 'Error adding conv2d op: depth of input (' + this.x.shape[2] +
            ') must match input depth for weights (' + this.w.shape[2] + ').');
    };
    return Convolution2DNode;
}(Node));
Convolution2DNode.X = 'x';
Convolution2DNode.W = 'w';
Convolution2DNode.B = 'b';
exports.Convolution2DNode = Convolution2DNode;
var MaxPoolNode = (function (_super) {
    __extends(MaxPoolNode, _super);
    function MaxPoolNode(graph, x, fieldSize, stride, zeroPad) {
        if (stride === void 0) { stride = 1; }
        var _this = _super.call(this, graph, 'Max pool', { x: x }, new Tensor(conv_util.computeOutputShape3D(x.shape, fieldSize, x.shape[2], stride, zeroPad))) || this;
        _this.x = x;
        _this.fieldSize = fieldSize;
        _this.stride = stride;
        _this.zeroPad = zeroPad;
        return _this;
    }
    MaxPoolNode.prototype.validate = function () {
        util.assert(this.x.shape.length === 3, 'Error adding maxPool op: input must be of rank 3, but got shape: ' +
            this.x.shape + '.');
    };
    return MaxPoolNode;
}(Node));
MaxPoolNode.X = 'x';
exports.MaxPoolNode = MaxPoolNode;
var ReLUNode = (function (_super) {
    __extends(ReLUNode, _super);
    function ReLUNode(graph, x) {
        return _super.call(this, graph, 'ReLU', { x: x }, new Tensor(x.shape)) || this;
    }
    ReLUNode.prototype.validate = function () { };
    return ReLUNode;
}(Node));
ReLUNode.X = 'x';
exports.ReLUNode = ReLUNode;
var ExpNode = (function (_super) {
    __extends(ExpNode, _super);
    function ExpNode(graph, x) {
        return _super.call(this, graph, 'Exp', { x: x }, new Tensor(x.shape)) || this;
    }
    ExpNode.prototype.validate = function () { };
    return ExpNode;
}(Node));
ExpNode.X = 'x';
exports.ExpNode = ExpNode;
var LogNode = (function (_super) {
    __extends(LogNode, _super);
    function LogNode(graph, x) {
        return _super.call(this, graph, 'Log', { x: x }, new Tensor(x.shape)) || this;
    }
    LogNode.prototype.validate = function () { };
    return LogNode;
}(Node));
LogNode.X = 'x';
exports.LogNode = LogNode;
var TanHNode = (function (_super) {
    __extends(TanHNode, _super);
    function TanHNode(graph, x) {
        return _super.call(this, graph, 'TanH', { x: x }, new Tensor(x.shape)) || this;
    }
    TanHNode.prototype.validate = function () { };
    return TanHNode;
}(Node));
TanHNode.X = 'x';
exports.TanHNode = TanHNode;
var SigmoidNode = (function (_super) {
    __extends(SigmoidNode, _super);
    function SigmoidNode(graph, x) {
        return _super.call(this, graph, 'Sigmoid', { x: x }, new Tensor(x.shape)) || this;
    }
    SigmoidNode.prototype.validate = function () { };
    return SigmoidNode;
}(Node));
SigmoidNode.X = 'x';
exports.SigmoidNode = SigmoidNode;
var SquareNode = (function (_super) {
    __extends(SquareNode, _super);
    function SquareNode(graph, x) {
        return _super.call(this, graph, 'Square', { x: x }, new Tensor(x.shape)) || this;
    }
    SquareNode.prototype.validate = function () { };
    return SquareNode;
}(Node));
SquareNode.X = 'x';
exports.SquareNode = SquareNode;
var SoftmaxCrossEntropyCostNode = (function (_super) {
    __extends(SoftmaxCrossEntropyCostNode, _super);
    function SoftmaxCrossEntropyCostNode(graph, x, target) {
        var _this = _super.call(this, graph, 'SoftmaxCrossEntropyCost', { x: x, target: target }, new Tensor([])) || this;
        _this.x = x;
        _this.target = target;
        return _this;
    }
    SoftmaxCrossEntropyCostNode.prototype.validate = function () {
        util.assert(util.arraysEqual(this.x.shape, this.target.shape), 'Error adding softmaxCrossEntropyCost op: x shape (' + this.x.shape +
            ') must match target shape (' + this.target.shape + ').');
    };
    return SoftmaxCrossEntropyCostNode;
}(Node));
SoftmaxCrossEntropyCostNode.X = 'x';
SoftmaxCrossEntropyCostNode.TARGET = 'target';
exports.SoftmaxCrossEntropyCostNode = SoftmaxCrossEntropyCostNode;
var SoftmaxNode = (function (_super) {
    __extends(SoftmaxNode, _super);
    function SoftmaxNode(graph, x) {
        var _this = _super.call(this, graph, 'Softmax', { x: x }, new Tensor(x.shape)) || this;
        _this.x = x;
        return _this;
    }
    SoftmaxNode.prototype.validate = function () {
        util.assert(this.x.shape.length === 1, 'The input to a softmax must be a 1-D tensor');
        util.assert(this.x.shape[0] >= 2, 'The input to a softmax must have at least 2 values');
    };
    return SoftmaxNode;
}(Node));
SoftmaxNode.X = 'x';
exports.SoftmaxNode = SoftmaxNode;
var MeanSquaredCostNode = (function (_super) {
    __extends(MeanSquaredCostNode, _super);
    function MeanSquaredCostNode(graph, label, prediction) {
        var _this = _super.call(this, graph, 'Mean Squared Cost', { label: label, prediction: prediction }, new Tensor([])) || this;
        _this.label = label;
        _this.prediction = prediction;
        return _this;
    }
    MeanSquaredCostNode.prototype.validate = function () {
        util.assert(util.arraysEqual(this.label.shape, this.prediction.shape), 'Error adding meanSquaredCost op: label shape (' + this.label.shape +
            ') must match prediction shape (' + this.prediction.shape + ').');
    };
    return MeanSquaredCostNode;
}(Node));
MeanSquaredCostNode.LABEL = 'label';
MeanSquaredCostNode.PREDICTION = 'prediction';
exports.MeanSquaredCostNode = MeanSquaredCostNode;
var ArgMaxNode = (function (_super) {
    __extends(ArgMaxNode, _super);
    function ArgMaxNode(graph, x) {
        var _this = _super.call(this, graph, 'ArgMax', { x: x }, new Tensor([1])) || this;
        _this.x = x;
        return _this;
    }
    ArgMaxNode.prototype.validate = function () {
        util.assert(util.sizeFromShape(this.x.shape) > 0, 'Error adding argmax op: input tensor must have at least one entry.');
    };
    return ArgMaxNode;
}(Node));
ArgMaxNode.X = 'x';
exports.ArgMaxNode = ArgMaxNode;
var ArgMaxEqualsNode = (function (_super) {
    __extends(ArgMaxEqualsNode, _super);
    function ArgMaxEqualsNode(graph, x1, x2) {
        var _this = _super.call(this, graph, 'ArgMaxEquals', { x1: x1, x2: x2 }, new Tensor([1])) || this;
        _this.x1 = x1;
        _this.x2 = x2;
        return _this;
    }
    ArgMaxEqualsNode.prototype.validate = function () {
        util.assert(util.arraysEqual(this.x1.shape, this.x2.shape), 'Error adding ArgMaxEquals op: x1 shape (' + this.x1.shape +
            ') must match x2 shape (' + this.x2.shape + ').');
    };
    return ArgMaxEqualsNode;
}(Node));
ArgMaxEqualsNode.X1 = 'x1';
ArgMaxEqualsNode.X2 = 'x2';
exports.ArgMaxEqualsNode = ArgMaxEqualsNode;
var SplitNode = (function (_super) {
    __extends(SplitNode, _super);
    function SplitNode(graph, x) {
        var _this = _super.call(this, graph, 'SplitNode', { x: x }, new Tensor(x.shape)) || this;
        _this.outputs = [];
        return _this;
    }
    SplitNode.prototype.getNewOutputTensor = function () {
        var output = new Tensor(this.inputs[SplitNode.X].shape);
        output.node = this;
        this.outputs.push(output);
        return output;
    };
    SplitNode.prototype.validate = function () { };
    return SplitNode;
}(Node));
SplitNode.X = 'x';
exports.SplitNode = SplitNode;

},{"./graph_layers":12,"./math/concat3d_util":19,"./math/conv_util":20,"./math/ndarray":26,"./util":90}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var initializers_1 = require("./initializers");
var GraphLayers = (function () {
    function GraphLayers(g) {
        this.g = g;
    }
    GraphLayers.prototype.dense = function (name, x, units, activation, useBias, kernelInitializer, biasInitializer) {
        if (activation === void 0) { activation = null; }
        if (useBias === void 0) { useBias = true; }
        if (kernelInitializer === void 0) { kernelInitializer = new initializers_1.VarianceScalingInitializer(); }
        if (biasInitializer === void 0) { biasInitializer = new initializers_1.ZerosInitializer(); }
        var weights = this.g.variable(name + '-weights', kernelInitializer.initialize([x.shape[0], units], x.shape[0], units));
        var out = this.g.matmul(x, weights);
        if (useBias) {
            var bias = this.g.variable(name + '-bias', biasInitializer.initialize([units], x.shape[0], units));
            out = this.g.add(out, bias);
        }
        if (activation != null) {
            out = activation(out);
        }
        return out;
    };
    return GraphLayers;
}());
exports.GraphLayers = GraphLayers;

},{"./initializers":16}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ndarray_1 = require("./math/ndarray");
var session_1 = require("./session");
var DEFAULT_EVAL_INTERVAL_MS = 1500;
var DEFAULT_COST_INTERVAL_MS = 500;
var DEFAULT_INFERENCE_EXAMPLE_INTERVAL_MS = 3000;
var MetricReduction;
(function (MetricReduction) {
    MetricReduction[MetricReduction["SUM"] = 0] = "SUM";
    MetricReduction[MetricReduction["MEAN"] = 1] = "MEAN";
})(MetricReduction = exports.MetricReduction || (exports.MetricReduction = {}));
var GraphRunner = (function () {
    function GraphRunner(math, session, eventObserver) {
        this.math = math;
        this.session = session;
        this.eventObserver = eventObserver;
        this.lastCostTimestamp = 0;
        this.lastEvalTimestamp = 0;
        this.totalIdleTimeMs = 0;
        this.resetStatistics();
        this.zeroScalar = ndarray_1.Scalar.new(0);
    }
    GraphRunner.prototype.resetStatistics = function () {
        this.totalBatchesTrained = 0;
        this.totalIdleTimeMs = 0;
        this.lastStopTimestamp = null;
    };
    GraphRunner.prototype.train = function (costTensor, trainFeedEntries, batchSize, optimizer, numBatches, metricTensor, metricFeedEntries, metricBatchSize, metricReduction, evalIntervalMs, costIntervalMs) {
        if (metricReduction === void 0) { metricReduction = MetricReduction.MEAN; }
        if (evalIntervalMs === void 0) { evalIntervalMs = DEFAULT_EVAL_INTERVAL_MS; }
        if (costIntervalMs === void 0) { costIntervalMs = DEFAULT_COST_INTERVAL_MS; }
        this.costTensor = costTensor;
        this.trainFeedEntries = trainFeedEntries;
        this.metricTensor = metricTensor;
        this.metricFeedEntries = metricFeedEntries;
        if (metricBatchSize != null && this.metricBatchSize !== metricBatchSize) {
            if (this.metricBatchSizeScalar != null) {
                this.metricBatchSizeScalar.dispose();
            }
            this.metricBatchSizeScalar = ndarray_1.Scalar.new(metricBatchSize);
        }
        this.metricBatchSize = metricBatchSize;
        this.metricReduction = metricReduction;
        this.batchSize = batchSize;
        this.optimizer = optimizer;
        this.metricIntervalMs = evalIntervalMs;
        this.costIntervalMs = costIntervalMs;
        this.currentTrainLoopNumBatches = numBatches;
        this.batchesTrainedThisRun = 0;
        this.isTraining = true;
        this.trainStartTimestamp = performance.now();
        this.trainNetwork();
    };
    GraphRunner.prototype.stopTraining = function () {
        this.isTraining = false;
        this.lastStopTimestamp = performance.now();
    };
    GraphRunner.prototype.resumeTraining = function () {
        this.isTraining = true;
        if (this.lastStopTimestamp != null) {
            this.totalIdleTimeMs += performance.now() - this.lastStopTimestamp;
        }
        this.trainNetwork();
    };
    GraphRunner.prototype.trainNetwork = function () {
        var _this = this;
        if (this.batchesTrainedThisRun === this.currentTrainLoopNumBatches) {
            this.stopTraining();
        }
        if (!this.isTraining) {
            if (this.eventObserver.doneTrainingCallback != null) {
                this.eventObserver.doneTrainingCallback();
            }
            return;
        }
        var start = performance.now();
        var shouldComputeCost = this.eventObserver.avgCostCallback != null &&
            (start - this.lastCostTimestamp > this.costIntervalMs);
        if (shouldComputeCost) {
            this.lastCostTimestamp = start;
        }
        var costReduction = shouldComputeCost ? session_1.CostReduction.MEAN : session_1.CostReduction.NONE;
        this.math.scope(function (keep) {
            var avgCost = _this.session.train(_this.costTensor, _this.trainFeedEntries, _this.batchSize, _this.optimizer, costReduction);
            if (shouldComputeCost) {
                var trainTime = performance.now() - start;
                _this.eventObserver.avgCostCallback(avgCost);
                if (_this.eventObserver.trainExamplesPerSecCallback != null) {
                    var examplesPerSec = (_this.batchSize * 1000 / trainTime);
                    _this.eventObserver.trainExamplesPerSecCallback(examplesPerSec);
                }
            }
            if (_this.eventObserver.metricCallback != null &&
                _this.metricFeedEntries != null &&
                start - _this.lastEvalTimestamp > _this.metricIntervalMs) {
                _this.lastEvalTimestamp = start;
                if (_this.lastComputedMetric != null) {
                    _this.lastComputedMetric.dispose();
                }
                _this.lastComputedMetric = _this.computeMetric();
                _this.eventObserver.metricCallback(_this.lastComputedMetric);
            }
            if (_this.eventObserver.totalTimeCallback != null) {
                _this.eventObserver.totalTimeCallback((start - _this.trainStartTimestamp) / 1000);
            }
            _this.batchesTrainedThisRun++;
            _this.totalBatchesTrained++;
            if (_this.eventObserver.batchesTrainedCallback != null) {
                _this.eventObserver.batchesTrainedCallback(_this.totalBatchesTrained);
            }
        });
        setTimeout(function () { return _this.trainNetwork(); });
    };
    GraphRunner.prototype.infer = function (inferenceTensor, inferenceFeedEntries, inferenceExampleIntervalMs, inferenceExampleCount, numPasses) {
        var _this = this;
        if (inferenceExampleIntervalMs === void 0) { inferenceExampleIntervalMs = DEFAULT_INFERENCE_EXAMPLE_INTERVAL_MS; }
        if (inferenceExampleCount === void 0) { inferenceExampleCount = 5; }
        if (this.eventObserver.inferenceExamplesCallback == null &&
            this.eventObserver.inferenceExamplesPerSecCallback == null) {
            throw new Error('Cannot start inference loop, no inference example or ' +
                'examples/sec observer provided.');
        }
        for (var i = 0; i < inferenceFeedEntries.length; i++) {
            var feedEntry = inferenceFeedEntries[i];
            if (feedEntry.data instanceof ndarray_1.NDArray) {
                throw new Error('Cannot start inference on the model runner with feed entries of ' +
                    'type NDArray. Please use InputProviders.');
            }
        }
        this.inferenceExampleIntervalMs = inferenceExampleIntervalMs;
        this.inferenceTensor = inferenceTensor;
        this.inferenceFeedEntries = inferenceFeedEntries;
        this.inferenceExampleCount = inferenceExampleCount;
        this.currentInferenceLoopNumPasses = numPasses;
        if (!this.isInferring) {
            this.inferencePassesThisRun = 0;
            setTimeout(function () { return _this.inferNetwork(); });
        }
        this.isInferring = true;
    };
    GraphRunner.prototype.inferNetwork = function () {
        var _this = this;
        if (!this.isInferring ||
            this.inferencePassesThisRun === this.currentInferenceLoopNumPasses) {
            return;
        }
        this.math.scope(function (keep, track) {
            var feeds = [];
            var inferenceValues = [];
            var start = performance.now();
            for (var i = 0; i < _this.inferenceExampleCount; i++) {
                var ndarrayFeedEntries = [];
                for (var j = 0; j < _this.inferenceFeedEntries.length; j++) {
                    var feedEntry = _this.inferenceFeedEntries[j];
                    ndarrayFeedEntries.push({
                        tensor: feedEntry.tensor,
                        data: track(feedEntry.data.getNextCopy(_this.math))
                    });
                }
                feeds.push(ndarrayFeedEntries);
                inferenceValues.push(_this.session.eval(_this.inferenceTensor, ndarrayFeedEntries));
            }
            if (_this.eventObserver.inferenceExamplesPerSecCallback != null) {
                inferenceValues[inferenceValues.length - 1].getValues();
                var inferenceExamplesPerSecTime = performance.now() - start;
                var examplesPerSec = (_this.inferenceExampleCount * 1000 / inferenceExamplesPerSecTime);
                _this.eventObserver.inferenceExamplesPerSecCallback(examplesPerSec);
            }
            if (_this.eventObserver.inferenceExamplesCallback != null) {
                _this.eventObserver.inferenceExamplesCallback(feeds, inferenceValues);
            }
            _this.inferencePassesThisRun++;
        });
        setTimeout(function () { return _this.inferNetwork(); }, this.inferenceExampleIntervalMs);
    };
    GraphRunner.prototype.stopInferring = function () {
        this.isInferring = false;
    };
    GraphRunner.prototype.isInferenceRunning = function () {
        return this.isInferring;
    };
    GraphRunner.prototype.computeMetric = function () {
        var _this = this;
        if (this.metricFeedEntries == null) {
            throw new Error('Cannot compute metric, no metric FeedEntries provided.');
        }
        var metric = this.zeroScalar;
        return this.math.scope(function (keep) {
            for (var i = 0; i < _this.metricBatchSize; i++) {
                var metricValue = _this.session.eval(_this.metricTensor, _this.metricFeedEntries);
                metric = _this.math.add(metric, metricValue);
            }
            if (_this.metricReduction === MetricReduction.MEAN) {
                metric = _this.math.divide(metric, _this.metricBatchSizeScalar);
            }
            return metric;
        });
    };
    GraphRunner.prototype.getTotalBatchesTrained = function () {
        return this.totalBatchesTrained;
    };
    GraphRunner.prototype.getLastComputedMetric = function () {
        return this.lastComputedMetric;
    };
    GraphRunner.prototype.setMath = function (math) {
        this.math = math;
    };
    GraphRunner.prototype.setSession = function (session) {
        this.session = session;
    };
    GraphRunner.prototype.setInferenceTensor = function (inferenceTensor) {
        this.inferenceTensor = inferenceTensor;
    };
    GraphRunner.prototype.setInferenceExampleCount = function (inferenceExampleCount) {
        this.inferenceExampleCount = inferenceExampleCount;
    };
    return GraphRunner;
}());
exports.GraphRunner = GraphRunner;

},{"./math/ndarray":26,"./session":86}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var graph_1 = require("./graph");
var priority_queue = require("./priority_queue");
var priority_queue_1 = require("./priority_queue");
function getUnorderedEvaluationSet(nodes, terminatingNodes) {
    var terminatingNodeMap = {};
    var seen = {};
    var set = [];
    var visit = nodes.slice();
    terminatingNodes.forEach(function (node) { return terminatingNodeMap[node.id] = node; });
    var _loop_1 = function () {
        var cur = visit.pop();
        if (seen[cur.id] == null) {
            if (terminatingNodeMap[cur.id] == null) {
                Object.keys(cur.inputs)
                    .map(function (inputName) { return cur.inputs[inputName]; })
                    .forEach(function (input) { return visit.push(input.node); });
            }
            set.push(cur);
            seen[cur.id] = cur;
        }
    };
    while (visit.length !== 0) {
        _loop_1();
    }
    return set;
}
exports.getUnorderedEvaluationSet = getUnorderedEvaluationSet;
function getOrderedEvaluationSet(unorderedEvaluationSet) {
    var set = [];
    var nodeIndices = {};
    var pendingDependencies = {};
    var nodeQueue = new priority_queue_1.PriorityQueue(function (a, b) { return priority_queue.defaultCompare(pendingDependencies[a.id], pendingDependencies[b.id]); }, function (node, newIndex) { return nodeIndices[node.id] = newIndex; });
    unorderedEvaluationSet.forEach(function (node) { return pendingDependencies[node.id] = 0; });
    unorderedEvaluationSet.forEach(function (node) { return Object.keys(node.inputs)
        .map(function (key) { return node.inputs[key]; })
        .forEach(function (input) {
        if (unorderedEvaluationSet.indexOf(input.node) !== -1) {
            pendingDependencies[input.node.id]++;
        }
    }); });
    unorderedEvaluationSet.forEach(function (node) { return nodeQueue.enqueue(node); });
    while (!nodeQueue.empty()) {
        set.unshift(nodeQueue.dequeue());
        Object.keys(set[0].inputs).map(function (key) { return set[0].inputs[key]; }).forEach(function (input) {
            if (unorderedEvaluationSet.indexOf(input.node) === -1) {
                return;
            }
            pendingDependencies[input.node.id]--;
            nodeQueue.update(input.node, nodeIndices[input.node.id]);
        });
    }
    return set;
}
exports.getOrderedEvaluationSet = getOrderedEvaluationSet;
function isInputNode(node) {
    return Object.keys(node.inputs).length === 0;
}
exports.isInputNode = isInputNode;
function shouldBackProp(t) {
    return !(t.node instanceof graph_1.ConstantNode);
}
exports.shouldBackProp = shouldBackProp;
function isPassthroughNode(node, map) {
    var keys = Object.keys(node.inputs);
    for (var i = 0; i < keys.length; i++) {
        var input = node.inputs[keys[i]];
        if (map.get(input, true) === map.get(node.output, true)) {
            return true;
        }
    }
    return false;
}
exports.isPassthroughNode = isPassthroughNode;

},{"./graph":11,"./priority_queue":85}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var conv_util = require("./math/conv_util");
exports.conv_util = conv_util;
var gpgpu_util = require("./math/webgl/gpgpu_util");
exports.gpgpu_util = gpgpu_util;
var render_ndarray_gpu_util = require("./math/webgl/render_ndarray_gpu_util");
exports.render_ndarray_gpu_util = render_ndarray_gpu_util;
var webgl_util = require("./math/webgl/webgl_util");
exports.webgl_util = webgl_util;
var util = require("./util");
exports.util = util;
var checkpoint_loader_1 = require("./checkpoint_loader");
exports.CheckpointLoader = checkpoint_loader_1.CheckpointLoader;
var dataset_1 = require("./dataset");
exports.InMemoryDataset = dataset_1.InMemoryDataset;
var graph_1 = require("./graph");
exports.Graph = graph_1.Graph;
exports.Tensor = graph_1.Tensor;
var graph_runner_1 = require("./graph_runner");
exports.GraphRunner = graph_runner_1.GraphRunner;
exports.MetricReduction = graph_runner_1.MetricReduction;
var initializers_1 = require("./initializers");
exports.ConstantInitializer = initializers_1.ConstantInitializer;
exports.NDArrayInitializer = initializers_1.NDArrayInitializer;
exports.OnesInitializer = initializers_1.OnesInitializer;
exports.RandomNormalInitializer = initializers_1.RandomNormalInitializer;
exports.RandomTruncatedNormalInitializer = initializers_1.RandomTruncatedNormalInitializer;
exports.RandomUniformInitializer = initializers_1.RandomUniformInitializer;
exports.VarianceScalingInitializer = initializers_1.VarianceScalingInitializer;
exports.ZerosInitializer = initializers_1.ZerosInitializer;
var input_provider_1 = require("./input_provider");
exports.InCPUMemoryShuffledInputProviderBuilder = input_provider_1.InCPUMemoryShuffledInputProviderBuilder;
exports.InGPUMemoryShuffledInputProviderBuilder = input_provider_1.InGPUMemoryShuffledInputProviderBuilder;
var math_1 = require("./math/math");
exports.MatrixOrientation = math_1.MatrixOrientation;
exports.NDArrayMath = math_1.NDArrayMath;
var math_cpu_1 = require("./math/math_cpu");
exports.NDArrayMathCPU = math_cpu_1.NDArrayMathCPU;
var math_gpu_1 = require("./math/math_gpu");
exports.NDArrayMathGPU = math_gpu_1.NDArrayMathGPU;
var ndarray_1 = require("./math/ndarray");
exports.Array1D = ndarray_1.Array1D;
exports.Array2D = ndarray_1.Array2D;
exports.Array3D = ndarray_1.Array3D;
exports.Array4D = ndarray_1.Array4D;
exports.NDArray = ndarray_1.NDArray;
exports.Scalar = ndarray_1.Scalar;
var gpgpu_context_1 = require("./math/webgl/gpgpu_context");
exports.GPGPUContext = gpgpu_context_1.GPGPUContext;
var optimizer_1 = require("./optimizer");
exports.Optimizer = optimizer_1.Optimizer;
var session_1 = require("./session");
exports.CostReduction = session_1.CostReduction;
exports.Session = session_1.Session;
var sgd_optimizer_1 = require("./sgd_optimizer");
exports.SGDOptimizer = sgd_optimizer_1.SGDOptimizer;

},{"./checkpoint_loader":9,"./dataset":10,"./graph":11,"./graph_runner":13,"./initializers":16,"./input_provider":17,"./math/conv_util":20,"./math/math":23,"./math/math_cpu":24,"./math/math_gpu":25,"./math/ndarray":26,"./math/webgl/gpgpu_context":39,"./math/webgl/gpgpu_util":40,"./math/webgl/render_ndarray_gpu_util":52,"./math/webgl/webgl_util":62,"./optimizer":84,"./session":86,"./sgd_optimizer":88,"./util":90}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ndarray_1 = require("./math/ndarray");
var VarianceScalingInitializer = (function () {
    function VarianceScalingInitializer(scale, mode, distribution) {
        if (scale === void 0) { scale = 1.0; }
        if (mode === void 0) { mode = 'fan_in'; }
        if (distribution === void 0) { distribution = 'normal'; }
        this.scale = scale;
        this.mode = mode;
        this.distribution = distribution;
    }
    VarianceScalingInitializer.prototype.initialize = function (weightsShape, inputUnits, outputUnits) {
        var n = 0;
        if (this.mode === 'fan_in') {
            n = inputUnits;
        }
        else if (this.mode === 'fan_out') {
            n = outputUnits;
        }
        else if (this.mode === 'fan_avg') {
            n = (inputUnits + outputUnits) / 2;
        }
        else {
            throw new Error('Unexpected mode for variance scaling initializer: ' + this.mode);
        }
        if (this.distribution === 'normal') {
            return ndarray_1.NDArray.randTruncatedNormal(weightsShape, 0.0, Math.sqrt(this.scale / n));
        }
        else if (this.distribution === 'uniform') {
            return ndarray_1.NDArray.randUniform(weightsShape, 0.0, Math.sqrt(3 * this.scale / n));
        }
        else {
            throw new Error('Unexpected distribution for variance scaling initializer: ' +
                this.distribution);
        }
    };
    return VarianceScalingInitializer;
}());
exports.VarianceScalingInitializer = VarianceScalingInitializer;
var ZerosInitializer = (function () {
    function ZerosInitializer() {
    }
    ZerosInitializer.prototype.initialize = function (weightsShape, inputUnits, outputUnits) {
        return ndarray_1.NDArray.zeros(weightsShape);
    };
    return ZerosInitializer;
}());
exports.ZerosInitializer = ZerosInitializer;
var OnesInitializer = (function () {
    function OnesInitializer() {
    }
    OnesInitializer.prototype.initialize = function (weightsShape, inputUnits, outputUnits) {
        var values = ndarray_1.NDArray.zeros(weightsShape);
        values.fill(1);
        return values;
    };
    return OnesInitializer;
}());
exports.OnesInitializer = OnesInitializer;
var ConstantInitializer = (function () {
    function ConstantInitializer(value) {
        if (value === void 0) { value = 0; }
        this.value = value;
    }
    ConstantInitializer.prototype.initialize = function (weightsShape, inputUnits, outputUnits) {
        var values = ndarray_1.NDArray.zeros(weightsShape);
        values.fill(this.value);
        return values;
    };
    return ConstantInitializer;
}());
exports.ConstantInitializer = ConstantInitializer;
var NDArrayInitializer = (function () {
    function NDArrayInitializer(ndarray) {
        this.ndarray = ndarray;
    }
    NDArrayInitializer.prototype.initialize = function (weightsShape, inputUnits, outputUnits) {
        return this.ndarray;
    };
    return NDArrayInitializer;
}());
exports.NDArrayInitializer = NDArrayInitializer;
var RandomNormalInitializer = (function () {
    function RandomNormalInitializer(mean, stdev) {
        if (mean === void 0) { mean = 0; }
        if (stdev === void 0) { stdev = .05; }
        this.mean = mean;
        this.stdev = stdev;
    }
    RandomNormalInitializer.prototype.initialize = function (weightsShape, inputUnits, outputUnits) {
        return ndarray_1.NDArray.randNormal(weightsShape, this.mean, this.stdev);
    };
    return RandomNormalInitializer;
}());
exports.RandomNormalInitializer = RandomNormalInitializer;
var RandomTruncatedNormalInitializer = (function () {
    function RandomTruncatedNormalInitializer(mean, stdev) {
        if (mean === void 0) { mean = 0; }
        if (stdev === void 0) { stdev = .05; }
        this.mean = mean;
        this.stdev = stdev;
    }
    RandomTruncatedNormalInitializer.prototype.initialize = function (weightsShape, inputUnits, outputUnits) {
        return ndarray_1.NDArray.randTruncatedNormal(weightsShape, this.mean, this.stdev);
    };
    return RandomTruncatedNormalInitializer;
}());
exports.RandomTruncatedNormalInitializer = RandomTruncatedNormalInitializer;
var RandomUniformInitializer = (function () {
    function RandomUniformInitializer(minval, maxval) {
        if (minval === void 0) { minval = -.05; }
        if (maxval === void 0) { maxval = .05; }
        this.minval = minval;
        this.maxval = maxval;
    }
    RandomUniformInitializer.prototype.initialize = function (weightsShape, inputUnits, outputUnits) {
        return ndarray_1.NDArray.randUniform(weightsShape, this.minval, this.maxval);
    };
    return RandomUniformInitializer;
}());
exports.RandomUniformInitializer = RandomUniformInitializer;

},{"./math/ndarray":26}],17:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ndarray_1 = require("./math/ndarray");
var util = require("./util");
var InMemoryShuffledInputProviderBuilder = (function () {
    function InMemoryShuffledInputProviderBuilder(inputs) {
        this.inputs = inputs;
        this.idx = 0;
        this.inputCounter = 0;
        this.epoch = 0;
        this.shuffledIndices = util.createShuffledIndices(inputs[0].length);
        this.numInputs = inputs.length;
        var numExamples = this.inputs[0].length;
        for (var i = 0; i < this.numInputs; i++) {
            util.assert(this.inputs[i].length === numExamples, 'Number of examples must match across different inputs.');
        }
        for (var i = 0; i < this.numInputs; i++) {
            var inputShape = this.inputs[i][0].shape;
            for (var j = 0; j < this.inputs[i].length; j++) {
                util.assertShapesMatch(inputShape, this.inputs[i][j].shape);
            }
        }
    }
    InMemoryShuffledInputProviderBuilder.prototype.getCurrentExampleIndex = function () {
        var returnIdx = this.idx;
        this.inputCounter++;
        if (this.inputCounter >= this.numInputs) {
            this.idx++;
            this.inputCounter = 0;
            if (this.idx >= this.inputs[0].length) {
                this.idx = 0;
                this.epoch++;
            }
        }
        return returnIdx;
    };
    InMemoryShuffledInputProviderBuilder.prototype.getNextInput = function (inputId) {
        var currentExampleIndex = this.getCurrentExampleIndex();
        return this.inputs[inputId][this.shuffledIndices[currentExampleIndex]];
    };
    InMemoryShuffledInputProviderBuilder.prototype.getEpoch = function () {
        return this.epoch;
    };
    InMemoryShuffledInputProviderBuilder.prototype.getInputProviders = function () {
        var inputProviders = [];
        for (var i = 0; i < this.numInputs; i++) {
            inputProviders.push(this.getInputProvider(i));
        }
        return inputProviders;
    };
    return InMemoryShuffledInputProviderBuilder;
}());
exports.InMemoryShuffledInputProviderBuilder = InMemoryShuffledInputProviderBuilder;
var InCPUMemoryShuffledInputProviderBuilder = (function (_super) {
    __extends(InCPUMemoryShuffledInputProviderBuilder, _super);
    function InCPUMemoryShuffledInputProviderBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InCPUMemoryShuffledInputProviderBuilder.prototype.getInputProvider = function (inputId) {
        var shuffledInputProvider = this;
        return {
            getNextCopy: function (math) {
                return ndarray_1.NDArray.like(shuffledInputProvider.getNextInput(inputId));
            },
            disposeCopy: function (math, copy) {
                copy.dispose();
            }
        };
    };
    return InCPUMemoryShuffledInputProviderBuilder;
}(InMemoryShuffledInputProviderBuilder));
exports.InCPUMemoryShuffledInputProviderBuilder = InCPUMemoryShuffledInputProviderBuilder;
var InGPUMemoryShuffledInputProviderBuilder = (function (_super) {
    __extends(InGPUMemoryShuffledInputProviderBuilder, _super);
    function InGPUMemoryShuffledInputProviderBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InGPUMemoryShuffledInputProviderBuilder.prototype.getInputProvider = function (inputId) {
        var shuffledInputProvider = this;
        return {
            getNextCopy: function (math) {
                return math.clone(shuffledInputProvider.getNextInput(inputId));
            },
            disposeCopy: function (math, copy) {
                copy.dispose();
            }
        };
    };
    return InGPUMemoryShuffledInputProviderBuilder;
}(InMemoryShuffledInputProviderBuilder));
exports.InGPUMemoryShuffledInputProviderBuilder = InGPUMemoryShuffledInputProviderBuilder;

},{"./math/ndarray":26,"./util":90}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ndarray_1 = require("./ndarray");
var TanHFunc = (function () {
    function TanHFunc() {
    }
    TanHFunc.prototype.output = function (math, x) {
        return math.scope(function () {
            return math.tanh(x);
        });
    };
    TanHFunc.prototype.der = function (math, x, y) {
        return math.scope(function () {
            var ySquared = math.elementWiseMul(y, y);
            return math.scalarMinusArray(ndarray_1.Scalar.ONE, ySquared);
        });
    };
    return TanHFunc;
}());
exports.TanHFunc = TanHFunc;
var ReLUFunc = (function () {
    function ReLUFunc() {
    }
    ReLUFunc.prototype.output = function (math, x) {
        return math.scope(function () {
            return math.relu(x);
        });
    };
    ReLUFunc.prototype.der = function (math, x, y) {
        return math.scope(function () {
            return math.step(x);
        });
    };
    return ReLUFunc;
}());
exports.ReLUFunc = ReLUFunc;
var SigmoidFunc = (function () {
    function SigmoidFunc() {
    }
    SigmoidFunc.prototype.output = function (math, x) {
        return math.scope(function () {
            return math.sigmoid(x);
        });
    };
    SigmoidFunc.prototype.der = function (math, x, y) {
        return math.scope(function () {
            var ySquared = math.elementWiseMul(y, y);
            return math.sub(y, ySquared);
        });
    };
    return SigmoidFunc;
}());
exports.SigmoidFunc = SigmoidFunc;
var SquareFunc = (function () {
    function SquareFunc() {
    }
    SquareFunc.prototype.output = function (math, x) {
        return math.scope(function () {
            return math.elementWiseMul(x, x);
        });
    };
    SquareFunc.prototype.der = function (math, x, y) {
        return math.scope(function () {
            return math.scalarTimesArray(ndarray_1.Scalar.TWO, x);
        });
    };
    return SquareFunc;
}());
exports.SquareFunc = SquareFunc;

},{"./ndarray":26}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util = require("../util");
function assertConcat3DShapesMatch(x1Shape, x2Shape, axis, errorMessagePrefix) {
    if (errorMessagePrefix === void 0) { errorMessagePrefix = ''; }
    util.assert(x1Shape.length === 3, errorMessagePrefix + 'Concat3D x1 shape should be of rank 3.');
    util.assert(x2Shape.length === 3, errorMessagePrefix + 'Concat3D x2 shape should be of rank 3.');
    util.assert(axis >= 0 && axis < 3, 'Axis for concat3D must be between 0 and 2.');
    for (var i = 0; i < 3; i++) {
        util.assert((i === axis) || (x1Shape[i] === x2Shape[i]), errorMessagePrefix +
            ("Shape (" + x1Shape + ") does not match (" + x2Shape + ") along ") +
            "non-concatenated axis.");
    }
}
exports.assertConcat3DShapesMatch = assertConcat3DShapesMatch;
function computeConcat3DOutputShape(x1Shape, x2Shape, axis) {
    util.assert(x1Shape.length === 3, 'Concat3D x1 shape should be of rank 3.');
    util.assert(x2Shape.length === 3, 'Concat3D x2shape should be of rank 3.');
    var outputShape = x1Shape.slice();
    outputShape[axis] += x2Shape[axis];
    return outputShape;
}
exports.computeConcat3DOutputShape = computeConcat3DOutputShape;

},{"../util":90}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util = require("../util");
function computeOutputShape3D(inputShapeRowColDepth, fieldSize, depth, stride, zeroPad) {
    if (zeroPad == null) {
        zeroPad = computeDefaultPad(inputShapeRowColDepth, fieldSize, stride);
    }
    var inputRows = inputShapeRowColDepth[0];
    var inputCols = inputShapeRowColDepth[1];
    var outputRows = (inputRows - fieldSize + 2 * zeroPad) / stride + 1;
    util.assert(util.isInt(outputRows), "The output # of rows (" + outputRows + ") must be an integer. Change the " +
        "stride and/or zero pad parameters");
    var outputCols = (inputCols - fieldSize + 2 * zeroPad) / stride + 1;
    util.assert(util.isInt(outputCols), "The output # of columns (" + outputCols + ") must be an integer. Change " +
        "the stride and/or zero pad parameters");
    return [outputRows, outputCols, depth];
}
exports.computeOutputShape3D = computeOutputShape3D;
function computeDefaultPad(inputShape, fieldSize, stride) {
    return Math.floor((inputShape[0] * (stride - 1) - stride + fieldSize) / 2);
}
exports.computeDefaultPad = computeDefaultPad;
function computeTexShapeFrom3D(shapeRowColDepth) {
    return [shapeRowColDepth[0], shapeRowColDepth[1] * shapeRowColDepth[2]];
}
exports.computeTexShapeFrom3D = computeTexShapeFrom3D;
function computeWeightsShape4D(inputDepth, outputDepth, fSize) {
    return [fSize, fSize, inputDepth, outputDepth];
}
exports.computeWeightsShape4D = computeWeightsShape4D;
function computeWeightsTexShape(inputDepth, outputDepth, fieldSize) {
    return [fieldSize * fieldSize * inputDepth, outputDepth];
}
exports.computeWeightsTexShape = computeWeightsTexShape;
function computeBiasesTexShape(outputDepth) {
    return [1, outputDepth];
}
exports.computeBiasesTexShape = computeBiasesTexShape;
function computeDilatedRC(rc, origStride) {
    var rowsDilated = (rc[0] - 1) * origStride + 1;
    var colsDilated = (rc[1] - 1) * origStride + 1;
    return [rowsDilated, colsDilated];
}
exports.computeDilatedRC = computeDilatedRC;

},{"../util":90}],21:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function validateShapes(sourceSize, destSize) {
    var srcArea = sourceSize[0] * sourceSize[1];
    var dstArea = destSize[0] * destSize[1];
    if (srcArea !== dstArea) {
        var srcStr = '[' + sourceSize[0] + ', ' + sourceSize[1] + ']';
        var dstStr = '[' + destSize[0] + ', ' + destSize[1] + ']';
        throw new Error('copy2D shapes have different areas:\n  sourceSize ' + srcStr +
            ', area ' + srcArea + '\n  destSize ' + dstStr + ', area ' + dstArea);
    }
}
exports.validateShapes = validateShapes;

},{}],22:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ndarray_1 = require("./ndarray");
var SquareCostFunc = (function () {
    function SquareCostFunc() {
        this.halfOne = ndarray_1.Scalar.new(0.5);
    }
    SquareCostFunc.prototype.cost = function (math, x1, x2) {
        var diff = math.sub(x1, x2);
        var diffSquared = math.elementWiseMul(diff, diff);
        var result = math.scalarTimesArray(this.halfOne, diffSquared);
        diff.dispose();
        diffSquared.dispose();
        return result;
    };
    SquareCostFunc.prototype.der = function (math, x1, x2) {
        return math.sub(x1, x2);
    };
    SquareCostFunc.prototype.dispose = function () {
        this.halfOne.dispose();
    };
    return SquareCostFunc;
}());
exports.SquareCostFunc = SquareCostFunc;

},{"./ndarray":26}],23:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util = require("../util");
var concat3d_util = require("./concat3d_util");
var copy2d_util = require("./copy2d_util");
var ndarray_1 = require("./ndarray");
var NDArrayMath = (function () {
    function NDArrayMath(safeMode) {
        this.safeMode = safeMode;
        this.ndarrayScopes = [];
        this.ndarraysToKeep = [];
        this.activeScopeNDArraysToKeep = [];
    }
    NDArrayMath.prototype.scope = function (scopeFn) {
        var _this = this;
        this.startScope();
        var keepFn = function (ndarray) { return _this.keep(ndarray); };
        var trackFn = function (ndarray) { return _this.track(ndarray); };
        var result = scopeFn(keepFn, trackFn);
        this.endScope(result);
        return result;
    };
    NDArrayMath.prototype.startScope = function () {
        var newScope = [];
        this.ndarrayScopes.push(newScope);
        this.activeScope = newScope;
        var newNDArraysToKeep = [];
        this.ndarraysToKeep.push(newNDArraysToKeep);
        this.activeScopeNDArraysToKeep = newNDArraysToKeep;
    };
    NDArrayMath.prototype.endScope = function (result) {
        var _this = this;
        for (var i = 0; i < this.activeScope.length; i++) {
            var ndarray = this.activeScope[i];
            if (this.isNDArrayDataInList(ndarray, this.activeScopeNDArraysToKeep) ||
                (result != null && result instanceof ndarray_1.NDArray &&
                    ndarray.getData() === result.getData())) {
                continue;
            }
            ndarray.dispose();
        }
        this.ndarrayScopes.pop();
        this.activeScope = this.ndarrayScopes.length === 0 ?
            null :
            this.ndarrayScopes[this.ndarrayScopes.length - 1];
        if (result instanceof ndarray_1.NDArray &&
            !this.isNDArrayDataInList(result, this.activeScopeNDArraysToKeep)) {
            this.track(result);
        }
        else if (Array.isArray(result)) {
            result.forEach(function (r) {
                if (r instanceof ndarray_1.NDArray &&
                    !_this.isNDArrayDataInList(r, _this.activeScopeNDArraysToKeep)) {
                    _this.track(r);
                }
            });
        }
        this.ndarraysToKeep.pop();
        this.activeScopeNDArraysToKeep = this.ndarraysToKeep.length === 0 ?
            null :
            this.ndarraysToKeep[this.ndarraysToKeep.length - 1];
    };
    NDArrayMath.prototype.isNDArrayDataInList = function (ndarray, ndarrayList) {
        for (var i = 0; i < ndarrayList.length; i++) {
            if (ndarrayList[i].getData() === ndarray.getData()) {
                return true;
            }
        }
        return false;
    };
    NDArrayMath.prototype.keep = function (result) {
        if (this.activeScope == null) {
            if (this.safeMode) {
                throw new Error('You are using math in safe mode. Enclose all ' +
                    'math.method() calls inside a scope: ' +
                    'math.scope(() => {math.method();...}) to avoid memory ' +
                    'leaks.');
            }
            return result;
        }
        this.activeScopeNDArraysToKeep.push(result);
        return result;
    };
    NDArrayMath.prototype.track = function (result) {
        if (this.activeScope == null) {
            if (this.safeMode) {
                throw new Error('You are using math in safe mode. Enclose all ' +
                    'math.method() calls inside a scope: ' +
                    'math.scope(() => {math.method();...}) to avoid memory ' +
                    'leaks.');
            }
            return result;
        }
        this.activeScope.push(result);
        return result;
    };
    NDArrayMath.prototype.matMul = function (a, b, aOrientation, bOrientation) {
        if (aOrientation === void 0) { aOrientation = MatrixOrientation.REGULAR; }
        if (bOrientation === void 0) { bOrientation = MatrixOrientation.REGULAR; }
        var innerShapeA = (aOrientation === MatrixOrientation.REGULAR) ? a.shape[1] : a.shape[0];
        var innerShapeB = (bOrientation === MatrixOrientation.REGULAR) ? b.shape[0] : b.shape[1];
        util.assert(a.rank === 2 && b.rank === 2, "Error in matMul: inputs must be rank 2, got ranks " + a.rank +
            ("and " + b.rank + "."));
        util.assert(innerShapeA === innerShapeB, "Error in matMul: inner shapes (" + innerShapeA + ") and (" +
            (innerShapeB + ") of NDArrays with shapes " + a.shape + " and ") +
            (b.shape + " and orientations " + MatrixOrientation[aOrientation]) +
            (" and " + MatrixOrientation[bOrientation] + " must match."));
        return this.track(this.matMulInternal(a, b, aOrientation, bOrientation));
    };
    NDArrayMath.prototype.vectorTimesMatrix = function (v, matrix) {
        util.assert(v.rank === 1, "Error in vectorTimesMatrix: first input must be rank 1, but got " +
            ("rank " + v.rank + "."));
        util.assert(matrix.rank === 2, "Error in vectorTimesMatrix: second input must be rank 2, but got " +
            ("rank " + matrix.rank + "."));
        util.assert(v.size === matrix.shape[0], "Error in vectorTimesMatrix: size of first rank 1 input (" + v.size + ") " +
            "must match inner dimension of second rank 2 input, but got " +
            ("rank " + matrix.rank + "."));
        return this.matMul(v.as2D(1, v.size), matrix).as1D();
    };
    NDArrayMath.prototype.matrixTimesVector = function (matrix, v) {
        util.assert(v.rank === 1, "Error in vectorTimesMatrix: second input must rank 1, but got " +
            ("rank " + v.rank + "."));
        util.assert(matrix.rank === 2, "Error in vectorTimesMatrix: first input must be a rank 2, but got " +
            ("rank " + matrix.rank + "."));
        util.assert(v.size === matrix.shape[1], "Error in vectorTimesMatrix: size of first rank 1 input " + v.size + " " +
            "must match inner dimension of second rank 2 input, but got " +
            ("shape " + matrix.shape + "."));
        return this.matMul(matrix, v.as2D(v.size, 1)).as1D();
    };
    NDArrayMath.prototype.dotProduct = function (v1, v2) {
        util.assert(v1.rank === 1 && v2.rank === 1, "Error in dotProduct: inputs must be rank 1, but got ranks " +
            (v1.rank + " and " + v2.rank + "."));
        util.assert(v1.size === v2.size, "Error in dotProduct: size of inputs (" + v1.size + ") and (" +
            (v2.size + ") must match."));
        return this.matMul(v1.as2D(1, v1.size), v2.as2D(v2.size, 1)).asScalar();
    };
    NDArrayMath.prototype.outerProduct = function (v1, v2) {
        util.assert(v1.rank === 1 && v2.rank === 1, "Error in outerProduct: inputs must be rank 1, but got ranks " +
            (v1.rank + " and " + v2.rank + "."));
        return this.matMul(v1.as2D(v1.size, 1), v2.as2D(1, v2.size));
    };
    NDArrayMath.prototype.clone = function (ndarray) {
        return this.track(this.cloneInternal(ndarray));
    };
    NDArrayMath.prototype.reshape = function (ndarray, newShape) {
        util.assert(ndarray.size === util.sizeFromShape(newShape), "Error in reshape: old size " + ndarray.size + " must match new size " +
            (util.sizeFromShape(newShape) + "."));
        return this.track(this.reshapeInternal(ndarray, newShape));
    };
    NDArrayMath.prototype.slice2D = function (input, begin, size) {
        util.assert(begin[0] + size[0] <= input.shape[0] &&
            begin[1] + size[1] <= input.shape[1], "Error in slice2D: requested start position " + begin + " and size " +
            (size + " would overflow input of shape " + input.shape + "."));
        return this.track(this.slice2DInternal(input, begin, size));
    };
    NDArrayMath.prototype.copy2D = function (source, sourceBegin, sourceSize, dest, destBegin, destSize) {
        util.assert(sourceBegin[0] + sourceSize[0] <= source.shape[0] &&
            sourceBegin[1] + sourceSize[1] <= source.shape[1], "Error in copy2D: requested source start position " + sourceBegin + " " +
            ("and source size " + sourceSize + " would overflow source NDArray") +
            ("of shape " + source.shape + "."));
        util.assert(destBegin[0] + destSize[0] <= dest.shape[0] &&
            destBegin[1] + destSize[1] <= dest.shape[1], "Error in copy2D: requested dest start position " + destBegin + " " +
            ("and source size " + destSize + " would overflow dest NDArray of") +
            ("shape " + dest.shape + "."));
        copy2d_util.validateShapes(sourceSize, destSize);
        return this.copy2DInternal(source, sourceBegin, sourceSize, dest, destBegin, destSize);
    };
    NDArrayMath.prototype.concat3D = function (ndarray1, ndarray2, axis) {
        concat3d_util.assertConcat3DShapesMatch(ndarray1.shape, ndarray2.shape, axis, 'Error in concat3d: ');
        return this.track(this.concat3DInternal(ndarray1, ndarray2, axis));
    };
    NDArrayMath.prototype.logSumExp = function (ndarray) {
        return this.track(this.logSumExpInternal(ndarray));
    };
    NDArrayMath.prototype.sum = function (ndarray) {
        return this.track(this.sumInternal(ndarray));
    };
    NDArrayMath.prototype.argMin = function (ndarray) {
        return this.track(this.argMinInternal(ndarray));
    };
    NDArrayMath.prototype.argMax = function (ndarray) {
        return this.track(this.argMaxInternal(ndarray));
    };
    NDArrayMath.prototype.argMaxEquals = function (x1, x2) {
        util.assertShapesMatch(x1.shape, x2.shape, 'Error in argMaxEquals: ');
        return this.track(this.argMaxEqualsInternal(x1, x2));
    };
    NDArrayMath.prototype.topK = function (ndarray, k) {
        util.assert(k <= ndarray.size, "Error in topK: k value (" + k + ") must be less than size of input " +
            ("ndarray, got shape " + ndarray.shape + "."));
        var result = this.topKInternal(ndarray, k);
        this.track(result.values);
        this.track(result.indices);
        return result;
    };
    NDArrayMath.prototype.min = function (ndarray) {
        return this.track(this.minInternal(ndarray));
    };
    NDArrayMath.prototype.max = function (ndarray) {
        return this.track(this.maxInternal(ndarray));
    };
    NDArrayMath.prototype.softmax = function (x) {
        var _this = this;
        return this.scope(function () {
            var lse = _this.logSumExp(x);
            var logResult = _this.arrayMinusScalar(x, lse);
            return _this.exp(logResult);
        });
    };
    NDArrayMath.prototype.switchDim = function (a, newDim) {
        util.assert(a.rank === newDim.length, "Error in switchDim: length of input shape " + a.shape + " " +
            ("must match size of newDim array " + newDim + "."));
        return this.track(this.switchDimInternal(a, newDim));
    };
    NDArrayMath.prototype.scalarPlusArray = function (c, a) {
        util.assert(c.size === 1, "Error in scalarPlusArray: first argument must be rank 0, but got " +
            ("rank " + c.rank + "."));
        return this.track(this.scalarPlusArrayInternal(c, a));
    };
    NDArrayMath.prototype.scalarMinusArray = function (c, a) {
        util.assert(c.size === 1, "Error in scalarMinusArray: first argument must be rank 0, but got " +
            ("rank " + c.rank + "."));
        return this.track(this.scalarMinusArrayInternal(c, a));
    };
    NDArrayMath.prototype.arrayMinusScalar = function (a, c) {
        util.assert(c.size === 1, "Error in arrayMinusScalar: second argument must be rank 0, but " +
            ("got rank " + c.rank + "."));
        return this.track(this.arrayMinusScalarInternal(a, c));
    };
    NDArrayMath.prototype.neg = function (a) {
        return this.track(this.negInternal(a));
    };
    NDArrayMath.prototype.add = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in add: ');
        return this.track(this.addInternal(a, b));
    };
    NDArrayMath.prototype.sub = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in sub: ');
        return this.track(this.subInternal(a, b));
    };
    NDArrayMath.prototype.elementWiseMul = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in elementWiseMul: ');
        return this.track(this.elementWiseMulInternal(a, b));
    };
    NDArrayMath.prototype.divide = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape, 'Error in divide: ');
        return this.track(this.divideInternal(a, b));
    };
    NDArrayMath.prototype.scalarDividedByArray = function (c, a) {
        util.assert(c.size === 1, "Error in scalarDividedByArray: first argument must be rank 0, but " +
            ("got NDArray of rank " + c.rank + "."));
        return this.track(this.scalarDividedByArrayInternal(c, a));
    };
    NDArrayMath.prototype.arrayDividedByScalar = function (a, c) {
        util.assert(c.size === 1, "Error in arrayDividedByScalar: second argument must be rank 0, " +
            ("but got NDArray of rank " + c.rank + "."));
        return this.track(this.arrayDividedByScalarInternal(a, c));
    };
    NDArrayMath.prototype.exp = function (ndarray) {
        return this.track(this.expInternal(ndarray));
    };
    NDArrayMath.prototype.log = function (ndarray) {
        return this.track(this.logInternal(ndarray));
    };
    NDArrayMath.prototype.relu = function (ndarray) {
        return this.track(this.reluInternal(ndarray));
    };
    NDArrayMath.prototype.sigmoid = function (ndarray) {
        return this.track(this.sigmoidInternal(ndarray));
    };
    NDArrayMath.prototype.tanh = function (ndarray) {
        return this.track(this.tanhInternal(ndarray));
    };
    NDArrayMath.prototype.sin = function (ndarray) {
        return this.track(this.sinInternal(ndarray));
    };
    NDArrayMath.prototype.step = function (ndarray) {
        return this.track(this.stepInternal(ndarray));
    };
    NDArrayMath.prototype.scaledArrayAdd = function (c1, a, c2, b) {
        util.assert(c1.size === 1, "Error in scaledArrayAdd: first argument must rank 0, but got " +
            (" rank " + c1.rank + "."));
        util.assert(c2.size === 1, "Error in scaledArrayAdd: third argument must be rank 0, but got " +
            ("NDArray of rank " + c2.rank + "."));
        util.assertShapesMatch(a.shape, b.shape, 'Error in scaledArrayAdd: ');
        return this.track(this.scaledArrayAddInternal(c1, a, c2, b));
    };
    NDArrayMath.prototype.scalarTimesArray = function (c, a) {
        util.assert(c.size === 1, "Error in arrayDividedByScalar: first argument must be rank 0, but " +
            ("got rank " + c.rank + "."));
        return this.track(this.scalarTimesArrayInternal(c, a));
    };
    NDArrayMath.prototype.elementWiseMulBroadcast = function (a, b) {
        util.assert(a.rank === 2, "Error in elementWiseMulBroadcast: first argument must be " +
            ("rank 2, but got rank " + a.rank + "."));
        util.assert(b.rank === 2, "Error in elementWiseMulBroadcast: second argument must be " +
            ("rank 2, but got rank " + b.rank + "."));
        return this.track(this.elementWiseMulBroadcastInternal(a, b));
    };
    NDArrayMath.prototype.conv2d = function (x, weights, biases, stride, zeroPad) {
        util.assert(x.rank === 3, "Error in conv2d: x must be rank 3, but got rank " + x.rank + ".");
        util.assert(weights.rank === 4, "Error in conv2d: weights must be rank 4, but got rank " +
            (weights.rank + "."));
        if (biases != null) {
            util.assert(biases.rank === 1, "Error in conv2d: biases must be rank 1, but got rank " +
                (biases.rank + "."));
        }
        util.assert(x.shape[2] === weights.shape[2], "Error in conv2d: depth of input (" + x.shape[2] + ") must match  " +
            ("input depth for weights " + weights.shape[2] + "."));
        return this.track(this.conv2dInternal(x, weights, biases, stride, zeroPad));
    };
    NDArrayMath.prototype.conv2dBackProp = function (x, dy, weights, stride, pad) {
        util.assert(x.rank === 3, "Error in conv2dBackProp: x must be rank 3, but got shape " +
            (x.shape + "."));
        util.assert(dy.rank === 3, "Error in conv2dBackProp: dy must be rank 3, but got shape " +
            (dy.shape + "."));
        util.assert(weights.rank === 4, "Error in conv2dBackProp: weights must be rank 4, but got shape " +
            (weights.shape + "."));
        util.assert(x.shape[2] === weights.shape[2], "Error in conv2dBackProp: depth of x " + x.shape[2] + ") must " +
            ("match input depth for weights (" + weights.shape[2] + "."));
        util.assert(dy.shape[2] === weights.shape[3], "Error in conv2dBackProp: depth of dy (" + dy.shape[2] + ") must " +
            ("match output depth for weights (" + weights.shape[3] + ")."));
        var backpropResult = this.conv2dBackPropInternal(x, dy, weights, stride, pad);
        this.track(backpropResult.db);
        this.track(backpropResult.dw);
        this.track(backpropResult.dx);
        return backpropResult;
    };
    NDArrayMath.prototype.conv2dTranspose = function (x, weights, biases, stride, pad) {
        util.assert(x.rank === 3, "Error in conv2dTranspose: x must be rank 3, but got rank " +
            (x.rank + "."));
        util.assert(weights.rank === 4, "Error in conv2dTranspose: weights must be rank 4, but got " +
            ("rank " + weights.rank));
        if (biases != null) {
            util.assert(biases.rank === 1, "Error in conv2dTranspose: biases must be rank 1, but got ' +\n              'rank " + biases.rank + ".");
        }
        util.assert(x.shape[2] === weights.shape[3], "Error in conv2dTranspose: depth of input (" + x.shape[2] + ") must " +
            ("match input depth for weights " + weights.shape[3] + "."));
        return this.track(this.conv2dTransposeInternal(x, weights, biases, stride, pad));
    };
    NDArrayMath.prototype.maxPool = function (x, fSize, stride, pad) {
        util.assert(x.rank === 3, 'Error in maxPool: x must be rank 3 but got rank ' + x.rank + '.');
        return this.track(this.maxPoolInternal(x, fSize, stride, pad));
    };
    NDArrayMath.prototype.maxPoolBackprop = function (dy, x, fSize, stride, pad) {
        util.assert(dy.rank === 3, "Error in maxPoolBackprop: dy must be rank 3 but got rank " +
            (dy.rank + "."));
        util.assert(x.rank === 3, "Error in maxPoolBackprop: x must be rank 3 but got rank " +
            (x.rank + "."));
        return this.track(this.maxPoolBackpropInternal(dy, x, fSize, stride, pad));
    };
    NDArrayMath.prototype.minPool = function (x, fSize, stride, pad) {
        util.assert(x.rank === 3, "Error in minPool: x must be rank 3 but got rank " + x.rank + ".");
        return this.track(this.minPoolInternal(x, fSize, stride, pad));
    };
    NDArrayMath.prototype.avgPool = function (x, fSize, stride, pad) {
        util.assert(x.rank === 3, "Error in avgPool: x must be rank 3 but got rank " + x.rank + ".");
        return this.track(this.avgPoolInternal(x, fSize, stride, pad));
    };
    NDArrayMath.prototype.resizeBilinear3D = function (x, newShape2D, alignCorners) {
        if (alignCorners === void 0) { alignCorners = false; }
        util.assert(x.rank === 3, "Error in resizeBilinear3D: x must be rank 3 but got rank " + x.rank + ".");
        util.assert(newShape2D.length === 2, "Error in resizeBilinear3D: new shape must 2D, but got shape " +
            (newShape2D + "."));
        return this.track(this.resizeBilinear3DInternal(x, newShape2D, alignCorners));
    };
    NDArrayMath.prototype.batchNormalization3D = function (x, mean, variance, varianceEpsilon, scale, offset) {
        if (varianceEpsilon === void 0) { varianceEpsilon = .001; }
        util.assert(x.rank === 3, "Error in batchNormalization3D: x must be rank 3 but got rank " +
            (x.rank + "."));
        util.assert(mean.rank === 3 || mean.rank === 1, "Error in batchNormalization3D: mean must be rank 3 or rank 1 but " +
            ("got rank " + mean.rank + "."));
        util.assert(variance.rank === 3 || variance.rank === 1, "Error in batchNormalization3D: variance must be rank 3 or rank 1 " +
            ("but got rank " + variance.rank + "."));
        if (scale != null) {
            util.assert(scale.rank === 3 || scale.rank === 1, "Error in batchNormalization3D: scale must be rank 3 or rank 1 " +
                ("but got rank " + scale.rank + "."));
        }
        if (offset != null) {
            util.assert(offset.rank === 3 || offset.rank === 1, "Error in batchNormalization3D: offset must be rank 3 or rank 1 " +
                ("but got rank " + offset.rank + "."));
        }
        return this.track(this.batchNormalization3DInternal(x, mean, variance, varianceEpsilon, scale, offset));
    };
    return NDArrayMath;
}());
exports.NDArrayMath = NDArrayMath;
var MatrixOrientation;
(function (MatrixOrientation) {
    MatrixOrientation[MatrixOrientation["REGULAR"] = 0] = "REGULAR";
    MatrixOrientation[MatrixOrientation["TRANSPOSED"] = 1] = "TRANSPOSED";
})(MatrixOrientation = exports.MatrixOrientation || (exports.MatrixOrientation = {}));

},{"../util":90,"./concat3d_util":19,"./copy2d_util":21,"./ndarray":26}],24:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var conv_util = require("../math/conv_util");
var util = require("../util");
var concat3d_util = require("./concat3d_util");
var copy2D_util = require("./copy2d_util");
var math_1 = require("./math");
var ndarray_1 = require("./ndarray");
var NDArrayMathCPU = (function (_super) {
    __extends(NDArrayMathCPU, _super);
    function NDArrayMathCPU(safeMode) {
        if (safeMode === void 0) { safeMode = false; }
        return _super.call(this, safeMode) || this;
    }
    NDArrayMathCPU.prototype.cloneInternal = function (ndarray) {
        return ndarray_1.NDArray.make(ndarray.shape, { values: new Float32Array(ndarray.getValues()) });
    };
    NDArrayMathCPU.prototype.reshapeInternal = function (ndarray, newShape) {
        return this.cloneInternal(ndarray).reshape(newShape);
    };
    NDArrayMathCPU.prototype.slice2DInternal = function (input, beginRowCol, sizeRowCol) {
        var result = ndarray_1.Array2D.zeros(sizeRowCol);
        this.copy2DInternal(input, beginRowCol, sizeRowCol, result, [0, 0], sizeRowCol);
        return result;
    };
    NDArrayMathCPU.prototype.copy2DInternal = function (source, sourceBeginRowCol, sourceSizeRowCol, dest, destBeginRowCol, destSizeRowCol) {
        copy2D_util.validateShapes(sourceSizeRowCol, destSizeRowCol);
        var srcValues = source.getValues();
        var dstValues = dest.getValues();
        var n = sourceSizeRowCol[0] * sourceSizeRowCol[1];
        for (var i = 0; i < n; ++i) {
            var srcRow = sourceBeginRowCol[0] + Math.floor(i / sourceSizeRowCol[1]);
            var srcCol = sourceBeginRowCol[1] + (i % sourceSizeRowCol[1]);
            var srcOff = srcRow * source.shape[1] + srcCol;
            var dstRow = destBeginRowCol[0] + Math.floor(i / destSizeRowCol[1]);
            var dstCol = destBeginRowCol[1] + (i % destSizeRowCol[1]);
            var dstOff = dstRow * dest.shape[1] + dstCol;
            dstValues[dstOff] = srcValues[srcOff];
        }
    };
    NDArrayMathCPU.prototype.concat3DInternal = function (x1, x2, axis) {
        var outputShape = concat3d_util.computeConcat3DOutputShape(x1.shape, x2.shape, axis);
        var values = ndarray_1.NDArray.zeros(outputShape);
        for (var i = 0; i < outputShape[0]; i++) {
            for (var j = 0; j < outputShape[1]; j++) {
                for (var k = 0; k < outputShape[2]; k++) {
                    var index = [i, j, k];
                    var value = void 0;
                    if (index[axis] < x1.shape[axis]) {
                        value = x1.get(i, j, k);
                    }
                    else {
                        index[axis] -= x1.shape[axis];
                        var i2 = index[0], j2 = index[1], k2 = index[2];
                        value = x2.get(i2, j2, k2);
                    }
                    values.set(value, i, j, k);
                }
            }
        }
        return values;
    };
    NDArrayMathCPU.prototype.scalarPlusArrayInternal = function (c, a) {
        var resultValues = new Float32Array(a.size);
        var aValues = a.getValues();
        var cVal = c.get();
        for (var i = 0; i < resultValues.length; ++i) {
            resultValues[i] = cVal + aValues[i];
        }
        return ndarray_1.NDArray.make(a.shape, { values: resultValues });
    };
    NDArrayMathCPU.prototype.scaledArrayAddInternal = function (c1, a, c2, b) {
        var cValues = new Float32Array(a.size);
        var aValues = a.getValues();
        var bValues = b.getValues();
        var c1Val = c1.get();
        var c2Val = c2.get();
        for (var i = 0; i < cValues.length; ++i) {
            cValues[i] = c1Val * aValues[i] + c2Val * bValues[i];
        }
        return ndarray_1.NDArray.make(a.shape, { values: cValues });
    };
    NDArrayMathCPU.prototype.scalarTimesArrayInternal = function (c, a) {
        var newValues = new Float32Array(a.size);
        var aValues = a.getValues();
        var cVal = c.get();
        for (var i = 0; i < aValues.length; ++i) {
            newValues[i] = cVal * aValues[i];
        }
        return ndarray_1.NDArray.make(a.shape, { values: newValues });
    };
    NDArrayMathCPU.prototype.scalarMinusArrayInternal = function (c, a) {
        var negA = this.negInternal(a);
        var result = this.scalarPlusArrayInternal(c, negA);
        negA.dispose();
        return result;
    };
    NDArrayMathCPU.prototype.arrayMinusScalarInternal = function (a, c) {
        var negC = this.negInternal(c);
        var result = this.scalarPlusArrayInternal(negC, a);
        negC.dispose();
        return result;
    };
    NDArrayMathCPU.prototype.negInternal = function (a) {
        return this.scalarTimesArrayInternal(ndarray_1.Scalar.NEG_ONE, a);
    };
    NDArrayMathCPU.prototype.addInternal = function (a, b) {
        return this.scaledArrayAddInternal(ndarray_1.Scalar.ONE, a, ndarray_1.Scalar.ONE, b);
    };
    NDArrayMathCPU.prototype.subInternal = function (a, b) {
        return this.scaledArrayAddInternal(ndarray_1.Scalar.ONE, a, ndarray_1.Scalar.NEG_ONE, b);
    };
    NDArrayMathCPU.prototype.matMulInternal = function (a, b, aOrientation, bOrientation) {
        if (aOrientation === void 0) { aOrientation = math_1.MatrixOrientation.REGULAR; }
        if (bOrientation === void 0) { bOrientation = math_1.MatrixOrientation.REGULAR; }
        var sharedDim = (aOrientation === math_1.MatrixOrientation.REGULAR) ? a.shape[1] : a.shape[0];
        var leftDim = (aOrientation === math_1.MatrixOrientation.REGULAR) ? a.shape[0] : a.shape[1];
        var rightDim = (bOrientation === math_1.MatrixOrientation.REGULAR) ? b.shape[1] : b.shape[0];
        var normalGetter = function (matrix, i, j) {
            return matrix.get(i, j);
        };
        var transposedGetter = function (matrix, i, j) {
            return matrix.get(j, i);
        };
        var aGetter = (aOrientation === math_1.MatrixOrientation.REGULAR) ?
            normalGetter :
            transposedGetter;
        var bGetter = (bOrientation === math_1.MatrixOrientation.REGULAR) ?
            normalGetter :
            transposedGetter;
        var values = new Float32Array(leftDim * rightDim);
        var index = 0;
        for (var i = 0; i < leftDim; ++i) {
            for (var j = 0; j < rightDim; ++j) {
                var sum = 0;
                for (var k = 0; k < sharedDim; ++k) {
                    sum += aGetter(a, i, k) * bGetter(b, k, j);
                }
                values[index++] = sum;
            }
        }
        return ndarray_1.Array2D.new([leftDim, rightDim], values);
    };
    NDArrayMathCPU.prototype.elementWiseMulInternal = function (a, b) {
        var newValues = new Float32Array(a.size);
        var aValues = a.getValues();
        var bValues = b.getValues();
        for (var i = 0; i < aValues.length; ++i) {
            newValues[i] = aValues[i] * bValues[i];
        }
        return ndarray_1.NDArray.make(a.shape, { values: newValues });
    };
    NDArrayMathCPU.prototype.elementWiseMulBroadcastInternal = function (a, b) {
        var maxRow = Math.max(a.shape[0], b.shape[0]);
        var maxCol = Math.max(a.shape[1], b.shape[1]);
        var values = new Float32Array(maxRow * maxCol);
        var index = 0;
        for (var row = 0; row < maxRow; row++) {
            for (var col = 0; col < maxCol; col++) {
                values[index++] = a.get(row % a.shape[0], col % a.shape[1]) *
                    b.get(row % b.shape[0], col % b.shape[1]);
            }
        }
        return ndarray_1.Array2D.new([maxRow, maxCol], values);
    };
    NDArrayMathCPU.prototype.divideInternal = function (a, b) {
        var newValues = new Float32Array(a.size);
        var aValues = a.getValues();
        var bValues = b.getValues();
        for (var i = 0; i < aValues.length; ++i) {
            newValues[i] = aValues[i] / bValues[i];
        }
        return ndarray_1.NDArray.make(a.shape, { values: newValues });
    };
    NDArrayMathCPU.prototype.scalarDividedByArrayInternal = function (c, a) {
        var newValues = new Float32Array(a.size);
        var aValues = a.getValues();
        var cValue = c.get();
        for (var i = 0; i < aValues.length; ++i) {
            newValues[i] = cValue / aValues[i];
        }
        return ndarray_1.NDArray.make(a.shape, { values: newValues });
    };
    NDArrayMathCPU.prototype.arrayDividedByScalarInternal = function (a, c) {
        var newValues = new Float32Array(a.size);
        var aValues = a.getValues();
        var cValue = c.get();
        for (var i = 0; i < aValues.length; ++i) {
            newValues[i] = aValues[i] / cValue;
        }
        return ndarray_1.NDArray.make(a.shape, { values: newValues });
    };
    NDArrayMathCPU.prototype.sumInternal = function (ndarray) {
        var sum = 0;
        var values = ndarray.getValues();
        for (var i = 0; i < values.length; ++i) {
            sum += values[i];
        }
        return ndarray_1.Scalar.new(sum);
    };
    NDArrayMathCPU.prototype.argMinInternal = function (ndarray) {
        var min = Number.MAX_VALUE;
        var minIndex = -1;
        var values = ndarray.getValues();
        for (var i = 0; i < values.length; ++i) {
            var value = values[i];
            if (isNaN(value)) {
                return ndarray_1.Scalar.new(NaN);
            }
            if (value < min) {
                min = value;
                minIndex = i;
            }
        }
        return ndarray_1.Scalar.new(minIndex);
    };
    NDArrayMathCPU.prototype.argMaxInternal = function (ndarray) {
        var max = Number.NEGATIVE_INFINITY;
        var maxIndex = -1;
        var values = ndarray.getValues();
        for (var i = 0; i < values.length; ++i) {
            var value = values[i];
            if (isNaN(value)) {
                return ndarray_1.Scalar.new(NaN);
            }
            if (value > max) {
                max = value;
                maxIndex = i;
            }
        }
        return ndarray_1.Scalar.new(maxIndex);
    };
    NDArrayMathCPU.prototype.argMaxEqualsInternal = function (x1, x2) {
        var argMax1 = this.argMaxInternal(x1).get();
        var argMax2 = this.argMaxInternal(x2).get();
        if (isNaN(argMax1) || isNaN(argMax2)) {
            return ndarray_1.Scalar.new(NaN);
        }
        return ndarray_1.Scalar.new(+(argMax1 === argMax2));
    };
    NDArrayMathCPU.prototype.topKInternal = function (ndarray, k) {
        var values = ndarray.getValues();
        var valuesAndIndices = [];
        for (var i = 0; i < values.length; i++) {
            valuesAndIndices.push({ value: values[i], index: i });
        }
        valuesAndIndices.sort(function (a, b) {
            return b.value - a.value;
        });
        var topkValues = new Float32Array(k);
        var topkIndices = new Float32Array(k);
        for (var i = 0; i < k; i++) {
            topkValues[i] = valuesAndIndices[i].value;
            topkIndices[i] = valuesAndIndices[i].index;
        }
        return { values: ndarray_1.Array1D.new(topkValues), indices: ndarray_1.Array1D.new(topkIndices) };
    };
    NDArrayMathCPU.prototype.minInternal = function (ndarray) {
        var values = ndarray.getValues();
        var min = values[0];
        for (var i = 1; i < values.length; ++i) {
            var value = values[i];
            if (isNaN(value)) {
                return ndarray_1.Scalar.new(NaN);
            }
            if (value < min) {
                min = value;
            }
        }
        return ndarray_1.Scalar.new(min);
    };
    NDArrayMathCPU.prototype.maxInternal = function (ndarray) {
        var values = ndarray.getValues();
        var max = values[0];
        for (var i = 1; i < values.length; ++i) {
            var value = values[i];
            if (isNaN(value)) {
                return ndarray_1.Scalar.new(NaN);
            }
            if (value > max) {
                max = value;
            }
        }
        return ndarray_1.Scalar.new(max);
    };
    NDArrayMathCPU.prototype.expInternal = function (ndarray) {
        var values = ndarray.getValues();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            newValues[i] = Math.exp(values[i]);
        }
        return ndarray_1.NDArray.make(ndarray.shape, { values: newValues });
    };
    NDArrayMathCPU.prototype.logInternal = function (ndarray) {
        var values = ndarray.getValues();
        var newValues = new Float32Array(values.length);
        for (var i = 0; i < values.length; ++i) {
            var value = values[i];
            newValues[i] = Math.log(value);
        }
        return ndarray_1.NDArray.make(ndarray.shape, { values: newValues });
    };
    NDArrayMathCPU.prototype.logSumExpInternal = function (ndarray) {
        var xMax = this.max(ndarray);
        var a = this.arrayMinusScalar(ndarray, xMax);
        var b = this.exp(a);
        var c = this.sum(b);
        var d = this.log(c);
        var result = this.add(xMax, d);
        xMax.dispose();
        a.dispose();
        b.dispose();
        c.dispose();
        d.dispose();
        return result;
    };
    NDArrayMathCPU.prototype.reluInternal = function (ndarray) {
        var resultValues = new Float32Array(ndarray.size);
        var values = ndarray.getValues();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.max(0, values[i]);
        }
        return ndarray_1.NDArray.make(ndarray.shape, { values: resultValues });
    };
    NDArrayMathCPU.prototype.sigmoidInternal = function (ndarray) {
        var resultValues = new Float32Array(ndarray.size);
        var values = ndarray.getValues();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = 1 / (1 + Math.exp(-values[i]));
        }
        return ndarray_1.NDArray.make(ndarray.shape, { values: resultValues });
    };
    NDArrayMathCPU.prototype.tanhInternal = function (ndarray) {
        var resultValues = new Float32Array(ndarray.size);
        var values = ndarray.getValues();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = util.tanh(values[i]);
        }
        return ndarray_1.NDArray.make(ndarray.shape, { values: resultValues });
    };
    NDArrayMathCPU.prototype.sinInternal = function (ndarray) {
        var resultValues = new Float32Array(ndarray.size);
        var values = ndarray.getValues();
        for (var i = 0; i < values.length; ++i) {
            resultValues[i] = Math.sin(values[i]);
        }
        return ndarray_1.NDArray.make(ndarray.shape, { values: resultValues });
    };
    NDArrayMathCPU.prototype.stepInternal = function (ndarray) {
        var resultValues = new Float32Array(ndarray.size);
        var values = ndarray.getValues();
        for (var i = 0; i < values.length; ++i) {
            var value = values[i];
            resultValues[i] = value > 0 ? 1 : (value < 0 ? 0 : value);
        }
        return ndarray_1.NDArray.make(ndarray.shape, { values: resultValues });
    };
    NDArrayMathCPU.prototype.conv2dInternal = function (x, weights, biases, stride, pad) {
        var _a = x.shape, xRows = _a[0], xCols = _a[1], inputDepth = _a[2];
        var fieldSize = weights.shape[0];
        var outputDepth = weights.shape[3];
        var outputShape = conv_util.computeOutputShape3D([xRows, xCols, inputDepth], fieldSize, outputDepth, stride, pad);
        var y = ndarray_1.Array3D.zeros(outputShape);
        for (var d2 = 0; d2 < outputDepth; ++d2) {
            for (var yR = 0; yR < y.shape[0]; ++yR) {
                var xRCorner = yR * stride - pad;
                var xRMin = Math.max(0, xRCorner);
                var xRMax = Math.min(xRows, fieldSize + xRCorner);
                for (var yC = 0; yC < y.shape[1]; ++yC) {
                    var xCCorner = yC * stride - pad;
                    var xCMin = Math.max(0, xCCorner);
                    var xCMax = Math.min(xCols, fieldSize + xCCorner);
                    var dotProd = 0;
                    for (var xR = xRMin; xR < xRMax; ++xR) {
                        var wR = xR - xRCorner;
                        for (var xC = xCMin; xC < xCMax; ++xC) {
                            var wC = xC - xCCorner;
                            for (var d1 = 0; d1 < inputDepth; ++d1) {
                                var pixel = x.get(xR, xC, d1);
                                var weight = weights.get(wR, wC, d1, d2);
                                dotProd += pixel * weight;
                            }
                        }
                    }
                    var bias = (biases != null) ? biases.get(d2) : 0;
                    y.set(dotProd + bias, yR, yC, d2);
                }
            }
        }
        return y;
    };
    NDArrayMathCPU.prototype.conv2dBackPropInternal = function (x, dy, weights, stride, pad) {
        var fSize = weights.shape[0];
        var dw = this.conv2dDerWeights(x, dy, fSize, stride, pad);
        var db = this.conv2dDerBias(dy);
        var dx = this.conv2dTransposeInternal(dy, weights, null, stride, pad);
        return { dx: dx, db: db, dw: dw };
    };
    NDArrayMathCPU.prototype.conv2dTransposeInternal = function (x, weights, biases, origStride, origPad) {
        var fSize = weights.shape[0];
        var pad = fSize - 1 - origPad;
        var origInputDepth = weights.shape[2];
        var origOutputDepth = weights.shape[3];
        var _a = x.shape, xRows = _a[0], xCols = _a[1], xDepth = _a[2];
        var xRowsDilated = (xRows - 1) * origStride + 1;
        var xColsDilated = (xCols - 1) * origStride + 1;
        var outputShape = conv_util.computeOutputShape3D([xRowsDilated, xColsDilated, origOutputDepth], fSize, origInputDepth, 1, pad);
        var y = ndarray_1.Array3D.zeros(outputShape);
        for (var d2 = 0; d2 < origInputDepth; ++d2) {
            for (var yR = 0; yR < y.shape[0]; ++yR) {
                var xRCorner = yR - pad;
                var xRMin = Math.max(0, Math.ceil(xRCorner / origStride));
                var xRMax = Math.min(xRows, (fSize + xRCorner) / origStride);
                for (var yC = 0; yC < y.shape[1]; ++yC) {
                    var xCCorner = yC - pad;
                    var xCMin = Math.max(0, Math.ceil(xCCorner / origStride));
                    var xCMax = Math.min(xCols, (fSize + xCCorner) / origStride);
                    var dotProd = 0;
                    for (var xR = xRMin; xR < xRMax; ++xR) {
                        var wR = xR * origStride - xRCorner;
                        for (var xC = xCMin; xC < xCMax; ++xC) {
                            var wC = xC * origStride - xCCorner;
                            for (var d1 = 0; d1 < origOutputDepth; ++d1) {
                                var pixel = x.get(xR, xC, d1);
                                var weight = weights.get(fSize - 1 - wR, fSize - 1 - wC, d2, d1);
                                dotProd += pixel * weight;
                            }
                        }
                    }
                    var bias = biases != null ? biases.get(d2) : 0;
                    y.set(dotProd + bias, yR, yC, d2);
                }
            }
        }
        return y;
    };
    NDArrayMathCPU.prototype.conv2dTransposeShaderLike = function (x, origWeights, origStride, origPad) {
        var fSize = origWeights.shape[0];
        var pad = fSize - 1 - origPad;
        var origInputDepth = origWeights.shape[2];
        var origOutputDepth = origWeights.shape[3];
        var _a = x.shape, xRows = _a[0], xCols = _a[1], xDepth = _a[2];
        var xRowsDilated = (xRows - 1) * origStride + 1;
        var xColsDilated = (xCols - 1) * origStride + 1;
        var outputShape = conv_util.computeOutputShape3D([xRowsDilated, xColsDilated, origOutputDepth], fSize, origInputDepth, 1, pad);
        var y = ndarray_1.Array3D.zeros(outputShape);
        for (var d2 = 0; d2 < origInputDepth; ++d2) {
            for (var yR = 0; yR < y.shape[0]; ++yR) {
                for (var yC = 0; yC < y.shape[1]; ++yC) {
                    var xRCorner = yR - pad;
                    var xCCorner = yC - pad;
                    var dotProd = 0;
                    for (var wR = 0; wR < fSize; ++wR) {
                        var xR = (xRCorner + wR) / origStride;
                        if (xR < 0 || xR >= xRows || Math.floor(xR) !== xR) {
                            continue;
                        }
                        for (var wC = 0; wC < fSize; ++wC) {
                            var xC = (xCCorner + wC) / origStride;
                            if (xC < 0 || xC >= xCols || Math.floor(xC) !== xC) {
                                continue;
                            }
                            for (var d1 = 0; d1 < origOutputDepth; ++d1) {
                                var pixel = x.get(xR, xC, d1);
                                var weight = origWeights.get(fSize - 1 - wR, fSize - 1 - wC, d2, d1);
                                dotProd += pixel * weight;
                            }
                        }
                    }
                    y.set(dotProd, yR, yC, d2);
                }
            }
        }
        return y;
    };
    NDArrayMathCPU.prototype.conv2dDerWeights = function (x, dY, fSize, stride, zeroPad) {
        var inputDepth = x.shape[2];
        var outputDepth = dY.shape[2];
        var weightsShape = conv_util.computeWeightsShape4D(inputDepth, outputDepth, fSize);
        var dW = ndarray_1.Array4D.zeros(weightsShape);
        var yNumRows = dY.shape[0];
        var yNumCols = dY.shape[1];
        var xNumRows = x.shape[0];
        var xNumCols = x.shape[1];
        for (var wR = 0; wR < fSize; ++wR) {
            var yRMin = Math.max(0, Math.ceil((zeroPad - wR) / stride));
            var yRMax = Math.min(yNumRows, (xNumRows + zeroPad - wR) / stride);
            for (var wC = 0; wC < fSize; ++wC) {
                var yCMin = Math.max(0, Math.ceil((zeroPad - wC) / stride));
                var yCMax = Math.min(yNumCols, (xNumCols + zeroPad - wC) / stride);
                for (var d1 = 0; d1 < inputDepth; ++d1) {
                    for (var d2 = 0; d2 < outputDepth; ++d2) {
                        var dotProd = 0;
                        for (var yR = yRMin; yR < yRMax; ++yR) {
                            var xR = wR + yR * stride - zeroPad;
                            for (var yC = yCMin; yC < yCMax; ++yC) {
                                var xC = wC + yC * stride - zeroPad;
                                dotProd += x.get(xR, xC, d1) * dY.get(yR, yC, d2);
                            }
                        }
                        dW.set(dotProd, wR, wC, d1, d2);
                    }
                }
            }
        }
        return dW;
    };
    NDArrayMathCPU.prototype.conv2dDerBias = function (dY) {
        var outputDepth = dY.shape[2];
        var numRows = dY.shape[0];
        var numCols = dY.shape[1];
        var values = new Float32Array(outputDepth);
        for (var d2 = 0; d2 < outputDepth; ++d2) {
            var sum = 0;
            for (var r = 0; r < numRows; ++r) {
                for (var c = 0; c < numCols; ++c) {
                    sum += dY.get(r, c, d2);
                }
            }
            values[d2] = sum;
        }
        return ndarray_1.Array1D.new(values);
    };
    NDArrayMathCPU.prototype.switchDimInternal = function (t, newDim) {
        var newShape = new Array(t.rank);
        for (var i = 0; i < newShape.length; i++) {
            newShape[i] = t.shape[newDim[i]];
        }
        var resultValues = new Float32Array(t.size);
        var values = t.getValues();
        var result = ndarray_1.NDArray.make(newShape, { values: resultValues });
        for (var i = 0; i < t.size; ++i) {
            var loc = t.indexToLoc(i);
            var newLoc = new Array(loc.length);
            for (var i_1 = 0; i_1 < newLoc.length; i_1++) {
                newLoc[i_1] = loc[newDim[i_1]];
            }
            var newIndex = result.locToIndex(newLoc);
            resultValues[newIndex] = values[i];
        }
        return result;
    };
    NDArrayMathCPU.prototype.pool = function (x, fSize, stride, pad, poolType) {
        var _a = x.shape, xRows = _a[0], xCols = _a[1], depth = _a[2];
        var outputShape = conv_util.computeOutputShape3D([xRows, xCols, depth], fSize, depth, stride, pad);
        var y = ndarray_1.Array3D.zeros(outputShape);
        for (var d = 0; d < depth; ++d) {
            for (var yR = 0; yR < y.shape[0]; ++yR) {
                var xRCorner = yR * stride - pad;
                var xRMin = Math.max(0, xRCorner);
                var xRMax = Math.min(xRows, fSize + xRCorner);
                for (var yC = 0; yC < y.shape[1]; ++yC) {
                    var xCCorner = yC * stride - pad;
                    var xCMin = Math.max(0, xCCorner);
                    var xCMax = Math.min(xCols, fSize + xCCorner);
                    var minMaxValue = (poolType === 'max' ? Number.NEGATIVE_INFINITY :
                        Number.POSITIVE_INFINITY);
                    var avgValue = 0;
                    for (var xR = xRMin; xR < xRMax; ++xR) {
                        var wR = xR - xRCorner;
                        for (var xC = xCMin; xC < xCMax; ++xC) {
                            var wC = xC - xCCorner;
                            var pixel = x.get(xR, xC, d);
                            if (isNaN(pixel)) {
                                minMaxValue = NaN;
                                avgValue = NaN;
                                break;
                            }
                            if ((poolType === 'max' && pixel > minMaxValue) ||
                                (poolType === 'min' && pixel < minMaxValue)) {
                                minMaxValue = pixel;
                            }
                            else if (poolType === 'avg') {
                                avgValue += pixel / (fSize * fSize);
                            }
                        }
                        if (isNaN(minMaxValue)) {
                            break;
                        }
                    }
                    y.set(poolType === 'avg' ? avgValue : minMaxValue, yR, yC, d);
                }
            }
        }
        return y;
    };
    NDArrayMathCPU.prototype.maxPoolInternal = function (x, fSize, stride, pad) {
        return this.pool(x, fSize, stride, pad, 'max');
    };
    NDArrayMathCPU.prototype.maxPoolPositions = function (x, fSize, stride, pad) {
        var _a = x.shape, xRows = _a[0], xCols = _a[1], depth = _a[2];
        var outputShape = conv_util.computeOutputShape3D(x.shape, fSize, depth, stride, pad);
        var maxPositions = ndarray_1.Array3D.zeros(outputShape);
        for (var d = 0; d < depth; ++d) {
            for (var yR = 0; yR < outputShape[0]; ++yR) {
                var xRCorner = yR * stride - pad;
                var xRMin = Math.max(0, xRCorner);
                var xRMax = Math.min(xRows, fSize + xRCorner);
                for (var yC = 0; yC < outputShape[1]; ++yC) {
                    var xCCorner = yC * stride - pad;
                    var xCMin = Math.max(0, xCCorner);
                    var xCMax = Math.min(xCols, fSize + xCCorner);
                    var maxValue = Number.NEGATIVE_INFINITY;
                    var maxPosition = -1;
                    for (var xR = xRMin; xR < xRMax; ++xR) {
                        var wR = xR - xRCorner;
                        for (var xC = xCMin; xC < xCMax; ++xC) {
                            var wC = xC - xCCorner;
                            var pixel = x.get(xR, xC, d);
                            if (pixel > maxValue) {
                                maxValue = pixel;
                                maxPosition = wR * fSize + wC;
                            }
                        }
                    }
                    maxPositions.set(maxPosition, yR, yC, d);
                }
            }
        }
        return maxPositions;
    };
    NDArrayMathCPU.prototype.maxPoolBackpropInternal = function (dy, x, fSize, origStride, origPad) {
        var maxPositions = this.maxPoolPositions(x, fSize, origStride, origPad);
        var pad = fSize - 1 - origPad;
        var _a = dy.shape, dyRows = _a[0], dyCols = _a[1], depth = _a[2];
        var dyRowsDilated = (dyRows - 1) * origStride + 1;
        var dxColsDilated = (dyCols - 1) * origStride + 1;
        var outputShape = conv_util.computeOutputShape3D([dyRowsDilated, dxColsDilated, depth], fSize, depth, 1, pad);
        var dx = ndarray_1.Array3D.zeros(outputShape);
        for (var d = 0; d < depth; ++d) {
            for (var dxR = 0; dxR < dx.shape[0]; ++dxR) {
                for (var dxC = 0; dxC < dx.shape[1]; ++dxC) {
                    var dyRCorner = dxR - pad;
                    var dyCCorner = dxC - pad;
                    var dotProd = 0;
                    for (var wR = 0; wR < fSize; ++wR) {
                        var dyR = (dyRCorner + wR) / origStride;
                        if (dyR < 0 || dyR >= dyRows || Math.floor(dyR) !== dyR) {
                            continue;
                        }
                        for (var wC = 0; wC < fSize; ++wC) {
                            var dyC = (dyCCorner + wC) / origStride;
                            if (dyC < 0 || dyC >= dyCols || Math.floor(dyC) !== dyC) {
                                continue;
                            }
                            var maxPos = fSize * fSize - 1 - maxPositions.get(dyR, dyC, d);
                            var curPos = wR * fSize + wC;
                            var mask = maxPos === curPos ? 1 : 0;
                            if (mask === 0) {
                                continue;
                            }
                            var pixel = dy.get(dyR, dyC, d);
                            dotProd += pixel * mask;
                        }
                    }
                    dx.set(dotProd, dxR, dxC, d);
                }
            }
        }
        return dx;
    };
    NDArrayMathCPU.prototype.minPoolInternal = function (x, fSize, stride, pad) {
        return this.pool(x, fSize, stride, pad, 'min');
    };
    NDArrayMathCPU.prototype.avgPoolInternal = function (x, fSize, stride, pad) {
        return this.pool(x, fSize, stride, pad, 'avg');
    };
    NDArrayMathCPU.prototype.resizeBilinear3DInternal = function (x, newShape2D, alignCorners) {
        var output = ndarray_1.Array3D.zeros([newShape2D[0], newShape2D[1], x.shape[2]]);
        var effectiveInputSize = alignCorners ? [x.shape[0] - 1, x.shape[1] - 1, x.shape[2]] : x.shape;
        var effectiveOutputSize = alignCorners ?
            [output.shape[0] - 1, output.shape[1] - 1, output.shape[2]] :
            output.shape;
        for (var r = 0; r < output.shape[0]; r++) {
            for (var c = 0; c < output.shape[1]; c++) {
                for (var d = 0; d < output.shape[2]; d++) {
                    var sourceFracRow = (effectiveInputSize[0]) * r / (effectiveOutputSize[0]);
                    var sourceFracCol = (effectiveInputSize[1]) * c / (effectiveOutputSize[1]);
                    var sourceRowFloor = Math.floor(sourceFracRow);
                    var sourceRowCeil = Math.min(x.shape[0] - 1, Math.ceil(sourceFracRow));
                    var sourceColFloor = Math.floor(sourceFracCol);
                    var sourceColCeil = Math.min(x.shape[1] - 1, Math.ceil(sourceFracCol));
                    var topLeft = x.get(sourceRowFloor, sourceColFloor, d);
                    var bottomLeft = x.get(sourceRowCeil, sourceColFloor, d);
                    var topRight = x.get(sourceRowFloor, sourceColCeil, d);
                    var bottomRight = x.get(sourceRowCeil, sourceColCeil, d);
                    var rowFrac = sourceFracRow - sourceRowFloor;
                    var colFrac = sourceFracCol - sourceColFloor;
                    var top_1 = topLeft + (topRight - topLeft) * colFrac;
                    var bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;
                    var newValue = top_1 + (bottom - top_1) * rowFrac;
                    output.set(newValue, r, c, d);
                }
            }
        }
        return output;
    };
    NDArrayMathCPU.prototype.batchNormalization3DInternal = function (x, mean, variance, varianceEpsilon, scale, offset) {
        if (varianceEpsilon === void 0) { varianceEpsilon = .001; }
        var xValues = x.getValues();
        var meanValues = mean.getValues();
        var varianceValues = variance.getValues();
        var scaleValues = scale ? scale.getValues() : new Float32Array([1]);
        var offsetValues = offset ? offset.getValues() : new Float32Array([0]);
        var outValues = new Float32Array(xValues.length);
        for (var i = 0; i < xValues.length; i++) {
            outValues[i] = offsetValues[i % offsetValues.length] +
                (xValues[i] - meanValues[i % meanValues.length]) *
                    scaleValues[i % scaleValues.length] /
                    Math.sqrt(varianceValues[i % varianceValues.length] + varianceEpsilon);
        }
        return ndarray_1.NDArray.make(x.shape, { values: outValues });
    };
    return NDArrayMathCPU;
}(math_1.NDArrayMath));
exports.NDArrayMathCPU = NDArrayMathCPU;

},{"../math/conv_util":20,"../util":90,"./concat3d_util":19,"./copy2d_util":21,"./math":23,"./ndarray":26}],25:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var util = require("../util");
var concat3d_util = require("./concat3d_util");
var conv_util = require("./conv_util");
var math_1 = require("./math");
var ndarray = require("./ndarray");
var ndarray_1 = require("./ndarray");
var addscaledmat_gpu = require("./webgl/addscaledmat_gpu");
var addsubmuldiv_gpu = require("./webgl/addsubmuldiv_gpu");
var addsubmuldiv_gpu_1 = require("./webgl/addsubmuldiv_gpu");
var argmaxequals_gpu = require("./webgl/argmaxequals_gpu");
var argminmax_gpu = require("./webgl/argminmax_gpu");
var avg_pool_gpu = require("./webgl/avg_pool_gpu");
var batchnorm_gpu = require("./webgl/batchnorm_gpu");
var concat3d_gpu = require("./webgl/concat3d_gpu");
var conv_backprop_gpu = require("./webgl/conv_backprop_gpu");
var conv_gpu = require("./webgl/conv_gpu");
var copy_gpu = require("./webgl/copy_gpu");
var exp_gpu = require("./webgl/exp_gpu");
var gpgpu_context_1 = require("./webgl/gpgpu_context");
var gpgpu_util = require("./webgl/gpgpu_util");
var log_gpu = require("./webgl/log_gpu");
var logsumexp_gpu = require("./webgl/logsumexp_gpu");
var max_pool_backprop_gpu = require("./webgl/max_pool_backprop_gpu");
var max_pool_gpu = require("./webgl/max_pool_gpu");
var min_pool_gpu = require("./webgl/min_pool_gpu");
var minmax_gpu = require("./webgl/minmax_gpu");
var mulmat_gpu = require("./webgl/mulmat_gpu");
var neg_gpu = require("./webgl/neg_gpu");
var pool_gpu = require("./webgl/pool_gpu");
var reducesum_gpu = require("./webgl/reducesum_gpu");
var relu_gpu = require("./webgl/relu_gpu");
var reshape_gpu = require("./webgl/reshape_gpu");
var resize_bilinear_gpu = require("./webgl/resize_bilinear_gpu");
var shader_compiler = require("./webgl/shader_compiler");
var sigmoid_gpu = require("./webgl/sigmoid_gpu");
var step_gpu = require("./webgl/step_gpu");
var texture_manager_1 = require("./webgl/texture_manager");
var trig_gpu = require("./webgl/trig_gpu");
var webgl_util = require("./webgl/webgl_util");
var ARGMAX_PROG = 'argmax';
var ARGMAX_EQUALS_PROG = 'argmaxequals';
var ARGMIN_PROG = 'argmin';
var BATCHNORM_PROG = 'batchnorm';
var COPY_PROG = 'copy';
var CONCAT_PROG = 'concat';
var ADD_SCALED_MAT_PROG = 'addscaledmat';
var MATMUL_PROG = 'matmul';
var RELU_PROG = 'relu';
var TANH_PROG = 'tanh';
var SIN_PROG = 'sin';
var SIGMOID_PROG = 'sigmoid';
var MAX_PROG = 'max';
var MIN_PROG = 'min';
var NEG_PROG = 'neg';
var EXP_PROG = 'exp';
var LOG_PROG = 'log';
var SUM_PROG = 'sum';
var STEP_PROG = 'step';
var LOGSUMEXP_PROG = 'logsumexp';
var RESHAPE_PROG = 'reshape';
var ADD_SUM_MUL_DIV_PROG = 'addsummuldiv';
var CONV2D_PROG = 'conv';
var CONV2D_TRANSPOSE_PROG = 'conv_transpose';
var CONV2D_DERW_PROG = 'conv_derw';
var CONV2D_DERB_PROG = 'conv_derb';
var MAX_POOL_PROG = 'maxpool';
var MAX_POOL_POSITIONS_PROG = 'maxpool_posn';
var MAX_POOL_BACKPROP_PROG = 'maxpool_backprop';
var MIN_POOL_PROG = 'minpool';
var AVG_POOL_PROG = 'avgpool';
var RESIZE_BILINEAR_PROG = 'resizebilin';
function makeCopyProgramName(sourceShapeRowCol, sourceSizeRowCol, destSizeRowCol) {
    var shapeName = sourceShapeRowCol[0] + "_" + sourceShapeRowCol[1];
    var srcSizeName = sourceSizeRowCol[0] + "_" + sourceSizeRowCol[1];
    var dstSizeName = destSizeRowCol[0] + "_" + destSizeRowCol[1];
    return COPY_PROG + "_" + shapeName + "_" + srcSizeName + "_" + dstSizeName;
}
var NDArrayMathGPU = (function (_super) {
    __extends(NDArrayMathGPU, _super);
    function NDArrayMathGPU(gpgpu, safeMode) {
        if (safeMode === void 0) { safeMode = true; }
        var _this = _super.call(this, safeMode) || this;
        _this.programCache = {};
        if (gpgpu == null) {
            var gl = gpgpu_util.createWebGLContext();
            _this.gpgpu = new gpgpu_context_1.GPGPUContext(gl);
            _this.gpgpuCreatedLocally = true;
        }
        else {
            _this.gpgpu = gpgpu;
            _this.gpgpuCreatedLocally = false;
        }
        _this.textureManager = new texture_manager_1.TextureManager(_this.gpgpu);
        ndarray.initializeGPU(_this.gpgpu, _this.textureManager);
        return _this;
    }
    NDArrayMathGPU.prototype.getGPGPUContext = function () {
        return this.gpgpu;
    };
    NDArrayMathGPU.prototype.cloneInternal = function (ndarray) {
        var textureShapeRC = ndarray.getTextureShapeRC();
        var program = this.getAndSaveProgram(makeCopyProgramName(textureShapeRC, textureShapeRC, textureShapeRC), function () { return copy_gpu.getFragmentShaderSource(textureShapeRC, textureShapeRC, textureShapeRC); });
        var resultTexture = this.textureManager.acquireTexture(textureShapeRC);
        copy_gpu.copy(this.gpgpu, program, ndarray.getTexture(), textureShapeRC, [0, 0], textureShapeRC, resultTexture, textureShapeRC, [0, 0], textureShapeRC);
        return ndarray_1.NDArray.make(ndarray.shape, { texture: resultTexture, textureShapeRC: textureShapeRC });
    };
    NDArrayMathGPU.prototype.reshapeInternal = function (ndarray, newShape) {
        var newTexShape;
        switch (newShape.length) {
            case 0:
                newTexShape = [1, 1];
                break;
            case 1:
                newTexShape = [newShape[0], 1];
                break;
            case 2:
                newTexShape = [newShape[0], newShape[1]];
                break;
            case 3:
                newTexShape = [newShape[0], newShape[1] * newShape[2]];
                break;
            default:
                throw Error("Reshapes into " + newShape.length + "-dim ndarray is not yet " +
                    "supported on GPU");
        }
        var actualTexShape = ndarray.getTextureShapeRC(newTexShape);
        var clonedArray;
        if (!util.arraysEqual(actualTexShape, newTexShape)) {
            clonedArray = this.reshapeTexture(ndarray, newTexShape);
        }
        else {
            clonedArray = this.cloneInternal(ndarray);
        }
        return clonedArray.reshape(newShape);
    };
    NDArrayMathGPU.prototype.slice2DInternal = function (input, beginRowCol, sizeRowCol) {
        var result = ndarray_1.NDArray.make(sizeRowCol, {
            texture: this.textureManager.acquireTexture(sizeRowCol),
            textureShapeRC: sizeRowCol
        });
        this.copy2DInternal(input, beginRowCol, sizeRowCol, result, [0, 0], sizeRowCol);
        return result;
    };
    NDArrayMathGPU.prototype.copy2DInternal = function (source, sourceBeginRowCol, sourceSizeRowCol, dest, destBeginRowCol, destSizeRowCol) {
        var sourceShapeRC = source.getTextureShapeRC();
        var destShapeRC = dest.getTextureShapeRC();
        var program = this.getAndSaveProgram(makeCopyProgramName(sourceShapeRC, sourceSizeRowCol, destSizeRowCol), function () { return copy_gpu.getFragmentShaderSource(sourceShapeRC, sourceSizeRowCol, destSizeRowCol); });
        copy_gpu.copy(this.gpgpu, program, source.getTexture(), sourceShapeRC, sourceBeginRowCol, sourceSizeRowCol, dest.getTexture(), destShapeRC, destBeginRowCol, destSizeRowCol);
    };
    NDArrayMathGPU.prototype.concat3DInternal = function (x1, x2, axis) {
        var x1TexShapeRC = conv_util.computeTexShapeFrom3D(x1.shape);
        var x2TexShapeRC = conv_util.computeTexShapeFrom3D(x2.shape);
        var actualX1TexShape = x1.getTextureShapeRC(x1TexShapeRC);
        var cleanupX1 = false;
        if (!util.arraysEqual(actualX1TexShape, x1TexShapeRC)) {
            x1 = this.reshapeTexture(x1, x1TexShapeRC);
            cleanupX1 = true;
        }
        var actualX2TexShape = x2.getTextureShapeRC(x2TexShapeRC);
        var cleanupX2 = false;
        if (!util.arraysEqual(actualX2TexShape, x2TexShapeRC)) {
            x2 = this.reshapeTexture(x2, x2TexShapeRC);
            cleanupX2 = true;
        }
        var resultShapeRCD = concat3d_util.computeConcat3DOutputShape(x1.shape, x2.shape, axis);
        var program = this.getAndSaveProgram(CONCAT_PROG + "_" + x1.shape + "_" + x2.shape + "_" + axis, function () { return concat3d_gpu.getFragmentShaderSource(x1.shape, x2.shape, resultShapeRCD, axis); });
        var resultTexShape = conv_util.computeTexShapeFrom3D(resultShapeRCD);
        var resultTex = this.textureManager.acquireTexture(resultTexShape);
        concat3d_gpu.concat3D(this.gpgpu, program, x1.getTexture(), x2.getTexture(), resultTex, resultTexShape);
        if (cleanupX1) {
            x1.dispose();
        }
        if (cleanupX2) {
            x2.dispose();
        }
        return ndarray_1.NDArray.make(resultShapeRCD, { texture: resultTex, textureShapeRC: resultTexShape });
    };
    NDArrayMathGPU.prototype.scalarPlusArrayInternal = function (c, a) {
        return this.addSubMulDiv(c, a, a.shape, addsubmuldiv_gpu_1.OperandType.SCALAR, '+', addsubmuldiv_gpu_1.OperandType.MATRIX);
    };
    NDArrayMathGPU.prototype.arrayMinusScalarInternal = function (a, c) {
        return this.addSubMulDiv(a, c, a.shape, addsubmuldiv_gpu_1.OperandType.MATRIX, '-', addsubmuldiv_gpu_1.OperandType.SCALAR);
    };
    NDArrayMathGPU.prototype.scalarMinusArrayInternal = function (c, a) {
        return this.addSubMulDiv(c, a, a.shape, addsubmuldiv_gpu_1.OperandType.SCALAR, '-', addsubmuldiv_gpu_1.OperandType.MATRIX);
    };
    NDArrayMathGPU.prototype.scaledArrayAddInternal = function (c1, a, c2, b) {
        var cleanupB = false;
        if (!this.doGPUShapesMatch(a, b)) {
            b = this.reshapeTexture(b, a.getTextureShapeRC());
            cleanupB = true;
        }
        var program = this.getAndSaveProgram(ADD_SCALED_MAT_PROG, function () { return addscaledmat_gpu.getFragmentShaderSource(); });
        var textureShapeRC = a.getTextureShapeRC();
        var resultTexture = this.textureManager.acquireTexture(textureShapeRC);
        addscaledmat_gpu.addScaledMatrices(this.gpgpu, program, a.getTexture(), b.getTexture(), textureShapeRC[0], textureShapeRC[1], c1.getTexture(), c2.getTexture(), resultTexture);
        if (cleanupB) {
            b.dispose();
        }
        return ndarray_1.NDArray.make(a.shape, { texture: resultTexture, textureShapeRC: textureShapeRC });
    };
    NDArrayMathGPU.prototype.scalarTimesArrayInternal = function (c, a) {
        return this.addSubMulDiv(c, a, a.shape, addsubmuldiv_gpu_1.OperandType.SCALAR, '*', addsubmuldiv_gpu_1.OperandType.MATRIX);
    };
    NDArrayMathGPU.prototype.negInternal = function (a) {
        var program = this.getAndSaveProgram(NEG_PROG, function () { return neg_gpu.getFragmentShaderSource(); });
        var textureShapeRC = a.getTextureShapeRC();
        var resultTexture = this.textureManager.acquireTexture(textureShapeRC);
        neg_gpu.neg(this.gpgpu, program, a.getTexture(), textureShapeRC[0], textureShapeRC[1], resultTexture);
        return ndarray_1.NDArray.make(a.shape, { texture: resultTexture, textureShapeRC: textureShapeRC });
    };
    NDArrayMathGPU.prototype.reshapeTexture = function (a, newTextureShape) {
        var aTexShape = a.getTextureShapeRC();
        var program = this.getAndSaveProgram(RESHAPE_PROG, function () { return reshape_gpu.getFragmentShaderSource(); });
        var resultTexture = this.textureManager.acquireTexture(newTextureShape);
        reshape_gpu.reshape(this.gpgpu, program, a.getTexture(), aTexShape[0], aTexShape[1], resultTexture, newTextureShape[0], newTextureShape[1]);
        return ndarray_1.NDArray.make(a.shape, { texture: resultTexture, textureShapeRC: newTextureShape });
    };
    NDArrayMathGPU.prototype.matMulInternal = function (a, b, aOrientation, bOrientation) {
        var sharedDim = (aOrientation === math_1.MatrixOrientation.REGULAR) ? a.shape[1] : a.shape[0];
        var outerShapeA = (aOrientation === math_1.MatrixOrientation.REGULAR) ? a.shape[0] : a.shape[1];
        var outerShapeB = (bOrientation === math_1.MatrixOrientation.REGULAR) ? b.shape[1] : b.shape[0];
        var outShape = [outerShapeA, outerShapeB];
        var outTexShape = webgl_util.getTextureShapeFromLogicalShape(this.gpgpu.gl, outShape);
        var outTexture = this.textureManager.acquireTexture(outTexShape);
        var out = new ndarray_1.Array2D(outShape, { texture: outTexture, textureShapeRC: outTexShape });
        var key = shader_compiler.makeShaderKey([a, b], out);
        var program = this.getAndSaveProgram(MATMUL_PROG + "_" + key + "_" + aOrientation + "_" + bOrientation, function () { return mulmat_gpu.getFragmentShader(a, b, out, aOrientation, bOrientation); });
        mulmat_gpu.multiplyMatrix(this.gpgpu, program, a.getTexture(), b.getTexture(), outTexture, outTexShape);
        return out;
    };
    NDArrayMathGPU.prototype.elementWiseMulInternal = function (a, b) {
        return this.addSubMulDiv(a, b, a.shape, addsubmuldiv_gpu_1.OperandType.MATRIX, '*', addsubmuldiv_gpu_1.OperandType.MATRIX);
    };
    NDArrayMathGPU.prototype.elementWiseMulBroadcastInternal = function (a, b) {
        throw new Error('Not yet implemented!');
    };
    NDArrayMathGPU.prototype.batchNormalization3DInternal = function (x, mean, variance, varianceEpsilon, scale, offset) {
        var xTexShape = x.getTextureShapeRC();
        var cleanupMean = false;
        var preferredMeanTexShape = mean.rank === 1 ? [1, mean.size] : xTexShape;
        var meanTexShape = mean.getTextureShapeRC(preferredMeanTexShape);
        if (!util.arraysEqual(meanTexShape, preferredMeanTexShape)) {
            mean = this.reshapeTexture(mean, preferredMeanTexShape);
            meanTexShape = preferredMeanTexShape;
            cleanupMean = true;
        }
        var cleanupVariance = false;
        var preferredVarianceTexShape = variance.rank === 1 ? [1, variance.size] : xTexShape;
        var varianceTexShape = variance.getTextureShapeRC(preferredMeanTexShape);
        if (!util.arraysEqual(varianceTexShape, preferredVarianceTexShape)) {
            variance = this.reshapeTexture(variance, preferredVarianceTexShape);
            varianceTexShape = preferredVarianceTexShape;
            cleanupVariance = true;
        }
        var scaleTexShape = null;
        var cleanupScale = false;
        if (scale != null) {
            var preferredScaleTexShape = scale.rank === 1 ? [1, scale.size] : xTexShape;
            scaleTexShape = scale.getTextureShapeRC(preferredScaleTexShape);
            if (!util.arraysEqual(scaleTexShape, preferredScaleTexShape)) {
                scale = this.reshapeTexture(scale, preferredScaleTexShape);
                scaleTexShape = preferredScaleTexShape;
                cleanupScale = true;
            }
        }
        var offsetTexShape = null;
        var cleanupOffset = false;
        if (offset != null) {
            var preferredOffsetTexShape = offset.rank === 1 ? [1, offset.size] : xTexShape;
            offsetTexShape = offset.getTextureShapeRC(preferredOffsetTexShape);
            if (!util.arraysEqual(offsetTexShape, preferredOffsetTexShape)) {
                offset = this.reshapeTexture(offset, preferredOffsetTexShape);
                offsetTexShape = preferredOffsetTexShape;
                cleanupOffset = true;
            }
        }
        var resultTexShape = x.getTextureShapeRC();
        var program = this.getAndSaveProgram(BATCHNORM_PROG + "_" + xTexShape + "_" + meanTexShape + "_" + varianceTexShape + "_" +
            (scaleTexShape + "_" + offsetTexShape + "_" + varianceEpsilon), function () { return batchnorm_gpu.getFragmentShaderSource(xTexShape, meanTexShape, varianceTexShape, offsetTexShape, scaleTexShape, varianceEpsilon); });
        var resultTexture = this.textureManager.acquireTexture(resultTexShape);
        batchnorm_gpu.batchNormalization(this.gpgpu, program, x.getTexture(), xTexShape, mean.getTexture(), meanTexShape, variance.getTexture(), varianceTexShape, offset != null ? offset.getTexture() : null, offset != null ? offsetTexShape : null, scale != null ? scale.getTexture() : null, scale != null ? scaleTexShape : null, resultTexture, resultTexShape);
        if (cleanupMean) {
            mean.dispose();
        }
        if (cleanupVariance) {
            variance.dispose();
        }
        if (cleanupScale) {
            scale.dispose();
        }
        if (cleanupOffset) {
            offset.dispose();
        }
        return ndarray_1.NDArray.make(x.shape, { texture: resultTexture, textureShapeRC: resultTexShape });
    };
    NDArrayMathGPU.prototype.switchDimInternal = function (a, newDim) {
        throw new Error('Not yet implemented!');
    };
    NDArrayMathGPU.prototype.sumInternal = function (ndarray) {
        var textureShapeRC = ndarray.getTextureShapeRC();
        var numRows = textureShapeRC[0], numColumns = textureShapeRC[1];
        var program = this.getAndSaveProgram(SUM_PROG + "_" + numRows + "_" + numColumns, function () { return reducesum_gpu.getFragmentShaderSource(numRows, numColumns); });
        var resultTexture = this.textureManager.acquireTexture([1, 1]);
        reducesum_gpu.reduceSum(this.gpgpu, program, ndarray.getTexture(), numRows, numColumns, resultTexture);
        return new ndarray_1.Scalar({ texture: resultTexture });
    };
    NDArrayMathGPU.prototype.argMinInternal = function (ndarray) {
        var textureShapeRC = ndarray.getTextureShapeRC();
        var numRows = textureShapeRC[0], numColumns = textureShapeRC[1];
        var program = this.getAndSaveProgram(ARGMIN_PROG + "_" + numRows + "_" + numColumns, function () { return argminmax_gpu.getArgMinFragmentShaderSource(numRows, numColumns); });
        var resultTexture = this.textureManager.acquireTexture([1, 1]);
        argminmax_gpu.argMinMax(this.gpgpu, program, ndarray.getTexture(), numRows, numColumns, resultTexture);
        return new ndarray_1.Scalar({ texture: resultTexture });
    };
    NDArrayMathGPU.prototype.argMaxInternal = function (ndarray) {
        var textureShapeRC = ndarray.getTextureShapeRC();
        var numRows = textureShapeRC[0], numColumns = textureShapeRC[1];
        var program = this.getAndSaveProgram(ARGMAX_PROG + "_" + numRows + "_" + numColumns, function () { return argminmax_gpu.getArgMaxFragmentShaderSource(numRows, numColumns); });
        var resultTexture = this.textureManager.acquireTexture([1, 1]);
        argminmax_gpu.argMinMax(this.gpgpu, program, ndarray.getTexture(), numRows, numColumns, resultTexture);
        return new ndarray_1.Scalar({ texture: resultTexture });
    };
    NDArrayMathGPU.prototype.argMaxEqualsInternal = function (x1, x2) {
        var actualX1TexShape = x1.getTextureShapeRC();
        var actualX2TexShape = x2.getTextureShapeRC();
        var cleanupX2 = false;
        if (!util.arraysEqual(actualX1TexShape, actualX2TexShape)) {
            x2 = this.reshapeTexture(x2, actualX1TexShape);
            cleanupX2 = true;
        }
        var textureShapeRC = x1.getTextureShapeRC();
        var numRows = textureShapeRC[0], numColumns = textureShapeRC[1];
        var program = this.getAndSaveProgram(ARGMAX_EQUALS_PROG + "_" + numRows + "_" + numColumns, function () { return argmaxequals_gpu.getArgMaxEqualsFragmentShaderSource(numRows, numColumns); });
        var resultTexture = this.textureManager.acquireTexture([1, 1]);
        argmaxequals_gpu.argMaxEquals(this.gpgpu, program, x1.getTexture(), x2.getTexture(), numRows, numColumns, resultTexture);
        if (cleanupX2) {
            x2.dispose();
        }
        return new ndarray_1.Scalar({ texture: resultTexture });
    };
    NDArrayMathGPU.prototype.topKInternal = function (ndarray, k) {
        throw new Error('topK GPU not yet implemented!');
    };
    NDArrayMathGPU.prototype.minInternal = function (ndarray) {
        var textureShapeRC = ndarray.getTextureShapeRC();
        var numRows = textureShapeRC[0], numColumns = textureShapeRC[1];
        var program = this.getAndSaveProgram(MIN_PROG + "_" + numRows + "_" + numColumns, function () { return minmax_gpu.getMinFragmentShaderSource(numRows, numColumns); });
        var resultTexture = this.textureManager.acquireTexture([1, 1]);
        minmax_gpu.minMax(this.gpgpu, program, ndarray.getTexture(), numRows, numColumns, resultTexture);
        return new ndarray_1.Scalar({ texture: resultTexture });
    };
    NDArrayMathGPU.prototype.maxInternal = function (ndarray) {
        var textureShapeRC = ndarray.getTextureShapeRC();
        var numRows = textureShapeRC[0], numColumns = textureShapeRC[1];
        var program = this.getAndSaveProgram(MAX_PROG + "_" + numRows + "_" + numColumns, function () { return minmax_gpu.getMaxFragmentShaderSource(numRows, numColumns); });
        var resultTexture = this.textureManager.acquireTexture([1, 1]);
        minmax_gpu.minMax(this.gpgpu, program, ndarray.getTexture(), numRows, numColumns, resultTexture);
        return new ndarray_1.Scalar({ texture: resultTexture });
    };
    NDArrayMathGPU.prototype.divideInternal = function (a, b) {
        return this.addSubMulDiv(a, b, a.shape, addsubmuldiv_gpu_1.OperandType.MATRIX, '/', addsubmuldiv_gpu_1.OperandType.MATRIX);
    };
    NDArrayMathGPU.prototype.scalarDividedByArrayInternal = function (c, a) {
        return this.addSubMulDiv(c, a, a.shape, addsubmuldiv_gpu_1.OperandType.SCALAR, '/', addsubmuldiv_gpu_1.OperandType.MATRIX);
    };
    NDArrayMathGPU.prototype.arrayDividedByScalarInternal = function (a, c) {
        return this.addSubMulDiv(a, c, a.shape, addsubmuldiv_gpu_1.OperandType.MATRIX, '/', addsubmuldiv_gpu_1.OperandType.SCALAR);
    };
    NDArrayMathGPU.prototype.addInternal = function (a, b) {
        return this.addSubMulDiv(a, b, a.shape, addsubmuldiv_gpu_1.OperandType.MATRIX, '+', addsubmuldiv_gpu_1.OperandType.MATRIX);
    };
    NDArrayMathGPU.prototype.subInternal = function (a, b) {
        return this.addSubMulDiv(a, b, a.shape, addsubmuldiv_gpu_1.OperandType.MATRIX, '-', addsubmuldiv_gpu_1.OperandType.MATRIX);
    };
    NDArrayMathGPU.prototype.logSumExpInternal = function (ndarray) {
        var _a = ndarray.getTextureShapeRC(), numRows = _a[0], numColumns = _a[1];
        var program = this.getAndSaveProgram(LOGSUMEXP_PROG + "_" + numRows + "_" + numColumns, function () { return logsumexp_gpu.getFragmentShaderSource(numRows, numColumns); });
        var result = new ndarray_1.Scalar({ texture: this.textureManager.acquireTexture([1, 1]) });
        reducesum_gpu.reduceSum(this.gpgpu, program, ndarray.getTexture(), numRows, numColumns, result.getTexture());
        return result;
    };
    NDArrayMathGPU.prototype.expInternal = function (ndarray) {
        var program = this.getAndSaveProgram(EXP_PROG, function () { return exp_gpu.getFragmentShaderSource(); });
        var textureShapeRC = ndarray.getTextureShapeRC();
        var resultTexture = this.textureManager.acquireTexture(textureShapeRC);
        exp_gpu.exp(this.gpgpu, program, ndarray.getTexture(), textureShapeRC[0], textureShapeRC[1], resultTexture);
        return ndarray_1.NDArray.make(ndarray.shape, { texture: resultTexture, textureShapeRC: textureShapeRC });
    };
    NDArrayMathGPU.prototype.logInternal = function (ndarray) {
        var program = this.getAndSaveProgram(LOG_PROG, function () { return log_gpu.getFragmentShaderSource(); });
        var textureShapeRC = ndarray.getTextureShapeRC();
        var resultTexture = this.textureManager.acquireTexture(textureShapeRC);
        log_gpu.log(this.gpgpu, program, ndarray.getTexture(), textureShapeRC[0], textureShapeRC[1], resultTexture);
        return ndarray_1.NDArray.make(ndarray.shape, { texture: resultTexture, textureShapeRC: textureShapeRC });
    };
    NDArrayMathGPU.prototype.reluInternal = function (ndarray) {
        var program = this.getAndSaveProgram(RELU_PROG, function () { return relu_gpu.getFragmentShaderSource(); });
        var textureShapeRC = ndarray.getTextureShapeRC();
        var resultTexture = this.textureManager.acquireTexture(textureShapeRC);
        relu_gpu.relu(this.gpgpu, program, ndarray.getTexture(), textureShapeRC[0], textureShapeRC[1], resultTexture);
        return ndarray_1.NDArray.make(ndarray.shape, { texture: resultTexture, textureShapeRC: textureShapeRC });
    };
    NDArrayMathGPU.prototype.sigmoidInternal = function (ndarray) {
        var program = this.getAndSaveProgram(SIGMOID_PROG, function () { return sigmoid_gpu.getSigmoidFragmentShaderSource(); });
        var textureShapeRC = ndarray.getTextureShapeRC();
        var resultTexture = this.textureManager.acquireTexture(textureShapeRC);
        sigmoid_gpu.sigmoid(this.gpgpu, program, ndarray.getTexture(), textureShapeRC[0], textureShapeRC[1], resultTexture);
        return ndarray_1.NDArray.make(ndarray.shape, { texture: resultTexture, textureShapeRC: textureShapeRC });
    };
    NDArrayMathGPU.prototype.tanhInternal = function (ndarray) {
        var program = this.getAndSaveProgram(TANH_PROG, function () { return trig_gpu.getTanhFragmentShaderSource(); });
        var textureShapeRC = ndarray.getTextureShapeRC();
        var resultTexture = this.textureManager.acquireTexture(textureShapeRC);
        trig_gpu.tanh(this.gpgpu, program, ndarray.getTexture(), textureShapeRC[0], textureShapeRC[1], resultTexture);
        return ndarray_1.NDArray.make(ndarray.shape, { texture: resultTexture, textureShapeRC: textureShapeRC });
    };
    NDArrayMathGPU.prototype.sinInternal = function (ndarray) {
        var program = this.getAndSaveProgram(SIN_PROG, function () { return trig_gpu.getSinFragmentShaderSource(); });
        var textureShapeRC = ndarray.getTextureShapeRC();
        var resultTexture = this.textureManager.acquireTexture(textureShapeRC);
        trig_gpu.sin(this.gpgpu, program, ndarray.getTexture(), textureShapeRC[0], textureShapeRC[1], resultTexture);
        return ndarray_1.NDArray.make(ndarray.shape, { texture: resultTexture, textureShapeRC: textureShapeRC });
    };
    NDArrayMathGPU.prototype.stepInternal = function (ndarray) {
        var program = this.getAndSaveProgram(STEP_PROG, function () { return step_gpu.getFragmentShaderSource(); });
        var textureShapeRC = ndarray.getTextureShapeRC();
        var resultTexture = this.textureManager.acquireTexture(textureShapeRC);
        step_gpu.step(this.gpgpu, program, ndarray.getTexture(), textureShapeRC[0], textureShapeRC[1], resultTexture);
        return ndarray_1.NDArray.make(ndarray.shape, { texture: resultTexture, textureShapeRC: textureShapeRC });
    };
    NDArrayMathGPU.prototype.conv2dInternal = function (x, weights, biases, stride, zeroPad) {
        var fieldSize = weights.shape[0];
        var inputDepth = weights.shape[2];
        var outputDepth = weights.shape[3];
        var progKey = [
            CONV2D_PROG, x.shape, outputDepth, fieldSize, stride, biases != null
        ].join('_');
        var program = this.getAndSaveProgram(progKey, function () {
            return conv_gpu.getFragmentShaderSource(x.shape, outputDepth, fieldSize, stride, zeroPad, biases != null);
        });
        var xTexShape = conv_util.computeTexShapeFrom3D(x.shape);
        var wTexShape = conv_util.computeWeightsTexShape(inputDepth, outputDepth, fieldSize);
        var biasTexShape = conv_util.computeBiasesTexShape(outputDepth);
        var actualXTexShape = x.getTextureShapeRC(xTexShape);
        var cleanupX = false;
        if (!util.arraysEqual(actualXTexShape, xTexShape)) {
            x = this.reshapeTexture(x, xTexShape);
            cleanupX = true;
        }
        var cleanupW = false;
        var actualWTexShape = weights.getTextureShapeRC(wTexShape);
        if (!util.arraysEqual(actualWTexShape, wTexShape)) {
            weights = this.reshapeTexture(weights, wTexShape);
            cleanupW = true;
        }
        var cleanupB = false;
        if (biases != null) {
            var actualBTexShape = biases.getTextureShapeRC(biasTexShape);
            if (!util.arraysEqual(actualBTexShape, biasTexShape)) {
                biases = this.reshapeTexture(biases, biasTexShape);
                cleanupB = true;
            }
        }
        var resultShape = conv_util.computeOutputShape3D(x.shape, fieldSize, outputDepth, stride, zeroPad);
        var resultTexShape = conv_util.computeTexShapeFrom3D(resultShape);
        var resultTex = this.textureManager.acquireTexture(resultTexShape);
        conv_gpu.convolve(this.gpgpu, program, x.getTexture(), weights.getTexture(), biases != null ? biases.getTexture() : null, resultTex, resultTexShape);
        if (cleanupX) {
            x.dispose();
        }
        if (cleanupW) {
            weights.dispose();
        }
        if (cleanupB && biases != null) {
            biases.dispose();
        }
        return ndarray_1.NDArray.make(resultShape, { texture: resultTex, textureShapeRC: resultTexShape });
    };
    NDArrayMathGPU.prototype.conv2dBackPropInternal = function (x, dy, weights, stride, pad) {
        var fSize = weights.shape[0];
        var inputDepth = weights.shape[2];
        var outputDepth = weights.shape[3];
        var xTexShape = conv_util.computeTexShapeFrom3D(x.shape);
        var wTexShape = conv_util.computeWeightsTexShape(inputDepth, outputDepth, fSize);
        var yTexShape = conv_util.computeTexShapeFrom3D(dy.shape);
        var cleanupX = false;
        var actualXTexShape = x.getTextureShapeRC(xTexShape);
        if (!util.arraysEqual(actualXTexShape, xTexShape)) {
            x = this.reshapeTexture(x, xTexShape);
            cleanupX = true;
        }
        var cleanupW = false;
        var actualWTexShape = weights.getTextureShapeRC(wTexShape);
        if (!util.arraysEqual(actualWTexShape, wTexShape)) {
            weights = this.reshapeTexture(weights, wTexShape);
            cleanupW = true;
        }
        var cleanupY = false;
        var actualYTexShape = dy.getTextureShapeRC(yTexShape);
        if (!util.arraysEqual(actualYTexShape, yTexShape)) {
            dy = this.reshapeTexture(dy, yTexShape);
            cleanupY = true;
        }
        var dw = this.conv2dDerWeights(x, dy, fSize, stride, pad);
        var db = this.conv2dDerBias(dy);
        var dx = this.conv2dTransposeInternal(dy, weights, null, stride, pad);
        if (cleanupX) {
            x.dispose();
        }
        if (cleanupW) {
            weights.dispose();
        }
        if (cleanupY) {
            dy.dispose();
        }
        return { dx: dx, db: db, dw: dw };
    };
    NDArrayMathGPU.prototype.conv2dTransposeInternal = function (x, weights, biases, origStride, origPad) {
        var origInputDepth = weights.shape[2];
        var origOutputDepth = weights.shape[3];
        var fieldSize = weights.shape[0];
        var progKey = [
            CONV2D_TRANSPOSE_PROG, x.shape, fieldSize, origInputDepth, origStride,
            origPad, biases != null
        ].join('_');
        var program = this.getAndSaveProgram(progKey, function () {
            return conv_backprop_gpu.getFragmentShaderConvTransposeSource(x.shape, fieldSize, origInputDepth, origStride, origPad, biases != null);
        });
        var xTexShape = conv_util.computeTexShapeFrom3D(x.shape);
        var wTexShape = conv_util.computeWeightsTexShape(origInputDepth, origOutputDepth, fieldSize);
        var biasTexShape = conv_util.computeBiasesTexShape(origInputDepth);
        var actualXTexShape = x.getTextureShapeRC(xTexShape);
        var cleanupX = false;
        if (!util.arraysEqual(actualXTexShape, xTexShape)) {
            x = this.reshapeTexture(x, xTexShape);
            cleanupX = true;
        }
        var cleanupW = false;
        var actualWTexShape = weights.getTextureShapeRC(wTexShape);
        if (!util.arraysEqual(actualWTexShape, wTexShape)) {
            weights = this.reshapeTexture(weights, wTexShape);
            cleanupW = true;
        }
        var cleanupB = false;
        if (biases != null) {
            var actualBiasTexShape = biases.getTextureShapeRC(biasTexShape);
            if (!util.arraysEqual(actualBiasTexShape, biasTexShape)) {
                biases = this.reshapeTexture(biases, biasTexShape);
                cleanupB = true;
            }
        }
        var dilatedRC = conv_util.computeDilatedRC([x.shape[0], x.shape[1]], origStride);
        var pad = fieldSize - 1 - origPad;
        var resultShape = conv_util.computeOutputShape3D([dilatedRC[0], dilatedRC[1], origOutputDepth], fieldSize, origInputDepth, 1, pad);
        var resultTexShape = conv_util.computeTexShapeFrom3D(resultShape);
        var resultTex = this.textureManager.acquireTexture(resultTexShape);
        conv_backprop_gpu.convTranspose(this.gpgpu, program, x.getTexture(), weights.getTexture(), biases != null ? biases.getTexture() : null, resultTex, resultTexShape);
        if (cleanupX) {
            x.dispose();
        }
        if (cleanupW) {
            weights.dispose();
        }
        if (cleanupB) {
            biases.dispose();
        }
        return ndarray_1.NDArray.make(resultShape, { texture: resultTex, textureShapeRC: resultTexShape });
    };
    NDArrayMathGPU.prototype.conv2dDerWeights = function (x, dY, fSize, stride, zeroPad) {
        var inputDepth = x.shape[2];
        var outputDepth = dY.shape[2];
        var progKey = [
            CONV2D_DERW_PROG, x.shape, fSize, outputDepth, stride, zeroPad
        ].join('_');
        var program = this.getAndSaveProgram(progKey, function () {
            return conv_backprop_gpu.getFragmentShaderDerWeightsSource(x.shape, fSize, outputDepth, stride, zeroPad);
        });
        var xTexShape = conv_util.computeTexShapeFrom3D(x.shape);
        var yShape = conv_util.computeOutputShape3D(x.shape, fSize, outputDepth, stride, zeroPad);
        var yTexShape = conv_util.computeTexShapeFrom3D(yShape);
        var actualXTexShape = x.getTextureShapeRC(xTexShape);
        var cleanupX = false;
        if (!util.arraysEqual(actualXTexShape, xTexShape)) {
            x = this.reshapeTexture(x, xTexShape);
            cleanupX = true;
        }
        var cleanupY = false;
        var actualYTexShape = dY.getTextureShapeRC(yTexShape);
        if (!util.arraysEqual(actualYTexShape, yTexShape)) {
            dY = this.reshapeTexture(dY, yTexShape);
            cleanupY = true;
        }
        var resultTexShape = conv_util.computeWeightsTexShape(inputDepth, outputDepth, fSize);
        var resultTex = this.textureManager.acquireTexture(resultTexShape);
        conv_backprop_gpu.derWeights(this.gpgpu, program, x.getTexture(), dY.getTexture(), resultTex, resultTexShape);
        if (cleanupX) {
            x.dispose();
        }
        if (cleanupY) {
            dY.dispose();
        }
        var weightsShape = conv_util.computeWeightsShape4D(inputDepth, outputDepth, fSize);
        return ndarray_1.NDArray.make(weightsShape, { texture: resultTex, textureShapeRC: resultTexShape });
    };
    NDArrayMathGPU.prototype.conv2dDerBias = function (dY) {
        var outputDepth = dY.shape[2];
        var progKey = [CONV2D_DERB_PROG, dY.shape].join('_');
        var program = this.getAndSaveProgram(progKey, function () {
            return conv_backprop_gpu.getFragmentShaderDerBiasSource(dY.shape);
        });
        var yTexShape = conv_util.computeTexShapeFrom3D(dY.shape);
        var cleanupY = false;
        var actualYTexShape = dY.getTextureShapeRC(yTexShape);
        if (!util.arraysEqual(actualYTexShape, yTexShape)) {
            dY = this.reshapeTexture(dY, yTexShape);
            cleanupY = true;
        }
        var resultTexShape = conv_util.computeBiasesTexShape(outputDepth);
        var resultTex = this.textureManager.acquireTexture(resultTexShape);
        conv_backprop_gpu.derBias(this.gpgpu, program, dY.getTexture(), resultTex, resultTexShape);
        if (cleanupY) {
            dY.dispose();
        }
        return ndarray_1.NDArray.make([outputDepth], { texture: resultTex, textureShapeRC: resultTexShape });
    };
    NDArrayMathGPU.prototype.pool = function (program, x, fSize, stride, pad) {
        var xTexShape = conv_util.computeTexShapeFrom3D(x.shape);
        var actualXTexShape = x.getTextureShapeRC(xTexShape);
        var cleanupX = false;
        if (!util.arraysEqual(actualXTexShape, xTexShape)) {
            x = this.reshapeTexture(x, xTexShape);
            cleanupX = true;
        }
        var resultShape = conv_util.computeOutputShape3D(x.shape, fSize, x.shape[2], stride, pad);
        var resultTexShape = conv_util.computeTexShapeFrom3D(resultShape);
        var poolResultTex = this.textureManager.acquireTexture(resultTexShape);
        pool_gpu.poolCommon(this.gpgpu, program, x.getTexture(), poolResultTex, resultTexShape);
        if (cleanupX) {
            x.dispose();
        }
        return ndarray_1.NDArray.make(resultShape, { texture: poolResultTex, textureShapeRC: resultTexShape });
    };
    NDArrayMathGPU.prototype.maxPoolInternal = function (x, fSize, stride, pad) {
        var maxPoolProgKey = [MAX_POOL_PROG, x.shape, fSize, stride, pad].join('_');
        var maxPoolProgram = this.getAndSaveProgram(maxPoolProgKey, function () {
            return max_pool_gpu.getFragmentShaderMaxPoolSource(x.shape, fSize, stride, pad);
        });
        return this.pool(maxPoolProgram, x, fSize, stride, pad);
    };
    NDArrayMathGPU.prototype.minPoolInternal = function (x, fSize, stride, pad) {
        var minPoolProgKey = [MIN_POOL_PROG, x.shape, fSize, stride, pad].join('_');
        var minPoolProgram = this.getAndSaveProgram(minPoolProgKey, function () {
            return min_pool_gpu.getFragmentShaderMinPoolSource(x.shape, fSize, stride, pad);
        });
        return this.pool(minPoolProgram, x, fSize, stride, pad);
    };
    NDArrayMathGPU.prototype.avgPoolInternal = function (x, fSize, stride, pad) {
        var avgPoolProgKey = [AVG_POOL_PROG, x.shape, fSize, stride, pad].join('_');
        var avgPoolProgram = this.getAndSaveProgram(avgPoolProgKey, function () {
            return avg_pool_gpu.getFragmentShaderAvgPoolSource(x.shape, fSize, stride, pad);
        });
        return this.pool(avgPoolProgram, x, fSize, stride, pad);
    };
    NDArrayMathGPU.prototype.maxPoolBackpropInternal = function (dy, x, fSize, origStride, origPad) {
        var maxPoolPositionsProgKey = [
            MAX_POOL_POSITIONS_PROG, x.shape, fSize, origStride, origPad
        ].join('_');
        var maxPoolPositionsProgram = this.getAndSaveProgram(maxPoolPositionsProgKey, function () {
            return max_pool_gpu.getFragmentShaderMaxPoolPositionsSource(x.shape, fSize, origStride, origPad);
        });
        var maxPoolResultShape = conv_util.computeOutputShape3D(x.shape, fSize, x.shape[2], origStride, origPad);
        var maxPoolResultTexShape = conv_util.computeTexShapeFrom3D(maxPoolResultShape);
        var maxPoolPositionsResultTex = this.textureManager.acquireTexture(maxPoolResultTexShape);
        var xTexShape = conv_util.computeTexShapeFrom3D(x.shape);
        var actualXTexShape = x.getTextureShapeRC(xTexShape);
        var cleanupX = false;
        if (!util.arraysEqual(actualXTexShape, xTexShape)) {
            x = this.reshapeTexture(x, xTexShape);
            cleanupX = true;
        }
        max_pool_gpu.maxPoolCommon(this.gpgpu, maxPoolPositionsProgram, x.getTexture(), maxPoolPositionsResultTex, maxPoolResultTexShape);
        var maxPoolBackpropProgKey = [
            MAX_POOL_BACKPROP_PROG, dy.shape, fSize, origStride, origPad
        ].join('_');
        var program = this.getAndSaveProgram(maxPoolBackpropProgKey, function () {
            return max_pool_backprop_gpu.getFragmentShaderMaxPoolBackprop(dy.shape, fSize, origStride, origPad);
        });
        var dyTexShape = conv_util.computeTexShapeFrom3D(dy.shape);
        var actualDyTexShape = dy.getTextureShapeRC(dyTexShape);
        var cleanupDy = false;
        if (!util.arraysEqual(actualDyTexShape, dyTexShape)) {
            dy = this.reshapeTexture(dy, dyTexShape);
            cleanupDy = true;
        }
        var dilatedDyRC = conv_util.computeDilatedRC([dy.shape[0], dy.shape[1]], origStride);
        var pad = fSize - 1 - origPad;
        var resultShapeRCD = conv_util.computeOutputShape3D([dilatedDyRC[0], dilatedDyRC[1], dy.shape[2]], fSize, dy.shape[2], 1, pad);
        var resultTexShape = conv_util.computeTexShapeFrom3D(resultShapeRCD);
        var resultTex = this.textureManager.acquireTexture(resultTexShape);
        max_pool_backprop_gpu.maxPoolBackprop(this.gpgpu, program, dy.getTexture(), maxPoolPositionsResultTex, resultTex, resultTexShape);
        if (cleanupDy) {
            dy.dispose();
        }
        if (cleanupX) {
            x.dispose();
        }
        this.textureManager.releaseTexture(maxPoolPositionsResultTex, maxPoolResultTexShape);
        return ndarray_1.NDArray.make(resultShapeRCD, { texture: resultTex, textureShapeRC: resultTexShape });
    };
    NDArrayMathGPU.prototype.resizeBilinear3DInternal = function (x, newShape2D, alignCorners) {
        var programKey = [RESIZE_BILINEAR_PROG, x.shape, newShape2D, alignCorners].join('_');
        var newShapeRCD = [newShape2D[0], newShape2D[1], x.shape[2]];
        var resultTexShape = conv_util.computeTexShapeFrom3D(newShapeRCD);
        var program = this.getAndSaveProgram(programKey, function () { return resize_bilinear_gpu.getFragmentShaderSource(x.shape, newShape2D, alignCorners); });
        var resultTexture = this.textureManager.acquireTexture(resultTexShape);
        resize_bilinear_gpu.resizeBilinear(this.gpgpu, program, x.getTexture(), resultTexture, resultTexShape);
        return ndarray_1.NDArray.make(newShapeRCD, { texture: resultTexture, textureShapeRC: resultTexShape });
    };
    NDArrayMathGPU.prototype.getAndSaveProgram = function (programKey, getShaderSource) {
        if (!(programKey in this.programCache)) {
            this.programCache[programKey] =
                this.gpgpu.createProgram(getShaderSource());
        }
        return this.programCache[programKey];
    };
    NDArrayMathGPU.prototype.addSubMulDiv = function (a, b, resultShape, operandA, opType, operandB) {
        var cleanupB = false;
        var aOrientation = math_1.MatrixOrientation.REGULAR;
        var bOrientation = math_1.MatrixOrientation.REGULAR;
        var logicalBTexShape;
        if (operandA === addsubmuldiv_gpu_1.OperandType.MATRIX && operandB === addsubmuldiv_gpu_1.OperandType.MATRIX) {
            util.assertShapesMatch(a.shape, b.shape);
            if (a.inGPU()) {
                b.getTextureShapeRC(a.getTextureShapeRC());
            }
            else if (b.inGPU()) {
                a.getTextureShapeRC(b.getTextureShapeRC());
            }
            var aTexShape_1 = a.getTextureShapeRC();
            var bTexShape_1 = b.getTextureShapeRC();
            logicalBTexShape = bTexShape_1;
            if (a.rank === 1) {
                if (!util.arraysEqual(bTexShape_1, aTexShape_1)) {
                    bOrientation = math_1.MatrixOrientation.TRANSPOSED;
                    logicalBTexShape = [bTexShape_1[1], bTexShape_1[0]];
                }
            }
            if (!util.arraysEqual(aTexShape_1, logicalBTexShape)) {
                b = this.reshapeTexture(b, aTexShape_1);
                bOrientation = math_1.MatrixOrientation.REGULAR;
                logicalBTexShape = b.getTextureShapeRC();
                cleanupB = true;
            }
        }
        else {
            logicalBTexShape = b.getTextureShapeRC();
        }
        var aTexShape = a.getTextureShapeRC();
        var bTexShape = b.getTextureShapeRC();
        var programKey = [
            ADD_SUM_MUL_DIV_PROG, operandA, aOrientation, opType, operandB,
            bOrientation
        ].join('_');
        var program = this.getAndSaveProgram(programKey, function () { return addsubmuldiv_gpu.getFragmentShaderSource(operandA, aOrientation, opType, operandB, bOrientation); });
        var resultTextureShape = [
            Math.max(aTexShape[0], logicalBTexShape[0]),
            Math.max(aTexShape[1], logicalBTexShape[1])
        ];
        var resultTexture = this.textureManager.acquireTexture(resultTextureShape);
        addsubmuldiv_gpu.addSubMulDiv(this.gpgpu, program, a.getTexture(), aTexShape, b.getTexture(), bTexShape, resultTexture, resultTextureShape);
        if (cleanupB) {
            b.dispose();
        }
        return ndarray_1.NDArray.make(resultShape, { texture: resultTexture, textureShapeRC: resultTextureShape });
    };
    NDArrayMathGPU.prototype.doGPUShapesMatch = function (a, b) {
        util.assertShapesMatch(a.shape, b.shape);
        if (a.inGPU()) {
            b.getTextureShapeRC(a.getTextureShapeRC());
        }
        else if (b.inGPU()) {
            a.getTextureShapeRC(b.getTextureShapeRC());
        }
        return util.arraysEqual(a.getTextureShapeRC(), b.getTextureShapeRC());
    };
    NDArrayMathGPU.prototype.getTextureManager = function () {
        return this.textureManager;
    };
    NDArrayMathGPU.prototype.dispose = function () {
        for (var programKey in this.programCache) {
            if (this.programCache.hasOwnProperty(programKey)) {
                this.gpgpu.deleteProgram(this.programCache[programKey]);
            }
        }
        this.textureManager.dispose();
        if (this.gpgpuCreatedLocally) {
            this.gpgpu.dispose();
        }
    };
    return NDArrayMathGPU;
}(math_1.NDArrayMath));
exports.NDArrayMathGPU = NDArrayMathGPU;

},{"../util":90,"./concat3d_util":19,"./conv_util":20,"./math":23,"./ndarray":26,"./webgl/addscaledmat_gpu":27,"./webgl/addsubmuldiv_gpu":28,"./webgl/argmaxequals_gpu":29,"./webgl/argminmax_gpu":30,"./webgl/avg_pool_gpu":31,"./webgl/batchnorm_gpu":32,"./webgl/concat3d_gpu":34,"./webgl/conv_backprop_gpu":35,"./webgl/conv_gpu":36,"./webgl/copy_gpu":37,"./webgl/exp_gpu":38,"./webgl/gpgpu_context":39,"./webgl/gpgpu_util":40,"./webgl/log_gpu":41,"./webgl/logsumexp_gpu":42,"./webgl/max_pool_backprop_gpu":43,"./webgl/max_pool_gpu":44,"./webgl/min_pool_gpu":45,"./webgl/minmax_gpu":46,"./webgl/mulmat_gpu":47,"./webgl/neg_gpu":48,"./webgl/pool_gpu":49,"./webgl/reducesum_gpu":50,"./webgl/relu_gpu":51,"./webgl/reshape_gpu":53,"./webgl/resize_bilinear_gpu":54,"./webgl/shader_compiler":55,"./webgl/sigmoid_gpu":56,"./webgl/step_gpu":57,"./webgl/texture_manager":59,"./webgl/trig_gpu":60,"./webgl/webgl_util":62}],26:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var util = require("../util");
var webgl_util = require("./webgl/webgl_util");
exports.GPGPU = null;
exports.TEXTURE_MANAGER = null;
function initializeGPU(gpgpu, textureManager) {
    exports.GPGPU = gpgpu;
    exports.TEXTURE_MANAGER = textureManager;
}
exports.initializeGPU = initializeGPU;
function throwIfGPUNotInitialized() {
    if (exports.GPGPU == null || exports.TEXTURE_MANAGER == null) {
        throw new Error('GPU not intialized.');
    }
}
var NDArray = (function () {
    function NDArray(shape, data) {
        util.assert(data.values != null || data.texture != null, 'Either `values` or `texture` must be defined');
        util.assert(data.texture == null || (data.textureShapeRC != null), '`textureShape` must be defined when `texture` is defined');
        this.size = util.sizeFromShape(shape);
        if (data.values != null) {
            util.assert(this.size === data.values.length, 'Constructing ndarray of shape (' + this.size + ') should match the' +
                ' length of values (' + data.values.length + ')');
        }
        this.shape = shape;
        this.data = data;
        var dim = this.shape.length;
        if (dim < 2) {
            this.strides = [];
        }
        else {
            this.strides = new Array(dim - 1);
            this.strides[dim - 2] = this.shape[dim - 1];
            for (var i = dim - 3; i >= 0; --i) {
                this.strides[i] = this.strides[i + 1] * this.shape[i + 1];
            }
        }
    }
    NDArray.zeros = function (shape) {
        var values = new Float32Array(util.sizeFromShape(shape));
        return NDArray.make(shape, { values: values });
    };
    NDArray.zerosLike = function (another) {
        return NDArray.zeros(another.shape);
    };
    NDArray.like = function (another) {
        var values = another.getValues();
        return NDArray.make(another.shape, { values: new Float32Array(values) });
    };
    NDArray.make = function (shape, data) {
        switch (shape.length) {
            case 0:
                return new Scalar(data);
            case 1:
                return new Array1D(data);
            case 2:
                return new Array2D(shape, data);
            case 3:
                return new Array3D(shape, data);
            case 4:
                return new Array4D(shape, data);
            default:
                return new NDArray(shape, data);
        }
    };
    NDArray.prototype.reshape = function (newShape) {
        if (util.arraysEqual(this.shape, newShape)) {
            return this;
        }
        util.assert(this.size === util.sizeFromShape(newShape), 'new shape and old shape must have the same number of elements.');
        return NDArray.make(newShape, this.data);
    };
    NDArray.prototype.asScalar = function () {
        util.assert(this.size === 1, 'The array must have only 1 element.');
        return this.reshape([]);
    };
    NDArray.prototype.as1D = function () {
        return this.reshape([this.size]);
    };
    NDArray.prototype.as2D = function (rows, columns) {
        return this.reshape([rows, columns]);
    };
    NDArray.prototype.as3D = function (rows, columns, depth) {
        return this.reshape([rows, columns, depth]);
    };
    NDArray.prototype.as4D = function (rows, columns, depth, depth2) {
        return this.reshape([rows, columns, depth, depth2]);
    };
    Object.defineProperty(NDArray.prototype, "rank", {
        get: function () {
            return this.shape.length;
        },
        enumerable: true,
        configurable: true
    });
    NDArray.prototype.get = function () {
        var locs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            locs[_i] = arguments[_i];
        }
        var index = locs[locs.length - 1];
        for (var i = 0; i < locs.length - 1; ++i) {
            index += this.strides[i] * locs[i];
        }
        return this.getValues()[index];
    };
    NDArray.prototype.add = function (value) {
        var locs = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            locs[_i - 1] = arguments[_i];
        }
        this.set.apply(this, [this.get.apply(this, locs) + value].concat(locs));
    };
    NDArray.prototype.set = function (value) {
        var locs = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            locs[_i - 1] = arguments[_i];
        }
        var index = locs[locs.length - 1];
        for (var i = 0; i < locs.length - 1; ++i) {
            index += this.strides[i] * locs[i];
        }
        this.getValues()[index] = value;
    };
    NDArray.prototype.locToIndex = function (locs) {
        var index = locs[locs.length - 1];
        for (var i = 0; i < locs.length - 1; ++i) {
            index += this.strides[i] * locs[i];
        }
        return index;
    };
    NDArray.prototype.indexToLoc = function (index) {
        var locs = new Array(this.shape.length);
        for (var i = 0; i < locs.length - 1; ++i) {
            locs[i] = Math.floor(index / this.strides[i]);
            index -= locs[i] * this.strides[i];
        }
        locs[locs.length - 1] = index;
        return locs;
    };
    NDArray.prototype.fill = function (value) {
        this.getValues().fill(value);
    };
    NDArray.prototype.getData = function () {
        return this.data;
    };
    NDArray.prototype.getValues = function () {
        if (this.data.values == null) {
            throwIfGPUNotInitialized();
            this.data.values = exports.GPGPU.downloadMatrixFromTexture(this.data.texture, this.data.textureShapeRC[0], this.data.textureShapeRC[1]);
            this.disposeTexture();
        }
        return this.data.values;
    };
    NDArray.prototype.uploadToGPU = function (preferredTexShape) {
        throwIfGPUNotInitialized();
        this.data.textureShapeRC = webgl_util.getTextureShapeFromLogicalShape(exports.GPGPU.gl, this.shape, preferredTexShape);
        this.data.texture =
            exports.TEXTURE_MANAGER.acquireTexture(this.data.textureShapeRC);
        exports.GPGPU.uploadMatrixToTexture(this.data.texture, this.data.textureShapeRC[0], this.data.textureShapeRC[1], this.data.values);
        this.data.values = null;
    };
    NDArray.prototype.getTexture = function (preferredShapeRC) {
        if (this.data.texture == null) {
            this.uploadToGPU(preferredShapeRC);
        }
        return this.data.texture;
    };
    NDArray.prototype.getTextureShapeRC = function (preferredShapeRC) {
        if (this.data.textureShapeRC == null) {
            this.uploadToGPU(preferredShapeRC);
        }
        return this.data.textureShapeRC;
    };
    NDArray.prototype.dispose = function () {
        this.data.values = null;
        this.shape = null;
        if (this.data.texture != null) {
            this.disposeTexture();
        }
    };
    NDArray.prototype.disposeTexture = function () {
        throwIfGPUNotInitialized();
        exports.TEXTURE_MANAGER.releaseTexture(this.data.texture, this.data.textureShapeRC);
        this.data.texture = null;
        this.data.textureShapeRC = null;
    };
    NDArray.prototype.inGPU = function () {
        return this.data.texture != null;
    };
    NDArray.prototype.equals = function (t) {
        return util.arraysEqual(this.shape, t.shape) &&
            util.arraysEqual(this.getValues(), t.getValues());
    };
    NDArray.rand = function (shape, randFunction) {
        var size = util.sizeFromShape(shape);
        var values = new Float32Array(size);
        for (var i = 0; i < size; i++) {
            values[i] = randFunction();
        }
        return NDArray.make(shape, { values: values });
    };
    NDArray.randNormal = function (shape, mean, stdDev) {
        if (mean === void 0) { mean = 0; }
        if (stdDev === void 0) { stdDev = 1; }
        return NDArray.rand(shape, function () { return util.randGauss(mean, stdDev); });
    };
    NDArray.randTruncatedNormal = function (shape, mean, stdDev) {
        if (mean === void 0) { mean = 0; }
        if (stdDev === void 0) { stdDev = 1; }
        return NDArray.rand(shape, function () { return util.randGauss(mean, stdDev, true); });
    };
    NDArray.randUniform = function (shape, a, b) {
        return NDArray.rand(shape, function () { return util.randUniform(a, b); });
    };
    return NDArray;
}());
exports.NDArray = NDArray;
var Scalar = (function (_super) {
    __extends(Scalar, _super);
    function Scalar(data) {
        var _this = this;
        if (data.texture != null) {
            data.textureShapeRC = [1, 1];
        }
        _this = _super.call(this, [], data) || this;
        return _this;
    }
    Scalar.new = function (value) {
        return new Scalar({ values: new Float32Array([value]) });
    };
    Scalar.prototype.get = function () {
        return this.getValues()[0];
    };
    Scalar.prototype.set = function (value) {
        this.getValues()[0] = value;
    };
    Scalar.prototype.add = function (value) {
        this.getValues()[0] += value;
    };
    return Scalar;
}(NDArray));
Scalar.ZERO = Scalar.new(0);
Scalar.ONE = Scalar.new(1);
Scalar.TWO = Scalar.new(2);
Scalar.NEG_ONE = Scalar.new(-1);
exports.Scalar = Scalar;
var Array1D = (function (_super) {
    __extends(Array1D, _super);
    function Array1D(data) {
        var _this = this;
        var shape = (data.values != null) ?
            [data.values.length] :
            [util.sizeFromShape(data.textureShapeRC)];
        _this = _super.call(this, shape, data) || this;
        return _this;
    }
    Array1D.new = function (values) {
        if (!(values instanceof Float32Array)) {
            var inferredShape = util.inferShape(values);
            util.assert(inferredShape.length === 1, "Error constructing Array1D. Shape of values " + inferredShape + " is " +
                "not 1 dimensional.");
        }
        return new Array1D({ values: toTypedArray(values) });
    };
    Array1D.prototype.get = function (i) {
        return this.getValues()[i];
    };
    Array1D.prototype.set = function (value, i) {
        this.getValues()[i] = value;
    };
    Array1D.prototype.add = function (value, i) {
        this.getValues()[i] += value;
    };
    Array1D.prototype.locToIndex = function (loc) {
        return loc[0];
    };
    Array1D.prototype.indexToLoc = function (index) {
        return [index];
    };
    Array1D.zeros = function (shape) {
        return NDArray.zeros(shape);
    };
    return Array1D;
}(NDArray));
exports.Array1D = Array1D;
var Array2D = (function (_super) {
    __extends(Array2D, _super);
    function Array2D(shape, data) {
        var _this = this;
        util.assert(shape.length === 2, 'Shape should be of length 2');
        _this = _super.call(this, shape, data) || this;
        _this.stride0 = _this.strides[0];
        return _this;
    }
    Array2D.new = function (shape, values) {
        if (!(values instanceof Float32Array)) {
            var inferredShape = util.inferShape(values);
            if (inferredShape.length > 1) {
                util.assertShapesMatch(shape, inferredShape, "Error when constructing Array2D. Shape of values " +
                    (inferredShape + " does not match the provided shape ") +
                    (shape + ". "));
            }
        }
        return new Array2D(shape, { values: toTypedArray(values) });
    };
    Array2D.prototype.get = function (i, j) {
        return this.getValues()[this.stride0 * i + j];
    };
    Array2D.prototype.set = function (value, i, j) {
        this.getValues()[this.stride0 * i + j] = value;
    };
    Array2D.prototype.add = function (value, i, j) {
        this.getValues()[this.stride0 * i + j] += value;
    };
    Array2D.prototype.locToIndex = function (locs) {
        return this.stride0 * locs[0] + locs[1];
    };
    Array2D.prototype.indexToLoc = function (index) {
        return [Math.floor(index / this.stride0), index % this.stride0];
    };
    Array2D.zeros = function (shape) {
        return NDArray.zeros(shape);
    };
    return Array2D;
}(NDArray));
exports.Array2D = Array2D;
var Array3D = (function (_super) {
    __extends(Array3D, _super);
    function Array3D(shape, data) {
        var _this = this;
        util.assert(shape.length === 3, 'Shape should be of length 3');
        _this = _super.call(this, shape, data) || this;
        _this.stride0 = _this.strides[0];
        _this.stride1 = _this.strides[1];
        return _this;
    }
    Array3D.new = function (shape, values) {
        if (!(values instanceof Float32Array)) {
            var inferredShape = util.inferShape(values);
            if (inferredShape.length > 1) {
                util.assertShapesMatch(shape, inferredShape, "Error when constructing Array3D. Shape of values " +
                    (inferredShape + " does not match the provided shape ") +
                    (shape + ". "));
            }
        }
        return new Array3D(shape, { values: toTypedArray(values) });
    };
    Array3D.prototype.get = function (i, j, k) {
        return this.getValues()[this.stride0 * i + this.stride1 * j + k];
    };
    Array3D.prototype.set = function (value, i, j, k) {
        this.getValues()[this.stride0 * i + this.stride1 * j + k] = value;
    };
    Array3D.prototype.add = function (value, i, j, k) {
        this.getValues()[this.stride0 * i + this.stride1 * j + k] += value;
    };
    Array3D.prototype.locToIndex = function (locs) {
        return this.stride0 * locs[0] + this.stride1 * locs[1] + locs[2];
    };
    Array3D.prototype.indexToLoc = function (index) {
        var i = Math.floor(index / this.stride0);
        index -= i * this.stride0;
        return [i, Math.floor(index / this.stride1), index % this.stride1];
    };
    Array3D.zeros = function (shape) {
        return NDArray.zeros(shape);
    };
    return Array3D;
}(NDArray));
exports.Array3D = Array3D;
var Array4D = (function (_super) {
    __extends(Array4D, _super);
    function Array4D(shape, data) {
        var _this = this;
        util.assert(shape.length === 4, 'Shape should be of length 4');
        _this = _super.call(this, shape, data) || this;
        _this.stride0 = _this.strides[0];
        _this.stride1 = _this.strides[1];
        _this.stride2 = _this.strides[2];
        return _this;
    }
    Array4D.new = function (shape, values) {
        if (!(values instanceof Float32Array)) {
            var inferredShape = util.inferShape(values);
            if (inferredShape.length > 1) {
                util.assertShapesMatch(shape, inferredShape, "Error when constructing Array4D. Shape of values " +
                    (inferredShape + " does not match the provided shape ") +
                    (shape + ". "));
            }
        }
        return new Array4D(shape, { values: toTypedArray(values) });
    };
    Array4D.prototype.get = function (i, j, k, l) {
        return this.getValues()[this.stride0 * i + this.stride1 * j + this.stride2 * k + l];
    };
    Array4D.prototype.set = function (value, i, j, k, l) {
        this.getValues()[this.stride0 * i + this.stride1 * j + this.stride2 * k + l] = value;
    };
    Array4D.prototype.add = function (value, i, j, k, l) {
        this.getValues()[this.stride0 * i + this.stride1 * j + this.stride2 * k + l] += value;
    };
    Array4D.prototype.locToIndex = function (locs) {
        return this.stride0 * locs[0] + this.stride1 * locs[1] +
            this.stride2 * locs[2] + locs[3];
    };
    Array4D.prototype.indexToLoc = function (index) {
        var i = Math.floor(index / this.stride0);
        index -= i * this.stride0;
        var j = Math.floor(index / this.stride1);
        index -= j * this.stride1;
        return [i, j, Math.floor(index / this.stride2), index % this.stride2];
    };
    Array4D.zeros = function (shape) {
        return NDArray.zeros(shape);
    };
    return Array4D;
}(NDArray));
exports.Array4D = Array4D;
function toTypedArray(a) {
    return (a instanceof Float32Array) ? a : new Float32Array(util.flatten(a));
}

},{"../util":90,"./webgl/webgl_util":62}],27:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var gpgpu_context_1 = require("./gpgpu_context");
function getFragmentShaderSource() {
    return "\n    precision highp float;\n    uniform sampler2D matrixA;\n    uniform sampler2D matrixB;\n    uniform sampler2D matrixAScalar;\n    uniform sampler2D matrixBScalar;\n    varying vec2 resultUV;\n\n    const vec2 halfTexel = vec2(0.5, 0.5);\n\n    void main() {\n      float a = texture2D(matrixA, resultUV).r;\n      float b = texture2D(matrixB, resultUV).r;\n      float aScalar = texture2D(matrixAScalar, halfTexel).r;\n      float bScalar = texture2D(matrixBScalar, halfTexel).r;\n      vec2 abScaled = vec2(a, b) * vec2(aScalar, bScalar);\n      gl_FragColor = vec4(abScaled.x + abScaled.y, 0, 0, 0);\n    }";
}
exports.getFragmentShaderSource = getFragmentShaderSource;
function addScaledMatrices(gpgpu, addScaledMatricesProgram, a, b, rows, columns, aScalar, bScalar, result) {
    gpgpu.setOutputMatrixTexture(result, rows, columns);
    gpgpu.setProgram(addScaledMatricesProgram);
    gpgpu.setInputMatrixTexture(a, 'matrixA', 0);
    gpgpu.setInputMatrixTexture(b, 'matrixB', 1);
    gpgpu.setInputMatrixTexture(aScalar, 'matrixAScalar', 2);
    gpgpu.setInputMatrixTexture(bScalar, 'matrixBScalar', 3);
    gpgpu.executeProgram();
}
exports.addScaledMatrices = addScaledMatrices;
function uploadAddScaledMatricesDownload(a, b, rows, columns, aScalar, bScalar) {
    var gpgpu = new gpgpu_context_1.GPGPUContext();
    var program = gpgpu.createProgram(getFragmentShaderSource());
    var aTex = gpgpu.createMatrixTexture(rows, columns);
    var bTex = gpgpu.createMatrixTexture(rows, columns);
    var aScalarTex = gpgpu.createMatrixTexture(1, 1);
    var bScalarTex = gpgpu.createMatrixTexture(1, 1);
    var resultTex = gpgpu.createMatrixTexture(rows, columns);
    gpgpu.uploadMatrixToTexture(aTex, rows, columns, a);
    gpgpu.uploadMatrixToTexture(bTex, rows, columns, b);
    gpgpu.uploadMatrixToTexture(aScalarTex, 1, 1, new Float32Array([aScalar]));
    gpgpu.uploadMatrixToTexture(bScalarTex, 1, 1, new Float32Array([bScalar]));
    addScaledMatrices(gpgpu, program, aTex, bTex, rows, columns, aScalarTex, bScalarTex, resultTex);
    var result = gpgpu.downloadMatrixFromTexture(resultTex, rows, columns);
    gpgpu.deleteMatrixTexture(aTex);
    gpgpu.deleteMatrixTexture(bTex);
    gpgpu.deleteMatrixTexture(resultTex);
    gpgpu.deleteMatrixTexture(aScalarTex);
    gpgpu.deleteMatrixTexture(bScalarTex);
    gpgpu.deleteProgram(program);
    gpgpu.dispose();
    return result;
}
exports.uploadAddScaledMatricesDownload = uploadAddScaledMatricesDownload;

},{"./gpgpu_context":39}],28:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var math_1 = require("../math");
var binaryop_gpu = require("./binaryop_gpu");
var OperandType;
(function (OperandType) {
    OperandType[OperandType["MATRIX"] = 0] = "MATRIX";
    OperandType[OperandType["SCALAR"] = 1] = "SCALAR";
})(OperandType = exports.OperandType || (exports.OperandType = {}));
function getFragmentShaderSource(aType, aOrientation, op, bType, bOrientation) {
    var aUV = operandToShaderSnippet(aType, aOrientation);
    var bUV = operandToShaderSnippet(bType, bOrientation);
    var resultOp = "gl_FragColor = vec4(a " + op + " b, 0, 0, 0);";
    return binaryop_gpu.getFragmentShaderSource(aUV, bUV, resultOp);
}
exports.getFragmentShaderSource = getFragmentShaderSource;
function operandToShaderSnippet(operand, orientation) {
    switch (operand) {
        case OperandType.MATRIX:
            return 'resultUV' +
                (orientation === math_1.MatrixOrientation.REGULAR ? '.st' : '.ts');
        case OperandType.SCALAR:
            return 'vec2(0.5, 0.5)';
        default:
            throw new Error('Unknown operand type');
    }
}
function addSubMulDiv(gpgpu, program, a, aShapeRowCol, b, bShapeRowCol, result, resultShapeRowCol) {
    return binaryop_gpu.binaryOp(gpgpu, program, a, aShapeRowCol, b, bShapeRowCol, result, resultShapeRowCol);
}
exports.addSubMulDiv = addSubMulDiv;
function uploadScalarPlusMatrixDownload(a, b, bShape, bOrientation) {
    if (bOrientation === void 0) { bOrientation = math_1.MatrixOrientation.REGULAR; }
    var src = getFragmentShaderSource(OperandType.SCALAR, math_1.MatrixOrientation.REGULAR, '+', OperandType.MATRIX, bOrientation);
    return binaryop_gpu.uploadBinaryOpDownload(new Float32Array([a]), [1, 1], b, bShape, src);
}
exports.uploadScalarPlusMatrixDownload = uploadScalarPlusMatrixDownload;
function uploadMatrixMinusScalarDownload(a, aShape, b, aOrientation) {
    if (aOrientation === void 0) { aOrientation = math_1.MatrixOrientation.REGULAR; }
    var src = getFragmentShaderSource(OperandType.MATRIX, aOrientation, '-', OperandType.SCALAR, math_1.MatrixOrientation.REGULAR);
    return binaryop_gpu.uploadBinaryOpDownload(a, aShape, new Float32Array([b]), [1, 1], src);
}
exports.uploadMatrixMinusScalarDownload = uploadMatrixMinusScalarDownload;
function uploadScalarMinusMatrixDownload(a, b, bShape, bOrientation) {
    if (bOrientation === void 0) { bOrientation = math_1.MatrixOrientation.REGULAR; }
    var src = getFragmentShaderSource(OperandType.SCALAR, math_1.MatrixOrientation.REGULAR, '-', OperandType.MATRIX, bOrientation);
    return binaryop_gpu.uploadBinaryOpDownload(new Float32Array([a]), [1, 1], b, bShape, src);
}
exports.uploadScalarMinusMatrixDownload = uploadScalarMinusMatrixDownload;
function uploadScalarTimesMatrixDownload(a, b, bShape, bOrientation) {
    if (bOrientation === void 0) { bOrientation = math_1.MatrixOrientation.REGULAR; }
    var src = getFragmentShaderSource(OperandType.SCALAR, math_1.MatrixOrientation.REGULAR, '*', OperandType.MATRIX, bOrientation);
    return binaryop_gpu.uploadBinaryOpDownload(new Float32Array([a]), [1, 1], b, bShape, src);
}
exports.uploadScalarTimesMatrixDownload = uploadScalarTimesMatrixDownload;
function uploadMatrixTimesMatrixDownload(a, b, shape, aOrientation, bOrientation) {
    if (aOrientation === void 0) { aOrientation = math_1.MatrixOrientation.REGULAR; }
    if (bOrientation === void 0) { bOrientation = math_1.MatrixOrientation.REGULAR; }
    var src = getFragmentShaderSource(OperandType.MATRIX, aOrientation, '*', OperandType.MATRIX, bOrientation);
    return binaryop_gpu.uploadBinaryOpDownload(a, shape, b, shape, src);
}
exports.uploadMatrixTimesMatrixDownload = uploadMatrixTimesMatrixDownload;
function uploadMatrixPlusMatrixDownload(a, b, shape, aOrientation, bOrientation) {
    if (aOrientation === void 0) { aOrientation = math_1.MatrixOrientation.REGULAR; }
    if (bOrientation === void 0) { bOrientation = math_1.MatrixOrientation.REGULAR; }
    var src = getFragmentShaderSource(OperandType.MATRIX, aOrientation, '+', OperandType.MATRIX, bOrientation);
    return binaryop_gpu.uploadBinaryOpDownload(a, shape, b, shape, src);
}
exports.uploadMatrixPlusMatrixDownload = uploadMatrixPlusMatrixDownload;

},{"../math":23,"./binaryop_gpu":33}],29:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var argminmax_gpu = require("./argminmax_gpu");
function getFragmentShaderPrologueSource() {
    return "\n    precision highp float;\n    uniform sampler2D matrixA;\n    uniform sampler2D matrixB;\n    varying vec2 resultUV;";
}
function getFragmentShaderMainSource() {
    return "\n    void main() {\n      float argMaxA = getArgMinMax(matrixA);\n      float argMaxB = getArgMinMax(matrixB);\n      float value;\n      if (isNaN(argMaxA)) {\n        value = argMaxA;\n      } else if (isNaN(argMaxB)) {\n        value = argMaxB;\n      } else {\n        value = float(argMaxA == argMaxB);\n      }\n      gl_FragColor = vec4(value, 0, 0, 0);\n    }";
}
function getArgMaxEqualsFragmentShaderSource(rows, columns) {
    return [
        getFragmentShaderPrologueSource(),
        argminmax_gpu.getFragmentShaderGetArgMinMaxSource('>', rows, columns),
        getFragmentShaderMainSource()
    ].join('\n');
}
exports.getArgMaxEqualsFragmentShaderSource = getArgMaxEqualsFragmentShaderSource;
function argMaxEquals(gpgpu, maxEqualsProgram, a, b, numRows, numCols, result) {
    gpgpu.setOutputMatrixTexture(result, 1, 1);
    gpgpu.setProgram(maxEqualsProgram);
    gpgpu.setInputMatrixTexture(a, 'matrixA', 0);
    gpgpu.setInputMatrixTexture(b, 'matrixB', 1);
    gpgpu.executeProgram();
}
exports.argMaxEquals = argMaxEquals;

},{"./argminmax_gpu":30}],30:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var webgl_util_1 = require("./webgl_util");
function getFragmentShaderPrologueSource() {
    return "\n    precision highp float;\n    uniform sampler2D matrixA;\n    varying vec2 resultUV;";
}
exports.getFragmentShaderPrologueSource = getFragmentShaderPrologueSource;
function getFragmentShaderMainSource() {
    return "\n    void main() {\n      gl_FragColor = vec4(getArgMinMax(matrixA), 0, 0, 0);\n    }";
}
function getArgMinMaxFragmentShaderSource(rows, columns, compOp) {
    return [
        getFragmentShaderPrologueSource(),
        getFragmentShaderGetArgMinMaxSource(compOp, rows, columns),
        getFragmentShaderMainSource()
    ].join('\n');
}
function getArgMinFragmentShaderSource(rows, columns) {
    return getArgMinMaxFragmentShaderSource(rows, columns, '<');
}
exports.getArgMinFragmentShaderSource = getArgMinFragmentShaderSource;
function getArgMaxFragmentShaderSource(rows, columns) {
    return getArgMinMaxFragmentShaderSource(rows, columns, '>');
}
exports.getArgMaxFragmentShaderSource = getArgMaxFragmentShaderSource;
function getFragmentShaderGetArgMinMaxSource(compOp, rows, columns) {
    return "\n    const vec2 dimCR = vec2(" + columns + ".0, " + rows + ".0);\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    " + webgl_util_1.IS_NAN_SHADER_FUNC + "\n\n    float getArgMinMax(in sampler2D matrix) {\n      vec2 bestCR = vec2(0, 0);\n      float bestValue = texture2D(matrix, bestCR).r;\n\n      for (float c = 0.0; c < dimCR.x; c += 1.0) {\n        for (float r = 0.0; r < dimCR.y; r += 1.0) {\n          vec2 cr = vec2(c, r);\n          vec2 uv = (cr + halfCR) / dimCR;\n          float value = texture2D(matrix, uv).r;\n          if (isNaN(value)) {\n            return value;\n          }\n          if (value " + compOp + " bestValue) {\n            bestValue = value;\n            bestCR = cr;\n          }\n        }\n      }\n      return bestCR.x + (bestCR.y * dimCR.x);\n    }\n  ";
}
exports.getFragmentShaderGetArgMinMaxSource = getFragmentShaderGetArgMinMaxSource;
function argMinMax(gpgpu, minMaxProgram, a, aNumRows, aNumCols, result) {
    gpgpu.setOutputMatrixTexture(result, 1, 1);
    gpgpu.setProgram(minMaxProgram);
    gpgpu.setInputMatrixTexture(a, 'matrixA', 0);
    gpgpu.executeProgram();
}
exports.argMinMax = argMinMax;

},{"./webgl_util":62}],31:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var pool_gpu = require("./pool_gpu");
function getFragmentShaderAvgPoolSource(xShapeRCD, fSize, stride, pad) {
    return pool_gpu.getFragmentShaderPoolCommonSource(xShapeRCD, fSize, stride, pad, 'avg', false);
}
exports.getFragmentShaderAvgPoolSource = getFragmentShaderAvgPoolSource;
function avgPool(gpgpu, program, x, result, resultShapeRowCol) {
    pool_gpu.poolCommon(gpgpu, program, x, result, resultShapeRowCol);
}
exports.avgPool = avgPool;

},{"./pool_gpu":49}],32:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function getFragmentShaderSource(xTexShapeRC, meanTexShapeRC, varianceTexShapeRC, offsetTexShapeRC, scaleTexShapeRC, varianceEpsilon) {
    if (varianceEpsilon === void 0) { varianceEpsilon = 0.001; }
    var offsetSamplerSnippet = '';
    var offsetShapeInitializationSnippet = '';
    var offsetCoordsSnippet = '';
    var offsetUVSnippet = '';
    var offsetValueSnippet = '';
    var offsetOperationSnippet = '0.0';
    var scaleSamplerSnippet = '';
    var scaleShapeInitializationSnippet = '';
    var scaleCoordsSnippet = '';
    var scaleUVSnippet = '';
    var scaleValueSnippet = '';
    var scaleOperationSnippet = '';
    if (offsetTexShapeRC != null) {
        offsetSamplerSnippet = 'uniform sampler2D offset;';
        offsetShapeInitializationSnippet = "const vec2 offsetShapeCR = vec2(\n            " + offsetTexShapeRC[1] + ", " + offsetTexShapeRC[0] + ");";
        offsetCoordsSnippet = 'vec2 offsetCoordsCR = mod(yTexCR, offsetShapeCR);';
        offsetUVSnippet =
            'vec2 offsetUV = (offsetCoordsCR + halfCR) / offsetShapeCR;';
        offsetValueSnippet = 'float offsetValue = texture2D(offset, offsetUV).r;';
        offsetOperationSnippet = 'offsetValue';
    }
    if (scaleTexShapeRC != null) {
        scaleSamplerSnippet = 'uniform sampler2D scale;';
        scaleShapeInitializationSnippet = "const vec2 scaleShapeCR = vec2(\n            " + scaleTexShapeRC[1] + ", " + scaleTexShapeRC[0] + ");";
        scaleCoordsSnippet = 'vec2 scaleCoordsCR = mod(yTexCR, scaleShapeCR);';
        scaleUVSnippet = 'vec2 scaleUV = (scaleCoordsCR + halfCR) / scaleShapeCR;';
        scaleValueSnippet = 'float scaleValue = texture2D(scale, scaleUV).r;';
        scaleOperationSnippet = 'inv *= scaleValue;';
    }
    return "\n    precision highp float;\n    uniform sampler2D x;\n    uniform sampler2D mean;\n    uniform sampler2D variance;\n    " + offsetSamplerSnippet + "\n    " + scaleSamplerSnippet + "\n\n    varying vec2 resultUV;\n\n    const vec2 xShapeCR = vec2(" + xTexShapeRC[1] + ", " + xTexShapeRC[0] + ");\n    const vec2 meanShapeCR = vec2(" + meanTexShapeRC[1] + ", " + meanTexShapeRC[0] + ");\n    const vec2 varianceShapeCR = vec2(\n        " + varianceTexShapeRC[1] + ", " + varianceTexShapeRC[0] + ");\n\n    " + offsetShapeInitializationSnippet + "\n    " + scaleShapeInitializationSnippet + "\n\n    const vec2 halfCR = vec2(0.5, 0.5);\n    const float varianceEpsilon = " + varianceEpsilon + ";\n\n    void main() {\n      vec2 yTexCR = floor(gl_FragCoord.xy);\n\n      vec2 meanCoordsCR = mod(yTexCR, meanShapeCR);\n      vec2 varianceCoordsCR = mod(yTexCR, varianceShapeCR);\n      " + offsetCoordsSnippet + "\n      " + scaleCoordsSnippet + "\n\n      vec2 meanUV = (meanCoordsCR + halfCR) / meanShapeCR;\n      vec2 varianceUV = (varianceCoordsCR + halfCR) / varianceShapeCR;\n      " + offsetUVSnippet + "\n      " + scaleUVSnippet + "\n\n      float xValue = texture2D(x, resultUV).r;\n      float meanValue = texture2D(mean, meanUV).r;\n      float varianceValue = texture2D(variance, varianceUV).r;\n      " + offsetValueSnippet + "\n      " + scaleValueSnippet + "\n\n      float inv = 1.0 / sqrt(varianceValue + varianceEpsilon);\n      " + scaleOperationSnippet + "\n      float xTimesInv = xValue * inv;\n      float meanTimesInvWithOffset = " + offsetOperationSnippet + "\n          - meanValue * inv;\n\n      gl_FragColor = vec4(xTimesInv + meanTimesInvWithOffset, 0, 0, 0);\n    }";
}
exports.getFragmentShaderSource = getFragmentShaderSource;
function batchNormalization(gpgpu, program, x, xShapeRowCol, mean, meanShapeRowCol, variance, varianceShapeRowCol, offset, offsetShapeRowCol, scale, scaleShapeRowCol, result, resultShapeRowCol) {
    gpgpu.setOutputMatrixTexture(result, resultShapeRowCol[0], resultShapeRowCol[1]);
    gpgpu.setProgram(program);
    gpgpu.setInputMatrixTexture(x, 'x', 0);
    gpgpu.setInputMatrixTexture(mean, 'mean', 1);
    gpgpu.setInputMatrixTexture(variance, 'variance', 2);
    var nextIndex = 3;
    if (offset != null) {
        gpgpu.setInputMatrixTexture(offset, 'offset', nextIndex);
        nextIndex++;
    }
    if (scale != null) {
        gpgpu.setInputMatrixTexture(scale, 'scale', nextIndex);
    }
    gpgpu.executeProgram();
}
exports.batchNormalization = batchNormalization;

},{}],33:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var gpgpu_context_1 = require("./gpgpu_context");
function getFragmentShaderSource(aResultUV, bResultUV, op) {
    return "\n    precision highp float;\n    uniform sampler2D matrixA;\n    uniform sampler2D matrixB;\n    varying vec2 resultUV;\n\n    void main() {\n      float a = texture2D(matrixA, " + aResultUV + ").r;\n      float b = texture2D(matrixB, " + bResultUV + ").r;\n      " + op + "\n    }";
}
exports.getFragmentShaderSource = getFragmentShaderSource;
function binaryOp(gpgpu, program, a, aShapeRowCol, b, bShapeRowCol, result, resultShapeRowCol) {
    gpgpu.setOutputMatrixTexture(result, resultShapeRowCol[0], resultShapeRowCol[1]);
    gpgpu.setProgram(program);
    gpgpu.setInputMatrixTexture(a, 'matrixA', 0);
    gpgpu.setInputMatrixTexture(b, 'matrixB', 1);
    gpgpu.executeProgram();
}
exports.binaryOp = binaryOp;
function uploadBinaryOpDownload(a, aShape, b, bShape, fragmentShaderSource) {
    var gpgpu = new gpgpu_context_1.GPGPUContext();
    var program = gpgpu.createProgram(fragmentShaderSource);
    var aTexture = gpgpu.createMatrixTexture(aShape[0], aShape[1]);
    var bTexture = gpgpu.createMatrixTexture(bShape[0], bShape[1]);
    var resultShape = [Math.max(aShape[0], bShape[0]), Math.max(aShape[1], bShape[1])];
    var resultTexture = gpgpu.createMatrixTexture(resultShape[0], resultShape[1]);
    gpgpu.uploadMatrixToTexture(aTexture, aShape[0], aShape[1], a);
    gpgpu.uploadMatrixToTexture(bTexture, bShape[0], bShape[1], b);
    binaryOp(gpgpu, program, aTexture, aShape, bTexture, bShape, resultTexture, resultShape);
    var result = gpgpu.downloadMatrixFromTexture(resultTexture, resultShape[0], resultShape[1]);
    gpgpu.deleteMatrixTexture(aTexture);
    gpgpu.deleteMatrixTexture(bTexture);
    gpgpu.deleteMatrixTexture(resultTexture);
    gpgpu.deleteProgram(program);
    gpgpu.dispose();
    return result;
}
exports.uploadBinaryOpDownload = uploadBinaryOpDownload;

},{"./gpgpu_context":39}],34:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var conv_util = require("../conv_util");
function getFragmentShaderSource(x1ShapeRCD, x2ShapeRCD, resultShapeRCD, axis) {
    var x1TexShapeRC = conv_util.computeTexShapeFrom3D(x1ShapeRCD);
    var x2TexShapeRC = conv_util.computeTexShapeFrom3D(x2ShapeRCD);
    var yAxes = ['yR', 'yC', 'yD'];
    var concatAxis = yAxes[axis];
    return "\n    precision highp float;\n    uniform sampler2D x1;\n    uniform sampler2D x2;\n\n    const vec2 x1ShapeCR = vec2(" + x1TexShapeRC[1] + ", " + x1TexShapeRC[0] + ");\n    const vec2 x2ShapeCR = vec2(" + x2TexShapeRC[1] + ".0, " + x2TexShapeRC[0] + ".0);\n\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    void main() {\n      vec2 yTexCR = floor(gl_FragCoord.xy);\n\n      // Map from 2D (yTexR, yTexC) to 3D (yR, yC, yD).\n      float yR = yTexCR.y;\n      float yC = floor(yTexCR.x / " + resultShapeRCD[2] + ".0);\n      float yD = mod(yTexCR.x, " + resultShapeRCD[2] + ".0);\n\n      float value = 0.0;\n\n      if (" + concatAxis + " < " + x1ShapeRCD[axis] + ".0) {\n        // Map yR, yC, yD back to x1 coordinates.\n        vec2 x1CR = vec2(yC * " + x1ShapeRCD[2] + ".0 + yD, yR);\n        vec2 x1UV = (x1CR + halfCR) / x1ShapeCR;\n        value = texture2D(x1, x1UV).r;\n      } else {\n        " + concatAxis + " = " + concatAxis + " - " + x1ShapeRCD[axis] + ".0;\n\n        // Map yR, yC, yD back to x2 coordinates.\n        vec2 x2CR = vec2(yC * " + x2ShapeRCD[2] + ".0 + yD, yR);\n        vec2 x2UV = (x2CR + halfCR) / x2ShapeCR;\n        value = texture2D(x2, x2UV).r;\n      }\n\n      gl_FragColor = vec4(value, 0.0, 0.0, 0.0);\n    }";
}
exports.getFragmentShaderSource = getFragmentShaderSource;
function concat3D(gpgpu, program, x1, x2, result, resultShapeRC) {
    gpgpu.setOutputMatrixTexture(result, resultShapeRC[0], resultShapeRC[1]);
    gpgpu.setProgram(program);
    gpgpu.setInputMatrixTexture(x1, 'x1', 0);
    gpgpu.setInputMatrixTexture(x2, 'x2', 1);
    gpgpu.executeProgram();
}
exports.concat3D = concat3D;

},{"../conv_util":20}],35:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var conv_util = require("../conv_util");
var conv_gpu = require("./conv_gpu");
function getFragmentShaderDerWeightsSource(xShapeRowColDepth, fSize, outputDepth, stride, zeroPad) {
    var getMatrixValueOrZeroPad = conv_gpu.getFragmentShaderGetMatrixValueOrZeroPadSource();
    var inputDepth = xShapeRowColDepth[2];
    var xTexShapeRC = conv_util.computeTexShapeFrom3D(xShapeRowColDepth);
    var yShape = conv_util.computeOutputShape3D(xShapeRowColDepth, fSize, outputDepth, stride, zeroPad);
    var yNumRows = yShape[0];
    var yNumCols = yShape[1];
    var yTexShapeRC = conv_util.computeTexShapeFrom3D(yShape);
    var fSizeTimesInputDepth = fSize * inputDepth;
    var prologue = "\n    precision highp float;\n    uniform sampler2D x;\n    uniform sampler2D dy;\n  ";
    return prologue + '\n' + getMatrixValueOrZeroPad + '\n' +
        ("\n    const vec2 halfCR = vec2(0.5, 0.5);\n    const vec2 xShapeCR = vec2(" + xTexShapeRC[1] + ", " + xTexShapeRC[0] + ");\n    const vec2 dyShapeCR = vec2(" + yTexShapeRC[1] + ", " + yTexShapeRC[0] + ");\n\n    void main() {\n      vec2 wTexCR = floor(gl_FragCoord.xy);\n\n      // Map from 2D (wTexR, wTexC) to 4D (wR, wC, d1, d2).\n      float wR = floor(wTexCR.y / " + fSizeTimesInputDepth + ".0);\n      float wTexRLeftover = wTexCR.y - wR * " + fSizeTimesInputDepth + ".0;\n      float wC = floor(wTexRLeftover / " + inputDepth + ".0);\n      float d1 = mod(wTexRLeftover, " + inputDepth + ".0);\n      float d2 = wTexCR.x;\n\n      // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n      // ? = to be determined. : = across all values in that axis.\n      float dotProd = 0.0;\n      for (float yR = 0.0; yR < " + yNumRows + ".0; yR += 1.0) {\n        float xR = wR + yR * " + stride + ".0 - " + zeroPad + ".0;\n        float xTexR = xR;\n        float yTexR = yR;\n        for (float yC = 0.0; yC < " + yNumCols + ".0; yC += 1.0) {\n          float xC = wC + yC * " + stride + ".0 - " + zeroPad + ".0;\n\n          // Map from 3D (xR, xC, d1) to 2D (xTexR, xTexC).\n          // Map from 3D (yR, yC, d2) to 2D (yTexR, yTexC).\n          vec2 xyTexC = vec2(xC, yC) * vec2(" + inputDepth + ".0, " + outputDepth + ".0) +\n                        vec2(d1, d2);\n          float xTexC = xyTexC.x;\n          float yTexC = xyTexC.y;\n\n          // Read dy(yR, yC, d2).\n          vec2 dyUV = (vec2(yTexC, yTexR) + halfCR) / dyShapeCR;\n          float dyValue = texture2D(dy, dyUV).r;\n\n          // Read x(xR, xC, d1) (potentially zero-padded).\n          float xValue =\n            getMatrixValueOrZeroPad(x, xShapeCR, vec2(xTexC, xTexR));\n\n          dotProd += (xValue * dyValue);\n        }\n      }\n      gl_FragColor = vec4(dotProd, 0, 0, 0);\n    }");
}
exports.getFragmentShaderDerWeightsSource = getFragmentShaderDerWeightsSource;
function getFragmentShaderConvTransposeSource(xShapeRCD, fSize, origInputDepth, origStride, origPad, hasBias) {
    var pad = fSize - 1 - origPad;
    var xRows = xShapeRCD[0], xCols = xShapeRCD[1], origOutputDepth = xShapeRCD[2];
    var xTexShapeRC = conv_util.computeTexShapeFrom3D(xShapeRCD);
    var wTexShapeRC = conv_util.computeWeightsTexShape(origInputDepth, origOutputDepth, fSize);
    var getBiasValue = hasBias ?
        conv_gpu.getFragmentShaderGetBiasValueSource(origInputDepth) :
        '';
    var biasPrologue = hasBias ? 'uniform sampler2D biases;' : '';
    var biasOperation = hasBias ? 'dotProd += getBiasValue(biases, d2);' : '';
    var prologue = "\n    precision highp float;\n    uniform sampler2D x;\n    uniform sampler2D weights;\n    " + biasPrologue + "\n    ";
    return prologue + '\n' + getBiasValue + '\n' +
        ("\n    const vec2 halfCR = vec2(0.5, 0.5);\n    const vec2 xShapeCR = vec2(" + xTexShapeRC[1] + ", " + xTexShapeRC[0] + ");\n    const vec2 wShapeCR = vec2(" + wTexShapeRC[1] + ", " + wTexShapeRC[0] + ");\n\n    void main() {\n      vec2 yTexCR = floor(gl_FragCoord.xy);\n\n      // Map from 2D (yTexR, yTexC) to 3D (yR, yC, d2).\n      float yR = yTexCR.y;\n      float yC = floor(yTexCR.x / " + origInputDepth + ".0);\n      float d2 = mod(yTexCR.x, " + origInputDepth + ".0);\n\n      vec2 xRCCorner = vec2(yR, yC) - vec2(" + pad + ".0, " + pad + ".0);\n      float xRCorner = xRCCorner.x;\n      float xCCorner = xRCCorner.y;\n\n      // Convolve x(?, ?, d1) with w(:, :, d2, d1) to get y(yR, yC, d2).\n      // ? = to be determined. : = across all values in that axis.\n      float dotProd = 0.0;\n      for (float wR = 0.0; wR < " + fSize + ".0; wR += 1.0) {\n\n        float xR = (xRCorner + wR) / " + origStride + ".0;\n        // TODO(smilkov): Splice this with another version where you call\n        // getMatrixValueOrZeroPad(). Here and below.\n        if (xR < 0.0 || xR >= " + xRows + ".0 || fract(xR) > 0.0) {\n          continue;\n        }\n\n        float wRPerm = " + fSize + ".0 - 1.0 - wR;\n        float xTexR = xR;\n\n        for (float wC = 0.0; wC < " + fSize + ".0; wC += 1.0) {\n\n          float xC = (xCCorner + wC) / " + origStride + ".0;\n          if (xC < 0.0 || xC >= " + xCols + ".0 || fract(xC) > 0.0) {\n            continue;\n          }\n\n          float wCPerm = " + fSize + ".0 - 1.0 - wC;\n          float wTexR = wRPerm * " + fSize + ".0 * " + origInputDepth + ".0 +\n                        wCPerm * " + origInputDepth + ".0 + d2;\n\n          for (float d1 = 0.0; d1 < " + origOutputDepth + ".0; d1 += 1.0) {\n            float xTexC = xC * " + origOutputDepth + ".0 + d1;\n            float wTexC = d1;\n\n            // Read x(xR, xC, d1).\n            vec2 xUV = (vec2(xTexC, xTexR) + halfCR) / xShapeCR;\n            float xValue = texture2D(x, xUV).r;\n\n            // Read w(wRPerm, wCPerm, d2, d1).\n            vec2 wUV = (vec2(wTexC, wTexR) + halfCR) / wShapeCR;\n            float wValue = texture2D(weights, wUV).r;\n\n            dotProd += xValue * wValue;\n          }\n        }\n      }\n      " + biasOperation + "\n      gl_FragColor = vec4(dotProd, 0, 0, 0);\n    }");
}
exports.getFragmentShaderConvTransposeSource = getFragmentShaderConvTransposeSource;
function getFragmentShaderDerBiasSource(dyShapeRCD) {
    var dyTexShapeRC = conv_util.computeTexShapeFrom3D(dyShapeRCD);
    var yNumRows = dyShapeRCD[0], yNumCols = dyShapeRCD[1], outputDepth = dyShapeRCD[2];
    return "\n    precision highp float;\n    uniform sampler2D dy;\n\n    const vec2 halfCR = vec2(0.5, 0.5);\n    const vec2 dyShapeCR = vec2(" + dyTexShapeRC[1] + ", " + dyTexShapeRC[0] + ");\n\n    void main() {\n      vec2 biasTexCR = floor(gl_FragCoord.xy);\n\n      // The bias texture RC shape is [1, d2].\n      float d2 = biasTexCR.x;\n\n      float derBias = 0.0;\n      for (float yR = 0.0; yR < " + yNumRows + ".0; yR += 1.0) {\n        float yTexR = yR;\n\n        for (float yC = 0.0; yC < " + yNumCols + ".0; yC += 1.0) {\n          // Map from 3D (yR, yC, d2) to 2D (yTexR, yTexC).\n          float yTexC = yC * " + outputDepth + ".0 + d2;\n\n          // Read dy(yR, yC, d2).\n          vec2 dyUV = (vec2(yTexC, yTexR) + halfCR) / dyShapeCR;\n          float dyValue = texture2D(dy, dyUV).r;\n\n          derBias += dyValue;\n        }\n      }\n      gl_FragColor = vec4(derBias, 0, 0, 0);\n    }";
}
exports.getFragmentShaderDerBiasSource = getFragmentShaderDerBiasSource;
function derBias(gpgpu, program, dyTex, result, resultTexShapeRC) {
    gpgpu.setOutputMatrixTexture(result, resultTexShapeRC[0], resultTexShapeRC[1]);
    gpgpu.setProgram(program);
    gpgpu.setInputMatrixTexture(dyTex, 'dy', 0);
    gpgpu.executeProgram();
}
exports.derBias = derBias;
function derWeights(gpgpu, program, xTex, dyTex, result, resultTexShapeRC) {
    gpgpu.setOutputMatrixTexture(result, resultTexShapeRC[0], resultTexShapeRC[1]);
    gpgpu.setProgram(program);
    gpgpu.setInputMatrixTexture(xTex, 'x', 0);
    gpgpu.setInputMatrixTexture(dyTex, 'dy', 1);
    gpgpu.executeProgram();
}
exports.derWeights = derWeights;
function convTranspose(gpgpu, program, xTex, weightsTex, biasesTex, resultTex, resultTexShapeRC) {
    gpgpu.setOutputMatrixTexture(resultTex, resultTexShapeRC[0], resultTexShapeRC[1]);
    gpgpu.setProgram(program);
    gpgpu.setInputMatrixTexture(xTex, 'x', 0);
    gpgpu.setInputMatrixTexture(weightsTex, 'weights', 1);
    if (biasesTex != null) {
        gpgpu.setInputMatrixTexture(biasesTex, 'biases', 2);
    }
    gpgpu.executeProgram();
}
exports.convTranspose = convTranspose;

},{"../conv_util":20,"./conv_gpu":36}],36:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var conv_util = require("../conv_util");
function getFragmentShaderPrologueSource() {
    return "\n    precision highp float;\n    uniform sampler2D x;\n    uniform sampler2D weights;\n    uniform sampler2D biases;\n    varying vec2 resultUV;";
}
exports.getFragmentShaderPrologueSource = getFragmentShaderPrologueSource;
function getFragmentShaderGetMatrixValueOrZeroPadSource() {
    return "\n    float getMatrixValueOrZeroPad(in sampler2D matrix, vec2 matrixShapeCR,\n        vec2 requestedCR) {\n      vec2 uv = (requestedCR + vec2(0.5, 0.5)) / matrixShapeCR;\n      float value = texture2D(matrix, uv).r;\n      bool lessThanZero = any(lessThan(uv, vec2(0, 0)));\n      bool greaterThanOne = any(greaterThan(uv, vec2(1, 1)));\n      bool outside = lessThanZero || greaterThanOne;\n      return mix(value, 0.0, float(outside));\n    }";
}
exports.getFragmentShaderGetMatrixValueOrZeroPadSource = getFragmentShaderGetMatrixValueOrZeroPadSource;
function getFragmentShaderConvolveSource(xShapeRCD, fSize, outputDepth, stride, pad, hasBias) {
    var xRows = xShapeRCD[0], xCols = xShapeRCD[1], inputDepth = xShapeRCD[2];
    var xTexShapeRC = conv_util.computeTexShapeFrom3D(xShapeRCD);
    var wTexShapeRC = conv_util.computeWeightsTexShape(inputDepth, outputDepth, fSize);
    return "\n    const vec2 halfCR = vec2(0.5, 0.5);\n    const vec2 xShapeCR = vec2(" + xTexShapeRC[1] + ", " + xTexShapeRC[0] + ");\n    const vec2 wShapeCR = vec2(" + wTexShapeRC[1] + ", " + wTexShapeRC[0] + ");\n\n    void main() {\n      vec2 yTexCR = floor(gl_FragCoord.xy);\n\n      // Map from 2D (yTexR, yTexC) to 3D (yR, yC, d2).\n      float yR = yTexCR.y;\n      float yC = floor(yTexCR.x / " + outputDepth + ".0);\n      float d2 = mod(yTexCR.x, " + outputDepth + ".0);\n      float wTexC = d2;\n\n      vec2 xRCCorner = vec2(yR, yC) * vec2(" + stride + ", " + stride + ") -\n          vec2(" + pad + ".0, " + pad + ".0);\n      float xRCorner = xRCCorner.x;\n      float xCCorner = xRCCorner.y;\n\n      // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n      // ? = to be determined. : = across all values in that axis.\n      float dotProd = 0.0;\n      for (float wR = 0.0; wR < " + fSize + ".0; wR += 1.0) {\n        float xR = xRCorner + wR;\n        float xTexR = xR;\n\n        for (float wC = 0.0; wC < " + fSize + ".0; wC += 1.0) {\n          float xC = xCCorner + wC;\n\n          for (float d1 = 0.0; d1 < " + inputDepth + ".0; d1 += 1.0) {\n            float xTexC = xC * " + inputDepth + ".0 + d1;\n            float wTexR = wR * " + fSize * inputDepth + ".0 +\n                wC * " + inputDepth + ".0 + d1;\n\n            float xValue =\n                getMatrixValueOrZeroPad(x, xShapeCR, vec2(xTexC, xTexR));\n\n            // Read w(wR, wC, d1, d2).\n            vec2 wUV = (vec2(wTexC, wTexR) + halfCR) / wShapeCR;\n            float wValue = texture2D(weights, wUV).r;\n\n            dotProd += xValue * wValue;\n          }\n        }\n      }\n      if (" + hasBias + ") {\n        dotProd += getBiasValue(biases, d2);\n      }\n      gl_FragColor = vec4(dotProd, 0, 0, 0);\n    }";
}
exports.getFragmentShaderConvolveSource = getFragmentShaderConvolveSource;
function getFragmentShaderGetBiasValueSource(outputDepth) {
    return "\n    float getBiasValue(in sampler2D bias, float biasC) {\n      const vec2 biasShapeCR = vec2(" + outputDepth + ", 1);\n      vec2 biasCR = vec2(mod(biasC, " + outputDepth + ".0), 0);\n      vec2 biasUV = (biasCR + vec2(0.5, 0.5)) / biasShapeCR;\n      return texture2D(bias, biasUV).r;\n    }";
}
exports.getFragmentShaderGetBiasValueSource = getFragmentShaderGetBiasValueSource;
function getFragmentShaderSource(aShapeRowColDepth, resultDepth, fieldSize, stride, zeroPad, hasBias) {
    var aShapeRC = conv_util.computeTexShapeFrom3D(aShapeRowColDepth);
    var weightShapeRC = conv_util.computeWeightsTexShape(aShapeRowColDepth[2], resultDepth, fieldSize);
    var prologue = getFragmentShaderPrologueSource();
    var getMatrixValueOrZeroPad = getFragmentShaderGetMatrixValueOrZeroPadSource();
    var convolve = getFragmentShaderConvolveSource(aShapeRowColDepth, fieldSize, resultDepth, stride, zeroPad, hasBias);
    var getBiasValue = getFragmentShaderGetBiasValueSource(resultDepth);
    return [
        prologue,
        getMatrixValueOrZeroPad,
        getBiasValue,
        convolve,
    ].join('\n');
}
exports.getFragmentShaderSource = getFragmentShaderSource;
function convolve(gpgpu, program, a, weights, biases, result, resultShapeRowCol) {
    gpgpu.setOutputMatrixTexture(result, resultShapeRowCol[0], resultShapeRowCol[1]);
    gpgpu.setProgram(program);
    gpgpu.setInputMatrixTexture(a, 'x', 0);
    gpgpu.setInputMatrixTexture(weights, 'weights', 1);
    if (biases != null) {
        gpgpu.setInputMatrixTexture(biases, 'biases', 2);
    }
    gpgpu.executeProgram();
}
exports.convolve = convolve;

},{"../conv_util":20}],37:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function getFragmentShaderSource(sourceShapeRowCol, sourceSizeRowCol, destSizeRowCol) {
    return "\n    precision highp float;\n    uniform sampler2D source;\n    uniform vec2 sourceStartCR;\n    uniform vec2 destStartCR;\n\n    const vec2 sourceShapeCR =\n      vec2(" + sourceShapeRowCol[1] + ", " + sourceShapeRowCol[0] + ");\n    const vec2 sourceSizeCR =\n      vec2(" + sourceSizeRowCol[1] + ", " + sourceSizeRowCol[0] + ");\n    const vec2 destSizeCR =\n      vec2(" + destSizeRowCol[1] + ", " + destSizeRowCol[0] + ");\n\n    void main() {\n      vec2 destOffsetCR = floor(gl_FragCoord.xy) - destStartCR;\n      float destOffsetFlat = (destOffsetCR.y * destSizeCR.x) + destOffsetCR.x;\n      vec2 sourceOffsetCR = vec2(mod(destOffsetFlat, sourceSizeCR.x),\n        floor(destOffsetFlat / sourceSizeCR.x));\n      vec2 sourceCR = sourceStartCR + sourceOffsetCR;\n      vec2 sourceUV = (sourceCR + vec2(0.5, 0.5)) / sourceShapeCR;\n      gl_FragColor = texture2D(source, sourceUV);\n    }";
}
exports.getFragmentShaderSource = getFragmentShaderSource;
function copy(gpgpu, program, source, sourceShapeRowCol, sourceStartRowCol, sourceSizeRowCol, dest, destShapeRowCol, destStartRowCol, destSizeRowCol) {
    gpgpu.setOutputMatrixTexture(dest, destShapeRowCol[0], destShapeRowCol[1]);
    gpgpu.setOutputMatrixWriteRegion(destStartRowCol[0], destSizeRowCol[0], destStartRowCol[1], destSizeRowCol[1]);
    gpgpu.setProgram(program);
    gpgpu.setInputMatrixTexture(source, 'source', 0);
    var sourceStartCRLoc = gpgpu.getUniformLocation('sourceStartCR');
    gpgpu.gl.uniform2f(sourceStartCRLoc, sourceStartRowCol[1], sourceStartRowCol[0]);
    var destStartCRLoc = gpgpu.getUniformLocation('destStartCR');
    gpgpu.gl.uniform2f(destStartCRLoc, destStartRowCol[1], destStartRowCol[0]);
    gpgpu.executeProgram();
}
exports.copy = copy;

},{}],38:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var unaryop_gpu = require("./unaryop_gpu");
function getExpUnaryOp() {
    return 'gl_FragColor = vec4(exp(value), 0, 0, 0);';
}
function getFragmentShaderSource() {
    return unaryop_gpu.getFragmentShaderSource(getExpUnaryOp());
}
exports.getFragmentShaderSource = getFragmentShaderSource;
function exp(gpgpu, expProgram, a, rows, columns, result) {
    unaryop_gpu.unaryOp(gpgpu, expProgram, a, rows, columns, result);
}
exports.exp = exp;
function uploadExpDownload(a, rows, columns) {
    return unaryop_gpu.uploadUnaryOpDownload(a, rows, columns, getExpUnaryOp());
}
exports.uploadExpDownload = uploadExpDownload;

},{"./unaryop_gpu":61}],39:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var gpgpu_util = require("./gpgpu_util");
var tex_util = require("./tex_util");
var webgl_util = require("./webgl_util");
var GPGPUContext = (function () {
    function GPGPUContext(gl) {
        this.outputTexture = null;
        this.program = null;
        this.disposed = false;
        this.autoDebugValidate = false;
        if (gl != null) {
            this.gl = gl;
        }
        else {
            this.gl = gpgpu_util.createWebGLContext();
        }
        if (!webgl_util.isWebGL2Enabled()) {
            this.textureFloatExtension =
                webgl_util.getExtensionOrThrow(this.gl, 'OES_texture_float');
        }
        else {
            this.colorBufferFloatExtension =
                webgl_util.getExtensionOrThrow(this.gl, 'EXT_color_buffer_float');
        }
        this.loseContextExtension =
            webgl_util.getExtensionOrThrow(this.gl, 'WEBGL_lose_context');
        this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);
        this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);
        this.framebuffer = webgl_util.createFramebuffer(this.gl);
    }
    GPGPUContext.prototype.dispose = function () {
        var _this = this;
        this.throwIfDisposed();
        if (this.program != null) {
            console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' +
                ' This is probably a resource leak, delete the program with ' +
                'GPGPUContext.deleteProgram before disposing.');
        }
        if (this.outputTexture != null) {
            console.warn('Disposing a GPGPUContext that still has a bound output matrix ' +
                'texture.  This is probably a resource leak, delete the output ' +
                'matrix texture with GPGPUContext.deleteMatrixTexture before ' +
                'disposing.');
        }
        var gl = this.gl;
        webgl_util.callAndCheck(gl, function () { return gl.finish(); });
        webgl_util.callAndCheck(gl, function () { return gl.bindFramebuffer(gl.FRAMEBUFFER, null); });
        webgl_util.callAndCheck(gl, function () { return gl.deleteFramebuffer(_this.framebuffer); });
        webgl_util.callAndCheck(gl, function () { return gl.bindBuffer(gl.ARRAY_BUFFER, null); });
        webgl_util.callAndCheck(gl, function () { return gl.deleteBuffer(_this.vertexBuffer); });
        webgl_util.callAndCheck(gl, function () { return gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null); });
        webgl_util.callAndCheck(gl, function () { return gl.deleteBuffer(_this.indexBuffer); });
        this.loseContextExtension.loseContext();
        this.disposed = true;
    };
    GPGPUContext.prototype.enableAutomaticDebugValidation = function (enabled) {
        this.autoDebugValidate = enabled;
        webgl_util.enableDebugWebGLErrorChecking(enabled);
    };
    GPGPUContext.prototype.createMatrixTexture = function (rows, columns) {
        this.throwIfDisposed();
        return gpgpu_util.createMatrixTexture(this.gl, rows, columns);
    };
    GPGPUContext.prototype.uploadPixelDataToTexture = function (texture, pixels) {
        this.throwIfDisposed();
        gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);
    };
    GPGPUContext.prototype.createPackedMatrixTexture = function (rows, columns) {
        this.throwIfDisposed();
        return gpgpu_util.createPackedMatrixTexture(this.gl, rows, columns);
    };
    GPGPUContext.prototype.deleteMatrixTexture = function (texture) {
        var _this = this;
        this.throwIfDisposed();
        if (this.outputTexture === texture) {
            webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);
            this.outputTexture = null;
        }
        webgl_util.callAndCheck(this.gl, function () { return _this.gl.deleteTexture(texture); });
    };
    GPGPUContext.prototype.uploadMatrixToTexture = function (texture, rows, columns, matrix) {
        this.throwIfDisposed();
        var numChannels = 1;
        return gpgpu_util.uploadMatrixToTexture(this.gl, texture, rows, columns, matrix, numChannels);
    };
    GPGPUContext.prototype.uploadMatrixToPackedTexture = function (texture, rows, columns, matrix) {
        this.throwIfDisposed();
        return gpgpu_util.uploadMatrixToPackedTexture(this.gl, texture, rows, columns, matrix);
    };
    GPGPUContext.prototype.downloadMatrixFromTexture = function (texture, rows, columns) {
        var _this = this;
        return this.downloadMatrixDriver(texture, function () {
            return gpgpu_util.downloadMatrixFromOutputTexture(_this.gl, rows, columns);
        });
    };
    GPGPUContext.prototype.downloadMatrixFromPackedTexture = function (texture, rows, columns) {
        var _this = this;
        return this.downloadMatrixDriver(texture, function () { return gpgpu_util.downloadMatrixFromPackedOutputTexture(_this.gl, rows, columns); });
    };
    GPGPUContext.prototype.createProgram = function (fragmentShaderSource) {
        this.throwIfDisposed();
        var gl = this.gl;
        var fragmentShader = webgl_util.createFragmentShader(gl, fragmentShaderSource);
        var vertexShader = gpgpu_util.createVertexShader(gl);
        var program = webgl_util.createProgram(gl);
        webgl_util.callAndCheck(gl, function () { return gl.attachShader(program, vertexShader); });
        webgl_util.callAndCheck(gl, function () { return gl.attachShader(program, fragmentShader); });
        webgl_util.linkProgram(gl, program);
        if (this.autoDebugValidate) {
            webgl_util.validateProgram(gl, program);
        }
        webgl_util.callAndCheck(gl, function () { return gl.detachShader(program, vertexShader); });
        webgl_util.callAndCheck(gl, function () { return gl.deleteShader(vertexShader); });
        webgl_util.callAndCheck(gl, function () { return gl.detachShader(program, fragmentShader); });
        webgl_util.callAndCheck(gl, function () { return gl.deleteShader(fragmentShader); });
        return program;
    };
    GPGPUContext.prototype.deleteProgram = function (program) {
        var _this = this;
        this.throwIfDisposed();
        if (program === this.program) {
            this.program = null;
        }
        if (program != null) {
            webgl_util.callAndCheck(this.gl, function () { return _this.gl.deleteProgram(program); });
        }
    };
    GPGPUContext.prototype.setProgram = function (program) {
        var _this = this;
        this.throwIfDisposed();
        this.program = program;
        if ((this.program != null) && this.autoDebugValidate) {
            webgl_util.validateProgram(this.gl, this.program);
        }
        webgl_util.callAndCheck(this.gl, function () { return _this.gl.useProgram(program); });
    };
    GPGPUContext.prototype.getUniformLocation = function (uniformName) {
        this.throwIfDisposed();
        this.throwIfNoProgram();
        return webgl_util.getProgramUniformLocationOrThrow(this.gl, this.program, uniformName);
    };
    GPGPUContext.prototype.setInputMatrixTexture = function (inputMatrixTexture, uniformName, textureUnit) {
        this.throwIfDisposed();
        this.throwIfNoProgram();
        webgl_util.bindTextureToProgramUniformSampler(this.gl, this.program, inputMatrixTexture, uniformName, textureUnit);
    };
    GPGPUContext.prototype.setOutputMatrixTexture = function (outputMatrixTexture, rows, columns) {
        this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);
    };
    GPGPUContext.prototype.setOutputPackedMatrixTexture = function (outputPackedMatrixTexture, rows, columns) {
        this.throwIfDisposed();
        var _a = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns), width = _a[0], height = _a[1];
        this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);
    };
    GPGPUContext.prototype.setOutputMatrixWriteRegion = function (startRow, numRows, startColumn, numColumns) {
        this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);
    };
    GPGPUContext.prototype.setOutputPackedMatrixWriteRegion = function (startRow, numRows, startColumn, numColumns) {
        throw new Error('setOutputPackedMatrixWriteRegion not implemented.');
    };
    GPGPUContext.prototype.debugValidate = function () {
        if (this.program != null) {
            webgl_util.validateProgram(this.gl, this.program);
        }
        webgl_util.validateFramebuffer(this.gl);
    };
    GPGPUContext.prototype.executeProgram = function () {
        this.throwIfDisposed();
        this.throwIfNoProgram();
        var gl = this.gl;
        gpgpu_util.bindVertexProgramAttributeStreams(gl, this.program, this.vertexBuffer);
        if (this.autoDebugValidate) {
            this.debugValidate();
        }
        webgl_util.callAndCheck(gl, function () { return gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0); });
    };
    GPGPUContext.prototype.blockUntilAllProgramsCompleted = function () {
        var _this = this;
        this.throwIfDisposed();
        webgl_util.callAndCheck(this.gl, function () { return _this.gl.finish(); });
    };
    GPGPUContext.prototype.downloadMatrixDriver = function (texture, downloadAndDecode) {
        this.throwIfDisposed();
        webgl_util.bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);
        var result = downloadAndDecode();
        if (this.outputTexture != null) {
            webgl_util.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);
            if (this.autoDebugValidate) {
                webgl_util.validateFramebuffer(this.gl);
            }
        }
        else {
            webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);
        }
        return result;
    };
    GPGPUContext.prototype.setOutputMatrixTextureDriver = function (outputMatrixTextureMaybePacked, width, height) {
        this.throwIfDisposed();
        var gl = this.gl;
        webgl_util.bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);
        if (this.autoDebugValidate) {
            webgl_util.validateFramebuffer(gl);
        }
        this.outputTexture = outputMatrixTextureMaybePacked;
        webgl_util.callAndCheck(gl, function () { return gl.viewport(0, 0, width, height); });
        webgl_util.callAndCheck(gl, function () { return gl.scissor(0, 0, width, height); });
    };
    GPGPUContext.prototype.setOutputMatrixWriteRegionDriver = function (x, y, width, height) {
        var _this = this;
        this.throwIfDisposed();
        webgl_util.callAndCheck(this.gl, function () { return _this.gl.scissor(x, y, width, height); });
    };
    GPGPUContext.prototype.throwIfDisposed = function () {
        if (this.disposed) {
            throw new Error('Attempted to use disposed GPGPUContext.');
        }
    };
    GPGPUContext.prototype.throwIfNoProgram = function () {
        if (this.program == null) {
            throw new Error('No GPU program is currently set.');
        }
    };
    return GPGPUContext;
}());
exports.GPGPUContext = GPGPUContext;

},{"./gpgpu_util":40,"./tex_util":58,"./webgl_util":62}],40:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tex_util = require("./tex_util");
var webgl_util = require("./webgl_util");
function getWebGLContextAttributes() {
    return {
        alpha: false,
        antialias: false,
        premultipliedAlpha: false,
        preserveDrawingBuffer: false,
        depth: false,
        stencil: false,
        failIfMajorPerformanceCaveat: true
    };
}
exports.getWebGLContextAttributes = getWebGLContextAttributes;
function createWebGLContext(canvas) {
    var attributes = getWebGLContextAttributes();
    var gl;
    if (canvas != null) {
        gl = webgl_util.createWebGLRenderingContextFromCanvas(canvas, attributes);
    }
    else {
        gl = webgl_util.createWebGLRenderingContext(attributes);
    }
    webgl_util.callAndCheck(gl, function () { return gl.disable(gl.DEPTH_TEST); });
    webgl_util.callAndCheck(gl, function () { return gl.disable(gl.STENCIL_TEST); });
    webgl_util.callAndCheck(gl, function () { return gl.disable(gl.BLEND); });
    webgl_util.callAndCheck(gl, function () { return gl.disable(gl.DITHER); });
    webgl_util.callAndCheck(gl, function () { return gl.disable(gl.POLYGON_OFFSET_FILL); });
    webgl_util.callAndCheck(gl, function () { return gl.disable(gl.SAMPLE_COVERAGE); });
    webgl_util.callAndCheck(gl, function () { return gl.enable(gl.SCISSOR_TEST); });
    webgl_util.callAndCheck(gl, function () { return gl.enable(gl.CULL_FACE); });
    webgl_util.callAndCheck(gl, function () { return gl.cullFace(gl.BACK); });
    return gl;
}
exports.createWebGLContext = createWebGLContext;
function createVertexShader(gl) {
    var vertexShaderSource = "\n    precision highp float;\n    attribute vec3 clipSpacePos;\n    attribute vec2 uv;\n    varying vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }";
    return webgl_util.createVertexShader(gl, vertexShaderSource);
}
exports.createVertexShader = createVertexShader;
function createVertexBuffer(gl) {
    var vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);
    return webgl_util.createStaticVertexBuffer(gl, vertexArray);
}
exports.createVertexBuffer = createVertexBuffer;
function createIndexBuffer(gl) {
    var triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);
    return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);
}
exports.createIndexBuffer = createIndexBuffer;
function getTextureInternalFormat(gl, numChannels) {
    if (webgl_util.isWebGL2Enabled()) {
        if (numChannels === 4) {
            return gl.RGBA32F;
        }
        return gl.R32F;
    }
    return gl.RGBA;
}
function getTextureFormat(gl, numChannels) {
    if (webgl_util.isWebGL2Enabled() && numChannels === 1) {
        return gl.RED;
    }
    return gl.RGBA;
}
function createAndConfigureTexture(gl, width, height, numChannels) {
    webgl_util.validateTextureSize(gl, width, height);
    var texture = webgl_util.createTexture(gl);
    var tex2d = gl.TEXTURE_2D;
    var internalFormat = getTextureInternalFormat(gl, numChannels);
    var format = getTextureFormat(gl, numChannels);
    webgl_util.callAndCheck(gl, function () { return gl.bindTexture(tex2d, texture); });
    webgl_util.callAndCheck(gl, function () { return gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE); });
    webgl_util.callAndCheck(gl, function () { return gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE); });
    webgl_util.callAndCheck(gl, function () { return gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST); });
    webgl_util.callAndCheck(gl, function () { return gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST); });
    webgl_util.callAndCheck(gl, function () { return gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, format, gl.FLOAT, null); });
    webgl_util.callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, null); });
    return texture;
}
function createMatrixTexture(gl, rows, columns) {
    var _a = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns), width = _a[0], height = _a[1];
    var numChannels = 1;
    return createAndConfigureTexture(gl, width, height, numChannels);
}
exports.createMatrixTexture = createMatrixTexture;
function createColorMatrixTexture(gl, rows, columns) {
    var _a = tex_util.getColorMatrixTextureShapeWidthHeight(rows, columns), width = _a[0], height = _a[1];
    var numChannels = 4;
    return createAndConfigureTexture(gl, width, height, numChannels);
}
exports.createColorMatrixTexture = createColorMatrixTexture;
function createPackedMatrixTexture(gl, rows, columns) {
    var _a = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns), width = _a[0], height = _a[1];
    var numChannels = 4;
    return createAndConfigureTexture(gl, width, height, numChannels);
}
exports.createPackedMatrixTexture = createPackedMatrixTexture;
function bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {
    var posOffset = 0;
    var uvOffset = 3 * 4;
    var stride = (3 * 4) + (2 * 4);
    webgl_util.callAndCheck(gl, function () { return gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer); });
    webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);
    try {
        webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);
    }
    catch (e) {
        if (!e.hasOwnProperty('namedVertexAttributeNotFound')) {
            throw e;
        }
    }
}
exports.bindVertexProgramAttributeStreams = bindVertexProgramAttributeStreams;
function uploadPixelDataToTexture(gl, texture, pixels) {
    var numChannels = 4;
    var internalFormat = getTextureInternalFormat(gl, numChannels);
    webgl_util.callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, texture); });
    webgl_util.callAndCheck(gl, function () { return gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, gl.RGBA, gl.FLOAT, pixels); });
    webgl_util.callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, null); });
}
exports.uploadPixelDataToTexture = uploadPixelDataToTexture;
function uploadDataToTexture(gl, texture, width, height, data, numChannels) {
    var textureFormat = getTextureFormat(gl, numChannels);
    webgl_util.validateTextureSize(gl, width, height);
    webgl_util.callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, texture); });
    webgl_util.callAndCheck(gl, function () { return gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, textureFormat, gl.FLOAT, data); });
    webgl_util.callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, null); });
}
function uploadMatrixToTexture(gl, texture, rows, columns, matrix, numChannels) {
    var _a = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns), w = _a[0], h = _a[1];
    var channelsPerTexture = numChannels === 1 ? webgl_util.getChannelsPerTexture() : numChannels;
    var unpackedArray = new Float32Array(tex_util.getUnpackedArraySizeFromMatrixSize(matrix.length, channelsPerTexture));
    tex_util.encodeMatrixToUnpackedArray(matrix, unpackedArray, channelsPerTexture);
    uploadDataToTexture(gl, texture, w, h, unpackedArray, numChannels);
}
exports.uploadMatrixToTexture = uploadMatrixToTexture;
function uploadMatrixToPackedTexture(gl, texture, rows, columns, matrix) {
    var _a = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns), w = _a[0], h = _a[1];
    var packedRGBA = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(rows, columns));
    tex_util.encodeMatrixToPackedRGBA(matrix, rows, columns, packedRGBA);
    var numChannels = 4;
    uploadDataToTexture(gl, texture, w, h, packedRGBA, numChannels);
}
exports.uploadMatrixToPackedTexture = uploadMatrixToPackedTexture;
function downloadMatrixFromOutputTexture(gl, rows, columns) {
    var _a = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns), w = _a[0], h = _a[1];
    var channelsPerTexture = 4;
    var unpackedArray = new Float32Array(tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, channelsPerTexture));
    var textureFormat = getTextureFormat(gl, channelsPerTexture);
    webgl_util.callAndCheck(gl, function () { return gl.readPixels(0, 0, w, h, gl.RGBA, gl.FLOAT, unpackedArray); });
    var matrix = new Float32Array(rows * columns);
    tex_util.decodeMatrixFromUnpackedArray(unpackedArray, matrix, channelsPerTexture);
    return matrix;
}
exports.downloadMatrixFromOutputTexture = downloadMatrixFromOutputTexture;
function downloadMatrixFromPackedOutputTexture(gl, rows, columns) {
    var _a = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns), w = _a[0], h = _a[1];
    var packedRGBA = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(rows, columns));
    webgl_util.callAndCheck(gl, function () { return gl.readPixels(0, 0, w, h, gl.RGBA, gl.FLOAT, packedRGBA); });
    var matrix = new Float32Array(rows * columns);
    return tex_util.decodeMatrixFromPackedRGBA(packedRGBA, rows, columns, matrix);
}
exports.downloadMatrixFromPackedOutputTexture = downloadMatrixFromPackedOutputTexture;

},{"./tex_util":58,"./webgl_util":62}],41:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var unaryop_gpu = require("./unaryop_gpu");
function getLogUnaryOp() {
    return 'gl_FragColor = vec4(log(value), 0, 0, 0);';
}
function getFragmentShaderSource() {
    return unaryop_gpu.getFragmentShaderSource(getLogUnaryOp());
}
exports.getFragmentShaderSource = getFragmentShaderSource;
function log(gpgpu, logProgram, a, rows, columns, result) {
    unaryop_gpu.unaryOp(gpgpu, logProgram, a, rows, columns, result);
}
exports.log = log;
function uploadLogDownload(a, rows, columns) {
    return unaryop_gpu.uploadUnaryOpDownload(a, rows, columns, getLogUnaryOp());
}
exports.uploadLogDownload = uploadLogDownload;

},{"./unaryop_gpu":61}],42:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var gpgpu_context_1 = require("./gpgpu_context");
function getFragmentShaderSource(rows, columns) {
    return "\n    precision highp float;\n    uniform sampler2D matrixA;\n    varying vec2 resultUV;\n\n    const vec2 aDimCR = vec2(" + columns + ".0, " + rows + ".0);\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    void main() {\n      float aMax = texture2D(matrixA, halfCR / aDimCR).r;\n      for (float r = 0.0; r < aDimCR.y; r += 1.0) {\n        for (float c = 0.0; c < aDimCR.x; c += 1.0) {\n          vec2 uv = (vec2(c, r) + halfCR) / aDimCR;\n          float aCur = texture2D(matrixA, uv).r;\n          aMax = max(aMax, aCur);\n        }\n      }\n\n      float expSum = 0.0;\n      for (float r = 0.0; r < aDimCR.y; r += 1.0) {\n        for (float c = 0.0; c < aDimCR.x; c += 1.0) {\n          vec2 uv = (vec2(c, r) + halfCR) / aDimCR;\n          float aCur = texture2D(matrixA, uv).r;\n          expSum += exp(aCur - aMax);\n        }\n      }\n\n      gl_FragColor = vec4(aMax + log(expSum), 0, 0, 0);\n    }";
}
exports.getFragmentShaderSource = getFragmentShaderSource;
function logSumExp(gpgpu, logSumExpProgram, a, rows, columns, result) {
    gpgpu.setOutputMatrixTexture(result, 1, 1);
    gpgpu.setProgram(logSumExpProgram);
    gpgpu.setInputMatrixTexture(a, 'matrixA', 0);
    gpgpu.executeProgram();
}
exports.logSumExp = logSumExp;
function uploadLogSumExpDownload(a, rows, columns) {
    var gpgpu = new gpgpu_context_1.GPGPUContext();
    var program = gpgpu.createProgram(getFragmentShaderSource(rows, columns));
    var aTexture = gpgpu.createMatrixTexture(rows, columns);
    var resultTexture = gpgpu.createMatrixTexture(1, 1);
    gpgpu.uploadMatrixToTexture(aTexture, rows, columns, a);
    logSumExp(gpgpu, program, aTexture, rows, columns, resultTexture);
    var result = gpgpu.downloadMatrixFromTexture(resultTexture, 1, 1);
    gpgpu.deleteMatrixTexture(aTexture);
    gpgpu.deleteMatrixTexture(resultTexture);
    gpgpu.deleteProgram(program);
    gpgpu.dispose();
    return result[0];
}
exports.uploadLogSumExpDownload = uploadLogSumExpDownload;

},{"./gpgpu_context":39}],43:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var conv_util = require("../conv_util");
function getFragmentShaderMaxPoolBackprop(dyShapeRCD, fSize, origStride, origPad) {
    var origInputDepth = dyShapeRCD[2];
    var pad = fSize - 1 - origPad;
    var dyRows = dyShapeRCD[0], dyCols = dyShapeRCD[1], depth = dyShapeRCD[2];
    var dyTexShapeRC = conv_util.computeTexShapeFrom3D(dyShapeRCD);
    return "\n    precision highp float;\n    uniform sampler2D dy;\n    uniform sampler2D maxPos;\n\n    const vec2 halfCR = vec2(0.5, 0.5);\n    const vec2 dyShapeCR = vec2(" + dyTexShapeRC[1] + ", " + dyTexShapeRC[0] + ");\n\n    void main() {\n      vec2 dxTexCR = floor(gl_FragCoord.xy);\n\n      // Map from 2D (dxTexR, dxTexC) to 3D (dxR, dxC, d).\n      float dxR = dxTexCR.y;\n      float dxC = floor(dxTexCR.x / " + origInputDepth + ".0);\n      float d = mod(dxTexCR.x, " + origInputDepth + ".0);\n\n      vec2 dyRCCorner = vec2(dxR, dxC) - vec2(" + pad + ".0, " + pad + ".0);\n      float dyRCorner = dyRCCorner.x;\n      float dyCCorner = dyRCCorner.y;\n\n      // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(yR, dxC, d).\n      // ? = to be determined. : = across all values in that axis.\n      float dotProd = 0.0;\n      for (float wR = 0.0; wR < " + fSize + ".0; wR += 1.0) {\n\n        float dyR = (dyRCorner + wR) / " + origStride + ".0;\n        // TODO(nsthorat): Splice this with another version where you call\n        // getMatrixValueOrZeroPad(). Here and below.\n        if (dyR < 0.0 || dyR >= " + dyRows + ".0 || fract(dyR) > 0.0) {\n          continue;\n        }\n\n        float dyTexR = dyR;\n\n        for (float wC = 0.0; wC < " + fSize + ".0; wC += 1.0) {\n\n          float dyC = (dyCCorner + wC) / " + origStride + ".0;\n          if (dyC < 0.0 || dyC >= " + dyCols + ".0 || fract(dyC) > 0.0) {\n            continue;\n          }\n\n          float dyTexC = dyC * " + depth + ".0 + d;\n\n          // Read dy(dyR, dyC, d).\n          vec2 dyUV = (vec2(dyTexC, dyTexR) + halfCR) / dyShapeCR;\n          float dyValue = texture2D(dy, dyUV).r;\n\n          // Read maxPos(dyR, dyC, d).\n          float maxPosValue =\n              " + (fSize * fSize - 1) + ".0 - texture2D(maxPos, dyUV).r;\n\n          // Get the current value, check it against the value from the\n          // position matrix.\n          float curPosValue = wR * " + fSize + ".0 + wC;\n          float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n          dotProd += dyValue * mask;\n        }\n      }\n      gl_FragColor = vec4(dotProd, 0, 0, 0);\n    }";
}
exports.getFragmentShaderMaxPoolBackprop = getFragmentShaderMaxPoolBackprop;
function maxPoolBackprop(gpgpu, program, dyTex, maxPositionsTex, resultTex, resultTexShapeRC) {
    gpgpu.setOutputMatrixTexture(resultTex, resultTexShapeRC[0], resultTexShapeRC[1]);
    gpgpu.setProgram(program);
    gpgpu.setInputMatrixTexture(dyTex, 'dy', 0);
    gpgpu.setInputMatrixTexture(maxPositionsTex, 'maxPos', 1);
    gpgpu.executeProgram();
}
exports.maxPoolBackprop = maxPoolBackprop;

},{"../conv_util":20}],44:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var pool_gpu = require("./pool_gpu");
function getFragmentShaderMaxPoolPositionsSource(xShapeRCD, fSize, stride, pad) {
    return getFragmentShaderMaxPoolCommonSource(xShapeRCD, fSize, stride, pad, true);
}
exports.getFragmentShaderMaxPoolPositionsSource = getFragmentShaderMaxPoolPositionsSource;
function getFragmentShaderMaxPoolSource(xShapeRCD, fSize, stride, pad) {
    return getFragmentShaderMaxPoolCommonSource(xShapeRCD, fSize, stride, pad, false);
}
exports.getFragmentShaderMaxPoolSource = getFragmentShaderMaxPoolSource;
function getFragmentShaderMaxPoolCommonSource(xShapeRCD, fSize, stride, pad, computeMaxPositions) {
    return pool_gpu.getFragmentShaderPoolCommonSource(xShapeRCD, fSize, stride, pad, 'max', computeMaxPositions);
}
function maxPoolCommon(gpgpu, program, x, result, resultShapeRowCol) {
    pool_gpu.poolCommon(gpgpu, program, x, result, resultShapeRowCol);
}
exports.maxPoolCommon = maxPoolCommon;

},{"./pool_gpu":49}],45:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var pool_gpu = require("./pool_gpu");
function getFragmentShaderMinPoolSource(xShapeRCD, fSize, stride, pad) {
    return pool_gpu.getFragmentShaderPoolCommonSource(xShapeRCD, fSize, stride, pad, 'min', false);
}
exports.getFragmentShaderMinPoolSource = getFragmentShaderMinPoolSource;
function minPool(gpgpu, program, x, result, resultShapeRowCol) {
    pool_gpu.poolCommon(gpgpu, program, x, result, resultShapeRowCol);
}
exports.minPool = minPool;

},{"./pool_gpu":49}],46:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var webgl_util_1 = require("./webgl_util");
function getFragmentShaderSource(rows, columns, compOp) {
    return "\n    precision highp float;\n    uniform sampler2D matrixA;\n    varying vec2 outputColumnRow;\n\n    const vec2 aDimCR = vec2(" + columns + ".0, " + rows + ".0);\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    " + webgl_util_1.IS_NAN_SHADER_FUNC + "\n\n    void main() {\n      float value = texture2D(matrixA, halfCR / aDimCR).r;\n      for (float r = 0.0; r < aDimCR.y; r += 1.0) {\n        for (float c = 0.0; c < aDimCR.x; c += 1.0) {\n          vec2 cr = vec2(c, r);\n          vec2 uv = (cr + halfCR) / aDimCR;\n          float candidate = texture2D(matrixA, uv).r;\n          if (isNaN(candidate)) {\n            gl_FragColor = vec4(candidate, 0, 0, 0);\n            return;\n          }\n          value = " + compOp + "(value, candidate);\n        }\n      }\n      gl_FragColor = vec4(value, 0, 0, 0);\n    }";
}
function getMinFragmentShaderSource(rows, columns) {
    return getFragmentShaderSource(rows, columns, 'min');
}
exports.getMinFragmentShaderSource = getMinFragmentShaderSource;
function getMaxFragmentShaderSource(rows, columns) {
    return getFragmentShaderSource(rows, columns, 'max');
}
exports.getMaxFragmentShaderSource = getMaxFragmentShaderSource;
function minMax(gpgpu, minMaxProgram, a, rows, columns, result) {
    gpgpu.setOutputMatrixTexture(result, 1, 1);
    gpgpu.setProgram(minMaxProgram);
    gpgpu.setInputMatrixTexture(a, 'matrixA', 0);
    gpgpu.executeProgram();
}
exports.minMax = minMax;

},{"./webgl_util":62}],47:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var math_1 = require("../math");
var shader_compiler = require("./shader_compiler");
function getFragmentShader(a, b, out, aOrientation, bOrientation) {
    var sharedDim = (aOrientation === math_1.MatrixOrientation.REGULAR ? a.shape[1] : a.shape[0]);
    var aSnippet = (aOrientation === math_1.MatrixOrientation.REGULAR) ? 'aRow, i' : 'i, aRow';
    var bSnippet = (bOrientation === math_1.MatrixOrientation.REGULAR) ? 'i, bCol' : 'bCol, i';
    var inputs = [{ name: 'matrixA', array: a }, { name: 'matrixB', array: b }];
    var userCode = "\n    const float sharedDim = " + sharedDim + ".0;\n\n    float dotARowBCol(float aRow, float bCol) {\n      float result = 0.0;\n      for (float i = 0.0; i < sharedDim; i += 1.0) {\n        float a = getMatrixA(" + aSnippet + ");\n        float b = getMatrixB(" + bSnippet + ");\n        result += (a * b);\n      }\n      return result;\n    }\n\n    void main() {\n      vec2 resRC = getOutputCoords();\n      setOutput(dotARowBCol(resRC.x, resRC.y));\n    }\n  ";
    return shader_compiler.makeShader(inputs, out, userCode);
}
exports.getFragmentShader = getFragmentShader;
function multiplyMatrix(gpgpu, multiplyProgram, a, b, result, outTexShape) {
    gpgpu.setOutputMatrixTexture(result, outTexShape[0], outTexShape[1]);
    gpgpu.setProgram(multiplyProgram);
    gpgpu.setInputMatrixTexture(a, 'matrixA', 0);
    gpgpu.setInputMatrixTexture(b, 'matrixB', 1);
    gpgpu.executeProgram();
}
exports.multiplyMatrix = multiplyMatrix;

},{"../math":23,"./shader_compiler":55}],48:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var unaryop_gpu = require("./unaryop_gpu");
function getNegUnaryOp() {
    return 'gl_FragColor = vec4(-value, 0, 0, 0);';
}
function getFragmentShaderSource() {
    return unaryop_gpu.getFragmentShaderSource(getNegUnaryOp());
}
exports.getFragmentShaderSource = getFragmentShaderSource;
function neg(gpgpu, program, a, rows, columns, result) {
    unaryop_gpu.unaryOp(gpgpu, program, a, rows, columns, result);
}
exports.neg = neg;
function uploadNegDownload(a, rows, columns) {
    return unaryop_gpu.uploadUnaryOpDownload(a, rows, columns, getNegUnaryOp());
}
exports.uploadNegDownload = uploadNegDownload;

},{"./unaryop_gpu":61}],49:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var conv_util = require("../conv_util");
var webgl_util_1 = require("./webgl_util");
function getFragmentShaderPoolCommonSource(xShapeRCD, fSize, stride, pad, poolType, computePositions) {
    if (poolType === 'avg' && computePositions) {
        throw new Error('Cannot compute positions for average pool.');
    }
    var depth = xShapeRCD[2];
    var xTexShapeRC = conv_util.computeTexShapeFrom3D(xShapeRCD);
    var returnValue = 'minMaxValue';
    if (computePositions) {
        returnValue = 'minMaxPosition';
    }
    else if (poolType === 'avg') {
        returnValue = 'avgValue';
    }
    return "\n    precision highp float;\n    uniform sampler2D x;\n    varying vec2 resultUV;\n\n    const vec2 halfCR = vec2(0.5, 0.5);\n    const vec2 xShapeCR = vec2(" + xTexShapeRC[1] + ", " + xTexShapeRC[0] + ");\n\n    " + webgl_util_1.IS_NAN_SHADER_FUNC + "\n\n    void main() {\n      vec2 yTexCR = floor(gl_FragCoord.xy);\n\n      // Map from 2D (yTexR, yTexC) to 3D (yR, yC, d2).\n      float yR = yTexCR.y;\n      float yC = floor(yTexCR.x / " + depth + ".0);\n      float d = mod(yTexCR.x, " + depth + ".0);\n\n      vec2 xRCCorner = vec2(yR, yC) * vec2(" + stride + ", " + stride + ") -\n          vec2(" + pad + ".0, " + pad + ".0);\n      float xRCorner = xRCCorner.x;\n      float xCCorner = xRCCorner.y;\n\n      // max/min x(?, ?, d) to get y(yR, yC, d).\n      // ? = to be determined\n      float minMaxValue = 0.0;\n      float minMaxValueFound = 0.0;\n      float minMaxPosition = 0.0;\n      float avgValue = 0.0;\n\n      for (float wR = 0.0; wR < " + fSize + ".0; wR += 1.0) {\n        float xR = xRCorner + wR;\n        float xTexR = xR;\n\n        for (float wC = 0.0; wC < " + fSize + ".0; wC += 1.0) {\n          float xC = xCCorner + wC;\n          float xTexC = xC * " + depth + ".0 + d;\n\n          vec2 texCR = vec2(xTexC, xTexR);\n\n          // Check if the requested UV is invalid.\n          vec2 uv = (texCR + halfCR) / xShapeCR;\n          bool lessThanZero = any(lessThan(uv, vec2(0, 0)));\n          bool greaterThanOne = any(greaterThan(uv, vec2(1, 1)));\n          bool outside = lessThanZero || greaterThanOne;\n          if (outside) {\n            continue;\n          }\n\n          float value = texture2D(x, uv).r;\n          if (isNaN(value)) {\n            gl_FragColor = vec4(value, 0, 0, 0);\n            return;\n          }\n          if (" + (poolType === 'avg') + ") {\n            avgValue += value / " + fSize * fSize + ".0;\n          } else {\n            // If a min / max value has already been found, use it. If not, use\n            // the current value.\n            float currentMinMaxValue = mix(\n                value, minMaxValue, minMaxValueFound);\n            if (value " + (poolType === 'min' ? '<=' : '>=') + " currentMinMaxValue) {\n              minMaxValue = value;\n              minMaxValueFound = 1.0;\n              if (" + computePositions + ") {\n                minMaxPosition = wR * " + fSize + ".0 + wC;\n              }\n            }\n          }\n        }\n      }\n      gl_FragColor = vec4(" + returnValue + ", 0, 0, 0);\n    }";
}
exports.getFragmentShaderPoolCommonSource = getFragmentShaderPoolCommonSource;
function poolCommon(gpgpu, program, x, result, resultShapeRowCol) {
    gpgpu.setOutputMatrixTexture(result, resultShapeRowCol[0], resultShapeRowCol[1]);
    gpgpu.setProgram(program);
    gpgpu.setInputMatrixTexture(x, 'x', 0);
    gpgpu.executeProgram();
}
exports.poolCommon = poolCommon;

},{"../conv_util":20,"./webgl_util":62}],50:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var gpgpu_context_1 = require("./gpgpu_context");
function getFragmentShaderSource(rows, columns) {
    return "\n    precision highp float;\n    uniform sampler2D matrixA;\n    varying vec2 resultUV;\n\n    const vec2 aDimCR = vec2(" + columns + ".0, " + rows + ".0);\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    void main() {\n      float sum = 0.0;\n      for (float r = 0.0; r < aDimCR.y; r += 1.0) {\n        for (float c = 0.0; c < aDimCR.x; c += 1.0) {\n          vec2 uv = (vec2(c, r) + halfCR) / aDimCR;\n          sum += texture2D(matrixA, uv).r;\n        }\n      }\n      gl_FragColor = vec4(sum, 0, 0, 0);\n    }";
}
exports.getFragmentShaderSource = getFragmentShaderSource;
function reduceSum(gpgpu, reduceSumProgram, a, aNumRows, aNumCols, result) {
    gpgpu.setOutputMatrixTexture(result, 1, 1);
    gpgpu.setProgram(reduceSumProgram);
    gpgpu.setInputMatrixTexture(a, 'matrixA', 0);
    gpgpu.executeProgram();
}
exports.reduceSum = reduceSum;
function uploadReduceSumDownload(a, rows, columns) {
    var gpgpu = new gpgpu_context_1.GPGPUContext();
    var program = gpgpu.createProgram(getFragmentShaderSource(rows, columns));
    var aTexture = gpgpu.createMatrixTexture(rows, columns);
    var resultTexture = gpgpu.createMatrixTexture(1, 1);
    gpgpu.uploadMatrixToTexture(aTexture, rows, columns, a);
    reduceSum(gpgpu, program, aTexture, rows, columns, resultTexture);
    var result = gpgpu.downloadMatrixFromTexture(resultTexture, 1, 1)[0];
    gpgpu.deleteMatrixTexture(aTexture);
    gpgpu.deleteMatrixTexture(resultTexture);
    gpgpu.deleteProgram(program);
    gpgpu.dispose();
    return result;
}
exports.uploadReduceSumDownload = uploadReduceSumDownload;

},{"./gpgpu_context":39}],51:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var unaryop_gpu = require("./unaryop_gpu");
function getReluUnaryOp() {
    return "\n    float result = (value < 0.0 ? 0.0 : value);\n    gl_FragColor = vec4(result, 0, 0, 0);\n  ";
}
function getFragmentShaderSource() {
    return unaryop_gpu.getFragmentShaderSource(getReluUnaryOp());
}
exports.getFragmentShaderSource = getFragmentShaderSource;
function relu(gpgpu, reluProgram, a, rows, columns, result) {
    unaryop_gpu.unaryOp(gpgpu, reluProgram, a, rows, columns, result);
}
exports.relu = relu;
function uploadReluDownload(a, rows, columns) {
    return unaryop_gpu.uploadUnaryOpDownload(a, rows, columns, getReluUnaryOp());
}
exports.uploadReluDownload = uploadReluDownload;

},{"./unaryop_gpu":61}],52:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var webgl_util = require("./webgl_util");
function getRenderRGBShader(gpgpu, destinationWidth) {
    var fragmentShaderSource = "\n    precision highp float;\n    uniform sampler2D source;\n    varying vec2 resultUV;\n\n    const float destinationWidth = " + destinationWidth + ".0;\n    const float a = 1.0;\n\n    void main() {\n      float xr = floor(resultUV.s * destinationWidth) * 3.0;\n      vec3 x = xr + vec3(0, 1, 2);\n\n      float sourceWidth = destinationWidth * 3.0;\n      vec3 u = (x + 0.5) / sourceWidth;\n      float v = 1.0 - resultUV.t;\n\n      float r = texture2D(source, vec2(u[0], v)).r;\n      float g = texture2D(source, vec2(u[1], v)).r;\n      float b = texture2D(source, vec2(u[2], v)).r;\n\n      gl_FragColor = vec4(r, g, b, a);\n    }";
    return gpgpu.createProgram(fragmentShaderSource);
}
exports.getRenderRGBShader = getRenderRGBShader;
function renderToCanvas(gpgpu, renderShader, sourceTex) {
    webgl_util.bindCanvasToFramebuffer(gpgpu.gl);
    renderToFramebuffer(gpgpu, renderShader, sourceTex);
}
exports.renderToCanvas = renderToCanvas;
function renderToFramebuffer(gpgpu, renderShader, sourceTex) {
    gpgpu.setProgram(renderShader);
    gpgpu.setInputMatrixTexture(sourceTex, 'source', 0);
    gpgpu.executeProgram();
}
exports.renderToFramebuffer = renderToFramebuffer;

},{"./webgl_util":62}],53:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util = require("../../util");
function getFragmentShaderSource() {
    return "\n    precision highp float;\n    uniform sampler2D matrixA;\n    uniform vec2 inputDimCR;\n    uniform vec2 resultDimCR;\n    varying vec2 resultUV;\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    void main() {\n      vec2 resultCR = floor(resultUV * resultDimCR);\n      // indexInFlat = row * stride + column, where stride == numOutputColumns\n      float indexInFlat = resultCR.y * resultDimCR.x + resultCR.x;\n\n      vec2 inputCR = vec2(\n        mod(indexInFlat, inputDimCR.x), // col = indexInFlat % numInputColumns\n        floor(indexInFlat / inputDimCR.x) // row = indexInFlat / numInputColumns\n      ) + halfCR;\n\n      vec2 inputUV = inputCR / inputDimCR;\n      gl_FragColor = texture2D(matrixA, inputUV);\n    }";
}
exports.getFragmentShaderSource = getFragmentShaderSource;
function reshape(gpgpu, reshapeProgram, a, aNumRows, aNumCols, result, resultNumRows, resultNumCols) {
    var inputSize = aNumRows * aNumCols;
    var outputSize = resultNumCols * resultNumRows;
    util.assert(inputSize === outputSize, "The input size (" + inputSize + ") and output size (" + outputSize + ") " +
        "must match");
    gpgpu.setOutputMatrixTexture(result, resultNumRows, resultNumCols);
    gpgpu.setProgram(reshapeProgram);
    gpgpu.setInputMatrixTexture(a, 'matrixA', 0);
    var inputDimCRLocation = gpgpu.getUniformLocation('inputDimCR');
    gpgpu.gl.uniform2f(inputDimCRLocation, aNumCols, aNumRows);
    var resultDimCRLocation = gpgpu.getUniformLocation('resultDimCR');
    gpgpu.gl.uniform2f(resultDimCRLocation, resultNumCols, resultNumRows);
    gpgpu.executeProgram();
}
exports.reshape = reshape;

},{"../../util":90}],54:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var conv_util = require("../conv_util");
function getFragmentShaderSource(inputShapeRCD, outputDimensionsRowCol, alignCorners) {
    var depth = inputShapeRCD[2];
    var inputTexShapeRC = conv_util.computeTexShapeFrom3D(inputShapeRCD);
    var effectiveInputShapeRCD = alignCorners ?
        [inputShapeRCD[0] - 1, inputShapeRCD[1] - 1, depth] :
        inputShapeRCD;
    var effectiveOutputShapeRCD = alignCorners ?
        [outputDimensionsRowCol[0] - 1, outputDimensionsRowCol[1] - 1, depth] :
        [outputDimensionsRowCol[0], outputDimensionsRowCol[1], depth];
    return "\n    precision highp float;\n    uniform sampler2D matrixA;\n    varying vec2 resultUV;\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    const vec2 inputShapeCR = vec2(" + inputShapeRCD[1] + ", " + inputShapeRCD[0] + ");\n    const vec2 inputShapeTexCR = vec2(\n        " + inputTexShapeRC[1] + ", " + inputTexShapeRC[0] + ");\n\n    const vec2 effectiveInputOverOutputRatioCR = vec2(\n        " + effectiveInputShapeRCD[1] / effectiveOutputShapeRCD[1] + ",\n        " + effectiveInputShapeRCD[0] / effectiveOutputShapeRCD[0] + ");\n\n    float sampleInput(float col, float row, float d) {\n      vec2 uv = (vec2(col * " + depth + ".0 + d, row) + halfCR) / inputShapeTexCR;\n      return texture2D(matrixA, uv).r;\n    }\n\n    void main() {\n      vec2 yTexCR = floor(gl_FragCoord.xy);\n\n      // Map from 2D (yTexR, yTexC) to 3D (yR, yC, d).\n      vec2 yCR = vec2(floor(yTexCR.x / " + depth + ".0), yTexCR.y);\n      float d = mod(yTexCR.x, " + depth + ".0);\n\n      // Fractional source index.\n      vec2 sourceFracIndexCR = yCR * effectiveInputOverOutputRatioCR;\n\n      // Compute the four integer indices.\n      vec2 sourceFloorCR = floor(sourceFracIndexCR);\n      vec2 sourceCeilCR = min(inputShapeCR - 1.0, ceil(sourceFracIndexCR));\n\n      float topLeft = sampleInput(sourceFloorCR[0], sourceFloorCR[1], d);\n      float bottomLeft = sampleInput(sourceFloorCR[0], sourceCeilCR[1], d);\n      float topRight = sampleInput(sourceCeilCR[0], sourceFloorCR[1], d);\n      float bottomRight = sampleInput(sourceCeilCR[0], sourceCeilCR[1], d);\n\n      vec2 fracCR = sourceFracIndexCR - sourceFloorCR;\n\n      float top = topLeft + (topRight - topLeft) * fracCR[0];\n      float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR[0];\n      float newValue = top + (bottom - top) * fracCR[1];\n\n      gl_FragColor = vec4(newValue, 0.0, 0.0, 0.0);\n    }";
}
exports.getFragmentShaderSource = getFragmentShaderSource;
function resizeBilinear(gpgpu, resizeBilinearProgram, a, result, resultShapeRowCol) {
    gpgpu.setOutputMatrixTexture(result, resultShapeRowCol[0], resultShapeRowCol[1]);
    gpgpu.setProgram(resizeBilinearProgram);
    gpgpu.setInputMatrixTexture(a, 'matrixA', 0);
    gpgpu.executeProgram();
}
exports.resizeBilinear = resizeBilinear;

},{"../conv_util":20}],55:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util = require("../../util");
function makeShaderKey(inputs, output) {
    var ins = inputs.map(function (x) { return x.shape + '_' + x.getTextureShapeRC(); });
    return ins.join('_') + '_' + output.shape + '_' + output.getTextureShapeRC();
}
exports.makeShaderKey = makeShaderKey;
function makeShader(inputs, output, userCode) {
    var inputPrefixSnippet = inputs.map(function (x) { return "uniform sampler2D " + x.name + ";"; }).join('\n');
    var inputSamplingSnippet = inputs.map(function (x) { return getInputSamplingSnippet(x); }).join('\n');
    var outTexShape = output.getTextureShapeRC();
    var outputSamplingSnippet = getOutputSamplingSnippet(output.shape, outTexShape);
    var source = [
        SHADER_PREFIX, inputPrefixSnippet, SAMPLE_2D_SNIPPET, inputSamplingSnippet,
        outputSamplingSnippet, userCode
    ].join('\n');
    return source;
}
exports.makeShader = makeShader;
function getInputSamplingSnippet(input) {
    var arr = input.array;
    var shape = arr.shape;
    var texShape = arr.getTextureShapeRC(shape);
    switch (shape.length) {
        case 2:
            return getSampler2D(input.name, shape, texShape);
        default:
            throw new Error(arr.rank + "-D input sampling is not yet supported");
    }
}
function getOutputSamplingSnippet(outShape, outTexShape) {
    switch (outShape.length) {
        case 2:
            return getOutput2DCoords(outShape, outTexShape);
        default:
            throw new Error(outShape.length + "-D output sampling is not yet supported");
    }
}
var SHADER_PREFIX = "\n  precision highp float;\n  varying vec2 resultUV;\n  const vec2 halfCR = vec2(0.5, 0.5);\n\n  void setOutput(float val) {\n    gl_FragColor = vec4(val, 0, 0, 0);\n  }\n";
var SAMPLE_2D_SNIPPET = "\n  float sample2D(sampler2D texture, float texNumR, float texNumC, float numC,\n      float row, float col) {\n    float index = dot(vec2(row, col), vec2(numC, 1.0));\n    float texR = floor(index / texNumC);\n    float texC = mod(index, texNumC);\n    vec2 uv = (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n    return texture2D(texture, uv).r;\n  }\n";
function getOutput2DCoords(shape, texShape) {
    if (util.arraysEqual(shape, texShape)) {
        return "\n      vec2 getOutputCoords() {\n        return floor(gl_FragCoord.yx);\n      }\n    ";
    }
    return "\n    vec2 getOutputCoords() {\n      vec2 resTexRC = floor(gl_FragCoord.yx);\n      float index = dot(resTexRC, vec2(" + texShape[1] + ".0, 1.0));\n      float r = floor(index / " + shape[1] + ".0);\n      float c = mod(index, " + shape[1] + ".0);\n      return vec2(r, c);\n    }\n  ";
}
function getSampler2D(texName, shape, texShape) {
    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
    var tR = texShape[0];
    var tC = texShape[1];
    if (util.arraysEqual(shape, texShape)) {
        return "\n      float " + funcName + "(float row, float col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(" + tC + ".0, " + tR + ".0);\n        return texture2D(" + texName + ", uv).r;\n      }\n    ";
    }
    return "\n    float " + funcName + "(float row, float col) {\n      return sample2D(" + texName + ", " + tR + ".0, " + tC + ".0, " + shape[1] + ".0, row, col);\n    }\n  ";
}

},{"../../util":90}],56:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var unaryop_gpu = require("./unaryop_gpu");
function getSigmoidUnaryOp() {
    return 'gl_FragColor = vec4(1.0 / (1.0 + exp(-1.0 * value)), 0, 0, 0);';
}
function getSigmoidFragmentShaderSource() {
    return unaryop_gpu.getFragmentShaderSource(getSigmoidUnaryOp());
}
exports.getSigmoidFragmentShaderSource = getSigmoidFragmentShaderSource;
function sigmoid(gpgpu, sigmoidProgram, a, rows, columns, result) {
    unaryop_gpu.unaryOp(gpgpu, sigmoidProgram, a, rows, columns, result);
}
exports.sigmoid = sigmoid;
function uploadSigmoidDownload(a, rows, columns) {
    return unaryop_gpu.uploadUnaryOpDownload(a, rows, columns, getSigmoidUnaryOp());
}
exports.uploadSigmoidDownload = uploadSigmoidDownload;

},{"./unaryop_gpu":61}],57:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var unaryop_gpu = require("./unaryop_gpu");
function getStepUnaryOp() {
    return "\n    float res = value == value ? (value > 0.0 ? 1.0 : 0.0) : value;\n    gl_FragColor = vec4(res, 0, 0, 0);\n  ";
}
function getFragmentShaderSource() {
    return unaryop_gpu.getFragmentShaderSource(getStepUnaryOp());
}
exports.getFragmentShaderSource = getFragmentShaderSource;
function step(gpgpu, stepProgram, a, rows, columns, result) {
    unaryop_gpu.unaryOp(gpgpu, stepProgram, a, rows, columns, result);
}
exports.step = step;
function uploadStepDownload(a, rows, columns) {
    return unaryop_gpu.uploadUnaryOpDownload(a, rows, columns, getStepUnaryOp());
}
exports.uploadStepDownload = uploadStepDownload;

},{"./unaryop_gpu":61}],58:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {
    return [columns, rows];
}
exports.getUnpackedMatrixTextureShapeWidthHeight = getUnpackedMatrixTextureShapeWidthHeight;
function getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {
    return matrixSize * channelsPerTexture;
}
exports.getUnpackedArraySizeFromMatrixSize = getUnpackedArraySizeFromMatrixSize;
function getColorMatrixTextureShapeWidthHeight(rows, columns) {
    return [columns * 4, rows];
}
exports.getColorMatrixTextureShapeWidthHeight = getColorMatrixTextureShapeWidthHeight;
function getMatrixSizeFromUnpackedArraySize(unpackedSize, channelsPerTexture) {
    if (unpackedSize % channelsPerTexture !== 0) {
        throw new Error('unpackedSize (' + unpackedSize + ') must be a multiple of ' +
            channelsPerTexture);
    }
    return unpackedSize / channelsPerTexture;
}
exports.getMatrixSizeFromUnpackedArraySize = getMatrixSizeFromUnpackedArraySize;
function encodeMatrixToUnpackedArray(matrix, unpackedArray, channelsPerTexture) {
    var requiredSize = getUnpackedArraySizeFromMatrixSize(matrix.length, channelsPerTexture);
    if (unpackedArray.length < requiredSize) {
        throw new Error('unpackedArray length (' + unpackedArray.length +
            ') must be >= ' + requiredSize);
    }
    var dst = 0;
    for (var src = 0; src < matrix.length; ++src) {
        unpackedArray[dst] = matrix[src];
        dst += channelsPerTexture;
    }
}
exports.encodeMatrixToUnpackedArray = encodeMatrixToUnpackedArray;
function decodeMatrixFromUnpackedArray(unpackedArray, matrix, channelsPerTexture) {
    var requiredSize = getMatrixSizeFromUnpackedArraySize(unpackedArray.length, channelsPerTexture);
    if (matrix.length < requiredSize) {
        throw new Error('matrix length (' + matrix.length + ') must be >= ' + requiredSize);
    }
    var dst = 0;
    for (var src = 0; src < unpackedArray.length; src += channelsPerTexture) {
        matrix[dst++] = unpackedArray[src];
    }
}
exports.decodeMatrixFromUnpackedArray = decodeMatrixFromUnpackedArray;
function getPackedMatrixTextureShapeWidthHeight(rows, columns) {
    return [Math.ceil(columns / 2), Math.ceil(rows / 2)];
}
exports.getPackedMatrixTextureShapeWidthHeight = getPackedMatrixTextureShapeWidthHeight;
function getPackedRGBAArraySizeFromMatrixShape(rows, columns) {
    var _a = getPackedMatrixTextureShapeWidthHeight(rows, columns), w = _a[0], h = _a[1];
    return w * h * 4;
}
exports.getPackedRGBAArraySizeFromMatrixShape = getPackedRGBAArraySizeFromMatrixShape;
function encodeMatrixToPackedRGBA(matrix, rows, columns, packedRGBA) {
    var requiredSize = getPackedRGBAArraySizeFromMatrixShape(rows, columns);
    if (packedRGBA.length < requiredSize) {
        throw new Error('packedRGBA length (' + packedRGBA.length +
            ') must be >= ' + requiredSize);
    }
    var _a = getPackedMatrixTextureShapeWidthHeight(rows, columns), textureWidth = _a[0], textureHeight = _a[1];
    var oddWidth = (columns % 2) === 1;
    var oddHeight = (rows % 2) === 1;
    var widthInFullBlocks = Math.floor(columns / 2);
    var heightInFullBlocks = Math.floor(rows / 2);
    {
        var dstStride = (oddWidth ? 4 : 0);
        var oneRow = columns;
        var dst = 0;
        for (var blockY = 0; blockY < heightInFullBlocks; ++blockY) {
            var matrixSrcRow = (blockY * 2 * columns);
            for (var blockX = 0; blockX < widthInFullBlocks; ++blockX) {
                var matrixSrcCol = blockX * 2;
                var src = matrixSrcRow + matrixSrcCol;
                packedRGBA[dst] = matrix[src];
                packedRGBA[dst + 1] = matrix[src + 1];
                packedRGBA[dst + 2] = matrix[src + oneRow];
                packedRGBA[dst + 3] = matrix[src + oneRow + 1];
                dst += 4;
            }
            dst += dstStride;
        }
    }
    if (oddWidth) {
        var src = columns - 1;
        var dst = (textureWidth - 1) * 4;
        var srcStride = 2 * columns;
        var dstStride = textureWidth * 4;
        for (var blockY = 0; blockY < heightInFullBlocks; ++blockY) {
            packedRGBA[dst] = matrix[src];
            packedRGBA[dst + 2] = matrix[src + columns];
            src += srcStride;
            dst += dstStride;
        }
    }
    if (oddHeight) {
        var src = (rows - 1) * columns;
        var dst = (textureHeight - 1) * textureWidth * 4;
        for (var blockX = 0; blockX < widthInFullBlocks; ++blockX) {
            packedRGBA[dst++] = matrix[src++];
            packedRGBA[dst++] = matrix[src++];
            dst += 2;
        }
    }
    if (oddWidth && oddHeight) {
        packedRGBA[packedRGBA.length - 4] = matrix[matrix.length - 1];
    }
    return packedRGBA;
}
exports.encodeMatrixToPackedRGBA = encodeMatrixToPackedRGBA;
function decodeMatrixFromPackedRGBA(packedRGBA, rows, columns, matrix) {
    var requiredSize = rows * columns;
    if (requiredSize < matrix.length) {
        throw new Error('matrix length (' + matrix.length + ') must be >= ' + requiredSize);
    }
    var oddWidth = (columns % 2) === 1;
    var oddHeight = (rows % 2) === 1;
    var widthInFullBlocks = Math.floor(columns / 2);
    var heightInFullBlocks = Math.floor(rows / 2);
    var _a = getPackedMatrixTextureShapeWidthHeight(rows, columns), textureWidth = _a[0], textureHeight = _a[1];
    {
        var srcStride = oddWidth ? 4 : 0;
        var dstStride = columns + (oddWidth ? 1 : 0);
        var src = 0;
        var dstRow1 = 0;
        var dstRow2 = columns;
        for (var blockY = 0; blockY < heightInFullBlocks; ++blockY) {
            for (var blockX = 0; blockX < widthInFullBlocks; ++blockX) {
                matrix[dstRow1++] = packedRGBA[src++];
                matrix[dstRow1++] = packedRGBA[src++];
                matrix[dstRow2++] = packedRGBA[src++];
                matrix[dstRow2++] = packedRGBA[src++];
            }
            src += srcStride;
            dstRow1 += dstStride;
            dstRow2 += dstStride;
        }
    }
    if (oddWidth) {
        var src = (textureWidth - 1) * 4;
        var dst = columns - 1;
        var srcStride = textureWidth * 4;
        var dstStride = 2 * columns;
        for (var blockY = 0; blockY < heightInFullBlocks; ++blockY) {
            matrix[dst] = packedRGBA[src];
            matrix[dst + columns] = packedRGBA[src + 2];
            src += srcStride;
            dst += dstStride;
        }
    }
    if (oddHeight) {
        var src = (textureHeight - 1) * textureWidth * 4;
        var dst = (rows - 1) * columns;
        for (var blockX = 0; blockX < widthInFullBlocks; ++blockX) {
            matrix[dst++] = packedRGBA[src++];
            matrix[dst++] = packedRGBA[src++];
            src += 2;
        }
    }
    if (oddWidth && oddHeight) {
        matrix[matrix.length - 1] = packedRGBA[packedRGBA.length - 4];
    }
    return matrix;
}
exports.decodeMatrixFromPackedRGBA = decodeMatrixFromPackedRGBA;

},{}],59:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TextureManager = (function () {
    function TextureManager(gpgpu) {
        this.gpgpu = gpgpu;
        this.numUsedTextures = 0;
        this.numFreeTextures = 0;
        this.freeTextures = {};
        this.logEnabled = false;
        this.usedTextureCount = {};
    }
    TextureManager.prototype.acquireTexture = function (shapeRC) {
        var shapeKey = getKeyFromTextureShape(shapeRC);
        if (!(shapeKey in this.freeTextures)) {
            this.freeTextures[shapeKey] = [];
        }
        if (!(shapeKey in this.usedTextureCount)) {
            this.usedTextureCount[shapeKey] = 0;
        }
        this.usedTextureCount[shapeKey]++;
        if (this.freeTextures[shapeKey].length > 0) {
            this.numFreeTextures--;
            this.numUsedTextures++;
            this.log();
            return this.freeTextures[shapeKey].shift();
        }
        this.numUsedTextures++;
        this.log();
        return this.gpgpu.createMatrixTexture(shapeRC[0], shapeRC[1]);
    };
    TextureManager.prototype.releaseTexture = function (texture, shape) {
        var shapeKey = getKeyFromTextureShape(shape);
        if (!(shapeKey in this.freeTextures)) {
            this.freeTextures[shapeKey] = [];
        }
        this.freeTextures[shapeKey].push(texture);
        this.numFreeTextures++;
        this.numUsedTextures--;
        this.usedTextureCount[shapeKey]--;
        this.log();
    };
    TextureManager.prototype.log = function () {
        if (!this.logEnabled) {
            return;
        }
        var total = this.numFreeTextures + this.numUsedTextures;
        console.log('Free/Used', this.numFreeTextures + ' / ' + this.numUsedTextures, "(" + total + ")");
    };
    TextureManager.prototype.getNumUsedTextures = function () {
        return this.numUsedTextures;
    };
    TextureManager.prototype.getNumFreeTextures = function () {
        return this.numFreeTextures;
    };
    TextureManager.prototype.dispose = function () {
        for (var shape in this.freeTextures) {
            if (this.freeTextures.hasOwnProperty(shape)) {
                for (var i = 0; i < this.freeTextures[shape].length; i++) {
                    this.gpgpu.deleteMatrixTexture(this.freeTextures[shape][i]);
                }
            }
        }
    };
    return TextureManager;
}());
exports.TextureManager = TextureManager;
function getKeyFromTextureShape(shapeRowsCol) {
    return shapeRowsCol[0] + '_' + shapeRowsCol[1];
}

},{}],60:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var unaryop_gpu = require("./unaryop_gpu");
function getSinUnaryOp() {
    return "\n    gl_FragColor = vec4(sin(value), 0, 0, 0);\n  ";
}
function getSinFragmentShaderSource() {
    return unaryop_gpu.getFragmentShaderSource(getSinUnaryOp());
}
exports.getSinFragmentShaderSource = getSinFragmentShaderSource;
function sin(gpgpu, sinProgram, a, rows, columns, result) {
    unaryop_gpu.unaryOp(gpgpu, sinProgram, a, rows, columns, result);
}
exports.sin = sin;
function uploadSinDownload(a, rows, columns) {
    return unaryop_gpu.uploadUnaryOpDownload(a, rows, columns, getSinUnaryOp());
}
exports.uploadSinDownload = uploadSinDownload;
function getTanhUnaryOp() {
    return "\n    float e2x = exp(-2.0 * value);\n    gl_FragColor = vec4((1.0 - e2x) / (1.0 + e2x), 0, 0, 0);\n  ";
}
function getTanhFragmentShaderSource() {
    return unaryop_gpu.getFragmentShaderSource(getTanhUnaryOp());
}
exports.getTanhFragmentShaderSource = getTanhFragmentShaderSource;
function tanh(gpgpu, tanhProgram, a, rows, columns, result) {
    unaryop_gpu.unaryOp(gpgpu, tanhProgram, a, rows, columns, result);
}
exports.tanh = tanh;
function uploadTanhDownload(a, rows, columns) {
    return unaryop_gpu.uploadUnaryOpDownload(a, rows, columns, getTanhUnaryOp());
}
exports.uploadTanhDownload = uploadTanhDownload;

},{"./unaryop_gpu":61}],61:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var gpgpu_context_1 = require("./gpgpu_context");
function getFragmentShaderSource(resultOp) {
    return "\n    precision highp float;\n    uniform sampler2D matrixA;\n    varying vec2 resultUV;\n\n    void main() {\n      float value = texture2D(matrixA, resultUV).r;\n      " + resultOp + "\n    }";
}
exports.getFragmentShaderSource = getFragmentShaderSource;
function unaryOp(gpgpu, unaryOpProgram, a, rows, columns, result) {
    gpgpu.setOutputMatrixTexture(result, rows, columns);
    gpgpu.setProgram(unaryOpProgram);
    gpgpu.setInputMatrixTexture(a, 'matrixA', 0);
    gpgpu.executeProgram();
}
exports.unaryOp = unaryOp;
function uploadUnaryOpDownload(a, rows, columns, resultOp) {
    var gpgpu = new gpgpu_context_1.GPGPUContext();
    var fragmentShaderSrc = getFragmentShaderSource(resultOp);
    var program = gpgpu.createProgram(fragmentShaderSrc);
    var aTexture = gpgpu.createMatrixTexture(rows, columns);
    var resultTexture = gpgpu.createMatrixTexture(rows, columns);
    gpgpu.uploadMatrixToTexture(aTexture, rows, columns, a);
    unaryOp(gpgpu, program, aTexture, rows, columns, resultTexture);
    var result = gpgpu.downloadMatrixFromTexture(resultTexture, rows, columns);
    gpgpu.deleteMatrixTexture(aTexture);
    gpgpu.deleteMatrixTexture(resultTexture);
    gpgpu.deleteProgram(program);
    gpgpu.dispose();
    return result;
}
exports.uploadUnaryOpDownload = uploadUnaryOpDownload;

},{"./gpgpu_context":39}],62:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var USE_WEBGL2_WHEN_AVAILABLE = false;
var WEBGL2_ENABLED = null;
var MAX_TEXTURE_SIZE = null;
var util = require("../../util");
exports.IS_NAN_SHADER_FUNC = "\nbool isNaN(float val) {\n  return val == val ? false : true;\n}\n";
function createWebGLRenderingContext(attributes) {
    var canvas = document.createElement('canvas');
    canvas.width = 1;
    canvas.height = 1;
    return createWebGLRenderingContextFromCanvas(canvas, attributes);
}
exports.createWebGLRenderingContext = createWebGLRenderingContext;
function preferWebGL1() {
    USE_WEBGL2_WHEN_AVAILABLE = false;
    WEBGL2_ENABLED = undefined;
}
exports.preferWebGL1 = preferWebGL1;
function preferWebGL2() {
    USE_WEBGL2_WHEN_AVAILABLE = true;
    WEBGL2_ENABLED = undefined;
}
exports.preferWebGL2 = preferWebGL2;
function isWebGL2Enabled() {
    if (!USE_WEBGL2_WHEN_AVAILABLE) {
        return false;
    }
    if (WEBGL2_ENABLED === undefined) {
        var tempCanvas = document.createElement('canvas');
        var gl = tempCanvas.getContext('webgl2');
        if (gl != null) {
            WEBGL2_ENABLED = true;
            var loseContextExtension = getExtensionOrThrow(gl, 'WEBGL_lose_context');
            loseContextExtension.loseContext();
        }
        else {
            WEBGL2_ENABLED = false;
        }
    }
    return WEBGL2_ENABLED;
}
exports.isWebGL2Enabled = isWebGL2Enabled;
function createWebGLRenderingContextFromCanvas(canvas, attributes) {
    var gl;
    if (isWebGL2Enabled()) {
        gl = canvas.getContext('webgl2', attributes);
    }
    else {
        gl = (canvas.getContext('webgl', attributes) ||
            canvas.getContext('experimental-webgl', attributes));
    }
    if (gl == null) {
        throw new Error('This browser does not support WebGL.');
    }
    return gl;
}
exports.createWebGLRenderingContextFromCanvas = createWebGLRenderingContextFromCanvas;
function callAndCheck(gl, func) {
    var returnValue = func();
    checkWebGLError(gl);
    return returnValue;
}
exports.callAndCheck = callAndCheck;
var webGLDebugErrorCheckingEnabled = false;
function enableDebugWebGLErrorChecking(enabled) {
    webGLDebugErrorCheckingEnabled = enabled;
}
exports.enableDebugWebGLErrorChecking = enableDebugWebGLErrorChecking;
function checkWebGLError(gl) {
    if (webGLDebugErrorCheckingEnabled) {
        var error = gl.getError();
        if (error !== gl.NO_ERROR) {
            throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));
        }
    }
}
exports.checkWebGLError = checkWebGLError;
function getWebGLErrorMessage(gl, status) {
    switch (status) {
        case gl.NO_ERROR:
            return 'NO_ERROR';
        case gl.INVALID_ENUM:
            return 'INVALID_ENUM';
        case gl.INVALID_VALUE:
            return 'INVALID_VALUE';
        case gl.INVALID_OPERATION:
            return 'INVALID_OPERATION';
        case gl.INVALID_FRAMEBUFFER_OPERATION:
            return 'INVALID_FRAMEBUFFER_OPERATION';
        case gl.OUT_OF_MEMORY:
            return 'OUT_OF_MEMORY';
        case gl.CONTEXT_LOST_WEBGL:
            return 'CONTEXT_LOST_WEBGL';
        default:
            return 'Unknown error code ' + status;
    }
}
exports.getWebGLErrorMessage = getWebGLErrorMessage;
function getExtensionOrThrow(gl, extensionName) {
    return throwIfNull(gl, function () { return gl.getExtension(extensionName); }, 'Extension "' + extensionName + '" not supported on this browser.');
}
exports.getExtensionOrThrow = getExtensionOrThrow;
function createVertexShader(gl, vertexShaderSource) {
    var vertexShader = throwIfNull(gl, function () { return gl.createShader(gl.VERTEX_SHADER); }, 'Unable to create vertex WebGLShader.');
    callAndCheck(gl, function () { return gl.shaderSource(vertexShader, vertexShaderSource); });
    callAndCheck(gl, function () { return gl.compileShader(vertexShader); });
    if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {
        console.log(gl.getShaderInfoLog(vertexShader));
        throw new Error('Failed to compile vertex shader.');
    }
    return vertexShader;
}
exports.createVertexShader = createVertexShader;
function createFragmentShader(gl, fragmentShaderSource) {
    var fragmentShader = throwIfNull(gl, function () { return gl.createShader(gl.FRAGMENT_SHADER); }, 'Unable to create fragment WebGLShader.');
    callAndCheck(gl, function () { return gl.shaderSource(fragmentShader, fragmentShaderSource); });
    callAndCheck(gl, function () { return gl.compileShader(fragmentShader); });
    if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {
        console.log(gl.getShaderInfoLog(fragmentShader));
        throw new Error('Failed to compile fragment shader.');
    }
    return fragmentShader;
}
exports.createFragmentShader = createFragmentShader;
function createProgram(gl) {
    return throwIfNull(gl, function () { return gl.createProgram(); }, 'Unable to create WebGLProgram.');
}
exports.createProgram = createProgram;
function linkProgram(gl, program) {
    callAndCheck(gl, function () { return gl.linkProgram(program); });
    if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {
        console.log(gl.getProgramInfoLog(program));
        throw new Error('Failed to link vertex and fragment shaders.');
    }
}
exports.linkProgram = linkProgram;
function validateProgram(gl, program) {
    callAndCheck(gl, function () { return gl.validateProgram(program); });
    if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {
        console.log(gl.getProgramInfoLog(program));
        throw new Error('Shader program validation failed.');
    }
}
exports.validateProgram = validateProgram;
function createStaticVertexBuffer(gl, data) {
    var buffer = throwIfNull(gl, function () { return gl.createBuffer(); }, 'Unable to create WebGLBuffer');
    callAndCheck(gl, function () { return gl.bindBuffer(gl.ARRAY_BUFFER, buffer); });
    callAndCheck(gl, function () { return gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW); });
    return buffer;
}
exports.createStaticVertexBuffer = createStaticVertexBuffer;
function createStaticIndexBuffer(gl, data) {
    var buffer = throwIfNull(gl, function () { return gl.createBuffer(); }, 'Unable to create WebGLBuffer');
    callAndCheck(gl, function () { return gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer); });
    callAndCheck(gl, function () { return gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW); });
    return buffer;
}
exports.createStaticIndexBuffer = createStaticIndexBuffer;
function queryMaxTextureSize(gl) {
    if (MAX_TEXTURE_SIZE != null) {
        return MAX_TEXTURE_SIZE;
    }
    MAX_TEXTURE_SIZE =
        callAndCheck(gl, function () { return gl.getParameter(gl.MAX_TEXTURE_SIZE); });
    return MAX_TEXTURE_SIZE;
}
exports.queryMaxTextureSize = queryMaxTextureSize;
function getChannelsPerTexture() {
    if (isWebGL2Enabled()) {
        return 1;
    }
    return 4;
}
exports.getChannelsPerTexture = getChannelsPerTexture;
function createTexture(gl) {
    return throwIfNull(gl, function () { return gl.createTexture(); }, 'Unable to create WebGLTexture.');
}
exports.createTexture = createTexture;
function validateTextureSize(gl, width, height) {
    var maxTextureSize = queryMaxTextureSize(gl);
    if ((width <= 0) || (height <= 0)) {
        var requested = '[' + width + 'x' + height + ']';
        throw new Error('Requested texture size ' + requested + ' is invalid.');
    }
    if ((width > maxTextureSize) || (height > maxTextureSize)) {
        var requested = '[' + width + 'x' + height + ']';
        var max = '[' + maxTextureSize + 'x' + maxTextureSize + ']';
        throw new Error('Requested texture size ' + requested +
            ' greater than WebGL maximum on this browser / GPU ' + max + '.');
    }
}
exports.validateTextureSize = validateTextureSize;
function createFramebuffer(gl) {
    return throwIfNull(gl, function () { return gl.createFramebuffer(); }, 'Unable to create WebGLFramebuffer.');
}
exports.createFramebuffer = createFramebuffer;
function bindVertexBufferToProgramAttribute(gl, program, attribute, buffer, arrayEntriesPerItem, itemStrideInBytes, itemOffsetInBytes) {
    var loc = gl.getAttribLocation(program, attribute);
    if (loc === -1) {
        var error = new Error('Unable to get attribute "' + attribute + '" on WebGLProgram.');
        error.namedVertexAttributeNotFound = attribute;
        throw error;
    }
    callAndCheck(gl, function () { return gl.bindBuffer(gl.ARRAY_BUFFER, buffer); });
    callAndCheck(gl, function () { return gl.vertexAttribPointer(loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes, itemOffsetInBytes); });
    callAndCheck(gl, function () { return gl.enableVertexAttribArray(loc); });
}
exports.bindVertexBufferToProgramAttribute = bindVertexBufferToProgramAttribute;
function bindTextureUnit(gl, texture, textureUnit) {
    validateTextureUnit(gl, textureUnit);
    callAndCheck(gl, function () { return gl.activeTexture(gl.TEXTURE0 + textureUnit); });
    callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, texture); });
}
exports.bindTextureUnit = bindTextureUnit;
function unbindTextureUnit(gl, textureUnit) {
    validateTextureUnit(gl, textureUnit);
    callAndCheck(gl, function () { return gl.activeTexture(gl.TEXTURE0 + textureUnit); });
    callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, null); });
}
exports.unbindTextureUnit = unbindTextureUnit;
function getProgramUniformLocationOrThrow(gl, program, uniformName) {
    return throwIfNull(gl, function () { return gl.getUniformLocation(program, uniformName); }, 'uniform "' + uniformName + '" not present in program.');
}
exports.getProgramUniformLocationOrThrow = getProgramUniformLocationOrThrow;
function bindTextureToProgramUniformSampler(gl, program, texture, uniformSamplerName, textureUnit) {
    callAndCheck(gl, function () { return bindTextureUnit(gl, texture, textureUnit); });
    var samplerLocation = getProgramUniformLocationOrThrow(gl, program, uniformSamplerName);
    callAndCheck(gl, function () { return gl.uniform1i(samplerLocation, textureUnit); });
}
exports.bindTextureToProgramUniformSampler = bindTextureToProgramUniformSampler;
function bindCanvasToFramebuffer(gl) {
    callAndCheck(gl, function () { return gl.bindFramebuffer(gl.FRAMEBUFFER, null); });
    callAndCheck(gl, function () { return gl.viewport(0, 0, gl.canvas.width, gl.canvas.height); });
    callAndCheck(gl, function () { return gl.scissor(0, 0, gl.canvas.width, gl.canvas.height); });
}
exports.bindCanvasToFramebuffer = bindCanvasToFramebuffer;
function bindColorTextureToFramebuffer(gl, texture, framebuffer) {
    callAndCheck(gl, function () { return gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer); });
    callAndCheck(gl, function () { return gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0); });
}
exports.bindColorTextureToFramebuffer = bindColorTextureToFramebuffer;
function unbindColorTextureFromFramebuffer(gl, framebuffer) {
    callAndCheck(gl, function () { return gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer); });
    callAndCheck(gl, function () { return gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0); });
}
exports.unbindColorTextureFromFramebuffer = unbindColorTextureFromFramebuffer;
function validateFramebuffer(gl) {
    var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
    if (status !== gl.FRAMEBUFFER_COMPLETE) {
        throw new Error('Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));
    }
}
exports.validateFramebuffer = validateFramebuffer;
function getFramebufferErrorMessage(gl, status) {
    switch (status) {
        case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
            return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';
        case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
            return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';
        case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
            return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';
        case gl.FRAMEBUFFER_UNSUPPORTED:
            return 'FRAMEBUFFER_UNSUPPORTED';
        default:
            return 'unknown error ' + status;
    }
}
exports.getFramebufferErrorMessage = getFramebufferErrorMessage;
function throwIfNull(gl, returnTOrNull, failureMessage) {
    var tOrNull = callAndCheck(gl, function () { return returnTOrNull(); });
    if (tOrNull == null) {
        throw new Error(failureMessage);
    }
    return tOrNull;
}
function validateTextureUnit(gl, textureUnit) {
    var maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;
    var glTextureUnit = textureUnit + gl.TEXTURE0;
    if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {
        var textureUnitRange = '[gl.TEXTURE0, gl.TEXTURE' + maxTextureUnit + ']';
        throw new Error('textureUnit must be in ' + textureUnitRange + '.');
    }
}
function getTextureShapeFromLogicalShape(gl, logicalShape, preferredTexShape) {
    var maxTexSize = queryMaxTextureSize(gl);
    var size = util.sizeFromShape(logicalShape);
    if (preferredTexShape != null) {
        var sizePreferred = util.sizeFromShape(preferredTexShape);
        util.assert(size === sizePreferred, "Size of shape (" + size + ") must match size of " +
            ("preferredShape (" + sizePreferred + ")"));
        if (preferredTexShape[0] <= maxTexSize &&
            preferredTexShape[1] <= maxTexSize) {
            return preferredTexShape;
        }
    }
    if (logicalShape.length <= 1 && size <= maxTexSize) {
        return [size, 1];
    }
    else if (logicalShape.length === 2 && logicalShape[0] <= maxTexSize &&
        logicalShape[1] <= maxTexSize) {
        return logicalShape;
    }
    else if (logicalShape.length === 3 && logicalShape[0] <= maxTexSize &&
        logicalShape[1] * logicalShape[2] <= maxTexSize) {
        return [logicalShape[0], logicalShape[1] * logicalShape[2]];
    }
    else {
        return util.sizeToSquarishShape(size);
    }
}
exports.getTextureShapeFromLogicalShape = getTextureShapeFromLogicalShape;

},{"../../util":90}],63:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var graph_1 = require("./graph");
var graph_util = require("./graph_util");
var add_1 = require("./ops/add");
var argmax_1 = require("./ops/argmax");
var argmaxequals_1 = require("./ops/argmaxequals");
var concat3d_1 = require("./ops/concat3d");
var convolution_1 = require("./ops/convolution");
var divide_1 = require("./ops/divide");
var element_wise_activation_1 = require("./ops/element_wise_activation");
var element_wise_cost_1 = require("./ops/element_wise_cost");
var exp_1 = require("./ops/exp");
var linear_combination_1 = require("./ops/linear_combination");
var log_1 = require("./ops/log");
var matmul_1 = require("./ops/matmul");
var max_pool_1 = require("./ops/max_pool");
var multiply_1 = require("./ops/multiply");
var reduce_sum_1 = require("./ops/reduce_sum");
var reshape_1 = require("./ops/reshape");
var softmax_1 = require("./ops/softmax");
var split_1 = require("./ops/split");
var subtract_1 = require("./ops/subtract");
function emitFromGraphNodes(nodes) {
    var ops = [];
    nodes.forEach(function (node) { return Array.prototype.push.apply(ops, emitOpFromNode(node)); });
    return ops;
}
exports.emitFromGraphNodes = emitFromGraphNodes;
function emitOpFromNode(node) {
    if (node instanceof graph_1.ReshapeNode) {
        return [new reshape_1.Reshape(node.inputs[graph_1.ReshapeNode.X], node.output)];
    }
    else if (node instanceof graph_1.MatMulNode) {
        var x1 = node.inputs[graph_1.MatMulNode.X1];
        var x2 = node.inputs[graph_1.MatMulNode.X2];
        return [new matmul_1.MatMul(x1, x2, node.output)];
    }
    else if (node instanceof graph_1.Convolution2DNode) {
        var w = node.inputs[graph_1.Convolution2DNode.W];
        var x = node.inputs[graph_1.Convolution2DNode.X];
        var b = node.inputs[graph_1.Convolution2DNode.B];
        return [new convolution_1.Convolution2D(w, x, b, node.output, node.fieldSize, node.outputDepth, node.stride, node.zeroPad)];
    }
    else if (node instanceof graph_1.MaxPoolNode) {
        var x = node.inputs[graph_1.MaxPoolNode.X];
        return [new max_pool_1.MaxPool(x, node.output, node.fieldSize, node.stride, node.zeroPad)];
    }
    else if (node instanceof graph_1.ExpNode) {
        return [new exp_1.Exp(node.inputs[graph_1.ExpNode.X], node.output)];
    }
    else if (node instanceof graph_1.LogNode) {
        return [new log_1.Log(node.inputs[graph_1.LogNode.X], node.output)];
    }
    else if (node instanceof graph_1.ReLUNode) {
        return [new element_wise_activation_1.ReLU(node.inputs[graph_1.ReLUNode.X], node.output)];
    }
    else if (node instanceof graph_1.TanHNode) {
        return [new element_wise_activation_1.TanH(node.inputs[graph_1.TanHNode.X], node.output)];
    }
    else if (node instanceof graph_1.SigmoidNode) {
        return [new element_wise_activation_1.Sigmoid(node.inputs[graph_1.SigmoidNode.X], node.output)];
    }
    else if (node instanceof graph_1.SoftmaxCrossEntropyCostNode) {
        var x = node.inputs[graph_1.SoftmaxCrossEntropyCostNode.X];
        var target = node.inputs[graph_1.SoftmaxCrossEntropyCostNode.TARGET];
        return [new softmax_1.SoftmaxCrossEntropyCost(x, target, node.output)];
    }
    else if (node instanceof graph_1.SoftmaxNode) {
        return [new softmax_1.Softmax(node.inputs[graph_1.SoftmaxNode.X], node.output)];
    }
    else if (node instanceof graph_1.MeanSquaredCostNode) {
        var label = node.inputs[graph_1.MeanSquaredCostNode.LABEL];
        var prediction = node.inputs[graph_1.MeanSquaredCostNode.PREDICTION];
        return [new element_wise_cost_1.MeanSquaredCost(label, prediction, node.output)];
    }
    else if (node instanceof graph_1.ArgMaxEqualsNode) {
        return [new argmaxequals_1.ArgMaxEquals(node.inputs[graph_1.ArgMaxEqualsNode.X1], node.inputs[graph_1.ArgMaxEqualsNode.X2], node.output)];
    }
    else if (node instanceof graph_1.ArgMaxNode) {
        return [new argmax_1.ArgMax(node.x, node.output)];
    }
    else if (node instanceof graph_1.FusedLinearCombinationNode) {
        return [new linear_combination_1.LinearCombination(node.inputs[graph_1.FusedLinearCombinationNode.T1], node.inputs[graph_1.FusedLinearCombinationNode.T2], node.inputs[graph_1.FusedLinearCombinationNode.C1], node.inputs[graph_1.FusedLinearCombinationNode.C2], node.output)];
    }
    else if (node instanceof graph_1.Concat3DNode) {
        return [new concat3d_1.Concat3D(node.inputs[graph_1.Concat3DNode.X1], node.inputs[graph_1.Concat3DNode.X2], node.axis, node.output)];
    }
    else if (node instanceof graph_1.SquareNode) {
        return [new element_wise_activation_1.Square(node.inputs[graph_1.SquareNode.X], node.output)];
    }
    else if (node instanceof graph_1.AddNode) {
        return [new add_1.Add(node.inputs[graph_1.AddNode.T1], node.inputs[graph_1.AddNode.T2], node.output)];
    }
    else if (node instanceof graph_1.SubtractNode) {
        return [new subtract_1.Subtract(node.inputs[graph_1.SubtractNode.T1], node.inputs[graph_1.SubtractNode.T2], node.output)];
    }
    else if (node instanceof graph_1.MultiplyNode) {
        return [new multiply_1.Multiply(node.inputs[graph_1.MultiplyNode.T1], node.inputs[graph_1.MultiplyNode.T2], node.output)];
    }
    else if (node instanceof graph_1.DivideNode) {
        return [new divide_1.Divide(node.inputs[graph_1.DivideNode.T1], node.inputs[graph_1.DivideNode.T2], node.output)];
    }
    else if (node instanceof graph_1.SplitNode) {
        return [new split_1.Split(node.inputs[graph_1.SplitNode.X], node.outputs)];
    }
    else if (node instanceof graph_1.ReduceSumNode) {
        return [new reduce_sum_1.ReduceSum(node.inputs[graph_1.ReduceSumNode.X], node.output)];
    }
    else if (graph_util.isInputNode(node)) {
        return [];
    }
    else {
        throw Error('Unsupported node type: ' + node.constructor.name);
    }
}

},{"./graph":11,"./graph_util":14,"./ops/add":64,"./ops/argmax":65,"./ops/argmaxequals":66,"./ops/concat3d":67,"./ops/convolution":68,"./ops/divide":69,"./ops/element_wise_activation":70,"./ops/element_wise_cost":71,"./ops/exp":72,"./ops/linear_combination":73,"./ops/log":74,"./ops/matmul":75,"./ops/max_pool":76,"./ops/multiply":77,"./ops/reduce_sum":79,"./ops/reshape":80,"./ops/softmax":81,"./ops/split":82,"./ops/subtract":83}],64:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var graph_util = require("../graph_util");
var ndarray_1 = require("../math/ndarray");
var util = require("../util");
var op_1 = require("./op");
var Add = (function (_super) {
    __extends(Add, _super);
    function Add(x1Tensor, x2Tensor, yTensor) {
        var _this = _super.call(this) || this;
        _this.x1Tensor = x1Tensor;
        _this.x2Tensor = x2Tensor;
        _this.yTensor = yTensor;
        util.assert(util.sizeFromShape(x1Tensor.shape) === 1 ||
            util.sizeFromShape(x2Tensor.shape) === 1 ||
            util.arraysEqual(x1Tensor.shape, x2Tensor.shape), 'One of t1 or t2 must be a scalar, or t1 and t2 must have ' +
            'the same shape');
        return _this;
    }
    Add.prototype.feedForward = function (math, inferenceArrays) {
        var _this = this;
        var x1 = inferenceArrays.get(this.x1Tensor);
        var x2 = inferenceArrays.get(this.x2Tensor);
        math.scope(function (keep) {
            var result;
            if (util.isScalarShape(x1.shape)) {
                result = math.scalarPlusArray(x1, x2);
            }
            else if (util.isScalarShape(x2.shape)) {
                result = math.scalarPlusArray(x2, x1);
            }
            else {
                result = math.add(x1, x2);
            }
            inferenceArrays.set(_this.yTensor, keep(result));
        });
    };
    Add.prototype.backProp = function (math, inferenceArrays, gradientArrays) {
        var _this = this;
        var x1 = inferenceArrays.get(this.x1Tensor);
        var x2 = inferenceArrays.get(this.x2Tensor);
        var dy = gradientArrays.get(this.yTensor);
        math.scope(function (keep) {
            if (graph_util.shouldBackProp(_this.x1Tensor)) {
                if (util.isScalarShape(_this.x1Tensor.shape)) {
                    var sum = math.sum(dy);
                    if (_this.dySizeScalar == null) {
                        _this.dySizeScalar = ndarray_1.Scalar.new(dy.size);
                    }
                    gradientArrays.set(_this.x1Tensor, keep(math.divide(sum, _this.dySizeScalar)));
                }
                else {
                    gradientArrays.set(_this.x1Tensor, dy);
                }
            }
            if (graph_util.shouldBackProp(_this.x2Tensor)) {
                if (util.isScalarShape(_this.x2Tensor.shape)) {
                    var sum = math.sum(dy);
                    if (_this.dySizeScalar == null) {
                        _this.dySizeScalar = ndarray_1.Scalar.new(dy.size);
                    }
                    gradientArrays.set(_this.x2Tensor, keep(math.divide(sum, _this.dySizeScalar)));
                }
                else {
                    gradientArrays.set(_this.x2Tensor, dy);
                }
            }
        });
    };
    Add.prototype.dispose = function () {
        if (this.dySizeScalar != null) {
            this.dySizeScalar.dispose();
        }
    };
    return Add;
}(op_1.Operation));
exports.Add = Add;

},{"../graph_util":14,"../math/ndarray":26,"../util":90,"./op":78}],65:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var op_1 = require("./op");
var ArgMax = (function (_super) {
    __extends(ArgMax, _super);
    function ArgMax(xTensor, yTensor) {
        var _this = _super.call(this) || this;
        _this.xTensor = xTensor;
        _this.yTensor = yTensor;
        return _this;
    }
    ArgMax.prototype.feedForward = function (math, inferenceArrays) {
        var _this = this;
        var x = inferenceArrays.get(this.xTensor);
        math.scope(function (keep) {
            inferenceArrays.set(_this.yTensor, keep(math.argMax(x)));
        });
    };
    ArgMax.prototype.backProp = function (math, inferenceArrays, gradientArrays) {
        throw new Error('ArgMax backprop unimplemented');
    };
    return ArgMax;
}(op_1.Operation));
exports.ArgMax = ArgMax;

},{"./op":78}],66:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var op_1 = require("./op");
var ArgMaxEquals = (function (_super) {
    __extends(ArgMaxEquals, _super);
    function ArgMaxEquals(x1Tensor, x2Tensor, yTensor) {
        var _this = _super.call(this) || this;
        _this.x1Tensor = x1Tensor;
        _this.x2Tensor = x2Tensor;
        _this.yTensor = yTensor;
        return _this;
    }
    ArgMaxEquals.prototype.feedForward = function (math, inferenceArrays) {
        var _this = this;
        var x1 = inferenceArrays.get(this.x1Tensor);
        var x2 = inferenceArrays.get(this.x2Tensor);
        math.scope(function (keep) {
            inferenceArrays.set(_this.yTensor, keep(math.argMaxEquals(x1, x2)));
        });
    };
    ArgMaxEquals.prototype.backProp = function (math, inferenceArrays, gradientArrays) {
        throw new Error('ArgMaxEquals backprop unimplemented');
    };
    return ArgMaxEquals;
}(op_1.Operation));
exports.ArgMaxEquals = ArgMaxEquals;

},{"./op":78}],67:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var concat3d_util = require("../math/concat3d_util");
var op_1 = require("./op");
var Concat3D = (function (_super) {
    __extends(Concat3D, _super);
    function Concat3D(x1Tensor, x2Tensor, axis, yTensor) {
        var _this = _super.call(this) || this;
        _this.x1Tensor = x1Tensor;
        _this.x2Tensor = x2Tensor;
        _this.axis = axis;
        _this.yTensor = yTensor;
        concat3d_util.assertConcat3DShapesMatch(x1Tensor.shape, x2Tensor.shape, axis);
        return _this;
    }
    Concat3D.prototype.feedForward = function (math, inferenceArrays) {
        var _this = this;
        var x1 = inferenceArrays.get(this.x1Tensor);
        var x2 = inferenceArrays.get(this.x2Tensor);
        math.scope(function (keep) {
            var concatResult = math.concat3D(x1, x2, _this.axis);
            inferenceArrays.set(_this.yTensor, keep(concatResult));
        });
    };
    Concat3D.prototype.backProp = function (math, inferenceArrays, gradientArrays) {
        throw new Error('Concat3D backprop not implemented.');
    };
    return Concat3D;
}(op_1.Operation));
exports.Concat3D = Concat3D;

},{"../math/concat3d_util":19,"./op":78}],68:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var conv_util = require("../math/conv_util");
var util = require("../util");
var op_1 = require("./op");
var Convolution2D = (function (_super) {
    __extends(Convolution2D, _super);
    function Convolution2D(wTensor, xTensor, bTensor, yTensor, fieldSize, outputDepth, stride, zeroPad) {
        if (stride === void 0) { stride = 1; }
        var _this = _super.call(this) || this;
        _this.wTensor = wTensor;
        _this.xTensor = xTensor;
        _this.bTensor = bTensor;
        _this.yTensor = yTensor;
        _this.fieldSize = fieldSize;
        _this.outputDepth = outputDepth;
        _this.stride = stride;
        _this.assertWeightsShape(wTensor.shape);
        _this.zeroPad = zeroPad != null ?
            zeroPad :
            conv_util.computeDefaultPad(_this.xTensor.shape, _this.fieldSize, _this.stride);
        util.assert(util.isInt(_this.zeroPad), "The zero padding (" + _this.zeroPad + ") must be an integer. Change the " +
            "stride and/or zero pad parameters");
        return _this;
    }
    Convolution2D.prototype.feedForward = function (math, inferenceArrays) {
        var _this = this;
        var weights = inferenceArrays.get(this.wTensor);
        var biases = inferenceArrays.get(this.bTensor);
        var x = inferenceArrays.get(this.xTensor);
        math.scope(function (keep) {
            inferenceArrays.set(_this.yTensor, keep(math.conv2d(x, weights, biases, _this.stride, _this.zeroPad)));
        });
    };
    Convolution2D.prototype.backProp = function (math, inferenceArrays, gradientArrays) {
        var _this = this;
        var weights = inferenceArrays.get(this.wTensor);
        var x = inferenceArrays.get(this.xTensor);
        var dy = gradientArrays.get(this.yTensor);
        math.scope(function (keep) {
            var _a = math.conv2dBackProp(x, dy, weights, _this.stride, _this.zeroPad), dw = _a.dw, db = _a.db, dx = _a.dx;
            gradientArrays.set(_this.wTensor, keep(dw));
            gradientArrays.set(_this.bTensor, keep(db));
            gradientArrays.set(_this.xTensor, keep(dx));
        });
    };
    Convolution2D.prototype.assertWeightsShape = function (weightsShape) {
        util.assert(weightsShape[0] === this.fieldSize &&
            weightsShape[1] === this.fieldSize &&
            weightsShape[2] === this.xTensor.shape[2] &&
            weightsShape[3] === this.outputDepth, "weights must be of shape [" + this.fieldSize + "," + this.fieldSize + "," +
            (this.xTensor.shape[2] + "," + this.outputDepth + "] but they are of") +
            ("shape [" + weightsShape + "]"));
    };
    return Convolution2D;
}(op_1.Operation));
exports.Convolution2D = Convolution2D;

},{"../math/conv_util":20,"../util":90,"./op":78}],69:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var graph_util = require("../graph_util");
var util = require("../util");
var op_1 = require("./op");
var Divide = (function (_super) {
    __extends(Divide, _super);
    function Divide(x1Tensor, x2Tensor, yTensor) {
        var _this = _super.call(this) || this;
        _this.x1Tensor = x1Tensor;
        _this.x2Tensor = x2Tensor;
        _this.yTensor = yTensor;
        util.assert(util.sizeFromShape(x1Tensor.shape) === 1 ||
            util.sizeFromShape(x2Tensor.shape) === 1 ||
            util.arraysEqual(x1Tensor.shape, x2Tensor.shape), 'One of t1 or t2 must be a scalar, or t1 and t2 must have ' +
            'the same shape');
        return _this;
    }
    Divide.prototype.feedForward = function (math, inferenceArrays) {
        var _this = this;
        var t1 = inferenceArrays.get(this.x1Tensor);
        var t2 = inferenceArrays.get(this.x2Tensor);
        math.scope(function (keep) {
            var result;
            if (util.isScalarShape(t1.shape)) {
                result = math.scalarDividedByArray(t1, t2);
            }
            else if (util.isScalarShape(t2.shape)) {
                result = math.arrayDividedByScalar(t1, t2);
            }
            else {
                result = math.divide(t1, t2);
            }
            inferenceArrays.set(_this.yTensor, keep(result));
        });
    };
    Divide.prototype.backProp = function (math, inferenceArrays, gradientArrays) {
        var _this = this;
        var x1 = inferenceArrays.get(this.x1Tensor);
        var x2 = inferenceArrays.get(this.x2Tensor);
        var dy = gradientArrays.get(this.yTensor);
        var x1IsScalar = util.isScalarShape(x1.shape);
        var x2IsScalar = util.isScalarShape(x2.shape);
        math.scope(function (keep) {
            if (graph_util.shouldBackProp(_this.x1Tensor)) {
                if (x1IsScalar) {
                    var div = math.divide(dy, x2);
                    gradientArrays.set(_this.x1Tensor, keep(math.sum(div)));
                    div.dispose();
                }
                else if (x2IsScalar) {
                    gradientArrays.set(_this.x1Tensor, keep(math.arrayDividedByScalar(dy, x2)));
                }
                else {
                    gradientArrays.set(_this.x1Tensor, keep(math.divide(dy, x2)));
                }
            }
            if (graph_util.shouldBackProp(_this.x2Tensor)) {
                var x2Squared = math.elementWiseMul(x2, x2);
                var x1OverX2Squared = void 0;
                if (x2IsScalar) {
                    x1OverX2Squared = math.arrayDividedByScalar(x1, x2Squared);
                }
                else if (x1IsScalar) {
                    x1OverX2Squared = math.scalarDividedByArray(x1, x2Squared);
                }
                else {
                    x1OverX2Squared = math.divide(x1, x2Squared);
                }
                var dx2 = math.neg(x1OverX2Squared);
                var dyTimesDerivative = math.elementWiseMul(dy, dx2);
                if (x2IsScalar) {
                    gradientArrays.set(_this.x2Tensor, keep(math.sum(dyTimesDerivative)));
                }
                else {
                    gradientArrays.set(_this.x2Tensor, keep(dyTimesDerivative));
                }
            }
        });
    };
    return Divide;
}(op_1.Operation));
exports.Divide = Divide;

},{"../graph_util":14,"../util":90,"./op":78}],70:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var activation_functions_1 = require("../math/activation_functions");
var op_1 = require("./op");
var ElementWiseActivation = (function (_super) {
    __extends(ElementWiseActivation, _super);
    function ElementWiseActivation(xTensor, yTensor, func) {
        var _this = _super.call(this) || this;
        _this.xTensor = xTensor;
        _this.yTensor = yTensor;
        _this.func = func;
        return _this;
    }
    ElementWiseActivation.prototype.feedForward = function (math, inferenceArrays) {
        var _this = this;
        var x = inferenceArrays.get(this.xTensor);
        math.scope(function (keep) {
            inferenceArrays.set(_this.yTensor, keep(_this.func.output(math, x)));
        });
    };
    ElementWiseActivation.prototype.backProp = function (math, inferenceArrays, gradientArrays) {
        var _this = this;
        var x = inferenceArrays.get(this.xTensor);
        var y = inferenceArrays.get(this.yTensor);
        var dy = gradientArrays.get(this.yTensor);
        math.scope(function (keep) {
            var dydx = _this.func.der(math, x, y);
            gradientArrays.set(_this.xTensor, keep(math.elementWiseMul(dy, dydx)));
            dydx.dispose();
        });
    };
    return ElementWiseActivation;
}(op_1.Operation));
exports.ElementWiseActivation = ElementWiseActivation;
var ReLU = (function (_super) {
    __extends(ReLU, _super);
    function ReLU(xTensor, yTensor) {
        return _super.call(this, xTensor, yTensor, new activation_functions_1.ReLUFunc()) || this;
    }
    return ReLU;
}(ElementWiseActivation));
exports.ReLU = ReLU;
var TanH = (function (_super) {
    __extends(TanH, _super);
    function TanH(xTensor, yTensor) {
        return _super.call(this, xTensor, yTensor, new activation_functions_1.TanHFunc()) || this;
    }
    return TanH;
}(ElementWiseActivation));
exports.TanH = TanH;
var Sigmoid = (function (_super) {
    __extends(Sigmoid, _super);
    function Sigmoid(xTensor, yTensor) {
        return _super.call(this, xTensor, yTensor, new activation_functions_1.SigmoidFunc()) || this;
    }
    return Sigmoid;
}(ElementWiseActivation));
exports.Sigmoid = Sigmoid;
var Square = (function (_super) {
    __extends(Square, _super);
    function Square(xTensor, yTensor) {
        return _super.call(this, xTensor, yTensor, new activation_functions_1.SquareFunc()) || this;
    }
    return Square;
}(ElementWiseActivation));
exports.Square = Square;

},{"../math/activation_functions":18,"./op":78}],71:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var graph_util = require("../graph_util");
var cost_functions_1 = require("../math/cost_functions");
var ndarray_1 = require("../math/ndarray");
var util = require("../util");
var op_1 = require("./op");
var ElementWiseCost = (function (_super) {
    __extends(ElementWiseCost, _super);
    function ElementWiseCost(x1Tensor, x2Tensor, yTensor, func) {
        var _this = _super.call(this) || this;
        _this.x1Tensor = x1Tensor;
        _this.x2Tensor = x2Tensor;
        _this.yTensor = yTensor;
        _this.func = func;
        _this.oneOverNScalar = ndarray_1.Scalar.new(1 / util.sizeFromShape(x1Tensor.shape));
        return _this;
    }
    ElementWiseCost.prototype.feedForward = function (math, inferenceArrays) {
        var _this = this;
        var x1 = inferenceArrays.get(this.x1Tensor);
        var x2 = inferenceArrays.get(this.x2Tensor);
        math.scope(function (keep) {
            var elementWiseCost = _this.func.cost(math, x1, x2);
            var sum = math.sum(elementWiseCost);
            var result = math.scalarTimesArray(_this.oneOverNScalar, sum);
            inferenceArrays.set(_this.yTensor, keep(result));
        });
    };
    ElementWiseCost.prototype.backProp = function (math, inferenceArrays, gradientArrays) {
        var _this = this;
        var x1 = inferenceArrays.get(this.x1Tensor);
        var x2 = inferenceArrays.get(this.x2Tensor);
        math.scope(function (keep) {
            if (graph_util.shouldBackProp(_this.x1Tensor)) {
                gradientArrays.set(_this.x1Tensor, keep(_this.func.der(math, x1, x2)));
            }
            if (graph_util.shouldBackProp(_this.x2Tensor)) {
                gradientArrays.set(_this.x2Tensor, keep(_this.func.der(math, x2, x1)));
            }
        });
    };
    ElementWiseCost.prototype.dispose = function () {
        this.func.dispose();
        this.oneOverNScalar.dispose();
    };
    return ElementWiseCost;
}(op_1.Operation));
exports.ElementWiseCost = ElementWiseCost;
var MeanSquaredCost = (function (_super) {
    __extends(MeanSquaredCost, _super);
    function MeanSquaredCost(x1Tensor, x2Tensor, yTensor) {
        return _super.call(this, x1Tensor, x2Tensor, yTensor, new cost_functions_1.SquareCostFunc()) || this;
    }
    return MeanSquaredCost;
}(ElementWiseCost));
exports.MeanSquaredCost = MeanSquaredCost;

},{"../graph_util":14,"../math/cost_functions":22,"../math/ndarray":26,"../util":90,"./op":78}],72:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var graph_util = require("../graph_util");
var op_1 = require("./op");
var Exp = (function (_super) {
    __extends(Exp, _super);
    function Exp(xTensor, yTensor) {
        var _this = _super.call(this) || this;
        _this.xTensor = xTensor;
        _this.yTensor = yTensor;
        return _this;
    }
    Exp.prototype.feedForward = function (math, inferenceArrays) {
        var _this = this;
        var x = inferenceArrays.get(this.xTensor);
        math.scope(function (keep) {
            inferenceArrays.set(_this.yTensor, keep(math.exp(x)));
        });
    };
    Exp.prototype.backProp = function (math, inferenceArrays, gradientArrays) {
        var _this = this;
        var y = inferenceArrays.get(this.yTensor);
        var dy = gradientArrays.get(this.yTensor);
        math.scope(function (keep) {
            if (graph_util.shouldBackProp(_this.xTensor)) {
                gradientArrays.set(_this.xTensor, keep(math.elementWiseMul(y, dy)));
            }
        });
    };
    return Exp;
}(op_1.Operation));
exports.Exp = Exp;

},{"../graph_util":14,"./op":78}],73:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var graph_util = require("../graph_util");
var op_1 = require("./op");
var LinearCombination = (function (_super) {
    __extends(LinearCombination, _super);
    function LinearCombination(x1Tensor, x2Tensor, c1Tensor, c2Tensor, outTensor) {
        var _this = _super.call(this) || this;
        _this.x1Tensor = x1Tensor;
        _this.x2Tensor = x2Tensor;
        _this.c1Tensor = c1Tensor;
        _this.c2Tensor = c2Tensor;
        _this.outTensor = outTensor;
        return _this;
    }
    LinearCombination.prototype.feedForward = function (math, inferenceArrays) {
        var _this = this;
        var x1 = inferenceArrays.get(this.x1Tensor);
        var x2 = inferenceArrays.get(this.x2Tensor);
        var c1 = inferenceArrays.get(this.c1Tensor).asScalar();
        var c2 = inferenceArrays.get(this.c2Tensor).asScalar();
        math.scope(function (keep) {
            inferenceArrays.set(_this.outTensor, keep(math.scaledArrayAdd(c1, x1, c2, x2)));
        });
    };
    LinearCombination.prototype.backProp = function (math, inferenceArrays, gradientArrays) {
        var _this = this;
        var x1 = inferenceArrays.get(this.x1Tensor);
        var x2 = inferenceArrays.get(this.x2Tensor);
        var c1 = inferenceArrays.get(this.c1Tensor);
        var c2 = inferenceArrays.get(this.c2Tensor);
        var dy = gradientArrays.get(this.outTensor);
        math.scope(function (keep) {
            if (graph_util.shouldBackProp(_this.x1Tensor)) {
                gradientArrays.set(_this.x1Tensor, keep(math.scalarTimesArray(c1, dy)));
            }
            if (graph_util.shouldBackProp(_this.x2Tensor)) {
                gradientArrays.set(_this.x2Tensor, keep(math.scalarTimesArray(c2, dy)));
            }
            if (graph_util.shouldBackProp(_this.c1Tensor)) {
                var dotProduct1 = math.elementWiseMul(x1, dy);
                gradientArrays.set(_this.c1Tensor, keep(math.sum(dotProduct1)));
            }
            if (graph_util.shouldBackProp(_this.c2Tensor)) {
                var dotProduct2 = math.elementWiseMul(x2, dy);
                gradientArrays.set(_this.c2Tensor, keep(math.sum(dotProduct2)));
            }
        });
    };
    return LinearCombination;
}(op_1.Operation));
exports.LinearCombination = LinearCombination;

},{"../graph_util":14,"./op":78}],74:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var graph_util = require("../graph_util");
var op_1 = require("./op");
var Log = (function (_super) {
    __extends(Log, _super);
    function Log(xTensor, yTensor) {
        var _this = _super.call(this) || this;
        _this.xTensor = xTensor;
        _this.yTensor = yTensor;
        return _this;
    }
    Log.prototype.feedForward = function (math, inferenceArrays) {
        var _this = this;
        var x = inferenceArrays.get(this.xTensor);
        math.scope(function (keep) {
            inferenceArrays.set(_this.yTensor, keep(math.log(x)));
        });
    };
    Log.prototype.backProp = function (math, inferenceArrays, gradientArrays) {
        var _this = this;
        var x = inferenceArrays.get(this.xTensor);
        var dy = gradientArrays.get(this.yTensor);
        math.scope(function (keep) {
            if (graph_util.shouldBackProp(_this.xTensor)) {
                gradientArrays.set(_this.xTensor, keep(math.divide(dy, x)));
            }
        });
    };
    return Log;
}(op_1.Operation));
exports.Log = Log;

},{"../graph_util":14,"./op":78}],75:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var graph_util = require("../graph_util");
var math_1 = require("../math/math");
var op_1 = require("./op");
var MatMul = (function (_super) {
    __extends(MatMul, _super);
    function MatMul(x1Tensor, x2Tensor, yTensor) {
        var _this = _super.call(this) || this;
        _this.x1Tensor = x1Tensor;
        _this.x2Tensor = x2Tensor;
        _this.yTensor = yTensor;
        return _this;
    }
    MatMul.prototype.feedForward = function (math, inferenceArrays) {
        var _this = this;
        var x1 = inferenceArrays.get(this.x1Tensor);
        var x2 = inferenceArrays.get(this.x2Tensor);
        math.scope(function (keep) {
            if (x1.shape.length === 2 && x2.shape.length === 2) {
                inferenceArrays.set(_this.yTensor, keep(math.matMul(x1, x2)));
            }
            else if (x1.shape.length === 2 && x2.shape.length === 1) {
                inferenceArrays.set(_this.yTensor, keep(math.matrixTimesVector(x1, x2)));
            }
            else if (x1.shape.length === 1 && x2.shape.length === 2) {
                inferenceArrays.set(_this.yTensor, keep(math.vectorTimesMatrix(x1, x2)));
            }
        });
    };
    MatMul.prototype.backProp = function (math, inferenceArrays, gradientArrays) {
        var _this = this;
        var x1 = inferenceArrays.get(this.x1Tensor);
        var x2 = inferenceArrays.get(this.x2Tensor);
        var dy = gradientArrays.get(this.yTensor);
        if (x1.shape.length === 1) {
            x1 = x1.reshape([1, x1.size]);
            dy = dy.reshape([1, dy.size]);
        }
        if (x2.shape.length === 1) {
            x2 = x2.reshape([x2.size, 1]);
            dy = dy.reshape([dy.size, 1]);
        }
        math.scope(function (keep) {
            if (graph_util.shouldBackProp(_this.x1Tensor)) {
                var dx1 = math.matMul(dy, x2, math_1.MatrixOrientation.REGULAR, math_1.MatrixOrientation.TRANSPOSED);
                gradientArrays.set(_this.x1Tensor, keep(_this.x1Tensor.shape.length === 1 ? dx1.as1D() : dx1));
            }
            if (graph_util.shouldBackProp(_this.x2Tensor)) {
                var dx2 = math.matMul(x1, dy, math_1.MatrixOrientation.TRANSPOSED, math_1.MatrixOrientation.REGULAR);
                gradientArrays.set(_this.x2Tensor, keep(_this.x2Tensor.shape.length === 1 ? dx2.as1D() : dx2));
            }
        });
    };
    return MatMul;
}(op_1.Operation));
exports.MatMul = MatMul;

},{"../graph_util":14,"../math/math":23,"./op":78}],76:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var conv_util = require("../math/conv_util");
var util = require("../util");
var op_1 = require("./op");
var MaxPool = (function (_super) {
    __extends(MaxPool, _super);
    function MaxPool(xTensor, yTensor, fieldSize, stride, pad) {
        if (stride === void 0) { stride = 1; }
        var _this = _super.call(this) || this;
        _this.xTensor = xTensor;
        _this.yTensor = yTensor;
        _this.fieldSize = fieldSize;
        _this.stride = stride;
        if (pad != null) {
            _this.pad = pad;
        }
        else {
            _this.pad = conv_util.computeDefaultPad(xTensor.shape, _this.fieldSize, _this.stride);
        }
        util.assert(util.isInt(_this.pad), "The zero padding (" + _this.pad + ") must be an integer. Change the " +
            "stride and/or zero pad parameters");
        return _this;
    }
    MaxPool.prototype.feedForward = function (math, inferenceArrays) {
        var _this = this;
        var x = inferenceArrays.get(this.xTensor);
        math.scope(function (keep) {
            inferenceArrays.set(_this.yTensor, keep(math.maxPool(x, _this.fieldSize, _this.stride, _this.pad)));
        });
    };
    MaxPool.prototype.backProp = function (math, inferenceArrays, gradientArrays) {
        var _this = this;
        var x = inferenceArrays.get(this.xTensor);
        var dy = gradientArrays.get(this.yTensor);
        math.scope(function (keep) {
            gradientArrays.set(_this.xTensor, keep(math.maxPoolBackprop(dy, x, _this.fieldSize, _this.stride, _this.pad)));
        });
    };
    return MaxPool;
}(op_1.Operation));
exports.MaxPool = MaxPool;

},{"../math/conv_util":20,"../util":90,"./op":78}],77:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var graph_util = require("../graph_util");
var util = require("../util");
var op_1 = require("./op");
var Multiply = (function (_super) {
    __extends(Multiply, _super);
    function Multiply(x1Tensor, x2Tensor, yTensor) {
        var _this = _super.call(this) || this;
        _this.x1Tensor = x1Tensor;
        _this.x2Tensor = x2Tensor;
        _this.yTensor = yTensor;
        util.assert(util.sizeFromShape(x1Tensor.shape) === 1 ||
            util.sizeFromShape(x2Tensor.shape) === 1 ||
            util.arraysEqual(x1Tensor.shape, x2Tensor.shape), 'One of t1 or t2 must be a scalar, or t1 and t2 must have ' +
            'the same shape');
        return _this;
    }
    Multiply.prototype.feedForward = function (math, inferenceArrays) {
        var _this = this;
        var t1 = inferenceArrays.get(this.x1Tensor);
        var t2 = inferenceArrays.get(this.x2Tensor);
        math.scope(function (keep) {
            var result;
            if (util.isScalarShape(t1.shape)) {
                result = math.scalarTimesArray(t1, t2);
            }
            else if (util.isScalarShape(t2.shape)) {
                result = math.scalarTimesArray(t2, t1);
            }
            else {
                result = math.elementWiseMul(t1, t2);
            }
            inferenceArrays.set(_this.yTensor, keep(result));
        });
    };
    Multiply.prototype.backProp = function (math, inferenceArrays, gradientArrays) {
        var _this = this;
        var x1 = inferenceArrays.get(this.x1Tensor);
        var x2 = inferenceArrays.get(this.x2Tensor);
        var dy = gradientArrays.get(this.yTensor);
        math.scope(function (keep) {
            if (graph_util.shouldBackProp(_this.x1Tensor)) {
                if (util.isScalarShape(_this.x1Tensor.shape)) {
                    var mul = math.elementWiseMul(dy, x2);
                    gradientArrays.set(_this.x1Tensor, keep(math.sum(mul)));
                }
                else if (util.isScalarShape(x2.shape)) {
                    gradientArrays.set(_this.x1Tensor, keep(math.scalarTimesArray(x2, dy)));
                }
                else {
                    gradientArrays.set(_this.x1Tensor, keep(math.elementWiseMul(x2, dy)));
                }
            }
            if (graph_util.shouldBackProp(_this.x2Tensor)) {
                if (util.isScalarShape(_this.x2Tensor.shape)) {
                    var mul = math.elementWiseMul(dy, x1);
                    gradientArrays.set(_this.x2Tensor, keep(math.sum(mul)));
                }
                else if (util.isScalarShape(x1.shape)) {
                    gradientArrays.set(_this.x2Tensor, keep(math.scalarTimesArray(x1, dy)));
                }
                else {
                    gradientArrays.set(_this.x2Tensor, keep(math.elementWiseMul(x1, dy)));
                }
            }
        });
    };
    return Multiply;
}(op_1.Operation));
exports.Multiply = Multiply;

},{"../graph_util":14,"../util":90,"./op":78}],78:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Operation = (function () {
    function Operation() {
    }
    Operation.prototype.disposeTransientArrays = function (inferenceArrays, gradientArrays) { };
    Operation.prototype.dispose = function () { };
    return Operation;
}());
exports.Operation = Operation;

},{}],79:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var graph_util = require("../graph_util");
var ndarray_1 = require("../math/ndarray");
var util = require("../util");
var op_1 = require("./op");
var ReduceSum = (function (_super) {
    __extends(ReduceSum, _super);
    function ReduceSum(x, outTensor) {
        var _this = _super.call(this) || this;
        _this.x = x;
        _this.outTensor = outTensor;
        util.assertShapesMatch(outTensor.shape, []);
        return _this;
    }
    ReduceSum.prototype.feedForward = function (math, inferenceArrays) {
        var _this = this;
        var x = inferenceArrays.get(this.x);
        math.scope(function (keep) {
            inferenceArrays.set(_this.outTensor, keep(math.sum(x)));
        });
    };
    ReduceSum.prototype.backProp = function (math, inferenceArrays, gradientArrays) {
        var _this = this;
        if (!graph_util.shouldBackProp(this.x)) {
            return;
        }
        math.scope(function (keep) {
            var dy = gradientArrays.get(_this.outTensor);
            if (_this.ones == null) {
                var xArray = inferenceArrays.get(_this.x);
                _this.ones = ndarray_1.NDArray.zerosLike(xArray);
                _this.ones.fill(1);
            }
            gradientArrays.set(_this.x, keep(math.scalarTimesArray(dy, _this.ones)));
        });
    };
    return ReduceSum;
}(op_1.Operation));
exports.ReduceSum = ReduceSum;

},{"../graph_util":14,"../math/ndarray":26,"../util":90,"./op":78}],80:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var util = require("../util");
var op_1 = require("./op");
var Reshape = (function (_super) {
    __extends(Reshape, _super);
    function Reshape(xTensor, yTensor) {
        var _this = _super.call(this) || this;
        _this.xTensor = xTensor;
        _this.yTensor = yTensor;
        var xSize = util.sizeFromShape(xTensor.shape);
        var ySize = util.sizeFromShape(yTensor.shape);
        util.assert(xSize === ySize, "The input size (" + xSize + ") and output size (" + ySize + ") must match");
        return _this;
    }
    Reshape.prototype.feedForward = function (math, inferenceArrays) {
        var _this = this;
        var x = inferenceArrays.get(this.xTensor);
        math.scope(function (keep) {
            inferenceArrays.set(_this.yTensor, keep(math.reshape(x, _this.yTensor.shape)));
        });
    };
    Reshape.prototype.backProp = function (math, inferenceArrays, gradientArrays) {
        var _this = this;
        var dy = gradientArrays.get(this.yTensor);
        math.scope(function (keep) {
            gradientArrays.set(_this.xTensor, keep(math.reshape(dy, _this.xTensor.shape)));
        });
    };
    return Reshape;
}(op_1.Operation));
exports.Reshape = Reshape;

},{"../util":90,"./op":78}],81:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var graph_1 = require("../graph");
var ndarray_1 = require("../math/ndarray");
var util = require("../util");
var op_1 = require("./op");
var Softmax = (function (_super) {
    __extends(Softmax, _super);
    function Softmax(logitsTensor, output) {
        var _this = _super.call(this) || this;
        _this.logitsTensor = logitsTensor;
        _this.output = output;
        return _this;
    }
    Softmax.prototype.feedForward = function (math, inferenceArrays) {
        var _this = this;
        var logits = inferenceArrays.get(this.logitsTensor);
        return math.scope(function (keep) {
            inferenceArrays.set(_this.output, keep(math.softmax(logits)));
        });
    };
    Softmax.prototype.backProp = function () {
        throw Error('Softmax backprop is not yet implemented');
    };
    return Softmax;
}(op_1.Operation));
exports.Softmax = Softmax;
var SoftmaxCrossEntropyCost = (function (_super) {
    __extends(SoftmaxCrossEntropyCost, _super);
    function SoftmaxCrossEntropyCost(logitsTensor, labelTensor, yTensor) {
        var _this = _super.call(this) || this;
        _this.logitsTensor = logitsTensor;
        _this.labelTensor = labelTensor;
        _this.yTensor = yTensor;
        _this.epsilon = ndarray_1.Scalar.new(1e-5);
        _this.softmaxTensor = new graph_1.Tensor(logitsTensor.shape);
        return _this;
    }
    SoftmaxCrossEntropyCost.prototype.feedForward = function (math, inferenceArrays) {
        var _this = this;
        var logits = inferenceArrays.get(this.logitsTensor);
        var label = inferenceArrays.get(this.labelTensor);
        math.scope(function (keep) {
            var softmaxResult = math.softmax(logits);
            inferenceArrays.set(_this.softmaxTensor, keep(softmaxResult));
            inferenceArrays.set(_this.yTensor, keep(crossEntropyCost(math, softmaxResult, label, _this.epsilon)));
        });
    };
    SoftmaxCrossEntropyCost.prototype.backProp = function (math, inferenceArrays, gradientArrays) {
        var _this = this;
        var softmax = inferenceArrays.get(this.softmaxTensor);
        var label = inferenceArrays.get(this.labelTensor);
        math.scope(function (keep) {
            gradientArrays.set(_this.logitsTensor, keep(math.sub(softmax, label)));
        });
    };
    SoftmaxCrossEntropyCost.prototype.disposeTransientArrays = function (inferenceArrays, gradientArrays) {
        inferenceArrays.disposeArray(this.softmaxTensor);
    };
    SoftmaxCrossEntropyCost.prototype.dispose = function () {
        this.epsilon.dispose();
    };
    return SoftmaxCrossEntropyCost;
}(op_1.Operation));
exports.SoftmaxCrossEntropyCost = SoftmaxCrossEntropyCost;
function crossEntropyCost(math, y, target, epsilon) {
    util.assert(y.size === target.size, 'The output and target must be the same size');
    return math.scope(function () {
        var yPlusEps = math.scalarPlusArray(epsilon, y);
        var logOutput = math.log(yPlusEps);
        var tarLogOutput = math.elementWiseMul(target, logOutput);
        var costVector = math.neg(tarLogOutput);
        return math.sum(costVector);
    });
}
exports.crossEntropyCost = crossEntropyCost;

},{"../graph":11,"../math/ndarray":26,"../util":90,"./op":78}],82:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var graph_util = require("../graph_util");
var util = require("../util");
var op_1 = require("./op");
var Split = (function (_super) {
    __extends(Split, _super);
    function Split(input, outputs) {
        var _this = _super.call(this) || this;
        _this.input = input;
        _this.outputs = outputs;
        outputs.forEach(function (output) {
            util.assertShapesMatch(input.shape, output.shape);
        });
        return _this;
    }
    Split.prototype.feedForward = function (math, inferenceArrays) {
        var inputArray = inferenceArrays.get(this.input);
        this.outputs.forEach(function (output) {
            inferenceArrays.set(output, inputArray);
        });
    };
    Split.prototype.backProp = function (math, inferenceArrays, gradientArrays) {
        var _this = this;
        if (!graph_util.shouldBackProp(this.input)) {
            return;
        }
        math.scope(function (keep) {
            var dx = math.add(gradientArrays.get(_this.outputs[0]), gradientArrays.get(_this.outputs[1]));
            _this.outputs.slice(2).forEach(function (output) {
                dx = math.add(dx, gradientArrays.get(output));
            });
            gradientArrays.set(_this.input, keep(dx));
        });
    };
    return Split;
}(op_1.Operation));
exports.Split = Split;

},{"../graph_util":14,"../util":90,"./op":78}],83:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var graph_util = require("../graph_util");
var ndarray_1 = require("../math/ndarray");
var util = require("../util");
var op_1 = require("./op");
var Subtract = (function (_super) {
    __extends(Subtract, _super);
    function Subtract(t1, t2, outTensor) {
        var _this = _super.call(this) || this;
        _this.t1 = t1;
        _this.t2 = t2;
        _this.outTensor = outTensor;
        util.assert(util.sizeFromShape(t1.shape) === 1 ||
            util.sizeFromShape(t2.shape) === 1 ||
            util.arraysEqual(t1.shape, t2.shape), 'One of t1 or t2 must be a scalar, or t1 and t2 must have ' +
            'the same shape');
        return _this;
    }
    Subtract.prototype.feedForward = function (math, inferenceArrays) {
        var _this = this;
        var t1 = inferenceArrays.get(this.t1);
        var t2 = inferenceArrays.get(this.t2);
        math.scope(function (keep) {
            var result;
            if (util.isScalarShape(t1.shape)) {
                result = math.scalarMinusArray(t1, t2);
            }
            else if (util.isScalarShape(t2.shape)) {
                result = math.arrayMinusScalar(t1, t2);
            }
            else {
                result = math.sub(t1, t2);
            }
            inferenceArrays.set(_this.outTensor, keep(result));
        });
    };
    Subtract.prototype.backProp = function (math, inferenceArrays, gradientArrays) {
        var _this = this;
        var t1 = inferenceArrays.get(this.t1);
        var t2 = inferenceArrays.get(this.t2);
        var dy = gradientArrays.get(this.outTensor);
        math.scope(function (keep) {
            if (graph_util.shouldBackProp(_this.t1)) {
                if (util.isScalarShape(_this.t1.shape)) {
                    var sum = math.sum(dy);
                    if (_this.dySizeScalar == null) {
                        _this.dySizeScalar = ndarray_1.Scalar.new(dy.size);
                    }
                    gradientArrays.set(_this.t1, keep(math.divide(sum, _this.dySizeScalar)));
                }
                else {
                    gradientArrays.set(_this.t1, keep(dy));
                }
            }
            if (graph_util.shouldBackProp(_this.t2)) {
                if (util.isScalarShape(_this.t2.shape)) {
                    var sum = math.sum(dy);
                    var negSum = math.neg(sum);
                    if (_this.dySizeScalar == null) {
                        _this.dySizeScalar = ndarray_1.Scalar.new(dy.size);
                    }
                    gradientArrays.set(_this.t2, keep(math.divide(negSum, _this.dySizeScalar)));
                }
                else {
                    gradientArrays.set(_this.t2, keep(math.neg(dy)));
                }
            }
        });
    };
    Subtract.prototype.dispose = function () {
        if (this.dySizeScalar != null) {
            this.dySizeScalar.dispose();
        }
    };
    return Subtract;
}(op_1.Operation));
exports.Subtract = Subtract;

},{"../graph_util":14,"../math/ndarray":26,"../util":90,"./op":78}],84:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Optimizer = (function () {
    function Optimizer(specifiedVariableList) {
        if (specifiedVariableList != null) {
            this.specifiedVariableNodes = specifiedVariableList;
        }
    }
    return Optimizer;
}());
exports.Optimizer = Optimizer;

},{}],85:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function defaultCompare(a, b) {
    if (a === b) {
        return 0;
    }
    else if (a < b) {
        return -1;
    }
    else {
        return 1;
    }
}
exports.defaultCompare = defaultCompare;
var PriorityQueue = (function () {
    function PriorityQueue(comparator, indexObserver) {
        this.comparator = comparator;
        this.indexObserver = indexObserver;
        this.heap = [];
    }
    PriorityQueue.prototype.enqueue = function (t) {
        this.heap.push(t);
        this.onIndexChanged(t, this.heap.length - 1);
        this.siftUp(this.heap.length - 1);
    };
    PriorityQueue.prototype.dequeue = function () {
        if (this.empty()) {
            throw new Error('dequeue called on empty priority queue.');
        }
        var t = this.heap[0];
        this.swap(0, this.heap.length - 1);
        this.heap.pop();
        this.siftDown(0);
        return t;
    };
    PriorityQueue.prototype.update = function (newT, index) {
        var last = (index === this.heap.length - 1);
        if (!last) {
            this.swap(index, this.heap.length - 1);
        }
        this.heap.pop();
        if (!last) {
            if (this.siftUpIndex(index) !== -1) {
                this.siftUp(index);
            }
            else if (this.siftDownIndex(index) !== -1) {
                this.siftDown(index);
            }
        }
        this.enqueue(newT);
    };
    PriorityQueue.prototype.empty = function () {
        return this.heap.length === 0;
    };
    PriorityQueue.prototype.onIndexChanged = function (t, newIndex) {
        if (this.indexObserver) {
            this.indexObserver(t, newIndex);
        }
    };
    PriorityQueue.prototype.getParentIndex = function (index) {
        if (index === 0) {
            return -1;
        }
        return Math.floor((index - 1) / 2);
    };
    PriorityQueue.prototype.getLeftChildIndex = function (index) {
        var candidate = index * 2 + 1;
        return candidate < this.heap.length ? candidate : -1;
    };
    PriorityQueue.prototype.getRightChildIndex = function (index) {
        var candidate = index * 2 + 2;
        return candidate < this.heap.length ? candidate : -1;
    };
    PriorityQueue.prototype.siftUpIndex = function (index) {
        var parentIndex = this.getParentIndex(index);
        if (parentIndex === -1) {
            return -1;
        }
        if (this.compare(parentIndex, index) > 0) {
            return parentIndex;
        }
        return -1;
    };
    PriorityQueue.prototype.siftUp = function (index) {
        var siftIndex = this.siftUpIndex(index);
        while (siftIndex !== -1) {
            this.swap(index, siftIndex);
            index = siftIndex;
            siftIndex = this.siftUpIndex(index);
        }
    };
    PriorityQueue.prototype.siftDownIndex = function (index) {
        if (index >= this.heap.length) {
            return -1;
        }
        var largestChildIndex = index;
        var leftChildIndex = this.getLeftChildIndex(index);
        if ((leftChildIndex !== -1) &&
            (this.compare(leftChildIndex, largestChildIndex) < 0)) {
            largestChildIndex = leftChildIndex;
        }
        var rightChildIndex = this.getRightChildIndex(index);
        if ((rightChildIndex !== -1) &&
            (this.compare(rightChildIndex, largestChildIndex) < 0)) {
            largestChildIndex = rightChildIndex;
        }
        return (largestChildIndex === index) ? -1 : largestChildIndex;
    };
    PriorityQueue.prototype.siftDown = function (index) {
        var siftIndex = this.siftDownIndex(index);
        while (siftIndex !== -1) {
            this.swap(index, siftIndex);
            index = siftIndex;
            siftIndex = this.siftDownIndex(index);
        }
    };
    PriorityQueue.prototype.compare = function (aIndex, bIndex) {
        return this.comparator(this.heap[aIndex], this.heap[bIndex]);
    };
    PriorityQueue.prototype.swap = function (a, b) {
        var temp = this.heap[a];
        this.heap[a] = this.heap[b];
        this.heap[b] = temp;
        this.onIndexChanged(this.heap[a], a);
        this.onIndexChanged(this.heap[b], b);
    };
    return PriorityQueue;
}());
exports.PriorityQueue = PriorityQueue;

},{}],86:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ndarray_1 = require("./math/ndarray");
var operation_emitter = require("./operation_emitter");
var session_util = require("./session_util");
var tensor_array_map_1 = require("./tensor_array_map");
var util = require("./util");
var FeedDictionary = (function () {
    function FeedDictionary(feedEntries) {
        var _this = this;
        this.dict = {};
        if (feedEntries) {
            feedEntries.forEach(function (entry) { return _this.dict[entry.tensor.id] = entry; });
        }
    }
    return FeedDictionary;
}());
exports.FeedDictionary = FeedDictionary;
var CostReduction;
(function (CostReduction) {
    CostReduction[CostReduction["NONE"] = 0] = "NONE";
    CostReduction[CostReduction["SUM"] = 1] = "SUM";
    CostReduction[CostReduction["MEAN"] = 2] = "MEAN";
})(CostReduction = exports.CostReduction || (exports.CostReduction = {}));
var Session = (function () {
    function Session(graph, math) {
        this.graph = graph;
        this.math = math;
        this.activationArrayMap = new tensor_array_map_1.TensorArrayMap();
        this.gradientArrayMap = new tensor_array_map_1.TensorArrayMap();
        this.runtimeCache = {};
        this.oneScalar = ndarray_1.Scalar.new(1);
    }
    Session.prototype.dispose = function () {
        var _this = this;
        this.activationArrayMap.dispose();
        Object.keys(this.runtimeCache).forEach(function (key) {
            var runtime = _this.runtimeCache[key];
            if (runtime.operations) {
                runtime.operations.forEach(function (op) { return op.dispose(); });
            }
        });
        this.runtimeCache = {};
        if (this.batchSizeScalar != null) {
            this.batchSizeScalar.dispose();
        }
        this.oneScalar.dispose();
    };
    Session.prototype.evalAll = function (tensors, feedEntries) {
        var _this = this;
        return this.math.scope(function () {
            var feed = new FeedDictionary(feedEntries);
            var runtime = _this.getOrCreateRuntime(tensors, feed);
            var activations = _this.activationArrayMap;
            session_util.disposeAndInitializeOperationOutputs(runtime.nodes, activations);
            session_util.disposeTransientOperationArrays(runtime.operations, _this.activationArrayMap, _this.gradientArrayMap);
            session_util.addPersistentArraysToTensorArrayMap(runtime.nodes, activations);
            session_util.loadInputsFromFeedDictionaryToTensorArrayMap(feed, activations, _this.math);
            runtime.operations.forEach(function (op) { return op.feedForward(_this.math, activations); });
            var results = tensors.map(function (x) { return activations.get(x); });
            tensors.forEach(function (x) { return activations.delete(x); });
            session_util.releaseFeedDictionaryInputsFromTensorArrayMap(feed, activations, _this.math);
            return results;
        });
    };
    Session.prototype.eval = function (tensor, feedEntries) {
        return this.evalAll([tensor], feedEntries)[0];
    };
    Session.prototype.train = function (costTensor, feedEntries, batchSize, optimizer, costReduction) {
        var _this = this;
        if (costReduction === void 0) { costReduction = CostReduction.NONE; }
        util.assert(util.isScalarShape(costTensor.shape), 'Cost tensor for training must be a scalar value.');
        if (this.prevBatchSize !== batchSize) {
            this.prevBatchSize = batchSize;
            this.batchSizeScalar = ndarray_1.Scalar.new(batchSize);
        }
        var feed = new FeedDictionary(feedEntries);
        session_util.throwIfFeedDictionaryContainsNDArrays(feed);
        var runtime = this.getOrCreateRuntime([costTensor], feed);
        var inferenceOperations = runtime.operations;
        var backPropOperations = runtime.operations.slice().reverse();
        var activations = this.activationArrayMap;
        var gradients = this.gradientArrayMap;
        gradients.set(costTensor, this.oneScalar);
        session_util.addPersistentArraysToTensorArrayMap(runtime.nodes, activations);
        optimizer.beforeBatch(this.math, batchSize, runtime, activations, gradients);
        return this.math.scope(function (keep, track) {
            var cost = track(ndarray_1.Scalar.new(0));
            for (var i = 0; i < batchSize; ++i) {
                session_util.disposeAndInitializeOperationOutputs(runtime.nodes, activations);
                session_util.disposeAndInitializeOperationInputGradients(runtime.nodes, gradients);
                session_util.disposeTransientOperationArrays(runtime.operations, activations, gradients);
                session_util.loadInputsFromFeedDictionaryToTensorArrayMap(feed, activations, _this.math);
                inferenceOperations.forEach(function (op) { return op.feedForward(_this.math, activations); });
                backPropOperations.forEach(function (op) { return op.backProp(_this.math, activations, gradients); });
                optimizer.afterExample(_this.math, runtime, activations, gradients);
                session_util.releaseFeedDictionaryInputsFromTensorArrayMap(feed, activations, _this.math);
                cost = _this.updateCostForExample(cost, activations.get(costTensor), costReduction);
            }
            optimizer.afterBatch(_this.math, batchSize, runtime, activations, gradients);
            return _this.updateCostForBatch(cost, costReduction);
        });
    };
    Session.prototype.updateCostForExample = function (totalCost, currCost, costReduction) {
        if (costReduction === CostReduction.MEAN ||
            costReduction === CostReduction.SUM) {
            return this.math.add(totalCost, currCost);
        }
        return totalCost;
    };
    Session.prototype.updateCostForBatch = function (totalCost, costReduction) {
        if (costReduction === CostReduction.MEAN) {
            return this.math.divide(totalCost, this.batchSizeScalar);
        }
        return totalCost;
    };
    Session.prototype.getOrCreateRuntime = function (tensors, feed) {
        var key = this.makeRuntimeCacheKey(tensors, feed);
        var runtime = this.runtimeCache[key];
        if (runtime === undefined) {
            var nodes = session_util.getOrderedEvaluationSetFromEvalTensor(tensors, feed);
            nodes = session_util.addSplitNodes(nodes);
            session_util.removeFeedDictionaryNodesFromEvaluationSet(feed, nodes);
            session_util.throwErrorIfEvaluationSetContainsPlaceholderNodes(nodes);
            var operations = operation_emitter.emitFromGraphNodes(nodes);
            runtime = { nodes: nodes, operations: operations };
            this.runtimeCache[key] = runtime;
        }
        return runtime;
    };
    Session.prototype.makeRuntimeCacheKey = function (tensors, feed) {
        return tensors.map(function (x) { return x.id; }).sort().join('_') + '__' +
            Object.keys(feed.dict).sort().join('_');
    };
    return Session;
}());
exports.Session = Session;

},{"./math/ndarray":26,"./operation_emitter":63,"./session_util":87,"./tensor_array_map":89,"./util":90}],87:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var graph_1 = require("./graph");
var graph_util = require("./graph_util");
var ndarray_1 = require("./math/ndarray");
var util = require("./util");
function getTerminatingNodesFromFeedDictionary(feedDictionary) {
    return Object.keys(feedDictionary.dict)
        .map(function (tensorID) { return feedDictionary.dict[+tensorID].tensor.node; });
}
exports.getTerminatingNodesFromFeedDictionary = getTerminatingNodesFromFeedDictionary;
function getOrderedEvaluationSetFromEvalTensor(evalTensors, feedDictionary) {
    var terminatingNodes = getTerminatingNodesFromFeedDictionary(feedDictionary);
    var evalNodes = evalTensors.map(function (x) { return x.node; });
    var unorderedEvaluationSet = graph_util.getUnorderedEvaluationSet(evalNodes, terminatingNodes);
    var orderedEvaluationSet = graph_util.getOrderedEvaluationSet(unorderedEvaluationSet);
    return orderedEvaluationSet;
}
exports.getOrderedEvaluationSetFromEvalTensor = getOrderedEvaluationSetFromEvalTensor;
function addPersistentArraysToTensorArrayMap(evaluationSet, tensorArrayMap) {
    evaluationSet.forEach(function (node) {
        if (node instanceof graph_1.VariableNode || node instanceof graph_1.ConstantNode) {
            tensorArrayMap.set(node.output, node.data);
        }
    });
}
exports.addPersistentArraysToTensorArrayMap = addPersistentArraysToTensorArrayMap;
function getVariableNodesFromEvaluationSet(evaluationSet) {
    var nodes = [];
    evaluationSet.forEach(function (node) {
        if (node instanceof graph_1.VariableNode) {
            nodes.push(node);
        }
    });
    return nodes;
}
exports.getVariableNodesFromEvaluationSet = getVariableNodesFromEvaluationSet;
function throwIfFeedDictionaryContainsNDArrays(feedDictionary) {
    Object.keys(feedDictionary.dict).forEach(function (tensorID) {
        if (feedDictionary.dict[+tensorID].data instanceof ndarray_1.NDArray) {
            throw new Error('training requires FeedDictionary entries to be InputProviders' +
                'and not NDArrays.');
        }
    });
}
exports.throwIfFeedDictionaryContainsNDArrays = throwIfFeedDictionaryContainsNDArrays;
function loadInputsFromFeedDictionaryToTensorArrayMap(batchFeed, activations, math) {
    Object.keys(batchFeed.dict).forEach(function (tensorID) {
        var feedEntry = batchFeed.dict[+tensorID];
        var data;
        if (feedEntry.data instanceof ndarray_1.NDArray) {
            data = feedEntry.data;
        }
        else {
            var provider = feedEntry.data;
            data = provider.getNextCopy(math);
        }
        util.assert(util.arraysEqual(feedEntry.tensor.shape, data.shape), "Error loading FeedEntry: feeding NDArray of shape " + data.shape + " " +
            ("does not match Tensor (id: " + feedEntry.tensor.id + ") shape: ") +
            (feedEntry.tensor.shape + "."));
        activations.set(feedEntry.tensor, data);
    });
}
exports.loadInputsFromFeedDictionaryToTensorArrayMap = loadInputsFromFeedDictionaryToTensorArrayMap;
function releaseFeedDictionaryInputsFromTensorArrayMap(batchFeed, activations, math) {
    Object.keys(batchFeed.dict).forEach(function (tensorID) {
        var feedEntry = batchFeed.dict[+tensorID];
        if (!(feedEntry.data instanceof ndarray_1.NDArray)) {
            var provider = feedEntry.data;
            var feedEntryArray = activations.get(feedEntry.tensor);
            provider.disposeCopy(math, feedEntryArray);
        }
        activations.delete(feedEntry.tensor);
    });
}
exports.releaseFeedDictionaryInputsFromTensorArrayMap = releaseFeedDictionaryInputsFromTensorArrayMap;
function removeFeedDictionaryNodesFromEvaluationSet(feedDictionary, evaluationSet) {
    var i = 0;
    while (i < evaluationSet.length) {
        var node = evaluationSet[i];
        if (feedDictionary.dict[node.output.id] != null) {
            evaluationSet.splice(i, 1);
        }
        else {
            ++i;
        }
    }
}
exports.removeFeedDictionaryNodesFromEvaluationSet = removeFeedDictionaryNodesFromEvaluationSet;
function disposeAndInitializeOperationOutputs(evaluationSet, tensorArrayMap) {
    evaluationSet.forEach(function (node) {
        if (!graph_util.isInputNode(node)) {
            if (!graph_util.isPassthroughNode(node, tensorArrayMap)) {
                tensorArrayMap.disposeArray(node.output);
            }
            tensorArrayMap.set(node.output, null);
        }
    });
}
exports.disposeAndInitializeOperationOutputs = disposeAndInitializeOperationOutputs;
function disposeAndInitializeOperationInputGradients(evaluationSet, gradients) {
    evaluationSet.forEach(function (node) {
        Object.keys(node.inputs).forEach(function (inputName) {
            var input = node.inputs[inputName];
            if (gradients.get(input, true) !== gradients.get(node.output, true)) {
                gradients.disposeArray(input);
            }
            gradients.set(input, null);
        });
    });
}
exports.disposeAndInitializeOperationInputGradients = disposeAndInitializeOperationInputGradients;
function disposeTransientOperationArrays(operations, activations, gradients) {
    operations.forEach(function (op) { return op.disposeTransientArrays(activations, gradients); });
}
exports.disposeTransientOperationArrays = disposeTransientOperationArrays;
function throwErrorIfEvaluationSetContainsPlaceholderNodes(evaluationSet) {
    evaluationSet.forEach(function (node) {
        if (node instanceof graph_1.PlaceholderNode) {
            var shape = '[' + node.output.shape.join(', ') + ']';
            throw new Error('Placeholder node "' + node.name + '" ' + shape +
                ' not present in feed dictionary.');
        }
    });
}
exports.throwErrorIfEvaluationSetContainsPlaceholderNodes = throwErrorIfEvaluationSetContainsPlaceholderNodes;
function addSplitNodes(nodes) {
    var nodeIdToNumConsumers = [];
    var nodeIdToSplitNode = {};
    nodes.forEach(function (node) {
        var keys = Object.keys(node.inputs);
        keys.forEach(function (key) {
            var inputTensor = node.inputs[key];
            var input = inputTensor.node;
            if (nodeIdToNumConsumers[input.id] == null) {
                nodeIdToNumConsumers[input.id] = 0;
            }
            nodeIdToNumConsumers[input.id]++;
            if (nodeIdToNumConsumers[input.id] > 1 &&
                nodeIdToSplitNode[input.id] == null) {
                nodeIdToSplitNode[input.id] = new graph_1.SplitNode(input.graph, inputTensor);
            }
        });
    });
    var newNodes = [];
    nodes.forEach(function (node) {
        newNodes.push(node);
        if (node.id in nodeIdToSplitNode) {
            var splitNode = nodeIdToSplitNode[node.id];
            newNodes.push(splitNode);
        }
        var keys = Object.keys(node.inputs);
        keys.forEach(function (key) {
            var inputTensor = node.inputs[key];
            var inputId = inputTensor.node.id;
            if (inputId in nodeIdToSplitNode) {
                node.inputs[key] = nodeIdToSplitNode[inputId].getNewOutputTensor();
            }
        });
    });
    return newNodes;
}
exports.addSplitNodes = addSplitNodes;

},{"./graph":11,"./graph_util":14,"./math/ndarray":26,"./util":90}],88:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ndarray_1 = require("./math/ndarray");
var optimizer_1 = require("./optimizer");
var session_util = require("./session_util");
var tensor_array_map_1 = require("./tensor_array_map");
var SGDOptimizer = (function (_super) {
    __extends(SGDOptimizer, _super);
    function SGDOptimizer(learningRate, specifiedVariableList) {
        var _this = _super.call(this, specifiedVariableList) || this;
        _this.learningRate = learningRate;
        _this.variableGradients = new tensor_array_map_1.TensorArrayMap();
        _this.one = ndarray_1.Scalar.new(1);
        return _this;
    }
    SGDOptimizer.prototype.beforeBatch = function (math, batchSize, runtime, activationArrayMap, gradientArrayMap) {
        var _this = this;
        this.variableNodes = this.specifiedVariableNodes == null ?
            session_util.getVariableNodesFromEvaluationSet(runtime.nodes) :
            this.specifiedVariableNodes;
        if (batchSize !== this.prevBatchSize) {
            this.prevBatchSize = batchSize;
            this.c = ndarray_1.Scalar.new(-this.learningRate / batchSize);
        }
        this.variableNodes.forEach(function (node) { return _this.variableGradients.set(node.output, ndarray_1.NDArray.zeros(node.output.shape)); });
    };
    SGDOptimizer.prototype.afterExample = function (math, runtime, activationArrayMap, gradientArrayMap) {
        var _this = this;
        math.scope(function (keep) {
            _this.variableNodes.forEach(function (node) {
                var gradient = gradientArrayMap.get(node.output);
                var accumulatedGradient = _this.variableGradients.get(node.output);
                _this.variableGradients.set(node.output, keep(math.add(gradient, accumulatedGradient)));
                accumulatedGradient.dispose();
            });
        });
    };
    SGDOptimizer.prototype.afterBatch = function (math, batchSize, runtime, activationArrayMap, gradientArrayMap) {
        var _this = this;
        math.scope(function (keep) {
            _this.variableNodes.forEach(function (node) {
                var oldVariable = activationArrayMap.get(node.output);
                var gradient = _this.variableGradients.get(node.output);
                var variable = math.scaledArrayAdd(_this.c, gradient, _this.one, oldVariable);
                activationArrayMap.set(node.output, keep(variable));
                node.data = variable;
                oldVariable.dispose();
            });
        });
        this.variableGradients.dispose();
        this.variableGradients = new tensor_array_map_1.TensorArrayMap();
    };
    SGDOptimizer.prototype.dispose = function () {
        if (this.c != null) {
            this.c.dispose();
        }
        this.one.dispose();
    };
    SGDOptimizer.prototype.setLearningRate = function (learningRate) {
        this.learningRate = learningRate;
    };
    return SGDOptimizer;
}(optimizer_1.Optimizer));
exports.SGDOptimizer = SGDOptimizer;

},{"./math/ndarray":26,"./optimizer":84,"./session_util":87,"./tensor_array_map":89}],89:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TensorArrayMap = (function () {
    function TensorArrayMap() {
        this.dict = {};
    }
    TensorArrayMap.prototype.set = function (tensor, array) {
        this.dict[tensor.id] = array;
    };
    TensorArrayMap.prototype.get = function (tensor, skipChecks) {
        if (skipChecks === void 0) { skipChecks = false; }
        if (!skipChecks && this.dict[tensor.id] === undefined) {
            throw new Error('tensor ' + tensor.id + ' not in array map.');
        }
        var nda = this.dict[tensor.id];
        if (!skipChecks && nda === null) {
            throw new Error('tensor ' + tensor.id + ' has null array.');
        }
        return nda;
    };
    TensorArrayMap.prototype.delete = function (tensor) {
        delete this.dict[tensor.id];
    };
    TensorArrayMap.prototype.disposeArray = function (tensor) {
        if (this.dict[tensor.id] === undefined) {
            return;
        }
        var nda = this.dict[tensor.id];
        if (nda === null) {
            return;
        }
        nda.dispose();
        this.dict[tensor.id] = null;
    };
    TensorArrayMap.prototype.size = function () {
        return Object.keys(this.dict).length;
    };
    TensorArrayMap.prototype.dispose = function () {
        var _this = this;
        Object.keys(this.dict).forEach(function (tensorID) {
            var nda = _this.dict[+tensorID];
            if (nda) {
                nda.dispose();
            }
        });
        this.dict = {};
    };
    TensorArrayMap.prototype.hasNullArray = function (tensor) {
        if (this.dict[tensor.id] === undefined) {
            throw new Error('tensor ' + tensor.id + ' not in array map.');
        }
        return this.dict[tensor.id] === null;
    };
    return TensorArrayMap;
}());
exports.TensorArrayMap = TensorArrayMap;

},{}],90:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function shuffle(array) {
    var counter = array.length;
    var temp = 0;
    var index = 0;
    while (counter > 0) {
        index = (Math.random() * counter) | 0;
        counter--;
        temp = array[counter];
        array[counter] = array[index];
        array[index] = temp;
    }
}
exports.shuffle = shuffle;
function clamp(min, x, max) {
    return Math.max(min, Math.min(x, max));
}
exports.clamp = clamp;
function randUniform(a, b) {
    return Math.random() * (b - a) + a;
}
exports.randUniform = randUniform;
function randGauss(mean, stdDev, truncated) {
    if (mean === void 0) { mean = 0; }
    if (stdDev === void 0) { stdDev = 1; }
    if (truncated === void 0) { truncated = false; }
    var v1, v2, s;
    do {
        v1 = 2 * Math.random() - 1;
        v2 = 2 * Math.random() - 1;
        s = v1 * v1 + v2 * v2;
    } while (s > 1);
    var result = Math.sqrt(-2 * Math.log(s) / s) * v1;
    if (truncated && result > 2) {
        return randGauss(mean, stdDev, true);
    }
    return mean + stdDev * result;
}
exports.randGauss = randGauss;
function distSquared(a, b) {
    var result = 0;
    for (var i = 0; i < a.length; i++) {
        var diff = a[i] - b[i];
        result += diff * diff;
    }
    return result;
}
exports.distSquared = distSquared;
function assert(expr, msg) {
    if (!expr) {
        throw new Error(msg);
    }
}
exports.assert = assert;
function assertShapesMatch(shapeA, shapeB, errorMessagePrefix) {
    if (errorMessagePrefix === void 0) { errorMessagePrefix = ''; }
    assert(arraysEqual(shapeA, shapeB), errorMessagePrefix + ("Shapes " + shapeA + " and " + shapeB + " must match"));
}
exports.assertShapesMatch = assertShapesMatch;
function flatten(arr, ret) {
    ret = (ret === undefined ? [] : ret);
    for (var i = 0; i < arr.length; ++i) {
        if (Array.isArray(arr[i])) {
            flatten(arr[i], ret);
        }
        else {
            ret.push(arr[i]);
        }
    }
    return ret;
}
exports.flatten = flatten;
function inferShape(arr) {
    var shape = [];
    while (arr instanceof Array) {
        shape.push(arr.length);
        arr = arr[0];
    }
    return shape;
}
exports.inferShape = inferShape;
function sizeFromShape(shape) {
    if (shape.length === 0) {
        return 1;
    }
    var size = shape[0];
    for (var i = 1; i < shape.length; i++) {
        size *= shape[i];
    }
    return size;
}
exports.sizeFromShape = sizeFromShape;
function isScalarShape(shape) {
    return shape.length === 0;
}
exports.isScalarShape = isScalarShape;
function arraysEqual(n1, n2) {
    if (n1.length !== n2.length) {
        return false;
    }
    for (var i = 0; i < n1.length; i++) {
        if (n1[i] !== n2[i]) {
            return false;
        }
    }
    return true;
}
exports.arraysEqual = arraysEqual;
function isInt(a) {
    return a % 1 === 0;
}
exports.isInt = isInt;
function tanh(x) {
    if (Math.tanh != null) {
        return Math.tanh(x);
    }
    if (x === Infinity) {
        return 1;
    }
    else if (x === -Infinity) {
        return -1;
    }
    else {
        var e2x = Math.exp(2 * x);
        return (e2x - 1) / (e2x + 1);
    }
}
exports.tanh = tanh;
function sizeToSquarishShape(size) {
    for (var a = Math.floor(Math.sqrt(size)); a > 1; --a) {
        if (size % a === 0) {
            return [a, size / a];
        }
    }
    return [1, size];
}
exports.sizeToSquarishShape = sizeToSquarishShape;
function createShuffledIndices(n) {
    var shuffledIndices = new Uint32Array(n);
    for (var i = 0; i < n; ++i) {
        shuffledIndices[i] = i;
    }
    shuffle(shuffledIndices);
    return shuffledIndices;
}
exports.createShuffledIndices = createShuffledIndices;

},{}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJkZW1vcy9kZW1vLWZvb3Rlci50cyIsImRlbW9zL2RlbW8taGVhZGVyLnRzIiwiZGVtb3MvaW1hZ2VuZXQvaW1hZ2VuZXQtZGVtby50cyIsImRlbW9zL2xlYXJuanMudHMiLCJkZW1vcy9tb2RlbHMvaW1hZ2VuZXRfY2xhc3Nlcy50cyIsImRlbW9zL21vZGVscy9pbWFnZW5ldF91dGlsLnRzIiwiZGVtb3MvbW9kZWxzL3NxdWVlemVuZXQudHMiLCJkZW1vcy9wb2x5bWVyLXNwZWMudHMiLCJzcmMvY2hlY2twb2ludF9sb2FkZXIudHMiLCJzcmMvZGF0YXNldC50cyIsInNyYy9ncmFwaC50cyIsInNyYy9ncmFwaF9sYXllcnMudHMiLCJzcmMvZ3JhcGhfcnVubmVyLnRzIiwic3JjL2dyYXBoX3V0aWwudHMiLCJzcmMvaW5kZXgudHMiLCJzcmMvaW5pdGlhbGl6ZXJzLnRzIiwic3JjL2lucHV0X3Byb3ZpZGVyLnRzIiwic3JjL21hdGgvYWN0aXZhdGlvbl9mdW5jdGlvbnMudHMiLCJzcmMvbWF0aC9jb25jYXQzZF91dGlsLnRzIiwic3JjL21hdGgvY29udl91dGlsLnRzIiwic3JjL21hdGgvY29weTJkX3V0aWwudHMiLCJzcmMvbWF0aC9jb3N0X2Z1bmN0aW9ucy50cyIsInNyYy9tYXRoL21hdGgudHMiLCJzcmMvbWF0aC9tYXRoX2NwdS50cyIsInNyYy9tYXRoL21hdGhfZ3B1LnRzIiwic3JjL21hdGgvbmRhcnJheS50cyIsInNyYy9tYXRoL3dlYmdsL2FkZHNjYWxlZG1hdF9ncHUudHMiLCJzcmMvbWF0aC93ZWJnbC9hZGRzdWJtdWxkaXZfZ3B1LnRzIiwic3JjL21hdGgvd2ViZ2wvYXJnbWF4ZXF1YWxzX2dwdS50cyIsInNyYy9tYXRoL3dlYmdsL2FyZ21pbm1heF9ncHUudHMiLCJzcmMvbWF0aC93ZWJnbC9hdmdfcG9vbF9ncHUudHMiLCJzcmMvbWF0aC93ZWJnbC9iYXRjaG5vcm1fZ3B1LnRzIiwic3JjL21hdGgvd2ViZ2wvYmluYXJ5b3BfZ3B1LnRzIiwic3JjL21hdGgvd2ViZ2wvY29uY2F0M2RfZ3B1LnRzIiwic3JjL21hdGgvd2ViZ2wvY29udl9iYWNrcHJvcF9ncHUudHMiLCJzcmMvbWF0aC93ZWJnbC9jb252X2dwdS50cyIsInNyYy9tYXRoL3dlYmdsL2NvcHlfZ3B1LnRzIiwic3JjL21hdGgvd2ViZ2wvZXhwX2dwdS50cyIsInNyYy9tYXRoL3dlYmdsL2dwZ3B1X2NvbnRleHQudHMiLCJzcmMvbWF0aC93ZWJnbC9ncGdwdV91dGlsLnRzIiwic3JjL21hdGgvd2ViZ2wvbG9nX2dwdS50cyIsInNyYy9tYXRoL3dlYmdsL2xvZ3N1bWV4cF9ncHUudHMiLCJzcmMvbWF0aC93ZWJnbC9tYXhfcG9vbF9iYWNrcHJvcF9ncHUudHMiLCJzcmMvbWF0aC93ZWJnbC9tYXhfcG9vbF9ncHUudHMiLCJzcmMvbWF0aC93ZWJnbC9taW5fcG9vbF9ncHUudHMiLCJzcmMvbWF0aC93ZWJnbC9taW5tYXhfZ3B1LnRzIiwic3JjL21hdGgvd2ViZ2wvbXVsbWF0X2dwdS50cyIsInNyYy9tYXRoL3dlYmdsL25lZ19ncHUudHMiLCJzcmMvbWF0aC93ZWJnbC9wb29sX2dwdS50cyIsInNyYy9tYXRoL3dlYmdsL3JlZHVjZXN1bV9ncHUudHMiLCJzcmMvbWF0aC93ZWJnbC9yZWx1X2dwdS50cyIsInNyYy9tYXRoL3dlYmdsL3JlbmRlcl9uZGFycmF5X2dwdV91dGlsLnRzIiwic3JjL21hdGgvd2ViZ2wvcmVzaGFwZV9ncHUudHMiLCJzcmMvbWF0aC93ZWJnbC9yZXNpemVfYmlsaW5lYXJfZ3B1LnRzIiwic3JjL21hdGgvd2ViZ2wvc2hhZGVyX2NvbXBpbGVyLnRzIiwic3JjL21hdGgvd2ViZ2wvc2lnbW9pZF9ncHUudHMiLCJzcmMvbWF0aC93ZWJnbC9zdGVwX2dwdS50cyIsInNyYy9tYXRoL3dlYmdsL3RleF91dGlsLnRzIiwic3JjL21hdGgvd2ViZ2wvdGV4dHVyZV9tYW5hZ2VyLnRzIiwic3JjL21hdGgvd2ViZ2wvdHJpZ19ncHUudHMiLCJzcmMvbWF0aC93ZWJnbC91bmFyeW9wX2dwdS50cyIsInNyYy9tYXRoL3dlYmdsL3dlYmdsX3V0aWwudHMiLCJzcmMvb3BlcmF0aW9uX2VtaXR0ZXIudHMiLCJzcmMvb3BzL2FkZC50cyIsInNyYy9vcHMvYXJnbWF4LnRzIiwic3JjL29wcy9hcmdtYXhlcXVhbHMudHMiLCJzcmMvb3BzL2NvbmNhdDNkLnRzIiwic3JjL29wcy9jb252b2x1dGlvbi50cyIsInNyYy9vcHMvZGl2aWRlLnRzIiwic3JjL29wcy9lbGVtZW50X3dpc2VfYWN0aXZhdGlvbi50cyIsInNyYy9vcHMvZWxlbWVudF93aXNlX2Nvc3QudHMiLCJzcmMvb3BzL2V4cC50cyIsInNyYy9vcHMvbGluZWFyX2NvbWJpbmF0aW9uLnRzIiwic3JjL29wcy9sb2cudHMiLCJzcmMvb3BzL21hdG11bC50cyIsInNyYy9vcHMvbWF4X3Bvb2wudHMiLCJzcmMvb3BzL211bHRpcGx5LnRzIiwic3JjL29wcy9vcC50cyIsInNyYy9vcHMvcmVkdWNlX3N1bS50cyIsInNyYy9vcHMvcmVzaGFwZS50cyIsInNyYy9vcHMvc29mdG1heC50cyIsInNyYy9vcHMvc3BsaXQudHMiLCJzcmMvb3BzL3N1YnRyYWN0LnRzIiwic3JjL29wdGltaXplci50cyIsInNyYy9wcmlvcml0eV9xdWV1ZS50cyIsInNyYy9zZXNzaW9uLnRzIiwic3JjL3Nlc3Npb25fdXRpbC50cyIsInNyYy9zZ2Rfb3B0aW1pemVyLnRzIiwic3JjL3RlbnNvcl9hcnJheV9tYXAudHMiLCJzcmMvdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ2NBLE9BQU8sQ0FBQyxFQUFDLEVBQUUsRUFBRSxhQUFhLEVBQUMsQ0FBQyxDQUFDOzs7QUNBN0IsT0FBTyxDQUFDLEVBQUMsRUFBRSxFQUFFLGFBQWEsRUFBQyxDQUFDLENBQUM7Ozs7Ozs7Ozs7Ozs7OztBQ0M3QiwwQkFBd0I7QUFDeEIsMEJBQXdCO0FBQ3hCLHNDQUFzRztBQUV0Ryx1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RSxDQUFDLEVBQUUsQ0FBQztRQUMzQixlQUFlLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFDRCxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDekIsTUFBTSxDQUFDLGVBQWUsQ0FBQztBQUN6QixDQUFDO0FBUEQsc0RBT0MiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuUG9seW1lcih7aXM6ICdkZW1vLWZvb3Rlcid9KTtcbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblBvbHltZXIoe2lzOiAnZGVtby1oZWFkZXInfSk7XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCAnLi4vZGVtby1oZWFkZXInO1xuaW1wb3J0ICcuLi9kZW1vLWZvb3Rlcic7XG5pbXBvcnQge0FycmF5M0QsIGdwZ3B1X3V0aWwsIEdQR1BVQ29udGV4dCwgTkRBcnJheSwgTkRBcnJheU1hdGhDUFUsIE5EQXJyYXlNYXRoR1BVfSBmcm9tICcuLi9sZWFybmpzJztcbmltcG9ydCAqIGFzIGltYWdlbmV0X2NsYXNzZXMgZnJvbSAnLi4vbW9kZWxzL2ltYWdlbmV0X2NsYXNzZXMnO1xuaW1wb3J0ICogYXMgaW1hZ2VuZXRfdXRpbCBmcm9tICcuLi9tb2RlbHMvaW1hZ2VuZXRfdXRpbCc7XG5pbXBvcnQge1NxdWVlemVOZXR9IGZyb20gJy4uL21vZGVscy9zcXVlZXplbmV0Jztcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnVzZWQtdmFyaWFibGVcbmltcG9ydCB7UG9seW1lckVsZW1lbnQsIFBvbHltZXJIVE1MRWxlbWVudH0gZnJvbSAnLi4vcG9seW1lci1zcGVjJztcblxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnZhcmlhYmxlLW5hbWVcbmV4cG9ydCBjb25zdCBJbWFnZW5ldERlbW9Qb2x5bWVyID0gUG9seW1lckVsZW1lbnQoe1xuICBpczogJ2ltYWdlbmV0LWRlbW8nLFxuICBwcm9wZXJ0aWVzOiB7XG4gICAgbGF5ZXJOYW1lczogQXJyYXksXG4gICAgc2VsZWN0ZWRMYXllck5hbWU6IFN0cmluZyxcbiAgICBpbnB1dE5hbWVzOiBBcnJheSxcbiAgICBzZWxlY3RlZElucHV0TmFtZTogU3RyaW5nXG4gIH1cbn0pO1xuXG4vKipcbiAqIE5PVEU6IFRvIHVzZSB0aGUgd2ViY2FtIHdpdGhvdXQgU1NMLCB1c2UgdGhlIGNocm9tZSBmbGFnOlxuICogLS11bnNhZmVseS10cmVhdC1pbnNlY3VyZS1vcmlnaW4tYXMtc2VjdXJlPVxcXG4gKiAgICAgaHR0cDovL2xvY2FsaG9zdDo1NDMyXG4gKi9cblxuY29uc3QgTlVNX0NMQVNTRVMgPSAxMDAwO1xuY29uc3QgSU1BR0VfU0laRSA9IDIyNztcbmNvbnN0IFRPUF9LX0NMQVNTRVMgPSA1O1xuXG5jb25zdCBJTlBVVF9OQU1FUyA9IFsnY2F0JywgJ2RvZzEnLCAnZG9nMicsICdiZWVyYm90dGxlJywgJ3BpYW5vJywgJ3NheG9waG9uZSddO1xuZXhwb3J0IGNsYXNzIEltYWdlbmV0RGVtbyBleHRlbmRzIEltYWdlbmV0RGVtb1BvbHltZXIge1xuICBwcml2YXRlIHZhcmlhYmxlczoge1t2YXJOYW1lOiBzdHJpbmddOiBOREFycmF5fTtcblxuICBwcml2YXRlIG1hdGg6IE5EQXJyYXlNYXRoR1BVO1xuICBwcml2YXRlIG1hdGhDUFU6IE5EQXJyYXlNYXRoQ1BVO1xuICBwcml2YXRlIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XG4gIHByaXZhdGUgZ3BncHU6IEdQR1BVQ29udGV4dDtcbiAgcHJpdmF0ZSByZW5kZXJHcmF5c2NhbGVDaGFubmVsc0NvbGxhZ2VTaGFkZXI6IFdlYkdMU2hhZGVyO1xuXG4gIHByaXZhdGUgc3F1ZWV6ZU5ldDogU3F1ZWV6ZU5ldDtcblxuICBwcml2YXRlIHdlYmNhbVZpZGVvRWxlbWVudDogSFRNTFZpZGVvRWxlbWVudDtcbiAgcHJpdmF0ZSBzdGF0aWNJbWdFbGVtZW50OiBIVE1MSW1hZ2VFbGVtZW50O1xuXG4gIHByaXZhdGUgbGF5ZXJOYW1lczogc3RyaW5nW107XG4gIHByaXZhdGUgc2VsZWN0ZWRMYXllck5hbWU6IHN0cmluZztcbiAgcHJpdmF0ZSBpbnB1dE5hbWVzOiBzdHJpbmdbXTtcbiAgcHJpdmF0ZSBzZWxlY3RlZElucHV0TmFtZTogc3RyaW5nO1xuXG4gIHByaXZhdGUgaW5mZXJlbmNlQ2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcblxuICByZWFkeSgpIHtcbiAgICB0aGlzLmluZmVyZW5jZUNhbnZhcyA9XG4gICAgICAgIHRoaXMucXVlcnlTZWxlY3RvcignI2luZmVyZW5jZS1jYW52YXMnKSBhcyBIVE1MQ2FudmFzRWxlbWVudDtcbiAgICB0aGlzLnN0YXRpY0ltZ0VsZW1lbnQgPVxuICAgICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoJyNzdGF0aWNJbWcnKSBhcyBIVE1MSW1hZ2VFbGVtZW50O1xuICAgIHRoaXMud2ViY2FtVmlkZW9FbGVtZW50ID1cbiAgICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKCcjd2ViY2FtVmlkZW8nKSBhcyBIVE1MVmlkZW9FbGVtZW50O1xuXG4gICAgdGhpcy5sYXllck5hbWVzID0gW107XG4gICAgdGhpcy5zZWxlY3RlZExheWVyTmFtZSA9ICdjb252XzEnO1xuXG4gICAgY29uc3QgaW5wdXREcm9wZG93biA9IHRoaXMucXVlcnlTZWxlY3RvcignI2lucHV0LWRyb3Bkb3duJykhO1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICBpbnB1dERyb3Bkb3duLmFkZEV2ZW50TGlzdGVuZXIoJ2lyb24tYWN0aXZhdGUnLCAoZXZlbnQ6IGFueSkgPT4ge1xuICAgICAgY29uc3Qgc2VsZWN0ZWRJbnB1dE5hbWUgPSBldmVudC5kZXRhaWwuc2VsZWN0ZWQ7XG4gICAgICBpZiAoc2VsZWN0ZWRJbnB1dE5hbWUgPT09ICd3ZWJjYW0nKSB7XG4gICAgICAgIHRoaXMud2ViY2FtVmlkZW9FbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICAgICAgdGhpcy5zdGF0aWNJbWdFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLndlYmNhbVZpZGVvRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB0aGlzLnN0YXRpY0ltZ0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgICAgfVxuICAgICAgdGhpcy5zdGF0aWNJbWdFbGVtZW50LnNyYyA9ICdpbWFnZXMvJyArIGV2ZW50LmRldGFpbC5zZWxlY3RlZCArICcuanBnJztcbiAgICB9KTtcblxuICAgIGlmIChuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhKSB7XG4gICAgICBuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhKFxuICAgICAgICAgIHt2aWRlbzogdHJ1ZX0sXG4gICAgICAgICAgKHN0cmVhbSkgPT4ge1xuICAgICAgICAgICAgdGhpcy53ZWJjYW1WaWRlb0VsZW1lbnQuc3JjID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoc3RyZWFtKTtcbiAgICAgICAgICAgIHRoaXMuaW5pdFdpdGhXZWJjYW0oKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgdGhpcy5pbml0V2l0aG91dFdlYmNhbSgpO1xuICAgICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmluaXRXaXRob3V0V2ViY2FtKCk7XG4gICAgfVxuXG4gICAgdGhpcy5nbCA9IGdwZ3B1X3V0aWwuY3JlYXRlV2ViR0xDb250ZXh0KHRoaXMuaW5mZXJlbmNlQ2FudmFzKTtcbiAgICB0aGlzLmdwZ3B1ID0gbmV3IEdQR1BVQ29udGV4dCh0aGlzLmdsKTtcbiAgICB0aGlzLm1hdGggPSBuZXcgTkRBcnJheU1hdGhHUFUodGhpcy5ncGdwdSk7XG4gICAgdGhpcy5tYXRoQ1BVID0gbmV3IE5EQXJyYXlNYXRoQ1BVKCk7XG5cbiAgICB0aGlzLnNxdWVlemVOZXQgPSBuZXcgU3F1ZWV6ZU5ldCh0aGlzLmdwZ3B1LCB0aGlzLm1hdGgpO1xuICAgIHRoaXMuc3F1ZWV6ZU5ldC5sb2FkVmFyaWFibGVzKCkudGhlbigoKSA9PiB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5hbmltYXRlKCkpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5yZW5kZXJHcmF5c2NhbGVDaGFubmVsc0NvbGxhZ2VTaGFkZXIgPVxuICAgICAgICBpbWFnZW5ldF91dGlsLmdldFJlbmRlckdyYXlzY2FsZUNoYW5uZWxzQ29sbGFnZVNoYWRlcih0aGlzLmdwZ3B1KTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdFdpdGhvdXRXZWJjYW0oKSB7XG4gICAgdGhpcy5pbnB1dE5hbWVzID0gSU5QVVRfTkFNRVM7XG4gICAgdGhpcy5zZWxlY3RlZElucHV0TmFtZSA9ICdjYXQnO1xuICAgIHRoaXMuc3RhdGljSW1nRWxlbWVudC5zcmMgPSAnaW1hZ2VzL2NhdC5qcGcnO1xuICAgIHRoaXMud2ViY2FtVmlkZW9FbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgdGhpcy5zdGF0aWNJbWdFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5wcm90b2NvbCAhPT0gJ2h0dHBzOicpIHtcbiAgICAgICh0aGlzLnF1ZXJ5U2VsZWN0b3IoJyNzc2wtbWVzc2FnZScpIGFzIEhUTUxFbGVtZW50KS5zdHlsZS5kaXNwbGF5ID1cbiAgICAgICAgICAnYmxvY2snO1xuICAgIH1cblxuICAgICh0aGlzLnF1ZXJ5U2VsZWN0b3IoJyN3ZWJjYW0tbWVzc2FnZScpIGFzIEhUTUxFbGVtZW50KS5zdHlsZS5kaXNwbGF5ID1cbiAgICAgICAgJ2Jsb2NrJztcbiAgfVxuXG4gIHByaXZhdGUgaW5pdFdpdGhXZWJjYW0oKSB7XG4gICAgY29uc3QgaW5wdXROYW1lcyA9IElOUFVUX05BTUVTLnNsaWNlKCk7XG4gICAgaW5wdXROYW1lcy51bnNoaWZ0KCd3ZWJjYW0nKTtcbiAgICB0aGlzLmlucHV0TmFtZXMgPSBpbnB1dE5hbWVzO1xuICAgIHRoaXMuc2VsZWN0ZWRJbnB1dE5hbWUgPSAnd2ViY2FtJztcbiAgfVxuXG4gIHByaXZhdGUgYW5pbWF0ZSgpIHtcbiAgICBjb25zdCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcblxuICAgIGNvbnN0IGlzV2ViY2FtID0gdGhpcy5zZWxlY3RlZElucHV0TmFtZSA9PT0gJ3dlYmNhbSc7XG5cbiAgICBjb25zdCBjYW52YXNUZXh0dXJlU2hhcGU6IFtudW1iZXIsIG51bWJlcl0gPSBbSU1BR0VfU0laRSwgSU1BR0VfU0laRV07XG4gICAgY29uc3QgY2FudmFzVGV4dHVyZSA9XG4gICAgICAgIHRoaXMubWF0aC5nZXRUZXh0dXJlTWFuYWdlcigpLmFjcXVpcmVUZXh0dXJlKGNhbnZhc1RleHR1cmVTaGFwZSk7XG5cbiAgICBjb25zdCBlbGVtZW50ID0gaXNXZWJjYW0gPyB0aGlzLndlYmNhbVZpZGVvRWxlbWVudCA6IHRoaXMuc3RhdGljSW1nRWxlbWVudDtcbiAgICB0aGlzLmdwZ3B1LnVwbG9hZFBpeGVsRGF0YVRvVGV4dHVyZShjYW52YXNUZXh0dXJlLCBlbGVtZW50KTtcblxuICAgIHRoaXMubWF0aC5zY29wZSgoa2VlcCwgdHJhY2spID0+IHtcbiAgICAgIGNvbnN0IHByZXByb2Nlc3NlZElucHV0ID1cbiAgICAgICAgICB0cmFjayh0aGlzLnNxdWVlemVOZXQucHJlcHJvY2Vzc0NvbG9yVGV4dHVyZVRvQXJyYXkzRChcbiAgICAgICAgICAgICAgY2FudmFzVGV4dHVyZSwgY2FudmFzVGV4dHVyZVNoYXBlKSk7XG5cbiAgICAgIGNvbnN0IGluZmVyZW5jZVJlc3VsdCA9IHRoaXMuc3F1ZWV6ZU5ldC5pbmZlcihwcmVwcm9jZXNzZWRJbnB1dCk7XG4gICAgICBjb25zdCBuYW1lZEFjdGl2YXRpb25zID0gaW5mZXJlbmNlUmVzdWx0Lm5hbWVkQWN0aXZhdGlvbnM7XG5cbiAgICAgIHRoaXMubGF5ZXJOYW1lcyA9IE9iamVjdC5rZXlzKG5hbWVkQWN0aXZhdGlvbnMpO1xuICAgICAgdGhpcy5sYXllck5hbWVzLmZvckVhY2gobGF5ZXJOYW1lID0+IHRyYWNrKG5hbWVkQWN0aXZhdGlvbnNbbGF5ZXJOYW1lXSkpO1xuXG4gICAgICBjb25zdCB0b3BDbGFzc2VzVG9Qcm9iYWJpbGl0eSA9XG4gICAgICAgICAgdGhpcy5zcXVlZXplTmV0LmdldFRvcEtDbGFzc2VzKGluZmVyZW5jZVJlc3VsdC5sb2dpdHMsIFRPUF9LX0NMQVNTRVMpO1xuXG4gICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgZm9yIChjb25zdCBjbGFzc05hbWUgaW4gdG9wQ2xhc3Nlc1RvUHJvYmFiaWxpdHkpIHtcbiAgICAgICAgaWYgKCEoY2xhc3NOYW1lIGluIHRvcENsYXNzZXNUb1Byb2JhYmlsaXR5KSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjbGFzcycgKyBjb3VudCkhLmlubmVySFRNTCA9IGNsYXNzTmFtZTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2InICsgY291bnQpIS5pbm5lckhUTUwgPVxuICAgICAgICAgICAgJycgKyBNYXRoLmZsb29yKDEwMDAgKiB0b3BDbGFzc2VzVG9Qcm9iYWJpbGl0eVtjbGFzc05hbWVdKSAvIDEwMDA7XG4gICAgICAgIGNvdW50Kys7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGVuZFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcblxuICAgICAgKHRoaXMucXVlcnlTZWxlY3RvcignI3RvdGFsVGltZScpIGFzIEhUTUxEaXZFbGVtZW50KS5pbm5lckhUTUwgPVxuICAgICAgICAgICdsYXN0IGluZmVyZW5jZSB0aW1lOiAnICtcbiAgICAgICAgICBNYXRoLmZsb29yKDEwMDAgKiAoZW5kVGltZSAtIHN0YXJ0VGltZSkpIC8gMTAwMCArICdtcyc7XG5cbiAgICAgIC8vIFJlbmRlciBhY3RpdmF0aW9ucy5cbiAgICAgIGNvbnN0IGFjdGl2YXRpb25OREFycmF5ID0gbmFtZWRBY3RpdmF0aW9uc1t0aGlzLnNlbGVjdGVkTGF5ZXJOYW1lXTtcblxuICAgICAgLy8gQ29tcHV0ZSBtYXggYW5kIG1pbiBwZXIgY2hhbm5lbCBmb3Igbm9ybWFsaXphdGlvbi5cbiAgICAgIGNvbnN0IG1heFZhbHVlcyA9IHRoaXMubWF0aC5tYXhQb29sKFxuICAgICAgICAgIGFjdGl2YXRpb25OREFycmF5LCBhY3RpdmF0aW9uTkRBcnJheS5zaGFwZVsxXSxcbiAgICAgICAgICBhY3RpdmF0aW9uTkRBcnJheS5zaGFwZVsxXSwgMCk7XG4gICAgICBjb25zdCBtaW5WYWx1ZXMgPSB0aGlzLm1hdGgubWluUG9vbChcbiAgICAgICAgICBhY3RpdmF0aW9uTkRBcnJheSwgYWN0aXZhdGlvbk5EQXJyYXkuc2hhcGVbMV0sXG4gICAgICAgICAgYWN0aXZhdGlvbk5EQXJyYXkuc2hhcGVbMV0sIDApO1xuXG4gICAgICAvLyBMb2dpY2FsbHkgcmVzaXplIHRoZSByZW5kZXJpbmcgY2FudmFzLiBUaGUgZGlzcGxheWVkIHdpZHRoIGlzIGZpeGVkLlxuICAgICAgY29uc3QgaW1hZ2VzUGVyUm93ID0gTWF0aC5jZWlsKE1hdGguc3FydChhY3RpdmF0aW9uTkRBcnJheS5zaGFwZVsyXSkpO1xuICAgICAgY29uc3QgbnVtUm93cyA9IE1hdGguY2VpbChhY3RpdmF0aW9uTkRBcnJheS5zaGFwZVsyXSAvIGltYWdlc1BlclJvdyk7XG4gICAgICB0aGlzLmluZmVyZW5jZUNhbnZhcy53aWR0aCA9IGltYWdlc1BlclJvdyAqIGFjdGl2YXRpb25OREFycmF5LnNoYXBlWzBdO1xuICAgICAgdGhpcy5pbmZlcmVuY2VDYW52YXMuaGVpZ2h0ID0gbnVtUm93cyAqIGFjdGl2YXRpb25OREFycmF5LnNoYXBlWzBdO1xuXG4gICAgICBpbWFnZW5ldF91dGlsLnJlbmRlckdyYXlzY2FsZUNoYW5uZWxzQ29sbGFnZShcbiAgICAgICAgICB0aGlzLmdwZ3B1LCB0aGlzLnJlbmRlckdyYXlzY2FsZUNoYW5uZWxzQ29sbGFnZVNoYWRlcixcbiAgICAgICAgICBhY3RpdmF0aW9uTkRBcnJheS5nZXRUZXh0dXJlKCksIG1pblZhbHVlcy5nZXRUZXh0dXJlKCksXG4gICAgICAgICAgbWF4VmFsdWVzLmdldFRleHR1cmUoKSwgYWN0aXZhdGlvbk5EQXJyYXkuZ2V0VGV4dHVyZVNoYXBlUkMoKSxcbiAgICAgICAgICBhY3RpdmF0aW9uTkRBcnJheS5zaGFwZVswXSwgYWN0aXZhdGlvbk5EQXJyYXkuc2hhcGVbMl0sXG4gICAgICAgICAgdGhpcy5pbmZlcmVuY2VDYW52YXMud2lkdGgsIG51bVJvd3MpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5tYXRoLmdldFRleHR1cmVNYW5hZ2VyKCkucmVsZWFzZVRleHR1cmUoXG4gICAgICAgIGNhbnZhc1RleHR1cmUsIGNhbnZhc1RleHR1cmVTaGFwZSk7XG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5hbmltYXRlKCkpO1xuICB9XG59XG5cbmRvY3VtZW50LnJlZ2lzdGVyRWxlbWVudChJbWFnZW5ldERlbW8ucHJvdG90eXBlLmlzLCBJbWFnZW5ldERlbW8pO1xuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG4vLyBUaGlzIGZpbGUgaXMganVzdCBhbiBhbGlhcyB0aGF0IHBvaW50cyB0byB0aGUgY3VycmVudCBsZWFybmpzIHZlcnNpb25cbi8vIGF0IHRoaXMgYnJhbmNoLCBzbyBkZW1vcyBjYW4gaW1wb3J0IHRoZSBsaWJyYXJ5IGFzICcuLi9sZWFybmpzJy5cbmV4cG9ydCAqIGZyb20gJy4uL3NyYy9pbmRleCc7XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmV4cG9ydCBjb25zdCBJTUFHRU5FVF9DTEFTU0VTOiB7W2tleTogbnVtYmVyXTogc3RyaW5nfSA9IHtcbiAgMDogJ3RlbmNoLCBUaW5jYSB0aW5jYScsXG4gIDE6ICdnb2xkZmlzaCwgQ2FyYXNzaXVzIGF1cmF0dXMnLFxuICAyOiAnZ3JlYXQgd2hpdGUgc2hhcmssIHdoaXRlIHNoYXJrLCBtYW4tZWF0ZXIsIG1hbi1lYXRpbmcgc2hhcmssIENhcmNoYXJvZG9uIGNhcmNoYXJpYXMnLFxuICAzOiAndGlnZXIgc2hhcmssIEdhbGVvY2VyZG8gY3V2aWVyaScsXG4gIDQ6ICdoYW1tZXJoZWFkLCBoYW1tZXJoZWFkIHNoYXJrJyxcbiAgNTogJ2VsZWN0cmljIHJheSwgY3JhbXBmaXNoLCBudW1iZmlzaCwgdG9ycGVkbycsXG4gIDY6ICdzdGluZ3JheScsXG4gIDc6ICdjb2NrJyxcbiAgODogJ2hlbicsXG4gIDk6ICdvc3RyaWNoLCBTdHJ1dGhpbyBjYW1lbHVzJyxcbiAgMTA6ICdicmFtYmxpbmcsIEZyaW5naWxsYSBtb250aWZyaW5naWxsYScsXG4gIDExOiAnZ29sZGZpbmNoLCBDYXJkdWVsaXMgY2FyZHVlbGlzJyxcbiAgMTI6ICdob3VzZSBmaW5jaCwgbGlubmV0LCBDYXJwb2RhY3VzIG1leGljYW51cycsXG4gIDEzOiAnanVuY28sIHNub3diaXJkJyxcbiAgMTQ6ICdpbmRpZ28gYnVudGluZywgaW5kaWdvIGZpbmNoLCBpbmRpZ28gYmlyZCwgUGFzc2VyaW5hIGN5YW5lYScsXG4gIDE1OiAncm9iaW4sIEFtZXJpY2FuIHJvYmluLCBUdXJkdXMgbWlncmF0b3JpdXMnLFxuICAxNjogJ2J1bGJ1bCcsXG4gIDE3OiAnamF5JyxcbiAgMTg6ICdtYWdwaWUnLFxuICAxOTogJ2NoaWNrYWRlZScsXG4gIDIwOiAnd2F0ZXIgb3V6ZWwsIGRpcHBlcicsXG4gIDIxOiAna2l0ZScsXG4gIDIyOiAnYmFsZCBlYWdsZSwgQW1lcmljYW4gZWFnbGUsIEhhbGlhZWV0dXMgbGV1Y29jZXBoYWx1cycsXG4gIDIzOiAndnVsdHVyZScsXG4gIDI0OiAnZ3JlYXQgZ3JleSBvd2wsIGdyZWF0IGdyYXkgb3dsLCBTdHJpeCBuZWJ1bG9zYScsXG4gIDI1OiAnRXVyb3BlYW4gZmlyZSBzYWxhbWFuZGVyLCBTYWxhbWFuZHJhIHNhbGFtYW5kcmEnLFxuICAyNjogJ2NvbW1vbiBuZXd0LCBUcml0dXJ1cyB2dWxnYXJpcycsXG4gIDI3OiAnZWZ0JyxcbiAgMjg6ICdzcG90dGVkIHNhbGFtYW5kZXIsIEFtYnlzdG9tYSBtYWN1bGF0dW0nLFxuICAyOTogJ2F4b2xvdGwsIG11ZCBwdXBweSwgQW1ieXN0b21hIG1leGljYW51bScsXG4gIDMwOiAnYnVsbGZyb2csIFJhbmEgY2F0ZXNiZWlhbmEnLFxuICAzMTogJ3RyZWUgZnJvZywgdHJlZS1mcm9nJyxcbiAgMzI6ICd0YWlsZWQgZnJvZywgYmVsbCB0b2FkLCByaWJiZWQgdG9hZCwgdGFpbGVkIHRvYWQsIEFzY2FwaHVzIHRydWknLFxuICAzMzogJ2xvZ2dlcmhlYWQsIGxvZ2dlcmhlYWQgdHVydGxlLCBDYXJldHRhIGNhcmV0dGEnLFxuICAzNDogJ2xlYXRoZXJiYWNrIHR1cnRsZSwgbGVhdGhlcmJhY2ssIGxlYXRoZXJ5IHR1cnRsZSwgRGVybW9jaGVseXMgY29yaWFjZWEnLFxuICAzNTogJ211ZCB0dXJ0bGUnLFxuICAzNjogJ3RlcnJhcGluJyxcbiAgMzc6ICdib3ggdHVydGxlLCBib3ggdG9ydG9pc2UnLFxuICAzODogJ2JhbmRlZCBnZWNrbycsXG4gIDM5OiAnY29tbW9uIGlndWFuYSwgaWd1YW5hLCBJZ3VhbmEgaWd1YW5hJyxcbiAgNDA6ICdBbWVyaWNhbiBjaGFtZWxlb24sIGFub2xlLCBBbm9saXMgY2Fyb2xpbmVuc2lzJyxcbiAgNDE6ICd3aGlwdGFpbCwgd2hpcHRhaWwgbGl6YXJkJyxcbiAgNDI6ICdhZ2FtYScsXG4gIDQzOiAnZnJpbGxlZCBsaXphcmQsIENobGFteWRvc2F1cnVzIGtpbmdpJyxcbiAgNDQ6ICdhbGxpZ2F0b3IgbGl6YXJkJyxcbiAgNDU6ICdHaWxhIG1vbnN0ZXIsIEhlbG9kZXJtYSBzdXNwZWN0dW0nLFxuICA0NjogJ2dyZWVuIGxpemFyZCwgTGFjZXJ0YSB2aXJpZGlzJyxcbiAgNDc6ICdBZnJpY2FuIGNoYW1lbGVvbiwgQ2hhbWFlbGVvIGNoYW1hZWxlb24nLFxuICA0ODogJ0tvbW9kbyBkcmFnb24sIEtvbW9kbyBsaXphcmQsIGRyYWdvbiBsaXphcmQsIGdpYW50IGxpemFyZCwgVmFyYW51cyBrb21vZG9lbnNpcycsXG4gIDQ5OiAnQWZyaWNhbiBjcm9jb2RpbGUsIE5pbGUgY3JvY29kaWxlLCBDcm9jb2R5bHVzIG5pbG90aWN1cycsXG4gIDUwOiAnQW1lcmljYW4gYWxsaWdhdG9yLCBBbGxpZ2F0b3IgbWlzc2lzc2lwaWVuc2lzJyxcbiAgNTE6ICd0cmljZXJhdG9wcycsXG4gIDUyOiAndGh1bmRlciBzbmFrZSwgd29ybSBzbmFrZSwgQ2FycGhvcGhpcyBhbW9lbnVzJyxcbiAgNTM6ICdyaW5nbmVjayBzbmFrZSwgcmluZy1uZWNrZWQgc25ha2UsIHJpbmcgc25ha2UnLFxuICA1NDogJ2hvZ25vc2Ugc25ha2UsIHB1ZmYgYWRkZXIsIHNhbmQgdmlwZXInLFxuICA1NTogJ2dyZWVuIHNuYWtlLCBncmFzcyBzbmFrZScsXG4gIDU2OiAna2luZyBzbmFrZSwga2luZ3NuYWtlJyxcbiAgNTc6ICdnYXJ0ZXIgc25ha2UsIGdyYXNzIHNuYWtlJyxcbiAgNTg6ICd3YXRlciBzbmFrZScsXG4gIDU5OiAndmluZSBzbmFrZScsXG4gIDYwOiAnbmlnaHQgc25ha2UsIEh5cHNpZ2xlbmEgdG9ycXVhdGEnLFxuICA2MTogJ2JvYSBjb25zdHJpY3RvciwgQ29uc3RyaWN0b3IgY29uc3RyaWN0b3InLFxuICA2MjogJ3JvY2sgcHl0aG9uLCByb2NrIHNuYWtlLCBQeXRob24gc2ViYWUnLFxuICA2MzogJ0luZGlhbiBjb2JyYSwgTmFqYSBuYWphJyxcbiAgNjQ6ICdncmVlbiBtYW1iYScsXG4gIDY1OiAnc2VhIHNuYWtlJyxcbiAgNjY6ICdob3JuZWQgdmlwZXIsIGNlcmFzdGVzLCBzYW5kIHZpcGVyLCBob3JuZWQgYXNwLCBDZXJhc3RlcyBjb3JudXR1cycsXG4gIDY3OiAnZGlhbW9uZGJhY2ssIGRpYW1vbmRiYWNrIHJhdHRsZXNuYWtlLCBDcm90YWx1cyBhZGFtYW50ZXVzJyxcbiAgNjg6ICdzaWRld2luZGVyLCBob3JuZWQgcmF0dGxlc25ha2UsIENyb3RhbHVzIGNlcmFzdGVzJyxcbiAgNjk6ICd0cmlsb2JpdGUnLFxuICA3MDogJ2hhcnZlc3RtYW4sIGRhZGR5IGxvbmdsZWdzLCBQaGFsYW5naXVtIG9waWxpbycsXG4gIDcxOiAnc2NvcnBpb24nLFxuICA3MjogJ2JsYWNrIGFuZCBnb2xkIGdhcmRlbiBzcGlkZXIsIEFyZ2lvcGUgYXVyYW50aWEnLFxuICA3MzogJ2Jhcm4gc3BpZGVyLCBBcmFuZXVzIGNhdmF0aWN1cycsXG4gIDc0OiAnZ2FyZGVuIHNwaWRlciwgQXJhbmVhIGRpYWRlbWF0YScsXG4gIDc1OiAnYmxhY2sgd2lkb3csIExhdHJvZGVjdHVzIG1hY3RhbnMnLFxuICA3NjogJ3RhcmFudHVsYScsXG4gIDc3OiAnd29sZiBzcGlkZXIsIGh1bnRpbmcgc3BpZGVyJyxcbiAgNzg6ICd0aWNrJyxcbiAgNzk6ICdjZW50aXBlZGUnLFxuICA4MDogJ2JsYWNrIGdyb3VzZScsXG4gIDgxOiAncHRhcm1pZ2FuJyxcbiAgODI6ICdydWZmZWQgZ3JvdXNlLCBwYXJ0cmlkZ2UsIEJvbmFzYSB1bWJlbGx1cycsXG4gIDgzOiAncHJhaXJpZSBjaGlja2VuLCBwcmFpcmllIGdyb3VzZSwgcHJhaXJpZSBmb3dsJyxcbiAgODQ6ICdwZWFjb2NrJyxcbiAgODU6ICdxdWFpbCcsXG4gIDg2OiAncGFydHJpZGdlJyxcbiAgODc6ICdBZnJpY2FuIGdyZXksIEFmcmljYW4gZ3JheSwgUHNpdHRhY3VzIGVyaXRoYWN1cycsXG4gIDg4OiAnbWFjYXcnLFxuICA4OTogJ3N1bHBodXItY3Jlc3RlZCBjb2NrYXRvbywgS2FrYXRvZSBnYWxlcml0YSwgQ2FjYXR1YSBnYWxlcml0YScsXG4gIDkwOiAnbG9yaWtlZXQnLFxuICA5MTogJ2NvdWNhbCcsXG4gIDkyOiAnYmVlIGVhdGVyJyxcbiAgOTM6ICdob3JuYmlsbCcsXG4gIDk0OiAnaHVtbWluZ2JpcmQnLFxuICA5NTogJ2phY2FtYXInLFxuICA5NjogJ3RvdWNhbicsXG4gIDk3OiAnZHJha2UnLFxuICA5ODogJ3JlZC1icmVhc3RlZCBtZXJnYW5zZXIsIE1lcmd1cyBzZXJyYXRvcicsXG4gIDk5OiAnZ29vc2UnLFxuICAxMDA6ICdibGFjayBzd2FuLCBDeWdudXMgYXRyYXR1cycsXG4gIDEwMTogJ3R1c2tlcicsXG4gIDEwMjogJ2VjaGlkbmEsIHNwaW55IGFudGVhdGVyLCBhbnRlYXRlcicsXG4gIDEwMzpcbiAgICAgICdwbGF0eXB1cywgZHVja2JpbGwsIGR1Y2tiaWxsZWQgcGxhdHlwdXMsIGR1Y2stYmlsbGVkIHBsYXR5cHVzLCBPcm5pdGhvcmh5bmNodXMgYW5hdGludXMnLFxuICAxMDQ6ICd3YWxsYWJ5LCBicnVzaCBrYW5nYXJvbycsXG4gIDEwNTogJ2tvYWxhLCBrb2FsYSBiZWFyLCBrYW5nYXJvbyBiZWFyLCBuYXRpdmUgYmVhciwgUGhhc2NvbGFyY3RvcyBjaW5lcmV1cycsXG4gIDEwNjogJ3dvbWJhdCcsXG4gIDEwNzogJ2plbGx5IGZpc2gnLFxuICAxMDg6ICdzZWEgYW5lbW9uZSwgYW5lbW9uZScsXG4gIDEwOTogJ2JyYWluIGNvcmFsJyxcbiAgMTEwOiAnZmxhdHdvcm0sIHBsYXR5aGVsbWludGgnLFxuICAxMTE6ICduZW1hdG9kZSwgbmVtYXRvZGUgd29ybSwgcm91bmR3b3JtJyxcbiAgMTEyOiAnY29uY2gnLFxuICAxMTM6ICdzbmFpbCcsXG4gIDExNDogJ3NsdWcnLFxuICAxMTU6ICdzZWEgc2x1ZywgbnVkaWJyYW5jaCcsXG4gIDExNjogJ2NoaXRvbiwgY29hdC1vZi1tYWlsIHNoZWxsLCBzZWEgY3JhZGxlLCBwb2x5cGxhY29waG9yZScsXG4gIDExNzogJ2NoYW1iZXJlZCBuYXV0aWx1cywgcGVhcmx5IG5hdXRpbHVzLCBuYXV0aWx1cycsXG4gIDExODogJ0R1bmdlbmVzcyBjcmFiLCBDYW5jZXIgbWFnaXN0ZXInLFxuICAxMTk6ICdyb2NrIGNyYWIsIENhbmNlciBpcnJvcmF0dXMnLFxuICAxMjA6ICdmaWRkbGVyIGNyYWInLFxuICAxMjE6XG4gICAgICAna2luZyBjcmFiLCBBbGFza2EgY3JhYiwgQWxhc2thbiBraW5nIGNyYWIsIEFsYXNrYSBraW5nIGNyYWIsIFBhcmFsaXRob2RlcyBjYW10c2NoYXRpY2EnLFxuICAxMjI6ICdBbWVyaWNhbiBsb2JzdGVyLCBOb3J0aGVybiBsb2JzdGVyLCBNYWluZSBsb2JzdGVyLCBIb21hcnVzIGFtZXJpY2FudXMnLFxuICAxMjM6XG4gICAgICAnc3BpbnkgbG9ic3RlciwgbGFuZ291c3RlLCByb2NrIGxvYnN0ZXIsIGNyYXdmaXNoLCBjcmF5ZmlzaCwgc2VhIGNyYXdmaXNoJyxcbiAgMTI0OiAnY3JheWZpc2gsIGNyYXdmaXNoLCBjcmF3ZGFkLCBjcmF3ZGFkZHknLFxuICAxMjU6ICdoZXJtaXQgY3JhYicsXG4gIDEyNjogJ2lzb3BvZCcsXG4gIDEyNzogJ3doaXRlIHN0b3JrLCBDaWNvbmlhIGNpY29uaWEnLFxuICAxMjg6ICdibGFjayBzdG9yaywgQ2ljb25pYSBuaWdyYScsXG4gIDEyOTogJ3Nwb29uYmlsbCcsXG4gIDEzMDogJ2ZsYW1pbmdvJyxcbiAgMTMxOiAnbGl0dGxlIGJsdWUgaGVyb24sIEVncmV0dGEgY2FlcnVsZWEnLFxuICAxMzI6ICdBbWVyaWNhbiBlZ3JldCwgZ3JlYXQgd2hpdGUgaGVyb24sIEVncmV0dGEgYWxidXMnLFxuICAxMzM6ICdiaXR0ZXJuJyxcbiAgMTM0OiAnY3JhbmUnLFxuICAxMzU6ICdsaW1wa2luLCBBcmFtdXMgcGljdHVzJyxcbiAgMTM2OiAnRXVyb3BlYW4gZ2FsbGludWxlLCBQb3JwaHlyaW8gcG9ycGh5cmlvJyxcbiAgMTM3OiAnQW1lcmljYW4gY29vdCwgbWFyc2ggaGVuLCBtdWQgaGVuLCB3YXRlciBoZW4sIEZ1bGljYSBhbWVyaWNhbmEnLFxuICAxMzg6ICdidXN0YXJkJyxcbiAgMTM5OiAncnVkZHkgdHVybnN0b25lLCBBcmVuYXJpYSBpbnRlcnByZXMnLFxuICAxNDA6ICdyZWQtYmFja2VkIHNhbmRwaXBlciwgZHVubGluLCBFcm9saWEgYWxwaW5hJyxcbiAgMTQxOiAncmVkc2hhbmssIFRyaW5nYSB0b3RhbnVzJyxcbiAgMTQyOiAnZG93aXRjaGVyJyxcbiAgMTQzOiAnb3lzdGVyY2F0Y2hlciwgb3lzdGVyIGNhdGNoZXInLFxuICAxNDQ6ICdwZWxpY2FuJyxcbiAgMTQ1OiAna2luZyBwZW5ndWluLCBBcHRlbm9keXRlcyBwYXRhZ29uaWNhJyxcbiAgMTQ2OiAnYWxiYXRyb3NzLCBtb2xseW1hd2snLFxuICAxNDc6XG4gICAgICAnZ3JleSB3aGFsZSwgZ3JheSB3aGFsZSwgZGV2aWxmaXNoLCBFc2NocmljaHRpdXMgZ2liYm9zdXMsIEVzY2hyaWNodGl1cyByb2J1c3R1cycsXG4gIDE0ODogJ2tpbGxlciB3aGFsZSwga2lsbGVyLCBvcmNhLCBncmFtcHVzLCBzZWEgd29sZiwgT3JjaW51cyBvcmNhJyxcbiAgMTQ5OiAnZHVnb25nLCBEdWdvbmcgZHVnb24nLFxuICAxNTA6ICdzZWEgbGlvbicsXG4gIDE1MTogJ0NoaWh1YWh1YScsXG4gIDE1MjogJ0phcGFuZXNlIHNwYW5pZWwnLFxuICAxNTM6ICdNYWx0ZXNlIGRvZywgTWFsdGVzZSB0ZXJyaWVyLCBNYWx0ZXNlJyxcbiAgMTU0OiAnUGVraW5lc2UsIFBla2luZ2VzZSwgUGVrZScsXG4gIDE1NTogJ1NoaWgtVHp1JyxcbiAgMTU2OiAnQmxlbmhlaW0gc3BhbmllbCcsXG4gIDE1NzogJ3BhcGlsbG9uJyxcbiAgMTU4OiAndG95IHRlcnJpZXInLFxuICAxNTk6ICdSaG9kZXNpYW4gcmlkZ2ViYWNrJyxcbiAgMTYwOiAnQWZnaGFuIGhvdW5kLCBBZmdoYW4nLFxuICAxNjE6ICdiYXNzZXQsIGJhc3NldCBob3VuZCcsXG4gIDE2MjogJ2JlYWdsZScsXG4gIDE2MzogJ2Jsb29kaG91bmQsIHNsZXV0aGhvdW5kJyxcbiAgMTY0OiAnYmx1ZXRpY2snLFxuICAxNjU6ICdibGFjay1hbmQtdGFuIGNvb25ob3VuZCcsXG4gIDE2NjogJ1dhbGtlciBob3VuZCwgV2Fsa2VyIGZveGhvdW5kJyxcbiAgMTY3OiAnRW5nbGlzaCBmb3hob3VuZCcsXG4gIDE2ODogJ3JlZGJvbmUnLFxuICAxNjk6ICdib3J6b2ksIFJ1c3NpYW4gd29sZmhvdW5kJyxcbiAgMTcwOiAnSXJpc2ggd29sZmhvdW5kJyxcbiAgMTcxOiAnSXRhbGlhbiBncmV5aG91bmQnLFxuICAxNzI6ICd3aGlwcGV0JyxcbiAgMTczOiAnSWJpemFuIGhvdW5kLCBJYml6YW4gUG9kZW5jbycsXG4gIDE3NDogJ05vcndlZ2lhbiBlbGtob3VuZCwgZWxraG91bmQnLFxuICAxNzU6ICdvdHRlcmhvdW5kLCBvdHRlciBob3VuZCcsXG4gIDE3NjogJ1NhbHVraSwgZ2F6ZWxsZSBob3VuZCcsXG4gIDE3NzogJ1Njb3R0aXNoIGRlZXJob3VuZCwgZGVlcmhvdW5kJyxcbiAgMTc4OiAnV2VpbWFyYW5lcicsXG4gIDE3OTogJ1N0YWZmb3Jkc2hpcmUgYnVsbHRlcnJpZXIsIFN0YWZmb3Jkc2hpcmUgYnVsbCB0ZXJyaWVyJyxcbiAgMTgwOlxuICAgICAgJ0FtZXJpY2FuIFN0YWZmb3Jkc2hpcmUgdGVycmllciwgU3RhZmZvcmRzaGlyZSB0ZXJyaWVyLCBBbWVyaWNhbiBwaXQgYnVsbCB0ZXJyaWVyLCBwaXQgYnVsbCB0ZXJyaWVyJyxcbiAgMTgxOiAnQmVkbGluZ3RvbiB0ZXJyaWVyJyxcbiAgMTgyOiAnQm9yZGVyIHRlcnJpZXInLFxuICAxODM6ICdLZXJyeSBibHVlIHRlcnJpZXInLFxuICAxODQ6ICdJcmlzaCB0ZXJyaWVyJyxcbiAgMTg1OiAnTm9yZm9sayB0ZXJyaWVyJyxcbiAgMTg2OiAnTm9yd2ljaCB0ZXJyaWVyJyxcbiAgMTg3OiAnWW9ya3NoaXJlIHRlcnJpZXInLFxuICAxODg6ICd3aXJlLWhhaXJlZCBmb3ggdGVycmllcicsXG4gIDE4OTogJ0xha2VsYW5kIHRlcnJpZXInLFxuICAxOTA6ICdTZWFseWhhbSB0ZXJyaWVyLCBTZWFseWhhbScsXG4gIDE5MTogJ0FpcmVkYWxlLCBBaXJlZGFsZSB0ZXJyaWVyJyxcbiAgMTkyOiAnY2Fpcm4sIGNhaXJuIHRlcnJpZXInLFxuICAxOTM6ICdBdXN0cmFsaWFuIHRlcnJpZXInLFxuICAxOTQ6ICdEYW5kaWUgRGlubW9udCwgRGFuZGllIERpbm1vbnQgdGVycmllcicsXG4gIDE5NTogJ0Jvc3RvbiBidWxsLCBCb3N0b24gdGVycmllcicsXG4gIDE5NjogJ21pbmlhdHVyZSBzY2huYXV6ZXInLFxuICAxOTc6ICdnaWFudCBzY2huYXV6ZXInLFxuICAxOTg6ICdzdGFuZGFyZCBzY2huYXV6ZXInLFxuICAxOTk6ICdTY290Y2ggdGVycmllciwgU2NvdHRpc2ggdGVycmllciwgU2NvdHRpZScsXG4gIDIwMDogJ1RpYmV0YW4gdGVycmllciwgY2hyeXNhbnRoZW11bSBkb2cnLFxuICAyMDE6ICdzaWxreSB0ZXJyaWVyLCBTeWRuZXkgc2lsa3knLFxuICAyMDI6ICdzb2Z0LWNvYXRlZCB3aGVhdGVuIHRlcnJpZXInLFxuICAyMDM6ICdXZXN0IEhpZ2hsYW5kIHdoaXRlIHRlcnJpZXInLFxuICAyMDQ6ICdMaGFzYSwgTGhhc2EgYXBzbycsXG4gIDIwNTogJ2ZsYXQtY29hdGVkIHJldHJpZXZlcicsXG4gIDIwNjogJ2N1cmx5LWNvYXRlZCByZXRyaWV2ZXInLFxuICAyMDc6ICdnb2xkZW4gcmV0cmlldmVyJyxcbiAgMjA4OiAnTGFicmFkb3IgcmV0cmlldmVyJyxcbiAgMjA5OiAnQ2hlc2FwZWFrZSBCYXkgcmV0cmlldmVyJyxcbiAgMjEwOiAnR2VybWFuIHNob3J0LWhhaXJlZCBwb2ludGVyJyxcbiAgMjExOiAndml6c2xhLCBIdW5nYXJpYW4gcG9pbnRlcicsXG4gIDIxMjogJ0VuZ2xpc2ggc2V0dGVyJyxcbiAgMjEzOiAnSXJpc2ggc2V0dGVyLCByZWQgc2V0dGVyJyxcbiAgMjE0OiAnR29yZG9uIHNldHRlcicsXG4gIDIxNTogJ0JyaXR0YW55IHNwYW5pZWwnLFxuICAyMTY6ICdjbHVtYmVyLCBjbHVtYmVyIHNwYW5pZWwnLFxuICAyMTc6ICdFbmdsaXNoIHNwcmluZ2VyLCBFbmdsaXNoIHNwcmluZ2VyIHNwYW5pZWwnLFxuICAyMTg6ICdXZWxzaCBzcHJpbmdlciBzcGFuaWVsJyxcbiAgMjE5OiAnY29ja2VyIHNwYW5pZWwsIEVuZ2xpc2ggY29ja2VyIHNwYW5pZWwsIGNvY2tlcicsXG4gIDIyMDogJ1N1c3NleCBzcGFuaWVsJyxcbiAgMjIxOiAnSXJpc2ggd2F0ZXIgc3BhbmllbCcsXG4gIDIyMjogJ2t1dmFzeicsXG4gIDIyMzogJ3NjaGlwcGVya2UnLFxuICAyMjQ6ICdncm9lbmVuZGFlbCcsXG4gIDIyNTogJ21hbGlub2lzJyxcbiAgMjI2OiAnYnJpYXJkJyxcbiAgMjI3OiAna2VscGllJyxcbiAgMjI4OiAna29tb25kb3InLFxuICAyMjk6ICdPbGQgRW5nbGlzaCBzaGVlcGRvZywgYm9idGFpbCcsXG4gIDIzMDogJ1NoZXRsYW5kIHNoZWVwZG9nLCBTaGV0bGFuZCBzaGVlcCBkb2csIFNoZXRsYW5kJyxcbiAgMjMxOiAnY29sbGllJyxcbiAgMjMyOiAnQm9yZGVyIGNvbGxpZScsXG4gIDIzMzogJ0JvdXZpZXIgZGVzIEZsYW5kcmVzLCBCb3V2aWVycyBkZXMgRmxhbmRyZXMnLFxuICAyMzQ6ICdSb3R0d2VpbGVyJyxcbiAgMjM1OiAnR2VybWFuIHNoZXBoZXJkLCBHZXJtYW4gc2hlcGhlcmQgZG9nLCBHZXJtYW4gcG9saWNlIGRvZywgYWxzYXRpYW4nLFxuICAyMzY6ICdEb2Jlcm1hbiwgRG9iZXJtYW4gcGluc2NoZXInLFxuICAyMzc6ICdtaW5pYXR1cmUgcGluc2NoZXInLFxuICAyMzg6ICdHcmVhdGVyIFN3aXNzIE1vdW50YWluIGRvZycsXG4gIDIzOTogJ0Jlcm5lc2UgbW91bnRhaW4gZG9nJyxcbiAgMjQwOiAnQXBwZW56ZWxsZXInLFxuICAyNDE6ICdFbnRsZUJ1Y2hlcicsXG4gIDI0MjogJ2JveGVyJyxcbiAgMjQzOiAnYnVsbCBtYXN0aWZmJyxcbiAgMjQ0OiAnVGliZXRhbiBtYXN0aWZmJyxcbiAgMjQ1OiAnRnJlbmNoIGJ1bGxkb2cnLFxuICAyNDY6ICdHcmVhdCBEYW5lJyxcbiAgMjQ3OiAnU2FpbnQgQmVybmFyZCwgU3QgQmVybmFyZCcsXG4gIDI0ODogJ0Vza2ltbyBkb2csIGh1c2t5JyxcbiAgMjQ5OiAnbWFsYW11dGUsIG1hbGVtdXRlLCBBbGFza2FuIG1hbGFtdXRlJyxcbiAgMjUwOiAnU2liZXJpYW4gaHVza3knLFxuICAyNTE6ICdkYWxtYXRpYW4sIGNvYWNoIGRvZywgY2FycmlhZ2UgZG9nJyxcbiAgMjUyOiAnYWZmZW5waW5zY2hlciwgbW9ua2V5IHBpbnNjaGVyLCBtb25rZXkgZG9nJyxcbiAgMjUzOiAnYmFzZW5qaScsXG4gIDI1NDogJ3B1ZywgcHVnLWRvZycsXG4gIDI1NTogJ0xlb25iZXJnJyxcbiAgMjU2OiAnTmV3Zm91bmRsYW5kLCBOZXdmb3VuZGxhbmQgZG9nJyxcbiAgMjU3OiAnR3JlYXQgUHlyZW5lZXMnLFxuICAyNTg6ICdTYW1veWVkLCBTYW1veWVkZScsXG4gIDI1OTogJ1BvbWVyYW5pYW4nLFxuICAyNjA6ICdjaG93LCBjaG93IGNob3cnLFxuICAyNjE6ICdrZWVzaG9uZCcsXG4gIDI2MjogJ0JyYWJhbmNvbiBncmlmZm9uJyxcbiAgMjYzOiAnUGVtYnJva2UsIFBlbWJyb2tlIFdlbHNoIGNvcmdpJyxcbiAgMjY0OiAnQ2FyZGlnYW4sIENhcmRpZ2FuIFdlbHNoIGNvcmdpJyxcbiAgMjY1OiAndG95IHBvb2RsZScsXG4gIDI2NjogJ21pbmlhdHVyZSBwb29kbGUnLFxuICAyNjc6ICdzdGFuZGFyZCBwb29kbGUnLFxuICAyNjg6ICdNZXhpY2FuIGhhaXJsZXNzJyxcbiAgMjY5OiAndGltYmVyIHdvbGYsIGdyZXkgd29sZiwgZ3JheSB3b2xmLCBDYW5pcyBsdXB1cycsXG4gIDI3MDogJ3doaXRlIHdvbGYsIEFyY3RpYyB3b2xmLCBDYW5pcyBsdXB1cyB0dW5kcmFydW0nLFxuICAyNzE6ICdyZWQgd29sZiwgbWFuZWQgd29sZiwgQ2FuaXMgcnVmdXMsIENhbmlzIG5pZ2VyJyxcbiAgMjcyOiAnY295b3RlLCBwcmFpcmllIHdvbGYsIGJydXNoIHdvbGYsIENhbmlzIGxhdHJhbnMnLFxuICAyNzM6ICdkaW5nbywgd2FycmlnYWwsIHdhcnJhZ2FsLCBDYW5pcyBkaW5nbycsXG4gIDI3NDogJ2Rob2xlLCBDdW9uIGFscGludXMnLFxuICAyNzU6ICdBZnJpY2FuIGh1bnRpbmcgZG9nLCBoeWVuYSBkb2csIENhcGUgaHVudGluZyBkb2csIEx5Y2FvbiBwaWN0dXMnLFxuICAyNzY6ICdoeWVuYSwgaHlhZW5hJyxcbiAgMjc3OiAncmVkIGZveCwgVnVscGVzIHZ1bHBlcycsXG4gIDI3ODogJ2tpdCBmb3gsIFZ1bHBlcyBtYWNyb3RpcycsXG4gIDI3OTogJ0FyY3RpYyBmb3gsIHdoaXRlIGZveCwgQWxvcGV4IGxhZ29wdXMnLFxuICAyODA6ICdncmV5IGZveCwgZ3JheSBmb3gsIFVyb2N5b24gY2luZXJlb2FyZ2VudGV1cycsXG4gIDI4MTogJ3RhYmJ5LCB0YWJieSBjYXQnLFxuICAyODI6ICd0aWdlciBjYXQnLFxuICAyODM6ICdQZXJzaWFuIGNhdCcsXG4gIDI4NDogJ1NpYW1lc2UgY2F0LCBTaWFtZXNlJyxcbiAgMjg1OiAnRWd5cHRpYW4gY2F0JyxcbiAgMjg2OlxuICAgICAgJ2NvdWdhciwgcHVtYSwgY2F0YW1vdW50LCBtb3VudGFpbiBsaW9uLCBwYWludGVyLCBwYW50aGVyLCBGZWxpcyBjb25jb2xvcicsXG4gIDI4NzogJ2x5bngsIGNhdGFtb3VudCcsXG4gIDI4ODogJ2xlb3BhcmQsIFBhbnRoZXJhIHBhcmR1cycsXG4gIDI4OTogJ3Nub3cgbGVvcGFyZCwgb3VuY2UsIFBhbnRoZXJhIHVuY2lhJyxcbiAgMjkwOiAnamFndWFyLCBwYW50aGVyLCBQYW50aGVyYSBvbmNhLCBGZWxpcyBvbmNhJyxcbiAgMjkxOiAnbGlvbiwga2luZyBvZiBiZWFzdHMsIFBhbnRoZXJhIGxlbycsXG4gIDI5MjogJ3RpZ2VyLCBQYW50aGVyYSB0aWdyaXMnLFxuICAyOTM6ICdjaGVldGFoLCBjaGV0YWgsIEFjaW5vbnl4IGp1YmF0dXMnLFxuICAyOTQ6ICdicm93biBiZWFyLCBicnVpbiwgVXJzdXMgYXJjdG9zJyxcbiAgMjk1OiAnQW1lcmljYW4gYmxhY2sgYmVhciwgYmxhY2sgYmVhciwgVXJzdXMgYW1lcmljYW51cywgRXVhcmN0b3MgYW1lcmljYW51cycsXG4gIDI5NjogJ2ljZSBiZWFyLCBwb2xhciBiZWFyLCBVcnN1cyBNYXJpdGltdXMsIFRoYWxhcmN0b3MgbWFyaXRpbXVzJyxcbiAgMjk3OiAnc2xvdGggYmVhciwgTWVsdXJzdXMgdXJzaW51cywgVXJzdXMgdXJzaW51cycsXG4gIDI5ODogJ21vbmdvb3NlJyxcbiAgMjk5OiAnbWVlcmthdCwgbWllcmthdCcsXG4gIDMwMDogJ3RpZ2VyIGJlZXRsZScsXG4gIDMwMTogJ2xhZHlidWcsIGxhZHliZWV0bGUsIGxhZHkgYmVldGxlLCBsYWR5YmlyZCwgbGFkeWJpcmQgYmVldGxlJyxcbiAgMzAyOiAnZ3JvdW5kIGJlZXRsZSwgY2FyYWJpZCBiZWV0bGUnLFxuICAzMDM6ICdsb25nLWhvcm5lZCBiZWV0bGUsIGxvbmdpY29ybiwgbG9uZ2ljb3JuIGJlZXRsZScsXG4gIDMwNDogJ2xlYWYgYmVldGxlLCBjaHJ5c29tZWxpZCcsXG4gIDMwNTogJ2R1bmcgYmVldGxlJyxcbiAgMzA2OiAncmhpbm9jZXJvcyBiZWV0bGUnLFxuICAzMDc6ICd3ZWV2aWwnLFxuICAzMDg6ICdmbHknLFxuICAzMDk6ICdiZWUnLFxuICAzMTA6ICdhbnQsIGVtbWV0LCBwaXNtaXJlJyxcbiAgMzExOiAnZ3Jhc3Nob3BwZXIsIGhvcHBlcicsXG4gIDMxMjogJ2NyaWNrZXQnLFxuICAzMTM6ICd3YWxraW5nIHN0aWNrLCB3YWxraW5nc3RpY2ssIHN0aWNrIGluc2VjdCcsXG4gIDMxNDogJ2NvY2tyb2FjaCwgcm9hY2gnLFxuICAzMTU6ICdtYW50aXMsIG1hbnRpZCcsXG4gIDMxNjogJ2NpY2FkYSwgY2ljYWxhJyxcbiAgMzE3OiAnbGVhZmhvcHBlcicsXG4gIDMxODogJ2xhY2V3aW5nLCBsYWNld2luZyBmbHknLFxuICAzMTk6XG4gICAgICAnZHJhZ29uZmx5LCBkYXJuaW5nIG5lZWRsZSwgZGV2aWxcXCdzIGRhcm5pbmcgbmVlZGxlLCBzZXdpbmcgbmVlZGxlLCBzbmFrZSBmZWVkZXIsIHNuYWtlIGRvY3RvciwgbW9zcXVpdG8gaGF3aywgc2tlZXRlciBoYXdrJyxcbiAgMzIwOiAnZGFtc2VsZmx5JyxcbiAgMzIxOiAnYWRtaXJhbCcsXG4gIDMyMjogJ3JpbmdsZXQsIHJpbmdsZXQgYnV0dGVyZmx5JyxcbiAgMzIzOiAnbW9uYXJjaCwgbW9uYXJjaCBidXR0ZXJmbHksIG1pbGt3ZWVkIGJ1dHRlcmZseSwgRGFuYXVzIHBsZXhpcHB1cycsXG4gIDMyNDogJ2NhYmJhZ2UgYnV0dGVyZmx5JyxcbiAgMzI1OiAnc3VscGh1ciBidXR0ZXJmbHksIHN1bGZ1ciBidXR0ZXJmbHknLFxuICAzMjY6ICdseWNhZW5pZCwgbHljYWVuaWQgYnV0dGVyZmx5JyxcbiAgMzI3OiAnc3RhcmZpc2gsIHNlYSBzdGFyJyxcbiAgMzI4OiAnc2VhIHVyY2hpbicsXG4gIDMyOTogJ3NlYSBjdWN1bWJlciwgaG9sb3RodXJpYW4nLFxuICAzMzA6ICd3b29kIHJhYmJpdCwgY290dG9udGFpbCwgY290dG9udGFpbCByYWJiaXQnLFxuICAzMzE6ICdoYXJlJyxcbiAgMzMyOiAnQW5nb3JhLCBBbmdvcmEgcmFiYml0JyxcbiAgMzMzOiAnaGFtc3RlcicsXG4gIDMzNDogJ3BvcmN1cGluZSwgaGVkZ2Vob2cnLFxuICAzMzU6ICdmb3ggc3F1aXJyZWwsIGVhc3Rlcm4gZm94IHNxdWlycmVsLCBTY2l1cnVzIG5pZ2VyJyxcbiAgMzM2OiAnbWFybW90JyxcbiAgMzM3OiAnYmVhdmVyJyxcbiAgMzM4OiAnZ3VpbmVhIHBpZywgQ2F2aWEgY29iYXlhJyxcbiAgMzM5OiAnc29ycmVsJyxcbiAgMzQwOiAnemVicmEnLFxuICAzNDE6ICdob2csIHBpZywgZ3J1bnRlciwgc3F1ZWFsZXIsIFN1cyBzY3JvZmEnLFxuICAzNDI6ICd3aWxkIGJvYXIsIGJvYXIsIFN1cyBzY3JvZmEnLFxuICAzNDM6ICd3YXJ0aG9nJyxcbiAgMzQ0OiAnaGlwcG9wb3RhbXVzLCBoaXBwbywgcml2ZXIgaG9yc2UsIEhpcHBvcG90YW11cyBhbXBoaWJpdXMnLFxuICAzNDU6ICdveCcsXG4gIDM0NjogJ3dhdGVyIGJ1ZmZhbG8sIHdhdGVyIG94LCBBc2lhdGljIGJ1ZmZhbG8sIEJ1YmFsdXMgYnViYWxpcycsXG4gIDM0NzogJ2Jpc29uJyxcbiAgMzQ4OiAncmFtLCB0dXAnLFxuICAzNDk6XG4gICAgICAnYmlnaG9ybiwgYmlnaG9ybiBzaGVlcCwgY2ltYXJyb24sIFJvY2t5IE1vdW50YWluIGJpZ2hvcm4sIFJvY2t5IE1vdW50YWluIHNoZWVwLCBPdmlzIGNhbmFkZW5zaXMnLFxuICAzNTA6ICdpYmV4LCBDYXByYSBpYmV4JyxcbiAgMzUxOiAnaGFydGViZWVzdCcsXG4gIDM1MjogJ2ltcGFsYSwgQWVweWNlcm9zIG1lbGFtcHVzJyxcbiAgMzUzOiAnZ2F6ZWxsZScsXG4gIDM1NDogJ0FyYWJpYW4gY2FtZWwsIGRyb21lZGFyeSwgQ2FtZWx1cyBkcm9tZWRhcml1cycsXG4gIDM1NTogJ2xsYW1hJyxcbiAgMzU2OiAnd2Vhc2VsJyxcbiAgMzU3OiAnbWluaycsXG4gIDM1ODogJ3BvbGVjYXQsIGZpdGNoLCBmb3VsbWFydCwgZm91bWFydCwgTXVzdGVsYSBwdXRvcml1cycsXG4gIDM1OTogJ2JsYWNrLWZvb3RlZCBmZXJyZXQsIGZlcnJldCwgTXVzdGVsYSBuaWdyaXBlcycsXG4gIDM2MDogJ290dGVyJyxcbiAgMzYxOiAnc2t1bmssIHBvbGVjYXQsIHdvb2QgcHVzc3knLFxuICAzNjI6ICdiYWRnZXInLFxuICAzNjM6ICdhcm1hZGlsbG8nLFxuICAzNjQ6ICd0aHJlZS10b2VkIHNsb3RoLCBhaSwgQnJhZHlwdXMgdHJpZGFjdHlsdXMnLFxuICAzNjU6ICdvcmFuZ3V0YW4sIG9yYW5nLCBvcmFuZ3V0YW5nLCBQb25nbyBweWdtYWV1cycsXG4gIDM2NjogJ2dvcmlsbGEsIEdvcmlsbGEgZ29yaWxsYScsXG4gIDM2NzogJ2NoaW1wYW56ZWUsIGNoaW1wLCBQYW4gdHJvZ2xvZHl0ZXMnLFxuICAzNjg6ICdnaWJib24sIEh5bG9iYXRlcyBsYXInLFxuICAzNjk6ICdzaWFtYW5nLCBIeWxvYmF0ZXMgc3luZGFjdHlsdXMsIFN5bXBoYWxhbmd1cyBzeW5kYWN0eWx1cycsXG4gIDM3MDogJ2d1ZW5vbiwgZ3Vlbm9uIG1vbmtleScsXG4gIDM3MTogJ3BhdGFzLCBodXNzYXIgbW9ua2V5LCBFcnl0aHJvY2VidXMgcGF0YXMnLFxuICAzNzI6ICdiYWJvb24nLFxuICAzNzM6ICdtYWNhcXVlJyxcbiAgMzc0OiAnbGFuZ3VyJyxcbiAgMzc1OiAnY29sb2J1cywgY29sb2J1cyBtb25rZXknLFxuICAzNzY6ICdwcm9ib3NjaXMgbW9ua2V5LCBOYXNhbGlzIGxhcnZhdHVzJyxcbiAgMzc3OiAnbWFybW9zZXQnLFxuICAzNzg6ICdjYXB1Y2hpbiwgcmluZ3RhaWwsIENlYnVzIGNhcHVjaW51cycsXG4gIDM3OTogJ2hvd2xlciBtb25rZXksIGhvd2xlcicsXG4gIDM4MDogJ3RpdGksIHRpdGkgbW9ua2V5JyxcbiAgMzgxOiAnc3BpZGVyIG1vbmtleSwgQXRlbGVzIGdlb2Zmcm95aScsXG4gIDM4MjogJ3NxdWlycmVsIG1vbmtleSwgU2FpbWlyaSBzY2l1cmV1cycsXG4gIDM4MzogJ01hZGFnYXNjYXIgY2F0LCByaW5nLXRhaWxlZCBsZW11ciwgTGVtdXIgY2F0dGEnLFxuICAzODQ6ICdpbmRyaSwgaW5kcmlzLCBJbmRyaSBpbmRyaSwgSW5kcmkgYnJldmljYXVkYXR1cycsXG4gIDM4NTogJ0luZGlhbiBlbGVwaGFudCwgRWxlcGhhcyBtYXhpbXVzJyxcbiAgMzg2OiAnQWZyaWNhbiBlbGVwaGFudCwgTG94b2RvbnRhIGFmcmljYW5hJyxcbiAgMzg3OiAnbGVzc2VyIHBhbmRhLCByZWQgcGFuZGEsIHBhbmRhLCBiZWFyIGNhdCwgY2F0IGJlYXIsIEFpbHVydXMgZnVsZ2VucycsXG4gIDM4ODogJ2dpYW50IHBhbmRhLCBwYW5kYSwgcGFuZGEgYmVhciwgY29vbiBiZWFyLCBBaWx1cm9wb2RhIG1lbGFub2xldWNhJyxcbiAgMzg5OiAnYmFycmFjb3V0YSwgc25vZWsnLFxuICAzOTA6ICdlZWwnLFxuICAzOTE6XG4gICAgICAnY29obywgY29ob2UsIGNvaG8gc2FsbW9uLCBibHVlIGphY2ssIHNpbHZlciBzYWxtb24sIE9uY29yaHluY2h1cyBraXN1dGNoJyxcbiAgMzkyOiAncm9jayBiZWF1dHksIEhvbG9jYW50aHVzIHRyaWNvbG9yJyxcbiAgMzkzOiAnYW5lbW9uZSBmaXNoJyxcbiAgMzk0OiAnc3R1cmdlb24nLFxuICAzOTU6ICdnYXIsIGdhcmZpc2gsIGdhcnBpa2UsIGJpbGxmaXNoLCBMZXBpc29zdGV1cyBvc3NldXMnLFxuICAzOTY6ICdsaW9uZmlzaCcsXG4gIDM5NzogJ3B1ZmZlciwgcHVmZmVyZmlzaCwgYmxvd2Zpc2gsIGdsb2JlZmlzaCcsXG4gIDM5ODogJ2FiYWN1cycsXG4gIDM5OTogJ2FiYXlhJyxcbiAgNDAwOiAnYWNhZGVtaWMgZ293biwgYWNhZGVtaWMgcm9iZSwganVkZ2VcXCdzIHJvYmUnLFxuICA0MDE6ICdhY2NvcmRpb24sIHBpYW5vIGFjY29yZGlvbiwgc3F1ZWV6ZSBib3gnLFxuICA0MDI6ICdhY291c3RpYyBndWl0YXInLFxuICA0MDM6ICdhaXJjcmFmdCBjYXJyaWVyLCBjYXJyaWVyLCBmbGF0dG9wLCBhdHRhY2sgYWlyY3JhZnQgY2FycmllcicsXG4gIDQwNDogJ2FpcmxpbmVyJyxcbiAgNDA1OiAnYWlyc2hpcCwgZGlyaWdpYmxlJyxcbiAgNDA2OiAnYWx0YXInLFxuICA0MDc6ICdhbWJ1bGFuY2UnLFxuICA0MDg6ICdhbXBoaWJpYW4sIGFtcGhpYmlvdXMgdmVoaWNsZScsXG4gIDQwOTogJ2FuYWxvZyBjbG9jaycsXG4gIDQxMDogJ2FwaWFyeSwgYmVlIGhvdXNlJyxcbiAgNDExOiAnYXByb24nLFxuICA0MTI6XG4gICAgICAnYXNoY2FuLCB0cmFzaCBjYW4sIGdhcmJhZ2UgY2FuLCB3YXN0ZWJpbiwgYXNoIGJpbiwgYXNoLWJpbiwgYXNoYmluLCBkdXN0YmluLCB0cmFzaCBiYXJyZWwsIHRyYXNoIGJpbicsXG4gIDQxMzogJ2Fzc2F1bHQgcmlmbGUsIGFzc2F1bHQgZ3VuJyxcbiAgNDE0OiAnYmFja3BhY2ssIGJhY2sgcGFjaywga25hcHNhY2ssIHBhY2tzYWNrLCBydWNrc2FjaywgaGF2ZXJzYWNrJyxcbiAgNDE1OiAnYmFrZXJ5LCBiYWtlc2hvcCwgYmFrZWhvdXNlJyxcbiAgNDE2OiAnYmFsYW5jZSBiZWFtLCBiZWFtJyxcbiAgNDE3OiAnYmFsbG9vbicsXG4gIDQxODogJ2JhbGxwb2ludCwgYmFsbHBvaW50IHBlbiwgYmFsbHBlbiwgQmlybycsXG4gIDQxOTogJ0JhbmQgQWlkJyxcbiAgNDIwOiAnYmFuam8nLFxuICA0MjE6ICdiYW5uaXN0ZXIsIGJhbmlzdGVyLCBiYWx1c3RyYWRlLCBiYWx1c3RlcnMsIGhhbmRyYWlsJyxcbiAgNDIyOiAnYmFyYmVsbCcsXG4gIDQyMzogJ2JhcmJlciBjaGFpcicsXG4gIDQyNDogJ2JhcmJlcnNob3AnLFxuICA0MjU6ICdiYXJuJyxcbiAgNDI2OiAnYmFyb21ldGVyJyxcbiAgNDI3OiAnYmFycmVsLCBjYXNrJyxcbiAgNDI4OiAnYmFycm93LCBnYXJkZW4gY2FydCwgbGF3biBjYXJ0LCB3aGVlbGJhcnJvdycsXG4gIDQyOTogJ2Jhc2ViYWxsJyxcbiAgNDMwOiAnYmFza2V0YmFsbCcsXG4gIDQzMTogJ2Jhc3NpbmV0JyxcbiAgNDMyOiAnYmFzc29vbicsXG4gIDQzMzogJ2JhdGhpbmcgY2FwLCBzd2ltbWluZyBjYXAnLFxuICA0MzQ6ICdiYXRoIHRvd2VsJyxcbiAgNDM1OiAnYmF0aHR1YiwgYmF0aGluZyB0dWIsIGJhdGgsIHR1YicsXG4gIDQzNjpcbiAgICAgICdiZWFjaCB3YWdvbiwgc3RhdGlvbiB3YWdvbiwgd2Fnb24sIGVzdGF0ZSBjYXIsIGJlYWNoIHdhZ2dvbiwgc3RhdGlvbiB3YWdnb24sIHdhZ2dvbicsXG4gIDQzNzogJ2JlYWNvbiwgbGlnaHRob3VzZSwgYmVhY29uIGxpZ2h0LCBwaGFyb3MnLFxuICA0Mzg6ICdiZWFrZXInLFxuICA0Mzk6ICdiZWFyc2tpbiwgYnVzYnksIHNoYWtvJyxcbiAgNDQwOiAnYmVlciBib3R0bGUnLFxuICA0NDE6ICdiZWVyIGdsYXNzJyxcbiAgNDQyOiAnYmVsbCBjb3RlLCBiZWxsIGNvdCcsXG4gIDQ0MzogJ2JpYicsXG4gIDQ0NDogJ2JpY3ljbGUtYnVpbHQtZm9yLXR3bywgdGFuZGVtIGJpY3ljbGUsIHRhbmRlbScsXG4gIDQ0NTogJ2Jpa2luaSwgdHdvLXBpZWNlJyxcbiAgNDQ2OiAnYmluZGVyLCByaW5nLWJpbmRlcicsXG4gIDQ0NzogJ2Jpbm9jdWxhcnMsIGZpZWxkIGdsYXNzZXMsIG9wZXJhIGdsYXNzZXMnLFxuICA0NDg6ICdiaXJkaG91c2UnLFxuICA0NDk6ICdib2F0aG91c2UnLFxuICA0NTA6ICdib2JzbGVkLCBib2JzbGVpZ2gsIGJvYicsXG4gIDQ1MTogJ2JvbG8gdGllLCBib2xvLCBib2xhIHRpZSwgYm9sYScsXG4gIDQ1MjogJ2Jvbm5ldCwgcG9rZSBib25uZXQnLFxuICA0NTM6ICdib29rY2FzZScsXG4gIDQ1NDogJ2Jvb2tzaG9wLCBib29rc3RvcmUsIGJvb2tzdGFsbCcsXG4gIDQ1NTogJ2JvdHRsZWNhcCcsXG4gIDQ1NjogJ2JvdycsXG4gIDQ1NzogJ2JvdyB0aWUsIGJvdy10aWUsIGJvd3RpZScsXG4gIDQ1ODogJ2JyYXNzLCBtZW1vcmlhbCB0YWJsZXQsIHBsYXF1ZScsXG4gIDQ1OTogJ2JyYXNzaWVyZSwgYnJhLCBiYW5kZWF1JyxcbiAgNDYwOiAnYnJlYWt3YXRlciwgZ3JvaW4sIGdyb3luZSwgbW9sZSwgYnVsd2Fyaywgc2Vhd2FsbCwgamV0dHknLFxuICA0NjE6ICdicmVhc3RwbGF0ZSwgYWVnaXMsIGVnaXMnLFxuICA0NjI6ICdicm9vbScsXG4gIDQ2MzogJ2J1Y2tldCwgcGFpbCcsXG4gIDQ2NDogJ2J1Y2tsZScsXG4gIDQ2NTogJ2J1bGxldHByb29mIHZlc3QnLFxuICA0NjY6ICdidWxsZXQgdHJhaW4sIGJ1bGxldCcsXG4gIDQ2NzogJ2J1dGNoZXIgc2hvcCwgbWVhdCBtYXJrZXQnLFxuICA0Njg6ICdjYWIsIGhhY2ssIHRheGksIHRheGljYWInLFxuICA0Njk6ICdjYWxkcm9uLCBjYXVsZHJvbicsXG4gIDQ3MDogJ2NhbmRsZSwgdGFwZXIsIHdheCBsaWdodCcsXG4gIDQ3MTogJ2Nhbm5vbicsXG4gIDQ3MjogJ2Nhbm9lJyxcbiAgNDczOiAnY2FuIG9wZW5lciwgdGluIG9wZW5lcicsXG4gIDQ3NDogJ2NhcmRpZ2FuJyxcbiAgNDc1OiAnY2FyIG1pcnJvcicsXG4gIDQ3NjogJ2Nhcm91c2VsLCBjYXJyb3VzZWwsIG1lcnJ5LWdvLXJvdW5kLCByb3VuZGFib3V0LCB3aGlybGlnaWcnLFxuICA0Nzc6ICdjYXJwZW50ZXJcXCdzIGtpdCwgdG9vbCBraXQnLFxuICA0Nzg6ICdjYXJ0b24nLFxuICA0Nzk6ICdjYXIgd2hlZWwnLFxuICA0ODA6XG4gICAgICAnY2FzaCBtYWNoaW5lLCBjYXNoIGRpc3BlbnNlciwgYXV0b21hdGVkIHRlbGxlciBtYWNoaW5lLCBhdXRvbWF0aWMgdGVsbGVyIG1hY2hpbmUsIGF1dG9tYXRlZCB0ZWxsZXIsIGF1dG9tYXRpYyB0ZWxsZXIsIEFUTScsXG4gIDQ4MTogJ2Nhc3NldHRlJyxcbiAgNDgyOiAnY2Fzc2V0dGUgcGxheWVyJyxcbiAgNDgzOiAnY2FzdGxlJyxcbiAgNDg0OiAnY2F0YW1hcmFuJyxcbiAgNDg1OiAnQ0QgcGxheWVyJyxcbiAgNDg2OiAnY2VsbG8sIHZpb2xvbmNlbGxvJyxcbiAgNDg3OiAnY2VsbHVsYXIgdGVsZXBob25lLCBjZWxsdWxhciBwaG9uZSwgY2VsbHBob25lLCBjZWxsLCBtb2JpbGUgcGhvbmUnLFxuICA0ODg6ICdjaGFpbicsXG4gIDQ4OTogJ2NoYWlubGluayBmZW5jZScsXG4gIDQ5MDpcbiAgICAgICdjaGFpbiBtYWlsLCByaW5nIG1haWwsIG1haWwsIGNoYWluIGFybW9yLCBjaGFpbiBhcm1vdXIsIHJpbmcgYXJtb3IsIHJpbmcgYXJtb3VyJyxcbiAgNDkxOiAnY2hhaW4gc2F3LCBjaGFpbnNhdycsXG4gIDQ5MjogJ2NoZXN0JyxcbiAgNDkzOiAnY2hpZmZvbmllciwgY29tbW9kZScsXG4gIDQ5NDogJ2NoaW1lLCBiZWxsLCBnb25nJyxcbiAgNDk1OiAnY2hpbmEgY2FiaW5ldCwgY2hpbmEgY2xvc2V0JyxcbiAgNDk2OiAnQ2hyaXN0bWFzIHN0b2NraW5nJyxcbiAgNDk3OiAnY2h1cmNoLCBjaHVyY2ggYnVpbGRpbmcnLFxuICA0OTg6ICdjaW5lbWEsIG1vdmllIHRoZWF0ZXIsIG1vdmllIHRoZWF0cmUsIG1vdmllIGhvdXNlLCBwaWN0dXJlIHBhbGFjZScsXG4gIDQ5OTogJ2NsZWF2ZXIsIG1lYXQgY2xlYXZlciwgY2hvcHBlcicsXG4gIDUwMDogJ2NsaWZmIGR3ZWxsaW5nJyxcbiAgNTAxOiAnY2xvYWsnLFxuICA1MDI6ICdjbG9nLCBnZXRhLCBwYXR0ZW4sIHNhYm90JyxcbiAgNTAzOiAnY29ja3RhaWwgc2hha2VyJyxcbiAgNTA0OiAnY29mZmVlIG11ZycsXG4gIDUwNTogJ2NvZmZlZXBvdCcsXG4gIDUwNjogJ2NvaWwsIHNwaXJhbCwgdm9sdXRlLCB3aG9ybCwgaGVsaXgnLFxuICA1MDc6ICdjb21iaW5hdGlvbiBsb2NrJyxcbiAgNTA4OiAnY29tcHV0ZXIga2V5Ym9hcmQsIGtleXBhZCcsXG4gIDUwOTogJ2NvbmZlY3Rpb25lcnksIGNvbmZlY3Rpb25hcnksIGNhbmR5IHN0b3JlJyxcbiAgNTEwOiAnY29udGFpbmVyIHNoaXAsIGNvbnRhaW5lcnNoaXAsIGNvbnRhaW5lciB2ZXNzZWwnLFxuICA1MTE6ICdjb252ZXJ0aWJsZScsXG4gIDUxMjogJ2NvcmtzY3JldywgYm90dGxlIHNjcmV3JyxcbiAgNTEzOiAnY29ybmV0LCBob3JuLCB0cnVtcGV0LCB0cnVtcCcsXG4gIDUxNDogJ2Nvd2JveSBib290JyxcbiAgNTE1OiAnY293Ym95IGhhdCwgdGVuLWdhbGxvbiBoYXQnLFxuICA1MTY6ICdjcmFkbGUnLFxuICA1MTc6ICdjcmFuZScsXG4gIDUxODogJ2NyYXNoIGhlbG1ldCcsXG4gIDUxOTogJ2NyYXRlJyxcbiAgNTIwOiAnY3JpYiwgY290JyxcbiAgNTIxOiAnQ3JvY2sgUG90JyxcbiAgNTIyOiAnY3JvcXVldCBiYWxsJyxcbiAgNTIzOiAnY3J1dGNoJyxcbiAgNTI0OiAnY3VpcmFzcycsXG4gIDUyNTogJ2RhbSwgZGlrZSwgZHlrZScsXG4gIDUyNjogJ2Rlc2snLFxuICA1Mjc6ICdkZXNrdG9wIGNvbXB1dGVyJyxcbiAgNTI4OiAnZGlhbCB0ZWxlcGhvbmUsIGRpYWwgcGhvbmUnLFxuICA1Mjk6ICdkaWFwZXIsIG5hcHB5LCBuYXBraW4nLFxuICA1MzA6ICdkaWdpdGFsIGNsb2NrJyxcbiAgNTMxOiAnZGlnaXRhbCB3YXRjaCcsXG4gIDUzMjogJ2RpbmluZyB0YWJsZSwgYm9hcmQnLFxuICA1MzM6ICdkaXNocmFnLCBkaXNoY2xvdGgnLFxuICA1MzQ6ICdkaXNod2FzaGVyLCBkaXNoIHdhc2hlciwgZGlzaHdhc2hpbmcgbWFjaGluZScsXG4gIDUzNTogJ2Rpc2sgYnJha2UsIGRpc2MgYnJha2UnLFxuICA1MzY6ICdkb2NrLCBkb2NrYWdlLCBkb2NraW5nIGZhY2lsaXR5JyxcbiAgNTM3OiAnZG9nc2xlZCwgZG9nIHNsZWQsIGRvZyBzbGVpZ2gnLFxuICA1Mzg6ICdkb21lJyxcbiAgNTM5OiAnZG9vcm1hdCwgd2VsY29tZSBtYXQnLFxuICA1NDA6ICdkcmlsbGluZyBwbGF0Zm9ybSwgb2Zmc2hvcmUgcmlnJyxcbiAgNTQxOiAnZHJ1bSwgbWVtYnJhbm9waG9uZSwgdHltcGFuJyxcbiAgNTQyOiAnZHJ1bXN0aWNrJyxcbiAgNTQzOiAnZHVtYmJlbGwnLFxuICA1NDQ6ICdEdXRjaCBvdmVuJyxcbiAgNTQ1OiAnZWxlY3RyaWMgZmFuLCBibG93ZXInLFxuICA1NDY6ICdlbGVjdHJpYyBndWl0YXInLFxuICA1NDc6ICdlbGVjdHJpYyBsb2NvbW90aXZlJyxcbiAgNTQ4OiAnZW50ZXJ0YWlubWVudCBjZW50ZXInLFxuICA1NDk6ICdlbnZlbG9wZScsXG4gIDU1MDogJ2VzcHJlc3NvIG1ha2VyJyxcbiAgNTUxOiAnZmFjZSBwb3dkZXInLFxuICA1NTI6ICdmZWF0aGVyIGJvYSwgYm9hJyxcbiAgNTUzOiAnZmlsZSwgZmlsZSBjYWJpbmV0LCBmaWxpbmcgY2FiaW5ldCcsXG4gIDU1NDogJ2ZpcmVib2F0JyxcbiAgNTU1OiAnZmlyZSBlbmdpbmUsIGZpcmUgdHJ1Y2snLFxuICA1NTY6ICdmaXJlIHNjcmVlbiwgZmlyZWd1YXJkJyxcbiAgNTU3OiAnZmxhZ3BvbGUsIGZsYWdzdGFmZicsXG4gIDU1ODogJ2ZsdXRlLCB0cmFuc3ZlcnNlIGZsdXRlJyxcbiAgNTU5OiAnZm9sZGluZyBjaGFpcicsXG4gIDU2MDogJ2Zvb3RiYWxsIGhlbG1ldCcsXG4gIDU2MTogJ2ZvcmtsaWZ0JyxcbiAgNTYyOiAnZm91bnRhaW4nLFxuICA1NjM6ICdmb3VudGFpbiBwZW4nLFxuICA1NjQ6ICdmb3VyLXBvc3RlcicsXG4gIDU2NTogJ2ZyZWlnaHQgY2FyJyxcbiAgNTY2OiAnRnJlbmNoIGhvcm4sIGhvcm4nLFxuICA1Njc6ICdmcnlpbmcgcGFuLCBmcnlwYW4sIHNraWxsZXQnLFxuICA1Njg6ICdmdXIgY29hdCcsXG4gIDU2OTogJ2dhcmJhZ2UgdHJ1Y2ssIGR1c3RjYXJ0JyxcbiAgNTcwOiAnZ2FzbWFzaywgcmVzcGlyYXRvciwgZ2FzIGhlbG1ldCcsXG4gIDU3MTogJ2dhcyBwdW1wLCBnYXNvbGluZSBwdW1wLCBwZXRyb2wgcHVtcCwgaXNsYW5kIGRpc3BlbnNlcicsXG4gIDU3MjogJ2dvYmxldCcsXG4gIDU3MzogJ2dvLWthcnQnLFxuICA1NzQ6ICdnb2xmIGJhbGwnLFxuICA1NzU6ICdnb2xmY2FydCwgZ29sZiBjYXJ0JyxcbiAgNTc2OiAnZ29uZG9sYScsXG4gIDU3NzogJ2dvbmcsIHRhbS10YW0nLFxuICA1Nzg6ICdnb3duJyxcbiAgNTc5OiAnZ3JhbmQgcGlhbm8sIGdyYW5kJyxcbiAgNTgwOiAnZ3JlZW5ob3VzZSwgbnVyc2VyeSwgZ2xhc3Nob3VzZScsXG4gIDU4MTogJ2dyaWxsZSwgcmFkaWF0b3IgZ3JpbGxlJyxcbiAgNTgyOiAnZ3JvY2VyeSBzdG9yZSwgZ3JvY2VyeSwgZm9vZCBtYXJrZXQsIG1hcmtldCcsXG4gIDU4MzogJ2d1aWxsb3RpbmUnLFxuICA1ODQ6ICdoYWlyIHNsaWRlJyxcbiAgNTg1OiAnaGFpciBzcHJheScsXG4gIDU4NjogJ2hhbGYgdHJhY2snLFxuICA1ODc6ICdoYW1tZXInLFxuICA1ODg6ICdoYW1wZXInLFxuICA1ODk6ICdoYW5kIGJsb3dlciwgYmxvdyBkcnllciwgYmxvdyBkcmllciwgaGFpciBkcnllciwgaGFpciBkcmllcicsXG4gIDU5MDogJ2hhbmQtaGVsZCBjb21wdXRlciwgaGFuZC1oZWxkIG1pY3JvY29tcHV0ZXInLFxuICA1OTE6ICdoYW5ka2VyY2hpZWYsIGhhbmtpZSwgaGFua3ksIGhhbmtleScsXG4gIDU5MjogJ2hhcmQgZGlzYywgaGFyZCBkaXNrLCBmaXhlZCBkaXNrJyxcbiAgNTkzOiAnaGFybW9uaWNhLCBtb3V0aCBvcmdhbiwgaGFycCwgbW91dGggaGFycCcsXG4gIDU5NDogJ2hhcnAnLFxuICA1OTU6ICdoYXJ2ZXN0ZXIsIHJlYXBlcicsXG4gIDU5NjogJ2hhdGNoZXQnLFxuICA1OTc6ICdob2xzdGVyJyxcbiAgNTk4OiAnaG9tZSB0aGVhdGVyLCBob21lIHRoZWF0cmUnLFxuICA1OTk6ICdob25leWNvbWInLFxuICA2MDA6ICdob29rLCBjbGF3JyxcbiAgNjAxOiAnaG9vcHNraXJ0LCBjcmlub2xpbmUnLFxuICA2MDI6ICdob3Jpem9udGFsIGJhciwgaGlnaCBiYXInLFxuICA2MDM6ICdob3JzZSBjYXJ0LCBob3JzZS1jYXJ0JyxcbiAgNjA0OiAnaG91cmdsYXNzJyxcbiAgNjA1OiAnaVBvZCcsXG4gIDYwNjogJ2lyb24sIHNtb290aGluZyBpcm9uJyxcbiAgNjA3OiAnamFjay1vXFwnLWxhbnRlcm4nLFxuICA2MDg6ICdqZWFuLCBibHVlIGplYW4sIGRlbmltJyxcbiAgNjA5OiAnamVlcCwgbGFuZHJvdmVyJyxcbiAgNjEwOiAnamVyc2V5LCBULXNoaXJ0LCB0ZWUgc2hpcnQnLFxuICA2MTE6ICdqaWdzYXcgcHV6emxlJyxcbiAgNjEyOiAnamlucmlraXNoYSwgcmlja3NoYSwgcmlja3NoYXcnLFxuICA2MTM6ICdqb3lzdGljaycsXG4gIDYxNDogJ2tpbW9ubycsXG4gIDYxNTogJ2tuZWUgcGFkJyxcbiAgNjE2OiAna25vdCcsXG4gIDYxNzogJ2xhYiBjb2F0LCBsYWJvcmF0b3J5IGNvYXQnLFxuICA2MTg6ICdsYWRsZScsXG4gIDYxOTogJ2xhbXBzaGFkZSwgbGFtcCBzaGFkZScsXG4gIDYyMDogJ2xhcHRvcCwgbGFwdG9wIGNvbXB1dGVyJyxcbiAgNjIxOiAnbGF3biBtb3dlciwgbW93ZXInLFxuICA2MjI6ICdsZW5zIGNhcCwgbGVucyBjb3ZlcicsXG4gIDYyMzogJ2xldHRlciBvcGVuZXIsIHBhcGVyIGtuaWZlLCBwYXBlcmtuaWZlJyxcbiAgNjI0OiAnbGlicmFyeScsXG4gIDYyNTogJ2xpZmVib2F0JyxcbiAgNjI2OiAnbGlnaHRlciwgbGlnaHQsIGlnbml0ZXIsIGlnbml0b3InLFxuICA2Mjc6ICdsaW1vdXNpbmUsIGxpbW8nLFxuICA2Mjg6ICdsaW5lciwgb2NlYW4gbGluZXInLFxuICA2Mjk6ICdsaXBzdGljaywgbGlwIHJvdWdlJyxcbiAgNjMwOiAnTG9hZmVyJyxcbiAgNjMxOiAnbG90aW9uJyxcbiAgNjMyOiAnbG91ZHNwZWFrZXIsIHNwZWFrZXIsIHNwZWFrZXIgdW5pdCwgbG91ZHNwZWFrZXIgc3lzdGVtLCBzcGVha2VyIHN5c3RlbScsXG4gIDYzMzogJ2xvdXBlLCBqZXdlbGVyXFwncyBsb3VwZScsXG4gIDYzNDogJ2x1bWJlcm1pbGwsIHNhd21pbGwnLFxuICA2MzU6ICdtYWduZXRpYyBjb21wYXNzJyxcbiAgNjM2OiAnbWFpbGJhZywgcG9zdGJhZycsXG4gIDYzNzogJ21haWxib3gsIGxldHRlciBib3gnLFxuICA2Mzg6ICdtYWlsbG90JyxcbiAgNjM5OiAnbWFpbGxvdCwgdGFuayBzdWl0JyxcbiAgNjQwOiAnbWFuaG9sZSBjb3ZlcicsXG4gIDY0MTogJ21hcmFjYScsXG4gIDY0MjogJ21hcmltYmEsIHh5bG9waG9uZScsXG4gIDY0MzogJ21hc2snLFxuICA2NDQ6ICdtYXRjaHN0aWNrJyxcbiAgNjQ1OiAnbWF5cG9sZScsXG4gIDY0NjogJ21hemUsIGxhYnlyaW50aCcsXG4gIDY0NzogJ21lYXN1cmluZyBjdXAnLFxuICA2NDg6ICdtZWRpY2luZSBjaGVzdCwgbWVkaWNpbmUgY2FiaW5ldCcsXG4gIDY0OTogJ21lZ2FsaXRoLCBtZWdhbGl0aGljIHN0cnVjdHVyZScsXG4gIDY1MDogJ21pY3JvcGhvbmUsIG1pa2UnLFxuICA2NTE6ICdtaWNyb3dhdmUsIG1pY3Jvd2F2ZSBvdmVuJyxcbiAgNjUyOiAnbWlsaXRhcnkgdW5pZm9ybScsXG4gIDY1MzogJ21pbGsgY2FuJyxcbiAgNjU0OiAnbWluaWJ1cycsXG4gIDY1NTogJ21pbmlza2lydCwgbWluaScsXG4gIDY1NjogJ21pbml2YW4nLFxuICA2NTc6ICdtaXNzaWxlJyxcbiAgNjU4OiAnbWl0dGVuJyxcbiAgNjU5OiAnbWl4aW5nIGJvd2wnLFxuICA2NjA6ICdtb2JpbGUgaG9tZSwgbWFudWZhY3R1cmVkIGhvbWUnLFxuICA2NjE6ICdNb2RlbCBUJyxcbiAgNjYyOiAnbW9kZW0nLFxuICA2NjM6ICdtb25hc3RlcnknLFxuICA2NjQ6ICdtb25pdG9yJyxcbiAgNjY1OiAnbW9wZWQnLFxuICA2NjY6ICdtb3J0YXInLFxuICA2Njc6ICdtb3J0YXJib2FyZCcsXG4gIDY2ODogJ21vc3F1ZScsXG4gIDY2OTogJ21vc3F1aXRvIG5ldCcsXG4gIDY3MDogJ21vdG9yIHNjb290ZXIsIHNjb290ZXInLFxuICA2NzE6ICdtb3VudGFpbiBiaWtlLCBhbGwtdGVycmFpbiBiaWtlLCBvZmYtcm9hZGVyJyxcbiAgNjcyOiAnbW91bnRhaW4gdGVudCcsXG4gIDY3MzogJ21vdXNlLCBjb21wdXRlciBtb3VzZScsXG4gIDY3NDogJ21vdXNldHJhcCcsXG4gIDY3NTogJ21vdmluZyB2YW4nLFxuICA2NzY6ICdtdXp6bGUnLFxuICA2Nzc6ICduYWlsJyxcbiAgNjc4OiAnbmVjayBicmFjZScsXG4gIDY3OTogJ25lY2tsYWNlJyxcbiAgNjgwOiAnbmlwcGxlJyxcbiAgNjgxOiAnbm90ZWJvb2ssIG5vdGVib29rIGNvbXB1dGVyJyxcbiAgNjgyOiAnb2JlbGlzaycsXG4gIDY4MzogJ29ib2UsIGhhdXRib3ksIGhhdXRib2lzJyxcbiAgNjg0OiAnb2NhcmluYSwgc3dlZXQgcG90YXRvJyxcbiAgNjg1OiAnb2RvbWV0ZXIsIGhvZG9tZXRlciwgbWlsZW9tZXRlciwgbWlsb21ldGVyJyxcbiAgNjg2OiAnb2lsIGZpbHRlcicsXG4gIDY4NzogJ29yZ2FuLCBwaXBlIG9yZ2FuJyxcbiAgNjg4OiAnb3NjaWxsb3Njb3BlLCBzY29wZSwgY2F0aG9kZS1yYXkgb3NjaWxsb3Njb3BlLCBDUk8nLFxuICA2ODk6ICdvdmVyc2tpcnQnLFxuICA2OTA6ICdveGNhcnQnLFxuICA2OTE6ICdveHlnZW4gbWFzaycsXG4gIDY5MjogJ3BhY2tldCcsXG4gIDY5MzogJ3BhZGRsZSwgYm9hdCBwYWRkbGUnLFxuICA2OTQ6ICdwYWRkbGV3aGVlbCwgcGFkZGxlIHdoZWVsJyxcbiAgNjk1OiAncGFkbG9jaycsXG4gIDY5NjogJ3BhaW50YnJ1c2gnLFxuICA2OTc6ICdwYWphbWEsIHB5amFtYSwgcGpcXCdzLCBqYW1taWVzJyxcbiAgNjk4OiAncGFsYWNlJyxcbiAgNjk5OiAncGFucGlwZSwgcGFuZGVhbiBwaXBlLCBzeXJpbngnLFxuICA3MDA6ICdwYXBlciB0b3dlbCcsXG4gIDcwMTogJ3BhcmFjaHV0ZSwgY2h1dGUnLFxuICA3MDI6ICdwYXJhbGxlbCBiYXJzLCBiYXJzJyxcbiAgNzAzOiAncGFyayBiZW5jaCcsXG4gIDcwNDogJ3BhcmtpbmcgbWV0ZXInLFxuICA3MDU6ICdwYXNzZW5nZXIgY2FyLCBjb2FjaCwgY2FycmlhZ2UnLFxuICA3MDY6ICdwYXRpbywgdGVycmFjZScsXG4gIDcwNzogJ3BheS1waG9uZSwgcGF5LXN0YXRpb24nLFxuICA3MDg6ICdwZWRlc3RhbCwgcGxpbnRoLCBmb290c3RhbGwnLFxuICA3MDk6ICdwZW5jaWwgYm94LCBwZW5jaWwgY2FzZScsXG4gIDcxMDogJ3BlbmNpbCBzaGFycGVuZXInLFxuICA3MTE6ICdwZXJmdW1lLCBlc3NlbmNlJyxcbiAgNzEyOiAnUGV0cmkgZGlzaCcsXG4gIDcxMzogJ3Bob3RvY29waWVyJyxcbiAgNzE0OiAncGljaywgcGxlY3RydW0sIHBsZWN0cm9uJyxcbiAgNzE1OiAncGlja2VsaGF1YmUnLFxuICA3MTY6ICdwaWNrZXQgZmVuY2UsIHBhbGluZycsXG4gIDcxNzogJ3BpY2t1cCwgcGlja3VwIHRydWNrJyxcbiAgNzE4OiAncGllcicsXG4gIDcxOTogJ3BpZ2d5IGJhbmssIHBlbm55IGJhbmsnLFxuICA3MjA6ICdwaWxsIGJvdHRsZScsXG4gIDcyMTogJ3BpbGxvdycsXG4gIDcyMjogJ3BpbmctcG9uZyBiYWxsJyxcbiAgNzIzOiAncGlud2hlZWwnLFxuICA3MjQ6ICdwaXJhdGUsIHBpcmF0ZSBzaGlwJyxcbiAgNzI1OiAncGl0Y2hlciwgZXdlcicsXG4gIDcyNjogJ3BsYW5lLCBjYXJwZW50ZXJcXCdzIHBsYW5lLCB3b29kd29ya2luZyBwbGFuZScsXG4gIDcyNzogJ3BsYW5ldGFyaXVtJyxcbiAgNzI4OiAncGxhc3RpYyBiYWcnLFxuICA3Mjk6ICdwbGF0ZSByYWNrJyxcbiAgNzMwOiAncGxvdywgcGxvdWdoJyxcbiAgNzMxOiAncGx1bmdlciwgcGx1bWJlclxcJ3MgaGVscGVyJyxcbiAgNzMyOiAnUG9sYXJvaWQgY2FtZXJhLCBQb2xhcm9pZCBMYW5kIGNhbWVyYScsXG4gIDczMzogJ3BvbGUnLFxuICA3MzQ6XG4gICAgICAncG9saWNlIHZhbiwgcG9saWNlIHdhZ29uLCBwYWRkeSB3YWdvbiwgcGF0cm9sIHdhZ29uLCB3YWdvbiwgYmxhY2sgTWFyaWEnLFxuICA3MzU6ICdwb25jaG8nLFxuICA3MzY6ICdwb29sIHRhYmxlLCBiaWxsaWFyZCB0YWJsZSwgc25vb2tlciB0YWJsZScsXG4gIDczNzogJ3BvcCBib3R0bGUsIHNvZGEgYm90dGxlJyxcbiAgNzM4OiAncG90LCBmbG93ZXJwb3QnLFxuICA3Mzk6ICdwb3R0ZXJcXCdzIHdoZWVsJyxcbiAgNzQwOiAncG93ZXIgZHJpbGwnLFxuICA3NDE6ICdwcmF5ZXIgcnVnLCBwcmF5ZXIgbWF0JyxcbiAgNzQyOiAncHJpbnRlcicsXG4gIDc0MzogJ3ByaXNvbiwgcHJpc29uIGhvdXNlJyxcbiAgNzQ0OiAncHJvamVjdGlsZSwgbWlzc2lsZScsXG4gIDc0NTogJ3Byb2plY3RvcicsXG4gIDc0NjogJ3B1Y2ssIGhvY2tleSBwdWNrJyxcbiAgNzQ3OiAncHVuY2hpbmcgYmFnLCBwdW5jaCBiYWcsIHB1bmNoaW5nIGJhbGwsIHB1bmNoYmFsbCcsXG4gIDc0ODogJ3B1cnNlJyxcbiAgNzQ5OiAncXVpbGwsIHF1aWxsIHBlbicsXG4gIDc1MDogJ3F1aWx0LCBjb21mb3J0ZXIsIGNvbWZvcnQsIHB1ZmYnLFxuICA3NTE6ICdyYWNlciwgcmFjZSBjYXIsIHJhY2luZyBjYXInLFxuICA3NTI6ICdyYWNrZXQsIHJhY3F1ZXQnLFxuICA3NTM6ICdyYWRpYXRvcicsXG4gIDc1NDogJ3JhZGlvLCB3aXJlbGVzcycsXG4gIDc1NTogJ3JhZGlvIHRlbGVzY29wZSwgcmFkaW8gcmVmbGVjdG9yJyxcbiAgNzU2OiAncmFpbiBiYXJyZWwnLFxuICA3NTc6ICdyZWNyZWF0aW9uYWwgdmVoaWNsZSwgUlYsIFIuVi4nLFxuICA3NTg6ICdyZWVsJyxcbiAgNzU5OiAncmVmbGV4IGNhbWVyYScsXG4gIDc2MDogJ3JlZnJpZ2VyYXRvciwgaWNlYm94JyxcbiAgNzYxOiAncmVtb3RlIGNvbnRyb2wsIHJlbW90ZScsXG4gIDc2MjogJ3Jlc3RhdXJhbnQsIGVhdGluZyBob3VzZSwgZWF0aW5nIHBsYWNlLCBlYXRlcnknLFxuICA3NjM6ICdyZXZvbHZlciwgc2l4LWd1biwgc2l4LXNob290ZXInLFxuICA3NjQ6ICdyaWZsZScsXG4gIDc2NTogJ3JvY2tpbmcgY2hhaXIsIHJvY2tlcicsXG4gIDc2NjogJ3JvdGlzc2VyaWUnLFxuICA3Njc6ICdydWJiZXIgZXJhc2VyLCBydWJiZXIsIHBlbmNpbCBlcmFzZXInLFxuICA3Njg6ICdydWdieSBiYWxsJyxcbiAgNzY5OiAncnVsZSwgcnVsZXInLFxuICA3NzA6ICdydW5uaW5nIHNob2UnLFxuICA3NzE6ICdzYWZlJyxcbiAgNzcyOiAnc2FmZXR5IHBpbicsXG4gIDc3MzogJ3NhbHRzaGFrZXIsIHNhbHQgc2hha2VyJyxcbiAgNzc0OiAnc2FuZGFsJyxcbiAgNzc1OiAnc2Fyb25nJyxcbiAgNzc2OiAnc2F4LCBzYXhvcGhvbmUnLFxuICA3Nzc6ICdzY2FiYmFyZCcsXG4gIDc3ODogJ3NjYWxlLCB3ZWlnaGluZyBtYWNoaW5lJyxcbiAgNzc5OiAnc2Nob29sIGJ1cycsXG4gIDc4MDogJ3NjaG9vbmVyJyxcbiAgNzgxOiAnc2NvcmVib2FyZCcsXG4gIDc4MjogJ3NjcmVlbiwgQ1JUIHNjcmVlbicsXG4gIDc4MzogJ3NjcmV3JyxcbiAgNzg0OiAnc2NyZXdkcml2ZXInLFxuICA3ODU6ICdzZWF0IGJlbHQsIHNlYXRiZWx0JyxcbiAgNzg2OiAnc2V3aW5nIG1hY2hpbmUnLFxuICA3ODc6ICdzaGllbGQsIGJ1Y2tsZXInLFxuICA3ODg6ICdzaG9lIHNob3AsIHNob2Utc2hvcCwgc2hvZSBzdG9yZScsXG4gIDc4OTogJ3Nob2ppJyxcbiAgNzkwOiAnc2hvcHBpbmcgYmFza2V0JyxcbiAgNzkxOiAnc2hvcHBpbmcgY2FydCcsXG4gIDc5MjogJ3Nob3ZlbCcsXG4gIDc5MzogJ3Nob3dlciBjYXAnLFxuICA3OTQ6ICdzaG93ZXIgY3VydGFpbicsXG4gIDc5NTogJ3NraScsXG4gIDc5NjogJ3NraSBtYXNrJyxcbiAgNzk3OiAnc2xlZXBpbmcgYmFnJyxcbiAgNzk4OiAnc2xpZGUgcnVsZSwgc2xpcHN0aWNrJyxcbiAgNzk5OiAnc2xpZGluZyBkb29yJyxcbiAgODAwOiAnc2xvdCwgb25lLWFybWVkIGJhbmRpdCcsXG4gIDgwMTogJ3Nub3JrZWwnLFxuICA4MDI6ICdzbm93bW9iaWxlJyxcbiAgODAzOiAnc25vd3Bsb3csIHNub3dwbG91Z2gnLFxuICA4MDQ6ICdzb2FwIGRpc3BlbnNlcicsXG4gIDgwNTogJ3NvY2NlciBiYWxsJyxcbiAgODA2OiAnc29jaycsXG4gIDgwNzogJ3NvbGFyIGRpc2gsIHNvbGFyIGNvbGxlY3Rvciwgc29sYXIgZnVybmFjZScsXG4gIDgwODogJ3NvbWJyZXJvJyxcbiAgODA5OiAnc291cCBib3dsJyxcbiAgODEwOiAnc3BhY2UgYmFyJyxcbiAgODExOiAnc3BhY2UgaGVhdGVyJyxcbiAgODEyOiAnc3BhY2Ugc2h1dHRsZScsXG4gIDgxMzogJ3NwYXR1bGEnLFxuICA4MTQ6ICdzcGVlZGJvYXQnLFxuICA4MTU6ICdzcGlkZXIgd2ViLCBzcGlkZXJcXCdzIHdlYicsXG4gIDgxNjogJ3NwaW5kbGUnLFxuICA4MTc6ICdzcG9ydHMgY2FyLCBzcG9ydCBjYXInLFxuICA4MTg6ICdzcG90bGlnaHQsIHNwb3QnLFxuICA4MTk6ICdzdGFnZScsXG4gIDgyMDogJ3N0ZWFtIGxvY29tb3RpdmUnLFxuICA4MjE6ICdzdGVlbCBhcmNoIGJyaWRnZScsXG4gIDgyMjogJ3N0ZWVsIGRydW0nLFxuICA4MjM6ICdzdGV0aG9zY29wZScsXG4gIDgyNDogJ3N0b2xlJyxcbiAgODI1OiAnc3RvbmUgd2FsbCcsXG4gIDgyNjogJ3N0b3B3YXRjaCwgc3RvcCB3YXRjaCcsXG4gIDgyNzogJ3N0b3ZlJyxcbiAgODI4OiAnc3RyYWluZXInLFxuICA4Mjk6ICdzdHJlZXRjYXIsIHRyYW0sIHRyYW1jYXIsIHRyb2xsZXksIHRyb2xsZXkgY2FyJyxcbiAgODMwOiAnc3RyZXRjaGVyJyxcbiAgODMxOiAnc3R1ZGlvIGNvdWNoLCBkYXkgYmVkJyxcbiAgODMyOiAnc3R1cGEsIHRvcGUnLFxuICA4MzM6ICdzdWJtYXJpbmUsIHBpZ2JvYXQsIHN1YiwgVS1ib2F0JyxcbiAgODM0OiAnc3VpdCwgc3VpdCBvZiBjbG90aGVzJyxcbiAgODM1OiAnc3VuZGlhbCcsXG4gIDgzNjogJ3N1bmdsYXNzJyxcbiAgODM3OiAnc3VuZ2xhc3NlcywgZGFyayBnbGFzc2VzLCBzaGFkZXMnLFxuICA4Mzg6ICdzdW5zY3JlZW4sIHN1bmJsb2NrLCBzdW4gYmxvY2tlcicsXG4gIDgzOTogJ3N1c3BlbnNpb24gYnJpZGdlJyxcbiAgODQwOiAnc3dhYiwgc3dvYiwgbW9wJyxcbiAgODQxOiAnc3dlYXRzaGlydCcsXG4gIDg0MjogJ3N3aW1taW5nIHRydW5rcywgYmF0aGluZyB0cnVua3MnLFxuICA4NDM6ICdzd2luZycsXG4gIDg0NDogJ3N3aXRjaCwgZWxlY3RyaWMgc3dpdGNoLCBlbGVjdHJpY2FsIHN3aXRjaCcsXG4gIDg0NTogJ3N5cmluZ2UnLFxuICA4NDY6ICd0YWJsZSBsYW1wJyxcbiAgODQ3OiAndGFuaywgYXJteSB0YW5rLCBhcm1vcmVkIGNvbWJhdCB2ZWhpY2xlLCBhcm1vdXJlZCBjb21iYXQgdmVoaWNsZScsXG4gIDg0ODogJ3RhcGUgcGxheWVyJyxcbiAgODQ5OiAndGVhcG90JyxcbiAgODUwOiAndGVkZHksIHRlZGR5IGJlYXInLFxuICA4NTE6ICd0ZWxldmlzaW9uLCB0ZWxldmlzaW9uIHN5c3RlbScsXG4gIDg1MjogJ3Rlbm5pcyBiYWxsJyxcbiAgODUzOiAndGhhdGNoLCB0aGF0Y2hlZCByb29mJyxcbiAgODU0OiAndGhlYXRlciBjdXJ0YWluLCB0aGVhdHJlIGN1cnRhaW4nLFxuICA4NTU6ICd0aGltYmxlJyxcbiAgODU2OiAndGhyZXNoZXIsIHRocmFzaGVyLCB0aHJlc2hpbmcgbWFjaGluZScsXG4gIDg1NzogJ3Rocm9uZScsXG4gIDg1ODogJ3RpbGUgcm9vZicsXG4gIDg1OTogJ3RvYXN0ZXInLFxuICA4NjA6ICd0b2JhY2NvIHNob3AsIHRvYmFjY29uaXN0IHNob3AsIHRvYmFjY29uaXN0JyxcbiAgODYxOiAndG9pbGV0IHNlYXQnLFxuICA4NjI6ICd0b3JjaCcsXG4gIDg2MzogJ3RvdGVtIHBvbGUnLFxuICA4NjQ6ICd0b3cgdHJ1Y2ssIHRvdyBjYXIsIHdyZWNrZXInLFxuICA4NjU6ICd0b3lzaG9wJyxcbiAgODY2OiAndHJhY3RvcicsXG4gIDg2NzpcbiAgICAgICd0cmFpbGVyIHRydWNrLCB0cmFjdG9yIHRyYWlsZXIsIHRydWNraW5nIHJpZywgcmlnLCBhcnRpY3VsYXRlZCBsb3JyeSwgc2VtaScsXG4gIDg2ODogJ3RyYXknLFxuICA4Njk6ICd0cmVuY2ggY29hdCcsXG4gIDg3MDogJ3RyaWN5Y2xlLCB0cmlrZSwgdmVsb2NpcGVkZScsXG4gIDg3MTogJ3RyaW1hcmFuJyxcbiAgODcyOiAndHJpcG9kJyxcbiAgODczOiAndHJpdW1waGFsIGFyY2gnLFxuICA4NzQ6ICd0cm9sbGV5YnVzLCB0cm9sbGV5IGNvYWNoLCB0cmFja2xlc3MgdHJvbGxleScsXG4gIDg3NTogJ3Ryb21ib25lJyxcbiAgODc2OiAndHViLCB2YXQnLFxuICA4Nzc6ICd0dXJuc3RpbGUnLFxuICA4Nzg6ICd0eXBld3JpdGVyIGtleWJvYXJkJyxcbiAgODc5OiAndW1icmVsbGEnLFxuICA4ODA6ICd1bmljeWNsZSwgbW9ub2N5Y2xlJyxcbiAgODgxOiAndXByaWdodCwgdXByaWdodCBwaWFubycsXG4gIDg4MjogJ3ZhY3V1bSwgdmFjdXVtIGNsZWFuZXInLFxuICA4ODM6ICd2YXNlJyxcbiAgODg0OiAndmF1bHQnLFxuICA4ODU6ICd2ZWx2ZXQnLFxuICA4ODY6ICd2ZW5kaW5nIG1hY2hpbmUnLFxuICA4ODc6ICd2ZXN0bWVudCcsXG4gIDg4ODogJ3ZpYWR1Y3QnLFxuICA4ODk6ICd2aW9saW4sIGZpZGRsZScsXG4gIDg5MDogJ3ZvbGxleWJhbGwnLFxuICA4OTE6ICd3YWZmbGUgaXJvbicsXG4gIDg5MjogJ3dhbGwgY2xvY2snLFxuICA4OTM6ICd3YWxsZXQsIGJpbGxmb2xkLCBub3RlY2FzZSwgcG9ja2V0Ym9vaycsXG4gIDg5NDogJ3dhcmRyb2JlLCBjbG9zZXQsIHByZXNzJyxcbiAgODk1OiAnd2FycGxhbmUsIG1pbGl0YXJ5IHBsYW5lJyxcbiAgODk2OiAnd2FzaGJhc2luLCBoYW5kYmFzaW4sIHdhc2hib3dsLCBsYXZhYm8sIHdhc2gtaGFuZCBiYXNpbicsXG4gIDg5NzogJ3dhc2hlciwgYXV0b21hdGljIHdhc2hlciwgd2FzaGluZyBtYWNoaW5lJyxcbiAgODk4OiAnd2F0ZXIgYm90dGxlJyxcbiAgODk5OiAnd2F0ZXIganVnJyxcbiAgOTAwOiAnd2F0ZXIgdG93ZXInLFxuICA5MDE6ICd3aGlza2V5IGp1ZycsXG4gIDkwMjogJ3doaXN0bGUnLFxuICA5MDM6ICd3aWcnLFxuICA5MDQ6ICd3aW5kb3cgc2NyZWVuJyxcbiAgOTA1OiAnd2luZG93IHNoYWRlJyxcbiAgOTA2OiAnV2luZHNvciB0aWUnLFxuICA5MDc6ICd3aW5lIGJvdHRsZScsXG4gIDkwODogJ3dpbmcnLFxuICA5MDk6ICd3b2snLFxuICA5MTA6ICd3b29kZW4gc3Bvb24nLFxuICA5MTE6ICd3b29sLCB3b29sZW4sIHdvb2xsZW4nLFxuICA5MTI6ICd3b3JtIGZlbmNlLCBzbmFrZSBmZW5jZSwgc25ha2UtcmFpbCBmZW5jZSwgVmlyZ2luaWEgZmVuY2UnLFxuICA5MTM6ICd3cmVjaycsXG4gIDkxNDogJ3lhd2wnLFxuICA5MTU6ICd5dXJ0JyxcbiAgOTE2OiAnd2ViIHNpdGUsIHdlYnNpdGUsIGludGVybmV0IHNpdGUsIHNpdGUnLFxuICA5MTc6ICdjb21pYyBib29rJyxcbiAgOTE4OiAnY3Jvc3N3b3JkIHB1enpsZSwgY3Jvc3N3b3JkJyxcbiAgOTE5OiAnc3RyZWV0IHNpZ24nLFxuICA5MjA6ICd0cmFmZmljIGxpZ2h0LCB0cmFmZmljIHNpZ25hbCwgc3RvcGxpZ2h0JyxcbiAgOTIxOiAnYm9vayBqYWNrZXQsIGR1c3QgY292ZXIsIGR1c3QgamFja2V0LCBkdXN0IHdyYXBwZXInLFxuICA5MjI6ICdtZW51JyxcbiAgOTIzOiAncGxhdGUnLFxuICA5MjQ6ICdndWFjYW1vbGUnLFxuICA5MjU6ICdjb25zb21tZScsXG4gIDkyNjogJ2hvdCBwb3QsIGhvdHBvdCcsXG4gIDkyNzogJ3RyaWZsZScsXG4gIDkyODogJ2ljZSBjcmVhbSwgaWNlY3JlYW0nLFxuICA5Mjk6ICdpY2UgbG9sbHksIGxvbGx5LCBsb2xsaXBvcCwgcG9wc2ljbGUnLFxuICA5MzA6ICdGcmVuY2ggbG9hZicsXG4gIDkzMTogJ2JhZ2VsLCBiZWlnZWwnLFxuICA5MzI6ICdwcmV0emVsJyxcbiAgOTMzOiAnY2hlZXNlYnVyZ2VyJyxcbiAgOTM0OiAnaG90ZG9nLCBob3QgZG9nLCByZWQgaG90JyxcbiAgOTM1OiAnbWFzaGVkIHBvdGF0bycsXG4gIDkzNjogJ2hlYWQgY2FiYmFnZScsXG4gIDkzNzogJ2Jyb2Njb2xpJyxcbiAgOTM4OiAnY2F1bGlmbG93ZXInLFxuICA5Mzk6ICd6dWNjaGluaSwgY291cmdldHRlJyxcbiAgOTQwOiAnc3BhZ2hldHRpIHNxdWFzaCcsXG4gIDk0MTogJ2Fjb3JuIHNxdWFzaCcsXG4gIDk0MjogJ2J1dHRlcm51dCBzcXVhc2gnLFxuICA5NDM6ICdjdWN1bWJlciwgY3VrZScsXG4gIDk0NDogJ2FydGljaG9rZSwgZ2xvYmUgYXJ0aWNob2tlJyxcbiAgOTQ1OiAnYmVsbCBwZXBwZXInLFxuICA5NDY6ICdjYXJkb29uJyxcbiAgOTQ3OiAnbXVzaHJvb20nLFxuICA5NDg6ICdHcmFubnkgU21pdGgnLFxuICA5NDk6ICdzdHJhd2JlcnJ5JyxcbiAgOTUwOiAnb3JhbmdlJyxcbiAgOTUxOiAnbGVtb24nLFxuICA5NTI6ICdmaWcnLFxuICA5NTM6ICdwaW5lYXBwbGUsIGFuYW5hcycsXG4gIDk1NDogJ2JhbmFuYScsXG4gIDk1NTogJ2phY2tmcnVpdCwgamFrLCBqYWNrJyxcbiAgOTU2OiAnY3VzdGFyZCBhcHBsZScsXG4gIDk1NzogJ3BvbWVncmFuYXRlJyxcbiAgOTU4OiAnaGF5JyxcbiAgOTU5OiAnY2FyYm9uYXJhJyxcbiAgOTYwOiAnY2hvY29sYXRlIHNhdWNlLCBjaG9jb2xhdGUgc3lydXAnLFxuICA5NjE6ICdkb3VnaCcsXG4gIDk2MjogJ21lYXQgbG9hZiwgbWVhdGxvYWYnLFxuICA5NjM6ICdwaXp6YSwgcGl6emEgcGllJyxcbiAgOTY0OiAncG90cGllJyxcbiAgOTY1OiAnYnVycml0bycsXG4gIDk2NjogJ3JlZCB3aW5lJyxcbiAgOTY3OiAnZXNwcmVzc28nLFxuICA5Njg6ICdjdXAnLFxuICA5Njk6ICdlZ2dub2cnLFxuICA5NzA6ICdhbHAnLFxuICA5NzE6ICdidWJibGUnLFxuICA5NzI6ICdjbGlmZiwgZHJvcCwgZHJvcC1vZmYnLFxuICA5NzM6ICdjb3JhbCByZWVmJyxcbiAgOTc0OiAnZ2V5c2VyJyxcbiAgOTc1OiAnbGFrZXNpZGUsIGxha2VzaG9yZScsXG4gIDk3NjogJ3Byb21vbnRvcnksIGhlYWRsYW5kLCBoZWFkLCBmb3JlbGFuZCcsXG4gIDk3NzogJ3NhbmRiYXIsIHNhbmQgYmFyJyxcbiAgOTc4OiAnc2Vhc2hvcmUsIGNvYXN0LCBzZWFjb2FzdCwgc2VhLWNvYXN0JyxcbiAgOTc5OiAndmFsbGV5LCB2YWxlJyxcbiAgOTgwOiAndm9sY2FubycsXG4gIDk4MTogJ2JhbGxwbGF5ZXIsIGJhc2ViYWxsIHBsYXllcicsXG4gIDk4MjogJ2dyb29tLCBicmlkZWdyb29tJyxcbiAgOTgzOiAnc2N1YmEgZGl2ZXInLFxuICA5ODQ6ICdyYXBlc2VlZCcsXG4gIDk4NTogJ2RhaXN5JyxcbiAgOTg2OlxuICAgICAgJ3llbGxvdyBsYWR5XFwncyBzbGlwcGVyLCB5ZWxsb3cgbGFkeS1zbGlwcGVyLCBDeXByaXBlZGl1bSBjYWxjZW9sdXMsIEN5cHJpcGVkaXVtIHBhcnZpZmxvcnVtJyxcbiAgOTg3OiAnY29ybicsXG4gIDk4ODogJ2Fjb3JuJyxcbiAgOTg5OiAnaGlwLCByb3NlIGhpcCwgcm9zZWhpcCcsXG4gIDk5MDogJ2J1Y2tleWUsIGhvcnNlIGNoZXN0bnV0LCBjb25rZXInLFxuICA5OTE6ICdjb3JhbCBmdW5ndXMnLFxuICA5OTI6ICdhZ2FyaWMnLFxuICA5OTM6ICdneXJvbWl0cmEnLFxuICA5OTQ6ICdzdGlua2hvcm4sIGNhcnJpb24gZnVuZ3VzJyxcbiAgOTk1OiAnZWFydGhzdGFyJyxcbiAgOTk2OlxuICAgICAgJ2hlbi1vZi10aGUtd29vZHMsIGhlbiBvZiB0aGUgd29vZHMsIFBvbHlwb3J1cyBmcm9uZG9zdXMsIEdyaWZvbGEgZnJvbmRvc2EnLFxuICA5OTc6ICdib2xldGUnLFxuICA5OTg6ICdlYXIsIHNwaWtlLCBjYXBpdHVsdW0nLFxuICA5OTk6ICd0b2lsZXQgdGlzc3VlLCB0b2lsZXQgcGFwZXIsIGJhdGhyb29tIHRpc3N1ZSdcbn07XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCB7R1BHUFVDb250ZXh0fSBmcm9tICcuLi8uLi9zcmMvbWF0aC93ZWJnbC9ncGdwdV9jb250ZXh0JztcbmltcG9ydCAqIGFzIHdlYmdsX3V0aWwgZnJvbSAnLi4vLi4vc3JjL21hdGgvd2ViZ2wvd2ViZ2xfdXRpbCc7XG5cbi8qKlxuICogVW5wYWNrcyBhbiBSR0IgcGFja2VkIGltYWdlIHRleHR1cmUgaW50byBhIDJEIHBoeXNpY2FsLCAzRCBsb2dpY2FsIHRleHR1cmVcbiAqIHdpdGggdGhlIGNvbnZlbnRpb25hbCBuZGFycmF5IGZvcm1hdCBhbmQgcGVyZm9ybXMgdGhlIHN0YW5kYXJkIGltYWdlbmV0IGltYWdlXG4gKiBwcmVwcm9jZXNzaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VW5wYWNrQW5kUHJlcHJvY2Vzc0lucHV0U2hhZGVyKFxuICAgIGdwZ3B1OiBHUEdQVUNvbnRleHQsIGlucHV0U2hhcGVSQzogW251bWJlciwgbnVtYmVyXSk6IFdlYkdMUHJvZ3JhbSB7XG4gIGNvbnN0IGZyYWdtZW50U2hhZGVyU291cmNlID0gYFxuICAgIHByZWNpc2lvbiBoaWdocCBmbG9hdDtcbiAgICB1bmlmb3JtIHNhbXBsZXIyRCBzb3VyY2U7XG4gICAgdmFyeWluZyB2ZWMyIHJlc3VsdFVWO1xuXG4gICAgY29uc3QgdmVjMiBpbnB1dFNoYXBlQ1IgPSB2ZWMyKCR7aW5wdXRTaGFwZVJDWzFdfS4wLCAke2lucHV0U2hhcGVSQ1swXX0uMCk7XG5cbiAgICBjb25zdCB2ZWMyIGhhbGZDUiA9IHZlYzIoMC41LCAwLjUpO1xuXG4gICAgdm9pZCBtYWluKCkge1xuICAgICAgdmVjMiBvdXRwdXRDUiA9IGZsb29yKGdsX0ZyYWdDb29yZC54eSk7XG5cbiAgICAgIHZlYzIgc291cmNlQ1IgPSB2ZWMyKGZsb29yKG91dHB1dENSWzBdIC8gMy4wKSwgb3V0cHV0Q1JbMV0pO1xuICAgICAgdmVjMiBzb3VyY2VVViA9IChzb3VyY2VDUiArIGhhbGZDUikgLyBpbnB1dFNoYXBlQ1I7XG5cbiAgICAgIHZlYzQgc291cmNlVmFsdWUgPSB0ZXh0dXJlMkQoc291cmNlLCBzb3VyY2VVVikgKiAyNTUuMDtcblxuICAgICAgZmxvYXQgY2hhbm5lbFZhbHVlID0gMC4wO1xuICAgICAgaW50IGNoYW5uZWwgPSBpbnQobW9kKG91dHB1dENSWzBdLCAzLjApKTtcblxuICAgICAgaWYgKGNoYW5uZWwgPT0gMCkge1xuICAgICAgICBjaGFubmVsVmFsdWUgPSBzb3VyY2VWYWx1ZS5yIC0gMTAzLjkzOTtcbiAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbCA9PSAxKSB7XG4gICAgICAgIGNoYW5uZWxWYWx1ZSA9IHNvdXJjZVZhbHVlLmcgLSAxMTYuNzc5O1xuICAgICAgfSBlbHNlIGlmIChjaGFubmVsID09IDIpIHtcbiAgICAgICAgY2hhbm5lbFZhbHVlID0gc291cmNlVmFsdWUuYiAtIDEyMy42ODtcbiAgICAgIH1cblxuICAgICAgZ2xfRnJhZ0NvbG9yID0gdmVjNChjaGFubmVsVmFsdWUsIDAsIDAsIDApO1xuICAgIH1gO1xuICByZXR1cm4gZ3BncHUuY3JlYXRlUHJvZ3JhbShmcmFnbWVudFNoYWRlclNvdXJjZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwcm9jZXNzSW5wdXQoXG4gICAgZ3BncHU6IEdQR1BVQ29udGV4dCwgcHJlcHJvY2Vzc0lucHV0U2hhZGVyOiBXZWJHTFByb2dyYW0sXG4gICAgc291cmNlVGV4OiBXZWJHTFRleHR1cmUsIHJlc3VsdFRleDogV2ViR0xUZXh0dXJlLFxuICAgIHNoYXBlUm93Q29sOiBbbnVtYmVyLCBudW1iZXJdKSB7XG4gIGdwZ3B1LnNldE91dHB1dE1hdHJpeFRleHR1cmUocmVzdWx0VGV4LCBzaGFwZVJvd0NvbFswXSwgc2hhcGVSb3dDb2xbMV0pO1xuICBncGdwdS5zZXRQcm9ncmFtKHByZXByb2Nlc3NJbnB1dFNoYWRlcik7XG4gIGdwZ3B1LnNldElucHV0TWF0cml4VGV4dHVyZShzb3VyY2VUZXgsICdzb3VyY2UnLCAwKTtcbiAgZ3BncHUuZXhlY3V0ZVByb2dyYW0oKTtcbn1cblxuLyoqXG4gKiBUcmFuc3Bvc2VzIHRoZSBkZXB0aCBhbmQgdGhlIGNvbHVtbiBkaW1lbnNpb25zIG9mIGEgM0QgbmRhcnJheSByZXByZXNlbnRlZCBhc1xuICogYSAyRCB0ZXh0dXJlIGludG8gYSBzcXVhcmUgY29sbGFnZSB3aXRoIGVhY2ggY2hhbm5lbCByZW5kZXJlZCBhcyBhIG5vcm1hbGl6ZWRcbiAqIGdyYXlzY2FsZSBpbWFnZS4gVGhlIG5vcm1hbGl6YXRpb24gYm91bmRzIGFyZSBnaXZlbiBhcyB0d28gc2FtcGxlMkRzLFxuICogbWluVmFsdWVzIGFuZCBtYXhWYWx1ZXMsIHdoaWNoIGdpdmUgbWluIGFuZCBtYXggdmFsdWVzIHBlciBjaGFubmVsLiBUaGVzZSBjYW5cbiAqIGJlIGNvbXB1dGVkIGZyb20gYSBtYXggYW5kIG1pbiBwb29saW5nIGxheWVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVuZGVyR3JheXNjYWxlQ2hhbm5lbHNDb2xsYWdlU2hhZGVyKGdwZ3B1OiBHUEdQVUNvbnRleHQpOlxuICAgIFdlYkdMUHJvZ3JhbSB7XG4gIGNvbnN0IGZyYWdtZW50U2hhZGVyU291cmNlID0gYFxuICAgIHByZWNpc2lvbiBoaWdocCBmbG9hdDtcbiAgICB1bmlmb3JtIHNhbXBsZXIyRCBzb3VyY2U7XG4gICAgdW5pZm9ybSBzYW1wbGVyMkQgbWluVmFsdWVzO1xuICAgIHVuaWZvcm0gc2FtcGxlcjJEIG1heFZhbHVlcztcbiAgICB2YXJ5aW5nIHZlYzIgcmVzdWx0VVY7XG5cbiAgICB1bmlmb3JtIGZsb2F0IGltYWdlU2l6ZTtcbiAgICB1bmlmb3JtIGZsb2F0IGNoYW5uZWxzO1xuICAgIHVuaWZvcm0gZmxvYXQgaW1hZ2VzUGVyUm93O1xuICAgIHVuaWZvcm0gdmVjMiBpbnB1dFNoYXBlQ1I7XG5cbiAgICBjb25zdCB2ZWMyIGhhbGZDUiA9IHZlYzIoMC41LCAwLjUpO1xuXG4gICAgdm9pZCBtYWluKCkge1xuICAgICAgdmVjMiBvdXRwdXRDUiA9IGZsb29yKGdsX0ZyYWdDb29yZC54eSk7XG5cbiAgICAgIGZsb2F0IGltYWdlUm93ID0gZmxvb3Iob3V0cHV0Q1JbMV0gLyBpbWFnZVNpemUpO1xuICAgICAgZmxvYXQgaW1hZ2VDb2wgPSBtb2Qob3V0cHV0Q1JbMF0sIGltYWdlU2l6ZSk7XG5cbiAgICAgIGZsb2F0IGN1cnJlbnRDaGFubmVsID0gZmxvb3Iob3V0cHV0Q1JbMF0gLyBpbWFnZVNpemUpICtcbiAgICAgICAgICBpbWFnZVJvdyAqIGltYWdlc1BlclJvdztcblxuICAgICAgLy8gV2hlbiB0aGUgbnVtYmVyIG9mIGNoYW5uZWxzIGlzIG5vdCBzcXVhcmUsIHdlIHJlbmRlciB3aGl0ZSB0byBmaWxsIGluXG4gICAgICAvLyB0aGUgb3V0cHV0IHRleHR1cmUuXG4gICAgICBpZiAoY3VycmVudENoYW5uZWwgPiBjaGFubmVscykge1xuICAgICAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KDEuMCwgMS4wLCAxLjAsIDEuMCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZmxvYXQgc291cmNlQyA9IGNoYW5uZWxzICogaW1hZ2VDb2wgKyBjdXJyZW50Q2hhbm5lbDtcbiAgICAgIGZsb2F0IHNvdXJjZVIgPSBtb2Qob3V0cHV0Q1JbMV0sIGltYWdlU2l6ZSk7XG5cbiAgICAgIHZlYzIgc291cmNlVVYgPSAodmVjMihzb3VyY2VDLCBzb3VyY2VSKSArIGhhbGZDUikgLyBpbnB1dFNoYXBlQ1I7XG5cbiAgICAgIC8vIEZsaXAgdGhlIHZlcnRpY2FsIGF4aXMgb2YgdGhlIHRleHR1cmUgZm9yIGRpc3BsYXkgc2luY2Ugd2UgcmVwcmVzZW50XG4gICAgICAvLyBpbWFnZSB0ZXh0dXJlcyBhcyB2ZXJ0aWNhbGx5IGZsaXBwZWQuXG4gICAgICBmbG9hdCBzb3VyY2VWYWx1ZSA9IHRleHR1cmUyRChcbiAgICAgICAgICBzb3VyY2UsIHZlYzIoc291cmNlVVYucywgMS4wIC0gc291cmNlVVYudCkpLnI7XG5cbiAgICAgIC8vIE5vcm1hbGl6ZSB0aGUgdmFsdWUgYnkgc2FtcGxpbmcgdGhlIG1pblZhbHVlcyBhbmQgbWF4VmFsdWVzIHRleHR1cmVcbiAgICAgIC8vIHdoaWNoIGNvbnRhaW4gbWluIGFuZCBtYXggcGVyIGNoYW5uZWwuXG4gICAgICB2ZWMyIG1pbk1heFZhbHVlc1NoYXBlQ1IgPSB2ZWMyKGNoYW5uZWxzLCAxKTtcbiAgICAgIHZlYzIgbWluTWF4VmFsdWVzQ1IgPSB2ZWMyKGN1cnJlbnRDaGFubmVsLCAwKTtcbiAgICAgIHZlYzIgbWluTWF4VmFsdWVzVVYgPSAobWluTWF4VmFsdWVzQ1IgKyBoYWxmQ1IpIC8gbWluTWF4VmFsdWVzU2hhcGVDUjtcblxuICAgICAgZmxvYXQgbWluVmFsdWUgPSB0ZXh0dXJlMkQobWluVmFsdWVzLCBtaW5NYXhWYWx1ZXNVVikucjtcbiAgICAgIGZsb2F0IG1heFZhbHVlID0gdGV4dHVyZTJEKG1heFZhbHVlcywgbWluTWF4VmFsdWVzVVYpLnI7XG5cbiAgICAgIGZsb2F0IG5vcm1hbGl6ZWRWYWx1ZSA9IChzb3VyY2VWYWx1ZSAtIG1pblZhbHVlKSAvIChtYXhWYWx1ZSAtIG1pblZhbHVlKTtcblxuICAgICAgZ2xfRnJhZ0NvbG9yID0gdmVjNChcbiAgICAgICAgICBub3JtYWxpemVkVmFsdWUsIG5vcm1hbGl6ZWRWYWx1ZSwgbm9ybWFsaXplZFZhbHVlLCAxKTtcbiAgICB9XG4gIGA7XG4gIHJldHVybiBncGdwdS5jcmVhdGVQcm9ncmFtKGZyYWdtZW50U2hhZGVyU291cmNlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlckdyYXlzY2FsZUNoYW5uZWxzQ29sbGFnZShcbiAgICBncGdwdTogR1BHUFVDb250ZXh0LCB1bnBhY2tDaGFubmVsc1NoYWRlcjogV2ViR0xQcm9ncmFtLFxuICAgIHNvdXJjZVRleDogV2ViR0xUZXh0dXJlLCBtaW5WYWx1ZXNUZXg6IFdlYkdMVGV4dHVyZSxcbiAgICBtYXhWYWx1ZXNUZXg6IFdlYkdMVGV4dHVyZSwgaW5wdXRTaGFwZVJDOiBbbnVtYmVyLCBudW1iZXJdLFxuICAgIGltYWdlU2l6ZTogbnVtYmVyLCBjaGFubmVsczogbnVtYmVyLCB0ZXh0dXJlU2l6ZTogbnVtYmVyLCBudW1Sb3dzOiBudW1iZXIpIHtcbiAgd2ViZ2xfdXRpbC5iaW5kQ2FudmFzVG9GcmFtZWJ1ZmZlcihncGdwdS5nbCk7XG4gIGdwZ3B1LnNldFByb2dyYW0odW5wYWNrQ2hhbm5lbHNTaGFkZXIpO1xuICBncGdwdS5zZXRJbnB1dE1hdHJpeFRleHR1cmUoc291cmNlVGV4LCAnc291cmNlJywgMCk7XG4gIGdwZ3B1LnNldElucHV0TWF0cml4VGV4dHVyZShtaW5WYWx1ZXNUZXgsICdtaW5WYWx1ZXMnLCAxKTtcbiAgZ3BncHUuc2V0SW5wdXRNYXRyaXhUZXh0dXJlKG1heFZhbHVlc1RleCwgJ21heFZhbHVlcycsIDIpO1xuXG4gIGNvbnN0IGltYWdlU2l6ZUxvYyA9IGdwZ3B1LmdldFVuaWZvcm1Mb2NhdGlvbignaW1hZ2VTaXplJyk7XG4gIGdwZ3B1LmdsLnVuaWZvcm0xZihpbWFnZVNpemVMb2MsIGltYWdlU2l6ZSk7XG5cbiAgY29uc3QgY2hhbm5lbHNMb2MgPSBncGdwdS5nZXRVbmlmb3JtTG9jYXRpb24oJ2NoYW5uZWxzJyk7XG4gIGdwZ3B1LmdsLnVuaWZvcm0xZihjaGFubmVsc0xvYywgY2hhbm5lbHMpO1xuXG4gIGNvbnN0IGltYWdlc1BlclJvd0xvYyA9IGdwZ3B1LmdldFVuaWZvcm1Mb2NhdGlvbignaW1hZ2VzUGVyUm93Jyk7XG4gIGdwZ3B1LmdsLnVuaWZvcm0xZihpbWFnZXNQZXJSb3dMb2MsIE1hdGguZmxvb3IodGV4dHVyZVNpemUgLyBpbWFnZVNpemUpKTtcblxuICBjb25zdCBpbnB1dFNoYXBlQ1JMb2MgPSBncGdwdS5nZXRVbmlmb3JtTG9jYXRpb24oJ2lucHV0U2hhcGVDUicpO1xuICBncGdwdS5nbC51bmlmb3JtMmYoaW5wdXRTaGFwZUNSTG9jLCBpbnB1dFNoYXBlUkNbMV0sIGlucHV0U2hhcGVSQ1swXSk7XG5cbiAgZ3BncHUuZXhlY3V0ZVByb2dyYW0oKTtcbn1cbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0IHtDaGVja3BvaW50TG9hZGVyfSBmcm9tICcuLi8uLi9zcmMvY2hlY2twb2ludF9sb2FkZXInO1xuaW1wb3J0IHtOREFycmF5TWF0aENQVX0gZnJvbSAnLi4vLi4vc3JjL21hdGgvbWF0aF9jcHUnO1xuaW1wb3J0IHtOREFycmF5TWF0aEdQVX0gZnJvbSAnLi4vLi4vc3JjL21hdGgvbWF0aF9ncHUnO1xuaW1wb3J0IHtBcnJheTFELCBBcnJheTNELCBBcnJheTRELCBOREFycmF5fSBmcm9tICcuLi8uLi9zcmMvbWF0aC9uZGFycmF5JztcbmltcG9ydCB7R1BHUFVDb250ZXh0fSBmcm9tICcuLi8uLi9zcmMvbWF0aC93ZWJnbC9ncGdwdV9jb250ZXh0JztcblxuaW1wb3J0ICogYXMgaW1hZ2VuZXRfY2xhc3NlcyBmcm9tICcuL2ltYWdlbmV0X2NsYXNzZXMnO1xuaW1wb3J0ICogYXMgaW1hZ2VuZXRfdXRpbCBmcm9tICcuL2ltYWdlbmV0X3V0aWwnO1xuXG5jb25zdCBJTUFHRV9TSVpFID0gMjI3O1xuY29uc3QgTlVNX0NMQVNTRVMgPSAxMDAwO1xuY29uc3QgR09PR0xFX0NMT1VEX1NUT1JBR0VfRElSID1cbiAgICAnaHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL2xlYXJuanMtZGF0YS9jaGVja3BvaW50X3pvby8nO1xuXG5leHBvcnQgY2xhc3MgU3F1ZWV6ZU5ldCB7XG4gIHByaXZhdGUgdmFyaWFibGVzOiB7W3Zhck5hbWU6IHN0cmluZ106IE5EQXJyYXl9O1xuXG4gIHByaXZhdGUgcHJlcHJvY2Vzc0lucHV0U2hhZGVyOiBXZWJHTFNoYWRlcjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGdwZ3B1OiBHUEdQVUNvbnRleHQsIHByaXZhdGUgbWF0aDogTkRBcnJheU1hdGhHUFUpIHtcbiAgICB0aGlzLnByZXByb2Nlc3NJbnB1dFNoYWRlciA9XG4gICAgICAgIGltYWdlbmV0X3V0aWwuZ2V0VW5wYWNrQW5kUHJlcHJvY2Vzc0lucHV0U2hhZGVyKFxuICAgICAgICAgICAgZ3BncHUsIFtJTUFHRV9TSVpFLCBJTUFHRV9TSVpFXSk7XG4gIH1cblxuICAvKipcbiAgICogTG9hZHMgbmVjZXNzYXJ5IHZhcmlhYmxlcyBmb3IgU3F1ZWV6ZU5ldC4gUmVzb2x2ZXMgdGhlIHByb21pc2Ugd2hlbiB0aGVcbiAgICogdmFyaWFibGVzIGhhdmUgYWxsIGJlZW4gbG9hZGVkLlxuICAgKi9cbiAgbG9hZFZhcmlhYmxlcygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgY2hlY2twb2ludExvYWRlciA9XG4gICAgICAgICAgbmV3IENoZWNrcG9pbnRMb2FkZXIoR09PR0xFX0NMT1VEX1NUT1JBR0VfRElSICsgJ3NxdWVlemVuZXQxXzEvJyk7XG4gICAgICBjaGVja3BvaW50TG9hZGVyLmdldEFsbFZhcmlhYmxlcygpLnRoZW4odmFyaWFibGVzID0+IHtcbiAgICAgICAgdGhpcy52YXJpYWJsZXMgPSB2YXJpYWJsZXM7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFByZXByb2Nlc3MgYW4gUkdCIGNvbG9yIHRleHR1cmUgYmVmb3JlIGluZmVycmluZyB0aHJvdWdoIHNxdWVlemVuZXQuXG4gICAqIEBwYXJhbSByZ2JUZXh0dXJlIFRoZSBSR0IgY29sb3IgdGV4dHVyZSB0byBwcm9jZXNzIGludG8gYW4gQXJyYXkzRC5cbiAgICogQHBhcmFtIGltYWdlRGltZW5zaW9ucyBUaGUgMkQgZGltZW5zaW9ucyBvZiB0aGUgaW1hZ2UuXG4gICAqL1xuICBwcmVwcm9jZXNzQ29sb3JUZXh0dXJlVG9BcnJheTNEKHJnYlRleHR1cmU6IFdlYkdMVGV4dHVyZSwgaW1hZ2VEaW1lbnNpb25zOiBbXG4gICAgbnVtYmVyLCBudW1iZXJcbiAgXSk6IEFycmF5M0Qge1xuICAgIGNvbnN0IHByZXByb2Nlc3NSZXN1bHRTaGFwZVJDOiBbbnVtYmVyLCBudW1iZXJdID1cbiAgICAgICAgW2ltYWdlRGltZW5zaW9uc1swXSwgaW1hZ2VEaW1lbnNpb25zWzBdICogM107XG5cbiAgICBjb25zdCBwcmVwcm9jZXNzUmVzdWx0VGV4dHVyZSA9XG4gICAgICAgIHRoaXMubWF0aC5nZXRUZXh0dXJlTWFuYWdlcigpLmFjcXVpcmVUZXh0dXJlKHByZXByb2Nlc3NSZXN1bHRTaGFwZVJDKTtcblxuICAgIGltYWdlbmV0X3V0aWwucHJlcHJvY2Vzc0lucHV0KFxuICAgICAgICB0aGlzLmdwZ3B1LCB0aGlzLnByZXByb2Nlc3NJbnB1dFNoYWRlciwgcmdiVGV4dHVyZSxcbiAgICAgICAgcHJlcHJvY2Vzc1Jlc3VsdFRleHR1cmUsIHByZXByb2Nlc3NSZXN1bHRTaGFwZVJDKTtcbiAgICByZXR1cm4gTkRBcnJheS5tYWtlPEFycmF5M0Q+KFtpbWFnZURpbWVuc2lvbnNbMF0sIGltYWdlRGltZW5zaW9uc1swXSwgM10sIHtcbiAgICAgIHRleHR1cmU6IHByZXByb2Nlc3NSZXN1bHRUZXh0dXJlLFxuICAgICAgdGV4dHVyZVNoYXBlUkM6IHByZXByb2Nlc3NSZXN1bHRTaGFwZVJDXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW5mZXIgdGhyb3VnaCBTcXVlZXplTmV0LCBhc3N1bWVzIHZhcmlhYmxlcyBoYXZlIGJlZW4gbG9hZGVkLiBUaGlzIGRvZXNcbiAgICogc3RhbmRhcmQgSW1hZ2VOZXQgcHJlLXByb2Nlc3NpbmcgYmVmb3JlIGluZmVycmluZyB0aHJvdWdoIHRoZSBtb2RlbC4gVGhpc1xuICAgKiBtZXRob2QgcmV0dXJucyBuYW1lZCBhY3RpdmF0aW9ucyBhcyB3ZWxsIGFzIHByZS1zb2Z0bWF4IGxvZ2l0cy4gVGhlIHVzZXJcbiAgICogbmVlZHMgdG8gY2xlYW4gdXAgbmFtZWRBY3RpdmF0aW9ucyBhZnRlciBpbmZlcnJpbmcuXG4gICAqXG4gICAqIEBwYXJhbSBwcmVwcm9jZXNzZWRJbnB1dCBwcmVwcm9jZXNzZWQgaW5wdXQgQXJyYXkuXG4gICAqIEByZXR1cm4gTmFtZWQgYWN0aXZhdGlvbnMgYW5kIHRoZSBwcmUtc29mdG1heCBsb2dpdHMuXG4gICAqL1xuICBpbmZlcihwcmVwcm9jZXNzZWRJbnB1dDogQXJyYXkzRCk6XG4gICAgICB7bmFtZWRBY3RpdmF0aW9uczoge1thY3RpdmF0aW9uTmFtZTogc3RyaW5nXTogQXJyYXkzRH0sIGxvZ2l0czogQXJyYXkxRH0ge1xuICAgIGNvbnN0IG5hbWVkQWN0aXZhdGlvbnM6IHtba2V5OiBzdHJpbmddOiBBcnJheTNEfSA9IHt9O1xuXG4gICAgY29uc3QgYXZncG9vbDEwID0gdGhpcy5tYXRoLnNjb3BlKChrZWVwKSA9PiB7XG4gICAgICBjb25zdCBjb252MSA9IHRoaXMubWF0aC5jb252MmQoXG4gICAgICAgICAgcHJlcHJvY2Vzc2VkSW5wdXQsIHRoaXMudmFyaWFibGVzWydjb252MV9XOjAnXSBhcyBBcnJheTRELFxuICAgICAgICAgIHRoaXMudmFyaWFibGVzWydjb252MV9iOjAnXSBhcyBBcnJheTFELCAyLCAwKTtcbiAgICAgIGNvbnN0IGNvbnYxcmVsdSA9IGtlZXAodGhpcy5tYXRoLnJlbHUoY29udjEpKTtcbiAgICAgIG5hbWVkQWN0aXZhdGlvbnNbJ2NvbnZfMSddID0gY29udjFyZWx1O1xuXG4gICAgICBjb25zdCBwb29sMSA9IGtlZXAodGhpcy5tYXRoLm1heFBvb2woY29udjFyZWx1LCAzLCAyLCAwKSk7XG4gICAgICBuYW1lZEFjdGl2YXRpb25zWydtYXhwb29sXzEnXSA9IHBvb2wxO1xuXG4gICAgICBjb25zdCBmaXJlMiA9IGtlZXAodGhpcy5maXJlTW9kdWxlKHBvb2wxLCAyKSk7XG4gICAgICBuYW1lZEFjdGl2YXRpb25zWydmaXJlMiddID0gZmlyZTI7XG5cbiAgICAgIGNvbnN0IGZpcmUzID0ga2VlcCh0aGlzLmZpcmVNb2R1bGUoZmlyZTIsIDMpKTtcbiAgICAgIG5hbWVkQWN0aXZhdGlvbnNbJ2ZpcmUzJ10gPSBmaXJlMztcblxuICAgICAgLy8gQmVjYXVzZSB3ZSBkb24ndCBoYXZlIHVuZXZlbiBwYWRkaW5nIHlldCwgbWFudWFsbHkgcGFkIHRoZSBuZGFycmF5IG9uXG4gICAgICAvLyB0aGUgcmlnaHQuXG4gICAgICBjb25zdCBmaXJlM1Jlc2hhcGUyZCA9XG4gICAgICAgICAgZmlyZTMuYXMyRChmaXJlMy5zaGFwZVswXSwgZmlyZTMuc2hhcGVbMV0gKiBmaXJlMy5zaGFwZVsyXSk7XG4gICAgICBjb25zdCBmaXJlM1NsaWNlZDJkID0gdGhpcy5tYXRoLnNsaWNlMkQoXG4gICAgICAgICAgZmlyZTNSZXNoYXBlMmQsIFswLCAwXSxcbiAgICAgICAgICBbZmlyZTMuc2hhcGVbMF0gLSAxLCAoZmlyZTMuc2hhcGVbMV0gLSAxKSAqIGZpcmUzLnNoYXBlWzJdXSk7XG4gICAgICBjb25zdCBmaXJlM1NsaWNlZCA9IGZpcmUzU2xpY2VkMmQuYXMzRChcbiAgICAgICAgICBmaXJlMy5zaGFwZVswXSAtIDEsIGZpcmUzLnNoYXBlWzFdIC0gMSwgZmlyZTMuc2hhcGVbMl0pO1xuICAgICAgY29uc3QgcG9vbDIgPSBrZWVwKHRoaXMubWF0aC5tYXhQb29sKGZpcmUzU2xpY2VkLCAzLCAyLCAwKSk7XG4gICAgICBuYW1lZEFjdGl2YXRpb25zWydtYXhwb29sXzInXSA9IHBvb2wyO1xuXG4gICAgICBjb25zdCBmaXJlNCA9IGtlZXAodGhpcy5maXJlTW9kdWxlKHBvb2wyLCA0KSk7XG4gICAgICBuYW1lZEFjdGl2YXRpb25zWydmaXJlNCddID0gZmlyZTQ7XG5cbiAgICAgIGNvbnN0IGZpcmU1ID0ga2VlcCh0aGlzLmZpcmVNb2R1bGUoZmlyZTQsIDUpKTtcbiAgICAgIG5hbWVkQWN0aXZhdGlvbnNbJ2ZpcmU1J10gPSBmaXJlNTtcblxuICAgICAgY29uc3QgcG9vbDMgPSBrZWVwKHRoaXMubWF0aC5tYXhQb29sKGZpcmU1LCAzLCAyLCAwKSk7XG4gICAgICBuYW1lZEFjdGl2YXRpb25zWydtYXhwb29sXzMnXSA9IHBvb2wzO1xuXG4gICAgICBjb25zdCBmaXJlNiA9IGtlZXAodGhpcy5maXJlTW9kdWxlKHBvb2wzLCA2KSk7XG4gICAgICBuYW1lZEFjdGl2YXRpb25zWydmaXJlNiddID0gZmlyZTY7XG5cbiAgICAgIGNvbnN0IGZpcmU3ID0ga2VlcCh0aGlzLmZpcmVNb2R1bGUoZmlyZTYsIDcpKTtcbiAgICAgIG5hbWVkQWN0aXZhdGlvbnNbJ2ZpcmU3J10gPSBmaXJlNztcblxuICAgICAgY29uc3QgZmlyZTggPSBrZWVwKHRoaXMuZmlyZU1vZHVsZShmaXJlNywgOCkpO1xuICAgICAgbmFtZWRBY3RpdmF0aW9uc1snZmlyZTgnXSA9IGZpcmU4O1xuXG4gICAgICBjb25zdCBmaXJlOSA9IGtlZXAodGhpcy5maXJlTW9kdWxlKGZpcmU4LCA5KSk7XG4gICAgICBuYW1lZEFjdGl2YXRpb25zWydmaXJlOSddID0gZmlyZTk7XG5cbiAgICAgIGNvbnN0IGNvbnYxMCA9IGtlZXAodGhpcy5tYXRoLmNvbnYyZChcbiAgICAgICAgICBmaXJlOSwgdGhpcy52YXJpYWJsZXNbJ2NvbnYxMF9XOjAnXSBhcyBBcnJheTRELFxuICAgICAgICAgIHRoaXMudmFyaWFibGVzWydjb252MTBfYjowJ10gYXMgQXJyYXkxRCwgMSwgMCkpO1xuICAgICAgbmFtZWRBY3RpdmF0aW9uc1snY29udjEwJ10gPSBjb252MTA7XG5cbiAgICAgIHJldHVybiB0aGlzLm1hdGguYXZnUG9vbChjb252MTAsIGNvbnYxMC5zaGFwZVswXSwgMSwgMCkuYXMxRCgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtuYW1lZEFjdGl2YXRpb25zLCBsb2dpdHM6IGF2Z3Bvb2wxMH07XG4gIH1cblxuICBwcml2YXRlIGZpcmVNb2R1bGUoaW5wdXQ6IEFycmF5M0QsIGZpcmVJZDogbnVtYmVyKSB7XG4gICAgY29uc3QgeTEgPSB0aGlzLm1hdGguY29udjJkKFxuICAgICAgICBpbnB1dCwgdGhpcy52YXJpYWJsZXNbJ2ZpcmUnICsgZmlyZUlkICsgJy9zcXVlZXplMXgxX1c6MCddIGFzIEFycmF5NEQsXG4gICAgICAgIHRoaXMudmFyaWFibGVzWydmaXJlJyArIGZpcmVJZCArICcvc3F1ZWV6ZTF4MV9iOjAnXSBhcyBBcnJheTFELCAxLCAwKTtcbiAgICBjb25zdCB5MiA9IHRoaXMubWF0aC5yZWx1KHkxKTtcbiAgICBjb25zdCBsZWZ0MSA9IHRoaXMubWF0aC5jb252MmQoXG4gICAgICAgIHkyLCB0aGlzLnZhcmlhYmxlc1snZmlyZScgKyBmaXJlSWQgKyAnL2V4cGFuZDF4MV9XOjAnXSBhcyBBcnJheTRELFxuICAgICAgICB0aGlzLnZhcmlhYmxlc1snZmlyZScgKyBmaXJlSWQgKyAnL2V4cGFuZDF4MV9iOjAnXSBhcyBBcnJheTFELCAxLCAwKTtcbiAgICBjb25zdCBsZWZ0MiA9IHRoaXMubWF0aC5yZWx1KGxlZnQxKTtcblxuICAgIGNvbnN0IHJpZ2h0MSA9IHRoaXMubWF0aC5jb252MmQoXG4gICAgICAgIHkyLCB0aGlzLnZhcmlhYmxlc1snZmlyZScgKyBmaXJlSWQgKyAnL2V4cGFuZDN4M19XOjAnXSBhcyBBcnJheTRELFxuICAgICAgICB0aGlzLnZhcmlhYmxlc1snZmlyZScgKyBmaXJlSWQgKyAnL2V4cGFuZDN4M19iOjAnXSBhcyBBcnJheTFELCAxLCAxKTtcbiAgICBjb25zdCByaWdodDIgPSB0aGlzLm1hdGgucmVsdShyaWdodDEpO1xuXG4gICAgcmV0dXJuIHRoaXMubWF0aC5jb25jYXQzRChsZWZ0MiwgcmlnaHQyLCAyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHRvcEsgY2xhc3NlcyBmb3IgcHJlLXNvZnRtYXggbG9naXRzLiBSZXR1cm5zIGEgbWFwIG9mIGNsYXNzTmFtZVxuICAgKiB0byBzb2Z0bWF4IG5vcm1hbGl6ZWQgcHJvYmFiaWxpdHkuXG4gICAqXG4gICAqIEBwYXJhbSBsb2dpdHMgUHJlLXNvZnRtYXggbG9naXRzIGFycmF5LlxuICAgKiBAcGFyYW0gdG9wSyBIb3cgbWFueSB0b3AgY2xhc3NlcyB0byByZXR1cm4uXG4gICAqL1xuICBnZXRUb3BLQ2xhc3Nlcyhsb2dpdHM6IEFycmF5MUQsIHRvcEs6IG51bWJlcik6IHtbY2xhc3NOYW1lOiBzdHJpbmddOiBudW1iZXJ9IHtcbiAgICBjb25zdCBwcmVkaWN0aW9ucyA9IHRoaXMubWF0aC5zb2Z0bWF4KGxvZ2l0cyk7XG4gICAgY29uc3QgdG9wayA9IG5ldyBOREFycmF5TWF0aENQVSgpLnRvcEsocHJlZGljdGlvbnMsIHRvcEspO1xuICAgIGNvbnN0IHRvcGtJbmRpY2VzID0gdG9way5pbmRpY2VzLmdldFZhbHVlcygpO1xuICAgIGNvbnN0IHRvcGtWYWx1ZXMgPSB0b3BrLnZhbHVlcy5nZXRWYWx1ZXMoKTtcblxuICAgIGNvbnN0IHRvcENsYXNzZXNUb1Byb2JhYmlsaXR5OiB7W2NsYXNzTmFtZTogc3RyaW5nXTogbnVtYmVyfSA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9wa0luZGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRvcENsYXNzZXNUb1Byb2JhYmlsaXR5W2ltYWdlbmV0X2NsYXNzZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuSU1BR0VORVRfQ0xBU1NFU1t0b3BrSW5kaWNlc1tpXV1dID1cbiAgICAgICAgICB0b3BrVmFsdWVzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gdG9wQ2xhc3Nlc1RvUHJvYmFiaWxpdHk7XG4gIH1cbn1cbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3XG4gKlxuICogRGVmaW5lcyBhbiBpbnRlcmZhY2UgZm9yIGNyZWF0aW5nIFBvbHltZXIgZWxlbWVudHMgaW4gVHlwZXNjcmlwdCB3aXRoIHRoZVxuICogY29ycmVjdCB0eXBpbmdzLiBBIFBvbHltZXIgZWxlbWVudCBzaG91bGQgYmUgZGVmaW5lZCBsaWtlIHRoaXM6XG4gKlxuICogYGBgXG4gKiBsZXQgTXlFbGVtZW50UG9seW1lciA9IFBvbHltZXJFbGVtZW50KHtcbiAqICAgaXM6ICdteS1wb2x5bWVyLWVsZW1lbnQnLFxuICogICBwcm9wZXJ0aWVzOiB7XG4gKiAgICAgZm9vOiBzdHJpbmcsXG4gKiAgICAgYmFyOiBBcnJheVxuICogICB9XG4gKiB9KTtcbiAqXG4gKiBjbGFzcyBNeUVsZW1lbnQgZXh0ZW5kcyBNeUVsZW1lbnRQb2x5bWVyIHtcbiAqICAgZm9vOiBzdHJpbmc7XG4gKiAgIGJhcjogbnVtYmVyW107XG4gKlxuICogICByZWFkeSgpIHtcbiAqICAgICBjb25zb2xlLmxvZygnTXlFbGVtZW50IGluaXRpYWxpemVkIScpO1xuICogICB9XG4gKiB9XG4gKlxuICogZG9jdW1lbnQucmVnaXN0ZXJFbGVtZW50KE15RWxlbWVudC5wcm90b3R5cGUuaXMsIE15RWxlbWVudCk7XG4gKiBgYGBcbiAqL1xuXG5leHBvcnQgdHlwZSBTcGVjID0ge1xuICBpczogc3RyaW5nOyBwcm9wZXJ0aWVzOiB7XG4gICAgW2tleTogc3RyaW5nXTogKEZ1bmN0aW9ufHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICAgIHR5cGU6IEZ1bmN0aW9uLCB2YWx1ZT86IGFueTtcbiAgICAgIHJlZmxlY3RUb0F0dHJpYnV0ZT86IGJvb2xlYW47XG4gICAgICByZWFkb25seT86IGJvb2xlYW47XG4gICAgICBub3RpZnk/OiBib29sZWFuO1xuICAgICAgY29tcHV0ZWQ/OiBzdHJpbmc7XG4gICAgICBvYnNlcnZlcj86IHN0cmluZztcbiAgICB9KVxuICB9O1xuICBvYnNlcnZlcnM/OiBzdHJpbmdbXTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBQb2x5bWVyRWxlbWVudChzcGVjOiBTcGVjKSB7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgcmV0dXJuIFBvbHltZXIuQ2xhc3Moc3BlYyBhcyBhbnkpIGFzIHtuZXcgKCk6IFBvbHltZXJIVE1MRWxlbWVudH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9seW1lckhUTUxFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQsIHBvbHltZXIuQmFzZSB7fVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQge05EQXJyYXl9IGZyb20gJy4vbWF0aC9uZGFycmF5JztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2hlY2twb2ludFZhcmlhYmxlIHtcbiAgZmlsZW5hbWU6IHN0cmluZztcbiAgc2hhcGU6IG51bWJlcltdO1xufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IHR5cGUgQ2hlY2twb2ludE1hbmlmZXN0ID0ge1xuICBbdmFyTmFtZTogc3RyaW5nXTogQ2hlY2twb2ludFZhcmlhYmxlXG59O1xuXG5jb25zdCBNQU5JRkVTVF9GSUxFID0gJ21hbmlmZXN0Lmpzb24nO1xuXG5leHBvcnQgY2xhc3MgQ2hlY2twb2ludExvYWRlciB7XG4gIHByaXZhdGUgY2hlY2twb2ludE1hbmlmZXN0OiBDaGVja3BvaW50TWFuaWZlc3Q7XG4gIHByaXZhdGUgdmFyaWFibGVzOiB7W3Zhck5hbWU6IHN0cmluZ106IE5EQXJyYXl9O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdXJsUGF0aDogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMudXJsUGF0aC5jaGFyQXQodGhpcy51cmxQYXRoLmxlbmd0aCAtIDEpICE9PSAnLycpIHtcbiAgICAgIHRoaXMudXJsUGF0aCArPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBsb2FkTWFuaWZlc3QoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgeGhyLm9wZW4oJ0dFVCcsIHRoaXMudXJsUGF0aCArIE1BTklGRVNUX0ZJTEUpO1xuXG4gICAgICB4aHIub25sb2FkID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmNoZWNrcG9pbnRNYW5pZmVzdCA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH07XG4gICAgICB4aHIub25lcnJvciA9IChlcnJvcikgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBgJHtNQU5JRkVTVF9GSUxFfSBub3QgZm91bmQgYXQgJHt0aGlzLnVybFBhdGh9LiBgICsgZXJyb3IpO1xuICAgICAgfTtcbiAgICAgIHhoci5zZW5kKCk7XG4gICAgfSk7XG4gIH1cblxuICBnZXRDaGVja3BvaW50TWFuaWZlc3QoKTogUHJvbWlzZTxDaGVja3BvaW50TWFuaWZlc3Q+IHtcbiAgICBpZiAodGhpcy5jaGVja3BvaW50TWFuaWZlc3QgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPENoZWNrcG9pbnRNYW5pZmVzdD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICB0aGlzLmxvYWRNYW5pZmVzdCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIHJlc29sdmUodGhpcy5jaGVja3BvaW50TWFuaWZlc3QpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2U8Q2hlY2twb2ludE1hbmlmZXN0PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICByZXNvbHZlKHRoaXMuY2hlY2twb2ludE1hbmlmZXN0KTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldEFsbFZhcmlhYmxlcygpOiBQcm9taXNlPHtbdmFyTmFtZTogc3RyaW5nXTogTkRBcnJheX0+IHtcbiAgICBpZiAodGhpcy52YXJpYWJsZXMgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHtbdmFyTmFtZTogc3RyaW5nXTogTkRBcnJheX0+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgcmVzb2x2ZSh0aGlzLnZhcmlhYmxlcyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2U8e1t2YXJOYW1lOiBzdHJpbmddOiBOREFycmF5fT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5nZXRDaGVja3BvaW50TWFuaWZlc3QoKS50aGVuKFxuICAgICAgICAgIChjaGVja3BvaW50RGVmaW5pdGlvbjogQ2hlY2twb2ludE1hbmlmZXN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YXJpYWJsZU5hbWVzID0gT2JqZWN0LmtleXModGhpcy5jaGVja3BvaW50TWFuaWZlc3QpO1xuXG4gICAgICAgICAgICBjb25zdCB2YXJpYWJsZVByb21pc2VzOiBBcnJheTxQcm9taXNlPE5EQXJyYXk+PiA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YXJpYWJsZU5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIHZhcmlhYmxlUHJvbWlzZXMucHVzaCh0aGlzLmdldFZhcmlhYmxlKHZhcmlhYmxlTmFtZXNbaV0pKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgUHJvbWlzZS5hbGwodmFyaWFibGVQcm9taXNlcykudGhlbih2YXJpYWJsZXMgPT4ge1xuICAgICAgICAgICAgICB0aGlzLnZhcmlhYmxlcyA9IHt9O1xuICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhcmlhYmxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMudmFyaWFibGVzW3ZhcmlhYmxlTmFtZXNbaV1dID0gdmFyaWFibGVzW2ldO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlc29sdmUodGhpcy52YXJpYWJsZXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBnZXRWYXJpYWJsZSh2YXJOYW1lOiBzdHJpbmcpOiBQcm9taXNlPE5EQXJyYXk+IHtcbiAgICBpZiAoISh2YXJOYW1lIGluIHRoaXMuY2hlY2twb2ludE1hbmlmZXN0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgbG9hZCBub24tZXhpc3RhbnQgdmFyaWFibGUgJyArIHZhck5hbWUpO1xuICAgIH1cblxuICAgIGNvbnN0IHZhcmlhYmxlUmVxdWVzdFByb21pc2VNZXRob2QgPVxuICAgICAgICAocmVzb2x2ZTogKG5kYXJyYXk6IE5EQXJyYXkpID0+IHZvaWQsIHJlamVjdDogKCkgPT4gdm9pZCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgICAgICAgIGNvbnN0IGZuYW1lID0gdGhpcy5jaGVja3BvaW50TWFuaWZlc3RbdmFyTmFtZV0uZmlsZW5hbWU7XG4gICAgICAgICAgeGhyLm9wZW4oJ0dFVCcsIHRoaXMudXJsUGF0aCArIGZuYW1lKTtcblxuICAgICAgICAgIHhoci5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZXMgPSBuZXcgRmxvYXQzMkFycmF5KHhoci5yZXNwb25zZSk7XG4gICAgICAgICAgICBjb25zdCBuZGFycmF5ID1cbiAgICAgICAgICAgICAgICBOREFycmF5Lm1ha2UodGhpcy5jaGVja3BvaW50TWFuaWZlc3RbdmFyTmFtZV0uc2hhcGUsIHt2YWx1ZXN9KTtcbiAgICAgICAgICAgIHJlc29sdmUobmRhcnJheSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICB4aHIub25lcnJvciA9IChlcnJvcikgPT4ge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgICdDb3VsZCBub3QgZmV0Y2ggdmFyaWFibGUgJyArIHZhck5hbWUgKyAnOiAnICsgZXJyb3IpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgeGhyLnNlbmQoKTtcbiAgICAgICAgfTtcblxuICAgIGlmICh0aGlzLmNoZWNrcG9pbnRNYW5pZmVzdCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2U8TkRBcnJheT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICB0aGlzLmxvYWRNYW5pZmVzdCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIG5ldyBQcm9taXNlPE5EQXJyYXk+KHZhcmlhYmxlUmVxdWVzdFByb21pc2VNZXRob2QpLnRoZW4ocmVzb2x2ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUHJvbWlzZTxOREFycmF5Pih2YXJpYWJsZVJlcXVlc3RQcm9taXNlTWV0aG9kKTtcbiAgfVxufVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQge05EQXJyYXlNYXRofSBmcm9tICcuL21hdGgvbWF0aCc7XG5pbXBvcnQge05EQXJyYXl9IGZyb20gJy4vbWF0aC9uZGFycmF5JztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi91dGlsJztcblxuY29uc3QgU1RBVFNfU0FNUExFX1BFUkNFTlRBR0UgPSAwLjE7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YVN0YXRzIHtcbiAgZXhhbXBsZUNvdW50OiBudW1iZXI7XG4gIGlucHV0TWluOiBudW1iZXI7XG4gIGlucHV0TWF4OiBudW1iZXI7XG4gIHNoYXBlOiBudW1iZXJbXTtcbn1cblxuaW50ZXJmYWNlIE5vcm1hbGl6YXRpb25JbmZvIHtcbiAgaXNOb3JtYWxpemVkOiBib29sZWFuO1xuICAvLyBCb3VuZHMgb2YgdGhlIG5vcm1hbGl6YXRpb24gaWYgbm9ybWFsaXplZC5cbiAgbG93ZXJCb3VuZD86IG51bWJlcjtcbiAgdXBwZXJCb3VuZD86IG51bWJlcjtcbiAgLy8gTWluaW11bSBhbmQgbWF4aW11bSB2YWx1ZXMgZm9yIGVhY2ggZGltZW5zaW9uIG9mIHRoZSBvcmlnaW5hbCBkYXRhLiBUaGVzZVxuICAvLyBhcmUgdGhlIHNhbWUgc2l6ZSBhcyBhbiBpbnB1dCBleGFtcGxlLiBUaGVzZSBhcmUgY29tcHV0ZWQgbGF6aWx5LCBvbmx5IGlmXG4gIC8vIG5vcm1hbGl6YXRpb24gaXMgcmVxdWVzdGVkLiBJZiB0aGUgZGF0YSBpcyB1bi1ub3JtYWxpemVkLCB0aGVzZSBhcmUga2VwdFxuICAvLyBhcm91bmQgc28gdGhleSBkb24ndCBoYXZlIHRvIGJlIHJlY29tcHV0ZWQuXG4gIG1pblZhbHVlczogRmxvYXQzMkFycmF5O1xuICBtYXhWYWx1ZXM6IEZsb2F0MzJBcnJheTtcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEluTWVtb3J5RGF0YXNldCB7XG4gIHByb3RlY3RlZCBkYXRhc2V0OiBOREFycmF5W11bXXxudWxsO1xuXG4gIC8vIENvbnRhaW5zIGluZm9ybWF0aW9uIG5lY2Vzc2FyeSBmb3IgcmVjb25zdHJ1Y3Rpb24gb2YgdGhlIG9yaWdpbmFsIGRhdGFcbiAgLy8gYWZ0ZXIgbm9ybWFsaXphdGlvbi5cbiAgcHJpdmF0ZSBub3JtYWxpemF0aW9uSW5mbzoge1tkYXRhSW5kZXg6IG51bWJlcl06IE5vcm1hbGl6YXRpb25JbmZvfTtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZGF0YVNoYXBlczogbnVtYmVyW11bXSkge1xuICAgIHRoaXMubm9ybWFsaXphdGlvbkluZm8gPSB7fTtcbiAgfVxuXG4gIGdldERhdGFTaGFwZShkYXRhSW5kZXg6IG51bWJlcik6IG51bWJlcltdIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhU2hhcGVzW2RhdGFJbmRleF07XG4gIH1cblxuICBhYnN0cmFjdCBmZXRjaERhdGEoKTogUHJvbWlzZTx2b2lkPjtcblxuICBnZXREYXRhKCk6IE5EQXJyYXlbXVtdfG51bGwge1xuICAgIHJldHVybiB0aGlzLmRhdGFzZXQ7XG4gIH1cblxuICBnZXRTdGF0cygpOiBEYXRhU3RhdHNbXSB7XG4gICAgaWYgKHRoaXMuZGF0YXNldCA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGEgaXMgbnVsbC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5kYXRhc2V0Lm1hcChkID0+IHRoaXMuZ2V0U3RhdHNGb3JEYXRhKGQpKTtcbiAgfVxuXG4gIC8vIENvbXB1dGVzIHN0YXRzIGFjcm9zcyBhIHNhbXBsZWQgcG9ydGlvbiBvZiB0aGUgZGF0YS5cbiAgcHJpdmF0ZSBnZXRTdGF0c0ZvckRhdGEoZGF0YTogTkRBcnJheVtdKTogRGF0YVN0YXRzIHtcbiAgICBsZXQgaW5wdXRNaW4gPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgbGV0IGlucHV0TWF4ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xuXG4gICAgbGV0IGV4YW1wbGVJbmRpY2VzID0gZGF0YS5tYXAoKGV4YW1wbGUsIGkpID0+IGkpO1xuICAgIHV0aWwuc2h1ZmZsZShleGFtcGxlSW5kaWNlcyk7XG4gICAgZXhhbXBsZUluZGljZXMgPVxuICAgICAgICBleGFtcGxlSW5kaWNlcy5zbGljZShleGFtcGxlSW5kaWNlcy5sZW5ndGggKiBTVEFUU19TQU1QTEVfUEVSQ0VOVEFHRSk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV4YW1wbGVJbmRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBpbnB1dFZhbHVlcyA9IGRhdGFbZXhhbXBsZUluZGljZXNbaV1dLmdldFZhbHVlcygpO1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBpbnB1dFZhbHVlcy5sZW5ndGg7IGorKykge1xuICAgICAgICBpbnB1dE1pbiA9IE1hdGgubWluKGlucHV0TWluLCBpbnB1dFZhbHVlc1tqXSk7XG4gICAgICAgIGlucHV0TWF4ID0gTWF0aC5tYXgoaW5wdXRNYXgsIGlucHV0VmFsdWVzW2pdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgaW5wdXRNaW4sXG4gICAgICBpbnB1dE1heCxcbiAgICAgIGV4YW1wbGVDb3VudDogZGF0YS5sZW5ndGgsXG4gICAgICBzaGFwZTogZGF0YVswXS5zaGFwZSxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBleGFtcGxlcyBOREFycmF5cyB0byBiZSBub3JtYWxpemVkLlxuICAgKiBAcGFyYW0gY3VyTG93ZXJCb3VuZHMgQW4gYXJyYXkgY29udGFpbmluZyB0aGUgbWluaW11bSB2YWx1ZSBmb3IgZWFjaFxuICAgKiBkaW1lbnNpb24gb3IgYSBmaXhlZCBtaW5pbXVtIHZhbHVlLlxuICAgKiBAcGFyYW0gY3VyVXBwZXJCb3VuZHMgQW4gYXJyYXkgY29udGFpbmluZyB0aGUgbWF4aW11bSB2YWx1ZSBmb3IgZWFjaFxuICAgKiBkaW1lbnNpb24gb3IgYSBmaXhlZCBtYXhpbXVtIHZhbHVlLlxuICAgKiBAcGFyYW0gbmV3TG93ZXJCb3VuZHMgQW4gYXJyYXkgY29udGFpbmluZyBuZXcgbWluaW11bSB2YWx1ZXMgZm9yIGVhY2hcbiAgICogZGltZW5zaW9uLCBvciBhIGZpeGVkIG1pbnVtdW0gdmFsdWUgdG8gbm9ybWFsaXplIHRoZSBkYXRhIHRvLlxuICAgKiBAcGFyYW0gbmV3VXBwZXJCb3VuZHMgQW4gYXJyYXkgY29udGFpbmluZyBuZXcgbWF4aW11bSB2YWx1ZXMgZm9yIGVhY2hcbiAgICogZGltZW5zaW9uLCBvciBhIGZpeGVkIG1heGltdW0gdmFsdWUgdG8gbm9ybWFsaXplIHRoZSBkYXRhIHRvLlxuICAgKi9cbiAgcHJpdmF0ZSBub3JtYWxpemVFeGFtcGxlc1RvUmFuZ2UoXG4gICAgICBleGFtcGxlczogTkRBcnJheVtdLCBjdXJMb3dlckJvdW5kczogRmxvYXQzMkFycmF5fG51bWJlcixcbiAgICAgIGN1clVwcGVyQm91bmRzOiBGbG9hdDMyQXJyYXl8bnVtYmVyLCBuZXdMb3dlckJvdW5kczogRmxvYXQzMkFycmF5fG51bWJlcixcbiAgICAgIG5ld1VwcGVyQm91bmRzOiBGbG9hdDMyQXJyYXl8bnVtYmVyKTogTkRBcnJheVtdIHtcbiAgICBjb25zdCBjdXJCb3VuZHNJc1BlckRpbWVuc2lvbiA9XG4gICAgICAgIChjdXJVcHBlckJvdW5kcyBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSAmJlxuICAgICAgICAgY3VyTG93ZXJCb3VuZHMgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkpO1xuICAgIGNvbnN0IG5ld0JvdW5kc0lzUGVyRGltZW5zaW9uID1cbiAgICAgICAgKG5ld0xvd2VyQm91bmRzIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5ICYmXG4gICAgICAgICBuZXdVcHBlckJvdW5kcyBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSk7XG5cbiAgICBjb25zdCBpbnB1dFNpemUgPSB1dGlsLnNpemVGcm9tU2hhcGUoZXhhbXBsZXNbMF0uc2hhcGUpO1xuICAgIGNvbnN0IG5ld0V4YW1wbGVzOiBOREFycmF5W10gPSBbXTtcblxuICAgIGV4YW1wbGVzLmZvckVhY2goZXhhbXBsZSA9PiB7XG4gICAgICBjb25zdCBpbnB1dFZhbHVlcyA9IGV4YW1wbGUuZ2V0VmFsdWVzKCk7XG4gICAgICBjb25zdCBub3JtYWxpemVkVmFsdWVzID0gbmV3IEZsb2F0MzJBcnJheShpbnB1dFNpemUpO1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBpbnB1dFNpemU7IGorKykge1xuICAgICAgICBjb25zdCBjdXJMb3dlckJvdW5kID0gY3VyQm91bmRzSXNQZXJEaW1lbnNpb24gP1xuICAgICAgICAgICAgKGN1ckxvd2VyQm91bmRzIGFzIEZsb2F0MzJBcnJheSlbal0gOlxuICAgICAgICAgICAgY3VyTG93ZXJCb3VuZHMgYXMgbnVtYmVyO1xuICAgICAgICBjb25zdCBjdXJVcHBlckJvdW5kID0gY3VyQm91bmRzSXNQZXJEaW1lbnNpb24gP1xuICAgICAgICAgICAgKGN1clVwcGVyQm91bmRzIGFzIEZsb2F0MzJBcnJheSlbal0gOlxuICAgICAgICAgICAgY3VyVXBwZXJCb3VuZHMgYXMgbnVtYmVyO1xuICAgICAgICBjb25zdCBjdXJSYW5nZSA9IGN1clVwcGVyQm91bmQgLSBjdXJMb3dlckJvdW5kO1xuXG4gICAgICAgIGNvbnN0IG5ld0xvd2VyQm91bmQgPSBuZXdCb3VuZHNJc1BlckRpbWVuc2lvbiA/XG4gICAgICAgICAgICAobmV3TG93ZXJCb3VuZHMgYXMgRmxvYXQzMkFycmF5KVtqXSA6XG4gICAgICAgICAgICBuZXdMb3dlckJvdW5kcyBhcyBudW1iZXI7XG4gICAgICAgIGNvbnN0IG5ld1VwcGVyQm91bmQgPSBuZXdCb3VuZHNJc1BlckRpbWVuc2lvbiA/XG4gICAgICAgICAgICAobmV3VXBwZXJCb3VuZHMgYXMgRmxvYXQzMkFycmF5KVtqXSA6XG4gICAgICAgICAgICBuZXdVcHBlckJvdW5kcyBhcyBudW1iZXI7XG4gICAgICAgIGNvbnN0IG5ld1JhbmdlID0gbmV3VXBwZXJCb3VuZCAtIG5ld0xvd2VyQm91bmQ7XG5cbiAgICAgICAgaWYgKGN1clJhbmdlID09PSAwKSB7XG4gICAgICAgICAgbm9ybWFsaXplZFZhbHVlc1tqXSA9IG5ld0xvd2VyQm91bmQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9ybWFsaXplZFZhbHVlc1tqXSA9IG5ld0xvd2VyQm91bmQgK1xuICAgICAgICAgICAgICBuZXdSYW5nZSAqIChpbnB1dFZhbHVlc1tqXSAtIGN1ckxvd2VyQm91bmQpIC8gY3VyUmFuZ2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5ld0V4YW1wbGVzLnB1c2goTkRBcnJheS5tYWtlKGV4YW1wbGUuc2hhcGUsIHt2YWx1ZXM6IG5vcm1hbGl6ZWRWYWx1ZXN9KSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5ld0V4YW1wbGVzO1xuICB9XG5cbiAgcHJpdmF0ZSBjb21wdXRlQm91bmRzKGRhdGFJbmRleDogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuZGF0YXNldCA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGEgaXMgbnVsbC4nKTtcbiAgICB9XG5cbiAgICBjb25zdCBzaXplID0gdXRpbC5zaXplRnJvbVNoYXBlKHRoaXMuZGF0YXNldFtkYXRhSW5kZXhdWzBdLnNoYXBlKTtcblxuICAgIC8vIENvbXB1dGUgbWluIGFuZCBtYXggdmFsdWVzIGZvciBldmVyeSBkaW1lbnNpb24uXG4gICAgdGhpcy5ub3JtYWxpemF0aW9uSW5mb1tkYXRhSW5kZXhdID0ge1xuICAgICAgaXNOb3JtYWxpemVkOiBmYWxzZSxcbiAgICAgIG1pblZhbHVlczogbmV3IEZsb2F0MzJBcnJheShzaXplKSxcbiAgICAgIG1heFZhbHVlczogbmV3IEZsb2F0MzJBcnJheShzaXplKVxuICAgIH07XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemU7IGkrKykge1xuICAgICAgdGhpcy5ub3JtYWxpemF0aW9uSW5mb1tkYXRhSW5kZXhdLm1pblZhbHVlc1tpXSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgIHRoaXMubm9ybWFsaXphdGlvbkluZm9bZGF0YUluZGV4XS5tYXhWYWx1ZXNbaV0gPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7XG4gICAgfVxuXG4gICAgdGhpcy5kYXRhc2V0W2RhdGFJbmRleF0uZm9yRWFjaChleGFtcGxlID0+IHtcbiAgICAgIGNvbnN0IGlucHV0VmFsdWVzID0gZXhhbXBsZS5nZXRWYWx1ZXMoKTtcbiAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgc2l6ZTsgaysrKSB7XG4gICAgICAgIHRoaXMubm9ybWFsaXphdGlvbkluZm9bZGF0YUluZGV4XS5taW5WYWx1ZXNba10gPSBNYXRoLm1pbihcbiAgICAgICAgICAgIHRoaXMubm9ybWFsaXphdGlvbkluZm9bZGF0YUluZGV4XS5taW5WYWx1ZXNba10sIGlucHV0VmFsdWVzW2tdKTtcbiAgICAgICAgdGhpcy5ub3JtYWxpemF0aW9uSW5mb1tkYXRhSW5kZXhdLm1heFZhbHVlc1trXSA9IE1hdGgubWF4KFxuICAgICAgICAgICAgdGhpcy5ub3JtYWxpemF0aW9uSW5mb1tkYXRhSW5kZXhdLm1heFZhbHVlc1trXSwgaW5wdXRWYWx1ZXNba10pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbm9ybWFsaXplV2l0aGluQm91bmRzKFxuICAgICAgZGF0YUluZGV4OiBudW1iZXIsIGxvd2VyQm91bmQ6IG51bWJlciwgdXBwZXJCb3VuZDogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuZGF0YXNldCA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGEgaXMgbnVsbC4nKTtcbiAgICB9XG4gICAgaWYgKGRhdGFJbmRleCA+PSB0aGlzLmRhdGFzZXQubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGFJbmRleCBvdXQgb2YgYm91bmRzLicpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm5vcm1hbGl6YXRpb25JbmZvW2RhdGFJbmRleF0gPT0gbnVsbCkge1xuICAgICAgdGhpcy5jb21wdXRlQm91bmRzKGRhdGFJbmRleCk7XG4gICAgfVxuXG4gICAgLy8gY3VyTG93ZXIvVXBwZXJCb3VuZHMgb2YgdGhlIGN1cnJlbnQgZGF0YSBzZXQgY2FuIGVpdGhlciBiZSBmaXhlZCBudW1iZXJzXG4gICAgLy8gaWYgdGhlIGRhdGEgaGFzIGFscmVhZHkgYmVlbiBub3JtYWxpemVkLCBvciBjdXJMb3dlci9VcHBlciBmb3IgZWFjaFxuICAgIC8vIGRpbWVuc2lvbiBpZiBpdCBoYXNuJ3QgYmVlbiBub3JtYWxpemVkIHlldC5cbiAgICBsZXQgY3VyTG93ZXJCb3VuZHM6IEZsb2F0MzJBcnJheXxudW1iZXI7XG4gICAgbGV0IGN1clVwcGVyQm91bmRzOiBGbG9hdDMyQXJyYXl8bnVtYmVyO1xuXG4gICAgaWYgKHRoaXMubm9ybWFsaXphdGlvbkluZm9bZGF0YUluZGV4XS5pc05vcm1hbGl6ZWQpIHtcbiAgICAgIGN1ckxvd2VyQm91bmRzID0gdGhpcy5ub3JtYWxpemF0aW9uSW5mb1tkYXRhSW5kZXhdLmxvd2VyQm91bmQhO1xuICAgICAgY3VyVXBwZXJCb3VuZHMgPSB0aGlzLm5vcm1hbGl6YXRpb25JbmZvW2RhdGFJbmRleF0udXBwZXJCb3VuZCE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1ckxvd2VyQm91bmRzID0gdGhpcy5ub3JtYWxpemF0aW9uSW5mb1tkYXRhSW5kZXhdLm1pblZhbHVlcztcbiAgICAgIGN1clVwcGVyQm91bmRzID0gdGhpcy5ub3JtYWxpemF0aW9uSW5mb1tkYXRhSW5kZXhdLm1heFZhbHVlcztcbiAgICB9XG5cbiAgICB0aGlzLmRhdGFzZXRbZGF0YUluZGV4XSA9IHRoaXMubm9ybWFsaXplRXhhbXBsZXNUb1JhbmdlKFxuICAgICAgICB0aGlzLmRhdGFzZXRbZGF0YUluZGV4XSwgY3VyTG93ZXJCb3VuZHMsIGN1clVwcGVyQm91bmRzLCBsb3dlckJvdW5kLFxuICAgICAgICB1cHBlckJvdW5kKTtcbiAgICB0aGlzLm5vcm1hbGl6YXRpb25JbmZvW2RhdGFJbmRleF0uaXNOb3JtYWxpemVkID0gdHJ1ZTtcbiAgICB0aGlzLm5vcm1hbGl6YXRpb25JbmZvW2RhdGFJbmRleF0ubG93ZXJCb3VuZCA9IGxvd2VyQm91bmQ7XG4gICAgdGhpcy5ub3JtYWxpemF0aW9uSW5mb1tkYXRhSW5kZXhdLnVwcGVyQm91bmQgPSB1cHBlckJvdW5kO1xuICB9XG5cbiAgcHJpdmF0ZSBpc05vcm1hbGl6ZWQoZGF0YUluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5ub3JtYWxpemF0aW9uSW5mbyAhPSBudWxsICYmXG4gICAgICAgIHRoaXMubm9ybWFsaXphdGlvbkluZm9bZGF0YUluZGV4XS5pc05vcm1hbGl6ZWQ7XG4gIH1cblxuICByZW1vdmVOb3JtYWxpemF0aW9uKGRhdGFJbmRleDogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuZGF0YXNldCA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYWluaW5nIG9yIHRlc3QgZGF0YSBpcyBudWxsLicpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pc05vcm1hbGl6ZWQoZGF0YUluZGV4KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZGF0YXNldFtkYXRhSW5kZXhdID0gdGhpcy5ub3JtYWxpemVFeGFtcGxlc1RvUmFuZ2UoXG4gICAgICAgIHRoaXMuZGF0YXNldFtkYXRhSW5kZXhdLCB0aGlzLm5vcm1hbGl6YXRpb25JbmZvW2RhdGFJbmRleF0ubG93ZXJCb3VuZCEsXG4gICAgICAgIHRoaXMubm9ybWFsaXphdGlvbkluZm9bZGF0YUluZGV4XS51cHBlckJvdW5kISxcbiAgICAgICAgdGhpcy5ub3JtYWxpemF0aW9uSW5mb1tkYXRhSW5kZXhdLm1pblZhbHVlcyxcbiAgICAgICAgdGhpcy5ub3JtYWxpemF0aW9uSW5mb1tkYXRhSW5kZXhdLm1heFZhbHVlcyk7XG4gICAgdGhpcy5ub3JtYWxpemF0aW9uSW5mb1tkYXRhSW5kZXhdLmlzTm9ybWFsaXplZCA9IGZhbHNlO1xuICB9XG5cbiAgdW5ub3JtYWxpemVFeGFtcGxlcyhleGFtcGxlczogTkRBcnJheVtdLCBkYXRhSW5kZXg6IG51bWJlcik6IE5EQXJyYXlbXSB7XG4gICAgaWYgKCF0aGlzLmlzTm9ybWFsaXplZChkYXRhSW5kZXgpKSB7XG4gICAgICByZXR1cm4gZXhhbXBsZXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubm9ybWFsaXplRXhhbXBsZXNUb1JhbmdlKFxuICAgICAgICBleGFtcGxlcywgdGhpcy5ub3JtYWxpemF0aW9uSW5mb1tkYXRhSW5kZXhdLmxvd2VyQm91bmQhLFxuICAgICAgICB0aGlzLm5vcm1hbGl6YXRpb25JbmZvW2RhdGFJbmRleF0udXBwZXJCb3VuZCEsXG4gICAgICAgIHRoaXMubm9ybWFsaXphdGlvbkluZm9bZGF0YUluZGV4XS5taW5WYWx1ZXMsXG4gICAgICAgIHRoaXMubm9ybWFsaXphdGlvbkluZm9bZGF0YUluZGV4XS5tYXhWYWx1ZXMpO1xuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICBpZiAodGhpcy5kYXRhc2V0ID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGF0YXNldC5sZW5ndGg7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmRhdGFzZXRbaV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdGhpcy5kYXRhc2V0W2ldW2pdLmRpc3Bvc2UoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5kYXRhc2V0ID0gW107XG4gIH1cbn1cblxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQge0dyYXBoTGF5ZXJzfSBmcm9tICcuL2dyYXBoX2xheWVycyc7XG5pbXBvcnQgKiBhcyBjb25jYXQzZF91dGlsIGZyb20gJy4vbWF0aC9jb25jYXQzZF91dGlsJztcbmltcG9ydCAqIGFzIGNvbnZfdXRpbCBmcm9tICcuL21hdGgvY29udl91dGlsJztcbmltcG9ydCB7TkRBcnJheSwgU2NhbGFyfSBmcm9tICcuL21hdGgvbmRhcnJheSc7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4vdXRpbCc7XG5cbi8qKlxuICogR3JhcGggaXMgdGhlIHByaW1hcnkgY29udGFpbmVyIHN0cnVjdHVyZSBmb3IgbGVhcm4uanMgb3BlcmF0aW9ucy4gR3JhcGhcbiAqIGhvbGRzIHRoZSB0b3BvbG9neSBvZiBvcGVyYXRpb24gbm9kZXMgYW5kIHRoZSBjb25uZWN0aXZpdHkgYmV0d2VlbiB0aGVtLlxuICovXG5leHBvcnQgY2xhc3MgR3JhcGgge1xuICBsYXllcnM6IEdyYXBoTGF5ZXJzO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubGF5ZXJzID0gbmV3IEdyYXBoTGF5ZXJzKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuYW1lZCB2YXJpYWJsZS4gVmFyaWFibGVzIGFyZSB0ZW5zb3JzIHRoYXQgbWFpbnRhaW4gc3RhdGUgYWNyb3NzXG4gICAqIHNlc3Npb24gY2FsbHMgYW5kIHdob3NlIHZhbHVlcyBhcmUgYWRqdXN0ZWQgZHVyaW5nIGJhY2twcm9wYWdhdGlvblxuICAgKiB0cmFpbmluZy5cbiAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgb2YgdGhpcyB2YXJpYWJsZS5cbiAgICogQHBhcmFtIGRhdGEgVGhlIE5EQXJyYXkgdG8gYXNzb2NpYXRlIHdpdGggdGhpcyB2YXJpYWJsZSB0ZW5zb3IuXG4gICAqIEByZXR1cm4gVGhlIHRlbnNvciByZXByZXNlbnRpbmcgdGhlIHZhcmlhYmxlLlxuICAgKi9cbiAgdmFyaWFibGUobmFtZTogc3RyaW5nLCBkYXRhOiBOREFycmF5KTogVGVuc29yIHtcbiAgICByZXR1cm4gdGhpcy5hZGROb2RlQW5kUmV0dXJuT3V0cHV0KG5ldyBWYXJpYWJsZU5vZGUodGhpcywgbmFtZSwgZGF0YSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluc2VydHMgYSBwbGFjZWhvbGRlciBmb3IgYSB0ZW5zb3IgdGhhdCB3aWxsIGJlIGFsd2F5cyBmZWQuIFBsYWNlaG9sZGVyc1xuICAgKiBhcmUgaW5wdXQgdGVuc29ycyB3aG9zZSB2YWx1ZXMgYXJlIHByb3ZpZGVkIGJ5IHRoZSBjbGllbnQgdmlhIGZlZWRcbiAgICogZGljdGlvbmFyaWVzLiBQbGFjZWhvbGRlcnMgYXJlIG5vdCB1cGRhdGVkIGFzIHBhcnQgb2YgdHJhaW5pbmc7IHRoZXkgYXJlXG4gICAqIG9ubHkgdXNlZCBhcyBpbW11dGFibGUgaW5wdXQuXG4gICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoaXMgcGxhY2Vob2xkZXIuXG4gICAqIEBwYXJhbSBzaGFwZSBUaGUgc2hhcGUgb2YgdGhlIHBsYWNlaG9sZGVyIHRlbnNvci5cbiAgICogQHJldHVybiBUaGUgdGVuc29yIHJlcHJlc2VudGluZyB0aGUgcGxhY2Vob2xkZXIuXG4gICAqL1xuICBwbGFjZWhvbGRlcihuYW1lOiBzdHJpbmcsIHNoYXBlOiBudW1iZXJbXSk6IFRlbnNvciB7XG4gICAgcmV0dXJuIHRoaXMuYWRkTm9kZUFuZFJldHVybk91dHB1dChuZXcgUGxhY2Vob2xkZXJOb2RlKHRoaXMsIG5hbWUsIHNoYXBlKSk7XG4gIH1cblxuICAvKipcbiAgICogQ29uc3RhbnQgdmFsdWUgdGhhdCBwZXJzaXN0cyBhY3Jvc3Mgc2Vzc2lvbiBjYWxscy5cbiAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byByZXR1cm4uXG4gICAqIEByZXR1cm4gQSBub2RlIG91dHB1dGluZyB0aGUgY29uc3RhbnQgdmFsdWUuXG4gICAqL1xuICBjb25zdGFudCh2YWx1ZTogQXJyYXlEYXRhKTogVGVuc29yIHtcbiAgICBsZXQgZmluYWxWYWx1ZTogTkRBcnJheTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgZmluYWxWYWx1ZSA9IFNjYWxhci5uZXcodmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBOREFycmF5KSB7XG4gICAgICBmaW5hbFZhbHVlID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICBjb25zdCB2YWxzID0gbmV3IEZsb2F0MzJBcnJheSh1dGlsLmZsYXR0ZW4odmFsdWUpKTtcbiAgICAgIGZpbmFsVmFsdWUgPSBOREFycmF5Lm1ha2UodXRpbC5pbmZlclNoYXBlKHZhbHVlKSwge3ZhbHVlczogdmFsc30pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuaW1wbGVtZW50ZWQgY29uc3RhbnQgdHlwZS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuYWRkTm9kZUFuZFJldHVybk91dHB1dChuZXcgQ29uc3RhbnROb2RlKHRoaXMsIGZpbmFsVmFsdWUpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNoYXBlIHRoZSBpbnB1dCB0ZW5zb3IuXG4gICAqIEBwYXJhbSB4IFRoZSBpbnB1dCB0ZW5zb3IgdG8gYmUgcmVzaGFwZWQuXG4gICAqIEBwYXJhbSBzaGFwZSBUaGUgc2hhcGUgb2YgdGhlIG91dHB1dCB0ZW5zb3IuXG4gICAqIEByZXR1cm4gVGhlIHRlbnNvciByZXByZXNlbnRpbmcgdGhlIHJlc2hhcGUgb3BlcmF0aW9uLlxuICAgKi9cbiAgcmVzaGFwZSh4OiBUZW5zb3IsIHNoYXBlOiBudW1iZXJbXSk6IFRlbnNvciB7XG4gICAgcmV0dXJuIHRoaXMuYWRkTm9kZUFuZFJldHVybk91dHB1dChcbiAgICAgICAgbmV3IFJlc2hhcGVOb2RlKHRoaXMsICdSZXNoYXBlJywgeCwgc2hhcGUpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wdXRlcyBhIGZ1c2VkIGxpbmVhciBjb21iaW5hdGlvbiBvZiB0d28gdGVuc29ycy5cbiAgICogQHBhcmFtIHgxIFRoZSBmaXJzdCBpbnB1dCB0ZW5zb3IuXG4gICAqIEBwYXJhbSB4MiBUaGUgc2Vjb25kIGlucHV0IHRlbnNvci4gU2FtZSBzaGFwZSBhcyB0MS5cbiAgICogQHBhcmFtIGMxIENvZWZmaWNpZW50IG9mIHQxLiBNdXN0IGJlIHNpemUgMS5cbiAgICogQHBhcmFtIGMyIENvZWZmaWNpZW50IG9mIHQyLiBNdXN0IGJlIHNpemUgMS5cbiAgICogQHJldHVybiBUaGUgdGVuc29yIHJlcHJlc2VudGluZyBjMSp0MStjMip0Mi5cbiAgICovXG4gIGZ1c2VkTGluZWFyQ29tYmluYXRpb24oeDE6IFRlbnNvciwgeDI6IFRlbnNvciwgYzE6IFRlbnNvciwgYzI6IFRlbnNvcik6XG4gICAgICBUZW5zb3Ige1xuICAgIHJldHVybiB0aGlzLmFkZE5vZGVBbmRSZXR1cm5PdXRwdXQoXG4gICAgICAgIG5ldyBGdXNlZExpbmVhckNvbWJpbmF0aW9uTm9kZSh0aGlzLCB4MSwgeDIsIGMxLCBjMikpO1xuICB9XG5cblxuICAvKipcbiAgICogQWRkcyB0d28gdGVuc29ycyAoZWxlbWVudHdpc2UpLiBCcm9hZGNhc3RzIGlmIG9uZSBvZiB0aGUgdGVuc29ycyBpcyBzY2FsYXIuXG4gICAqIEBwYXJhbSB4MSBUaGUgZmlyc3QgaW5wdXQgdGVuc29yLlxuICAgKiBAcGFyYW0geDIgVGhlIHNlY29uZCBpbnB1dCB0ZW5zb3IuXG4gICAqIEByZXR1cm4gVGhlIHRlbnNvciByZXByZXNlbnRpbmcgdDErdDIuXG4gICAqL1xuICBhZGQoeDE6IFRlbnNvciwgeDI6IFRlbnNvcik6IFRlbnNvciB7XG4gICAgcmV0dXJuIHRoaXMuYWRkTm9kZUFuZFJldHVybk91dHB1dChuZXcgQWRkTm9kZSh0aGlzLCB4MSwgeDIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJ0cmFjdHMgdHdvIHRlbnNvcnMgKGVsZW1lbnR3aXNlKS4gQnJvYWRjYXN0cyBpZiBvbmUgb2YgdGhlIHRlbnNvcnMgaXNcbiAgICogc2NhbGFyLlxuICAgKiBAcGFyYW0geDEgVGhlIGZpcnN0IGlucHV0IHRlbnNvci5cbiAgICogQHBhcmFtIHgyIFRoZSBzZWNvbmQgaW5wdXQgdGVuc29yLlxuICAgKiBAcmV0dXJuIFRoZSB0ZW5zb3IgcmVwcmVzZW50aW5nIHQxLXQyLlxuICAgKi9cbiAgc3VidHJhY3QoeDE6IFRlbnNvciwgeDI6IFRlbnNvcik6IFRlbnNvciB7XG4gICAgcmV0dXJuIHRoaXMuYWRkTm9kZUFuZFJldHVybk91dHB1dChuZXcgU3VidHJhY3ROb2RlKHRoaXMsIHgxLCB4MikpO1xuICB9XG5cbiAgLyoqXG4gICAqIE11bHRpcGx5IHR3byB0ZW5zb3JzIChlbGVtZW50d2lzZSkuIEJyb2FkY2FzdHMgaWYgb25lIG9mIHRoZSB0ZW5zb3JzIGlzXG4gICAqIHNjYWxhci5cbiAgICogQHBhcmFtIHgxIFRoZSBmaXJzdCBpbnB1dCB0ZW5zb3IuXG4gICAqIEBwYXJhbSB4MiBUaGUgc2Vjb25kIGlucHV0IHRlbnNvci5cbiAgICogQHJldHVybiBUaGUgdGVuc29yIHJlcHJlc2VudGluZyB0MSp0Mi5cbiAgICovXG4gIG11bHRpcGx5KHgxOiBUZW5zb3IsIHgyOiBUZW5zb3IpOiBUZW5zb3Ige1xuICAgIHJldHVybiB0aGlzLmFkZE5vZGVBbmRSZXR1cm5PdXRwdXQobmV3IE11bHRpcGx5Tm9kZSh0aGlzLCB4MSwgeDIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXZpZGUgdHdvIHRlbnNvcnMgKGVsZW1lbnR3aXNlKS4gQnJvYWRjYXN0cyBpZiBvbmUgb2YgdGhlIHRlbnNvcnMgaXNcbiAgICogc2NhbGFyLlxuICAgKiBAcGFyYW0geDEgVGhlIGZpcnN0IGlucHV0IHRlbnNvci5cbiAgICogQHBhcmFtIHgyIFRoZSBzZWNvbmQgaW5wdXQgdGVuc29yLlxuICAgKiBAcmV0dXJuIFRoZSB0ZW5zb3IgcmVwcmVzZW50aW5nIHQxIC8gdDIuXG4gICAqL1xuICBkaXZpZGUoeDE6IFRlbnNvciwgeDI6IFRlbnNvcik6IFRlbnNvciB7XG4gICAgcmV0dXJuIHRoaXMuYWRkTm9kZUFuZFJldHVybk91dHB1dChuZXcgRGl2aWRlTm9kZSh0aGlzLCB4MSwgeDIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wdXRlcyB0aGUgc3VtIG9mIGVsZW1lbnRzIGluIHRoZSB0ZW5zb3IuXG4gICAqIEBwYXJhbSB4IFRoZSBpbnB1dCB0ZW5zb3IuXG4gICAqL1xuICByZWR1Y2VTdW0oeDogVGVuc29yKTogVGVuc29yIHtcbiAgICByZXR1cm4gdGhpcy5hZGROb2RlQW5kUmV0dXJuT3V0cHV0KG5ldyBSZWR1Y2VTdW1Ob2RlKHRoaXMsIHgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25jYXRzIHR3byAzRCB0ZW5zb3JzIGFsb25nIGEgZ2l2ZW4gYXhpcy5cbiAgICogQHBhcmFtIHgxIFRoZSBmaXJzdCBpbnB1dCB0ZW5zb3IuXG4gICAqIEBwYXJhbSB4MiBUaGUgc2Vjb25kIGlucHV0IHRlbnNvci5cbiAgICogQHJldHVybiBUaGUgdGVuc29yIHJlcHJlc2VudGluZyBjb25jYXQgb2YgdHdvIHRlbnNvcnMgYWxvbmcgYXhpcy5cbiAgICovXG4gIGNvbmNhdDNkKHgxOiBUZW5zb3IsIHgyOiBUZW5zb3IsIGF4aXM6IG51bWJlcik6IFRlbnNvciB7XG4gICAgcmV0dXJuIHRoaXMuYWRkTm9kZUFuZFJldHVybk91dHB1dChuZXcgQ29uY2F0M0ROb2RlKHRoaXMsIHgxLCB4MiwgYXhpcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIHRoZSBkb3QgcHJvZHVjdCBiZXR3ZWVuIHR3byBtYXRyaWNlcy5cbiAgICogQHBhcmFtIHgxIFRoZSBmaXJzdCBpbnB1dCB0ZW5zb3IuXG4gICAqIEBwYXJhbSB4MiBUaGUgc2Vjb25kIGlucHV0IHRlbnNvci5cbiAgICogQHJldHVybiBUaGUgdGVuc29yIHJlcHJlc2VudGluZyB0aGUgZG90IHByb2R1Y3Qgb2YgeDEgYW5kIHgyLlxuICAgKi9cbiAgbWF0bXVsKHgxOiBUZW5zb3IsIHgyOiBUZW5zb3IpOiBUZW5zb3Ige1xuICAgIHJldHVybiB0aGlzLmFkZE5vZGVBbmRSZXR1cm5PdXRwdXQobmV3IE1hdE11bE5vZGUodGhpcywgeDEsIHgyKSk7XG4gIH1cblxuICAvKipcbiAgICogQ29tcHV0ZXMgYSAyRCBjb252b2x1dGlvbi5cbiAgICogQHBhcmFtIHggVGhlIGlucHV0IHRlbnNvciB0byB0aGUgY29udm9sdXRpb24gb3BlcmF0aW9uLlxuICAgKiBAcGFyYW0gdyBUaGUgd2VpZ2h0IHRlbnNvciB1c2VkIGJ5IHRoZSBjb252b2x1dGlvbiBvcGVyYXRpb24uXG4gICAqIEBwYXJhbSBiIFRoZSBiaWFzIHRlbnNvciB1c2VkIGJ5IHRoZSBjb252b2x1dGlvbiBvcGVyYXRpb24uXG4gICAqIEBwYXJhbSBmaWVsZFNpemUgVGhlIHNpemUgb2YgdGhlIGNvbnZvbHV0aW9uYWwga2VybmVsLlxuICAgKiBAcGFyYW0gb3V0cHV0RGVwdGggVGhlIG91dHB1dCBkZXB0aCBvZiB0aGUgY29udm9sdXRpb24gb3BlcmF0aW9uLlxuICAgKiBAcGFyYW0gc3RyaWRlIFRoZSBzdHJpZGUgb2YgdGhlIGNvbnZvbHV0aW9uIG9wZXJhdGlvbi5cbiAgICogQHBhcmFtIHplcm9QYWQgVGhlIGFtb3VudCBvZiB6ZXJvIHBhZGRpbmcgb24gYWxsIHNpZGVzIG9mIHRoZSBpbnB1dCB0ZW5zb3IuXG4gICAqIEByZXR1cm4gVGhlIHRlbnNvciByZXByZXNlbnRpbmcgdGhlIGNvbnZvbHV0aW9uIG9wZXJhdGlvbi5cbiAgICovXG4gIGNvbnYyZChcbiAgICAgIHg6IFRlbnNvciwgdzogVGVuc29yLCBiOiBUZW5zb3IsIGZpZWxkU2l6ZTogbnVtYmVyLCBvdXRwdXREZXB0aDogbnVtYmVyLFxuICAgICAgc3RyaWRlID0gMSwgemVyb1BhZD86IG51bWJlcik6IFRlbnNvciB7XG4gICAgcmV0dXJuIHRoaXMuYWRkTm9kZUFuZFJldHVybk91dHB1dChuZXcgQ29udm9sdXRpb24yRE5vZGUoXG4gICAgICAgIHRoaXMsIHgsIHcsIGIsIGZpZWxkU2l6ZSwgb3V0cHV0RGVwdGgsIHN0cmlkZSwgemVyb1BhZCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIGEgMkQgbWF4IHBvb2wgb2YgeC5cbiAgICogQHBhcmFtIHggVGhlIGlucHV0IHRlbnNvciB0byB0aGUgbWF4IHBvb2wgb3BlcmF0aW9uLlxuICAgKiBAcGFyYW0gZmllbGRTaXplIFRoZSBzaXplIG9mIHRoZSBjb252b2x1dGlvbmFsIGtlcm5lbC5cbiAgICogQHBhcmFtIHN0cmlkZSBUaGUgc3RyaWRlIG9mIHRoZSBjb252b2x1dGlvbiBvcGVyYXRpb24uXG4gICAqIEBwYXJhbSB6ZXJvUGFkIFRoZSBhbW91bnQgb2YgemVybyBwYWRkaW5nIG9uIGFsbCBzaWRlcyBvZiB0aGUgaW5wdXQgdGVuc29yLlxuICAgKiBAcmV0dXJuIFRoZSB0ZW5zb3IgcmVwcmVzZW50aW5nIHRoZSBtYXggcG9vbCBvcGVyYXRpb24uXG4gICAqL1xuICBtYXhQb29sKHg6IFRlbnNvciwgZmllbGRTaXplOiBudW1iZXIsIHN0cmlkZSA9IDEsIHplcm9QYWQ/OiBudW1iZXIpOiBUZW5zb3Ige1xuICAgIHJldHVybiB0aGlzLmFkZE5vZGVBbmRSZXR1cm5PdXRwdXQoXG4gICAgICAgIG5ldyBNYXhQb29sTm9kZSh0aGlzLCB4LCBmaWVsZFNpemUsIHN0cmlkZSwgemVyb1BhZCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIGV4cG9uZW50aWFsIG9mIHggZWxlbWVudC13aXNlLlxuICAgKiBAcGFyYW0geCBUaGUgaW5wdXQgdGVuc29yIHRvIHRoZSBleHAuXG4gICAqIEByZXR1cm4gVGhlIHRlbnNvciByZXByZXNlbnRpbmcgdGhlIGUgXiB4IG9wZXJhdGlvbi5cbiAgICovXG4gIGV4cCh4OiBUZW5zb3IpOiBUZW5zb3Ige1xuICAgIHJldHVybiB0aGlzLmFkZE5vZGVBbmRSZXR1cm5PdXRwdXQobmV3IEV4cE5vZGUodGhpcywgeCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIGxvZyBvZiB4IGVsZW1lbnQtd2lzZS5cbiAgICogQHBhcmFtIHggVGhlIGlucHV0IHRlbnNvciB0byB0aGUgbG9nLlxuICAgKiBAcmV0dXJuIFRoZSB0ZW5zb3IgcmVwcmVzZW50aW5nIHRoZSBsbih4KSBvcGVyYXRpb24uXG4gICAqL1xuICBsb2coeDogVGVuc29yKTogVGVuc29yIHtcbiAgICByZXR1cm4gdGhpcy5hZGROb2RlQW5kUmV0dXJuT3V0cHV0KG5ldyBMb2dOb2RlKHRoaXMsIHgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wdXRlcyBSZUxVIG9mIHggZWxlbWVudC13aXNlLlxuICAgKiBAcGFyYW0geCBUaGUgaW5wdXQgdGVuc29yIHRvIHRoZSBSZUxVLlxuICAgKiBAcmV0dXJuIFRoZSB0ZW5zb3IgcmVwcmVzZW50aW5nIHRoZSBSZUxVIG9wZXJhdGlvbi5cbiAgICovXG4gIHJlbHUoeDogVGVuc29yKTogVGVuc29yIHtcbiAgICByZXR1cm4gdGhpcy5hZGROb2RlQW5kUmV0dXJuT3V0cHV0KG5ldyBSZUxVTm9kZSh0aGlzLCB4KSk7XG4gIH1cblxuICAvKipcbiAgICogQ29tcHV0ZXMgVGFuSCBvZiB4IGVsZW1lbnQtd2lzZS5cbiAgICogQHBhcmFtIHggVGhlIGlucHV0IHRlbnNvciB0byB0aGUgVGFuSC5cbiAgICogQHJldHVybiBUaGUgdGVuc29yIHJlcHJlc2VudGluZyB0aGUgVGFuSCBvcGVyYXRpb24uXG4gICAqL1xuICB0YW5oKHg6IFRlbnNvcik6IFRlbnNvciB7XG4gICAgcmV0dXJuIHRoaXMuYWRkTm9kZUFuZFJldHVybk91dHB1dChuZXcgVGFuSE5vZGUodGhpcywgeCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIFNpZ21vaWQgb2YgeCBlbGVtZW50LXdpc2UuXG4gICAqIEBwYXJhbSB4IFRoZSBpbnB1dCB0ZW5zb3IgdG8gdGhlIHNpZ21vaWQuXG4gICAqIEByZXR1cm4gVGhlIHRlbnNvciByZXByZXNlbnRpbmcgdGhlIHNpZ21vaWQgb3BlcmF0aW9uLlxuICAgKi9cbiAgc2lnbW9pZCh4OiBUZW5zb3IpOiBUZW5zb3Ige1xuICAgIHJldHVybiB0aGlzLmFkZE5vZGVBbmRSZXR1cm5PdXRwdXQobmV3IFNpZ21vaWROb2RlKHRoaXMsIHgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wdXRlcyBzcXVhcmUgb2YgeCBlbGVtZW50LXdpc2UuXG4gICAqIEBwYXJhbSB4IFRoZSBpbnB1dCB0ZW5zb3IgdG8gdGhlIHNxdWFyZS5cbiAgICovXG4gIHNxdWFyZSh4OiBUZW5zb3IpOiBUZW5zb3Ige1xuICAgIHJldHVybiB0aGlzLmFkZE5vZGVBbmRSZXR1cm5PdXRwdXQobmV3IFNxdWFyZU5vZGUodGhpcywgeCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIHNvZnRtYXggcHJvYmFiaWxpdGllcyBmcm9tIGxvZ2l0cy5cbiAgICpcbiAgICogQHBhcmFtIHggVGhlIGlucHV0IGxvZ2l0cy5cbiAgICogQHJldHVybiBUaGUgc29mdG1heCBwcm9iYWJpbGl0aWVzLlxuICAgKi9cbiAgc29mdG1heCh4OiBUZW5zb3IpOiBUZW5zb3Ige1xuICAgIHJldHVybiB0aGlzLmFkZE5vZGVBbmRSZXR1cm5PdXRwdXQobmV3IFNvZnRtYXhOb2RlKHRoaXMsIHgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgc29mdG1heCBjcm9zcy1lbnRyb3B5IGNvc3Qgb3BlcmF0aW9uIGluIHRoZSBncmFwaC5cbiAgICogQHBhcmFtIHggVGhlIGlucHV0IHRlbnNvciB0byBjbGFzc2lmeS5cbiAgICogQHJldHVybiBUaGUgdGVuc29yIHJlcHJlc2VudGluZyB0aGUgc29mdG1heCBjcm9zcy1lbnRyb3B5IGNvc3Qgb3BlcmF0aW9uLlxuICAgKi9cbiAgc29mdG1heENyb3NzRW50cm9weUNvc3QoeDogVGVuc29yLCB0YXJnZXQ6IFRlbnNvcik6IFRlbnNvciB7XG4gICAgcmV0dXJuIHRoaXMuYWRkTm9kZUFuZFJldHVybk91dHB1dChcbiAgICAgICAgbmV3IFNvZnRtYXhDcm9zc0VudHJvcHlDb3N0Tm9kZSh0aGlzLCB4LCB0YXJnZXQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbWVhbi1zcXVhcmVkIGNvc3Qgb3BlcmF0aW9uIGluIHRoZSBncmFwaC5cbiAgICogQHBhcmFtIGxhYmVsIFRoZSBsYWJlbCB0ZW5zb3IuXG4gICAqIEBwYXJhbSBwcmVkaWN0aW9uIFRoZSBwcmVkaWN0aW9uIHRlbnNvci5cbiAgICogQHJldHVybiBUaGUgdGVuc29yIHJlcHJlc2VudGluZyB0aGUgbWVhbi1zcXVhcmVkIGNvc3Qgb3BlcmF0aW9uLlxuICAgKi9cbiAgbWVhblNxdWFyZWRDb3N0KGxhYmVsOiBUZW5zb3IsIHByZWRpY3Rpb246IFRlbnNvcikge1xuICAgIHJldHVybiB0aGlzLmFkZE5vZGVBbmRSZXR1cm5PdXRwdXQoXG4gICAgICAgIG5ldyBNZWFuU3F1YXJlZENvc3ROb2RlKHRoaXMsIGxhYmVsLCBwcmVkaWN0aW9uKSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZmxhdHRlbmVkIGluZGV4IG9mIHRoZSBtYXhpbXVtIGVudHJ5IGluIHRoZSB0ZW5zb3IuXG4gICAqIEBwYXJhbSB4IFRoZSB0ZW5zb3Igd2l0aCB0aGUgdmFsdWUuXG4gICAqIEByZXR1cm4gQSBTY2FsYXIgdGVuc29yIHdpdGggdGhlIGluZGV4IG9mIHRoZSBtYXhpbXVtIGVudHJ5LlxuICAgKi9cbiAgYXJnbWF4KHg6IFRlbnNvcik6IFRlbnNvciB7XG4gICAgcmV0dXJuIHRoaXMuYWRkTm9kZUFuZFJldHVybk91dHB1dChuZXcgQXJnTWF4Tm9kZSh0aGlzLCB4KSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBhcmdtYXggZXF1YWxzIG9wZXJhdGlvbiBpbiB0aGUgZ3JhcGguXG4gICAqIEBwYXJhbSB4MSBGaXJzdCBpbnB1dCB0ZW5zb3IgdG8gY2hlY2sgYWdhaW5zdC5cbiAgICogQHBhcmFtIHgyIFNlY29uZCBpbnB1dCB0ZW5zb3IgdG8gY2hlY2sgYWdhaW5zdC5cbiAgICogQHJldHVybiBUaGUgdGVuc29yIHJlcHJlc2VudGluZyB0aGUgYXJnbWF4IGVxdWFscyBvcGVyYXRpb24uXG4gICAqL1xuICBhcmdtYXhFcXVhbHMoeDE6IFRlbnNvciwgeDI6IFRlbnNvcik6IFRlbnNvciB7XG4gICAgcmV0dXJuIHRoaXMuYWRkTm9kZUFuZFJldHVybk91dHB1dChuZXcgQXJnTWF4RXF1YWxzTm9kZSh0aGlzLCB4MSwgeDIpKTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkTm9kZUFuZFJldHVybk91dHB1dChub2RlOiBOb2RlKTogVGVuc29yIHtcbiAgICB0aGlzLm5vZGVzLnB1c2gobm9kZSk7XG4gICAgbm9kZS52YWxpZGF0ZSgpO1xuICAgIHJldHVybiBub2RlLm91dHB1dDtcbiAgfVxuXG4gIGdldE5vZGVzKCk6IE5vZGVbXSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZXM7XG4gIH1cblxuICBwcml2YXRlIG5vZGVzOiBOb2RlW10gPSBbXTtcbn1cblxuLyoqXG4gKiBUZW5zb3IgcmVwcmVzZW50cyB0aGUgb3V0cHV0IG9mIGFuIG9wZXJhdGlvbiBub2RlIGluIHRoZSBncmFwaC5cbiAqIFRlbnNvcnMgaGF2ZSBubyBkYXRhIGFzc29jaWF0ZWQgd2l0aCB0aGVtLCBidXQgbWFpbnRhaW4gYSBzaGFwZSBhcnJheVxuICogdG8gZGV0ZXJtaW5lIG9wZXJhdGlvbiBjb21wYXRpYmlsaXR5LiBBbGwgZ3JhcGggbWV0aG9kcyB0aGF0IGNyZWF0ZSBncmFwaFxuICogb3BlcmF0aW9ucyByZXR1cm4gVGVuc29yIG9iamVjdHMsIHdoaWNoIGNhbiBiZSB0aG91Z2h0IG9mIGFzICdoYW5kbGVzJyB0b1xuICogb3BlcmF0aW9ucy5cbiAqL1xuZXhwb3J0IGNsYXNzIFRlbnNvciB7XG4gIG5vZGU6IE5vZGU7XG4gIGlkOiBudW1iZXI7XG4gIC8qKlxuICAgKiBAcGFyYW0gc2hhcGUgVGhlIHNoYXBlIG9mIHRoaXMgdGVuc29yLCBpbiBkaW1lbnNpb24gc2l6ZXMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgc2hhcGU6IG51bWJlcltdKSB7XG4gICAgdGhpcy5pZCA9IFRlbnNvci5uZXh0SUQrKztcbiAgfVxuICBwcml2YXRlIHN0YXRpYyBuZXh0SUQgPSAwO1xufVxuXG4vKipcbiAqIE5vZGUgaXMgdGhlIGNvbmNyZXRlIGJhc2UgY2xhc3MgZm9yIGFsbCBvcGVyYXRpb25zIGluIHRoZSBncmFwaC5cbiAqIFVzZXJzIGdlbmVyYWxseSBkb24ndCBuZWVkIHRvIGludGVyYWN0IGRpcmVjdGx5IHdpdGggTm9kZSBpbnN0YW5jZXMsIGJ1dCB0aGV5XG4gKiBhcmUgcHJvdmlkZWQgZm9yIGluZm9ybWF0aW9uYWwgYW5kIGludHJvc3BlY3Rpb24gcHVycG9zZXMuXG4gKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTm9kZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0gZ3JhcGggVGhlIGdyYXBoIGNvbnRhaW5pbmcgdGhpcyBub2RlXG4gICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoaXMgbm9kZVxuICAgKiBAcGFyYW0gaW5wdXRzIEEgZGljdGlvbmFyeSBvZiBuYW1lZCBUZW5zb3JzIHRoYXQgY29tcHJpc2UgdGhpcyBub2RlJ3NcbiAgICogaW5wdXRzLlxuICAgKiBAcGFyYW0gb3V0cHV0IFRoaXMgbm9kZSdzIG91dHB1dCBUZW5zb3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgcHVibGljIGdyYXBoOiBHcmFwaCwgcHVibGljIG5hbWU6IHN0cmluZyxcbiAgICAgIHB1YmxpYyBpbnB1dHM6IHtbbmFtZTogc3RyaW5nXTogVGVuc29yfSwgcHVibGljIG91dHB1dDogVGVuc29yKSB7XG4gICAgdGhpcy5pZCA9IE5vZGUubmV4dElEKys7XG4gICAgb3V0cHV0Lm5vZGUgPSB0aGlzO1xuICB9XG4gIGFic3RyYWN0IHZhbGlkYXRlKCk6IHZvaWQ7XG4gIGlkOiBudW1iZXI7XG4gIHByaXZhdGUgc3RhdGljIG5leHRJRCA9IDA7XG59XG5cbi8qKlxuICogVmFyaWFibGVOb2RlIHJlcHJlc2VudHMgYSB2YXJpYWJsZSwgYSB1c2VyLXByb3ZpZGVkIE5EQXJyYXkgdGhhdCdzXG4gKiBhZGp1c3RlZCBkdXJpbmcgYmFja3Byb3BhZ2F0aW9uIHRyYWluaW5nLlxuICpcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIFZhcmlhYmxlTm9kZSBleHRlbmRzIE5vZGUge1xuICBjb25zdHJ1Y3RvcihncmFwaDogR3JhcGgsIG5hbWU6IHN0cmluZywgcHVibGljIGRhdGE6IE5EQXJyYXkpIHtcbiAgICBzdXBlcihncmFwaCwgbmFtZSwge30sIG5ldyBUZW5zb3IoZGF0YS5zaGFwZSkpO1xuICB9XG4gIHZhbGlkYXRlKCkge1xuICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICB0aGlzLmRhdGEgIT0gbnVsbCxcbiAgICAgICAgJ0Vycm9yIGFkZGluZyB2YXJpYWJsZSBvcDogRGF0YSBmb3IgdmFyaWFibGUgXFwnJyArIHRoaXMubmFtZSArXG4gICAgICAgICAgICAnXFwnIGlzIG51bGwgb3IgdW5kZWZpbmVkJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBQbGFjZWhvbGRlck5vZGUgcmVwcmVzZW50cyBhIHBsYWNlaG9sZGVyLCBhIHVzZXItcHJvdmlkZWQgTkRBcnJheVxuICogdGhhdCdzIHVzZWQgYXMgaW1tdXRhYmxlIGlucHV0IGR1cmluZyBpbmZlcmVuY2UgYW5kIHRyYWluaW5nLlxuICpcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIFBsYWNlaG9sZGVyTm9kZSBleHRlbmRzIE5vZGUge1xuICBjb25zdHJ1Y3RvcihncmFwaDogR3JhcGgsIG5hbWU6IHN0cmluZywgc2hhcGU6IG51bWJlcltdKSB7XG4gICAgc3VwZXIoZ3JhcGgsIG5hbWUsIHt9LCBuZXcgVGVuc29yKHNoYXBlKSk7XG4gIH1cbiAgdmFsaWRhdGUoKSB7fVxufVxuXG4vKipcbiAqIENvbnN0YW50Tm9kZSByZXByZXNlbnRzIGEgY29uc3RhbnQgdmFsdWUgaW4gdGhlIGdyYXBoLlxuICpcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbnN0YW50Tm9kZSBleHRlbmRzIE5vZGUge1xuICBjb25zdHJ1Y3RvcihncmFwaDogR3JhcGgsIHB1YmxpYyBkYXRhOiBOREFycmF5KSB7XG4gICAgc3VwZXIoZ3JhcGgsICdDb25zdGFudCcsIHt9LCBuZXcgVGVuc29yKGRhdGEuc2hhcGUpKTtcbiAgfVxuICB2YWxpZGF0ZSgpIHtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgdGhpcy5kYXRhICE9IG51bGwsXG4gICAgICAgICdFcnJvciBhZGRpbmcgY29uc3RhbnQ6IGRhdGEgZm9yIHBsYWNlaG9sZGVyIFxcJycgKyB0aGlzLm5hbWUgK1xuICAgICAgICAgICAgJ1xcJyBpcyBudWxsIG9yIHVuZGVmaW5lZCcpO1xuICB9XG59XG5cbi8qKlxuICogUmVzaGFwZU5vZGUgcmVwcmVzZW50cyBhIHJlc2hhcGUgb3BlcmF0aW9uIGluIHRoZSBncmFwaC5cbiAqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBSZXNoYXBlTm9kZSBleHRlbmRzIE5vZGUge1xuICBzdGF0aWMgcmVhZG9ubHkgWCA9ICd4JztcbiAgY29uc3RydWN0b3IoXG4gICAgICBncmFwaDogR3JhcGgsIHB1YmxpYyBuYW1lOiBzdHJpbmcsIHByaXZhdGUgeDogVGVuc29yLFxuICAgICAgcHJpdmF0ZSBzaGFwZTogbnVtYmVyW10pIHtcbiAgICBzdXBlcihncmFwaCwgbmFtZSwge3h9LCBuZXcgVGVuc29yKHNoYXBlKSk7XG4gIH1cbiAgdmFsaWRhdGUoKSB7XG4gICAgY29uc3QgeFNpemUgPSB1dGlsLnNpemVGcm9tU2hhcGUodGhpcy54LnNoYXBlKTtcbiAgICBjb25zdCBzaGFwZVNpemUgPSB1dGlsLnNpemVGcm9tU2hhcGUodGhpcy5zaGFwZSk7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIHhTaXplID09PSBzaGFwZVNpemUsXG4gICAgICAgICdFcnJvciBtYWtpbmcgcmVzaGFwZSBvcGVyYXRpb246IGlucHV0IFRlbnNvciB0byByZXNoYXBlIFxcJycgK1xuICAgICAgICAgICAgdGhpcy5uYW1lICsgJ1xcJyBvZiBzaGFwZSAoJyArIHRoaXMueC5zaGFwZSArXG4gICAgICAgICAgICAnKSBkb2VzIG5vdCBtYXRjaCBzaXplIG9mIHJlcXVlc3RlZCBzaGFwZSAnICsgdGhpcy5zaGFwZSArICcuJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBMaW5lYXJDb21iaW5hdGlvbk5vZGUgcmVwcmVzZW50cyBhIGxpbmVhciBjb21iaW5hdGlvbiBvZiB0d28gdGVuc29ycy5cbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIEZ1c2VkTGluZWFyQ29tYmluYXRpb25Ob2RlIGV4dGVuZHMgTm9kZSB7XG4gIHN0YXRpYyByZWFkb25seSBUMSA9ICd0MSc7XG4gIHN0YXRpYyByZWFkb25seSBUMiA9ICd0Mic7XG4gIHN0YXRpYyByZWFkb25seSBDMSA9ICdjMSc7XG4gIHN0YXRpYyByZWFkb25seSBDMiA9ICdjMic7XG4gIGNvbnN0cnVjdG9yKFxuICAgICAgZ3JhcGg6IEdyYXBoLCBwcml2YXRlIHQxOiBUZW5zb3IsIHByaXZhdGUgdDI6IFRlbnNvciwgcHJpdmF0ZSBjMTogVGVuc29yLFxuICAgICAgcHJpdmF0ZSBjMjogVGVuc29yKSB7XG4gICAgc3VwZXIoZ3JhcGgsICdMaW5lYXIgQ29tYmluYXRpb24nLCB7dDEsIHQyLCBjMSwgYzJ9LCBuZXcgVGVuc29yKHQxLnNoYXBlKSk7XG4gIH1cblxuICB2YWxpZGF0ZSgpIHtcbiAgICB1dGlsLmFzc2VydFNoYXBlc01hdGNoKHRoaXMudDEuc2hhcGUsIHRoaXMudDIuc2hhcGUpO1xuICAgIGlmICghdXRpbC5pc1NjYWxhclNoYXBlKHRoaXMuYzEuc2hhcGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ0Vycm9yIGFkZGluZyBmdXNlZExpbmVhckNvbWJpbmF0aW9uOiBjMSBpcyBub3QgYSBzY2FsYXIsIGdvdCAnICtcbiAgICAgICAgICAnc2hhcGU6ICcgKyB0aGlzLmMxLnNoYXBlKTtcbiAgICB9XG4gICAgaWYgKCF1dGlsLmlzU2NhbGFyU2hhcGUodGhpcy5jMi5zaGFwZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnRXJyb3IgYWRkaW5nIGZ1c2VkTGluZWFyQ29tYmluYXRpb246IGMyIGlzIG5vdCBhIHNjYWxhciwgZ290ICcgK1xuICAgICAgICAgICdzaGFwZTogJyArIHRoaXMuYzIuc2hhcGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIEFkZE5vZGUgZXh0ZW5kcyBOb2RlIHtcbiAgc3RhdGljIHJlYWRvbmx5IFQxID0gJ3QxJztcbiAgc3RhdGljIHJlYWRvbmx5IFQyID0gJ3QyJztcblxuICBjb25zdHJ1Y3RvcihncmFwaDogR3JhcGgsIHByaXZhdGUgdDE6IFRlbnNvciwgcHJpdmF0ZSB0MjogVGVuc29yKSB7XG4gICAgc3VwZXIoXG4gICAgICAgIGdyYXBoLCAnQWRkJywge3QxLCB0Mn0sXG4gICAgICAgIG5ldyBUZW5zb3IodXRpbC5zaXplRnJvbVNoYXBlKHQxLnNoYXBlKSA9PT0gMSA/IHQyLnNoYXBlIDogdDEuc2hhcGUpKTtcbiAgfVxuXG4gIHZhbGlkYXRlKCkge1xuICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICB1dGlsLnNpemVGcm9tU2hhcGUodGhpcy50MS5zaGFwZSkgPT09IDEgfHxcbiAgICAgICAgICAgIHV0aWwuc2l6ZUZyb21TaGFwZSh0aGlzLnQyLnNoYXBlKSA9PT0gMSB8fFxuICAgICAgICAgICAgdXRpbC5hcnJheXNFcXVhbCh0aGlzLnQxLnNoYXBlLCB0aGlzLnQyLnNoYXBlKSxcbiAgICAgICAgJ0Vycm9yIGFkZGluZyBhZGQgb3BlcmF0aW9uIG9wOiBvbmUgb2YgaW5wdXRzIG11c3QgYmUgc2NhbGFyIG9yIHRoZSAnICtcbiAgICAgICAgICAgICdzaGFwZXMgJyArIHRoaXMudDEuc2hhcGUgKyAnIGFuZCAnICsgdGhpcy50Mi5zaGFwZSArXG4gICAgICAgICAgICAnIG11c3QgbWF0Y2guJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBTdWJ0cmFjdE5vZGUgZXh0ZW5kcyBOb2RlIHtcbiAgc3RhdGljIHJlYWRvbmx5IFQxID0gJ3QxJztcbiAgc3RhdGljIHJlYWRvbmx5IFQyID0gJ3QyJztcblxuICBjb25zdHJ1Y3RvcihncmFwaDogR3JhcGgsIHByaXZhdGUgdDE6IFRlbnNvciwgcHJpdmF0ZSB0MjogVGVuc29yKSB7XG4gICAgc3VwZXIoXG4gICAgICAgIGdyYXBoLCAnU3VidHJhY3QnLCB7dDEsIHQyfSxcbiAgICAgICAgbmV3IFRlbnNvcih1dGlsLnNpemVGcm9tU2hhcGUodDEuc2hhcGUpID09PSAxID8gdDIuc2hhcGUgOiB0MS5zaGFwZSkpO1xuICB9XG5cbiAgdmFsaWRhdGUoKSB7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIHV0aWwuc2l6ZUZyb21TaGFwZSh0aGlzLnQxLnNoYXBlKSA9PT0gMSB8fFxuICAgICAgICAgICAgdXRpbC5zaXplRnJvbVNoYXBlKHRoaXMudDIuc2hhcGUpID09PSAxIHx8XG4gICAgICAgICAgICB1dGlsLmFycmF5c0VxdWFsKHRoaXMudDEuc2hhcGUsIHRoaXMudDIuc2hhcGUpLFxuICAgICAgICAnRXJyb3IgYWRkaW5nIHN1YnRyYWN0IG9wOiBvbmUgb2YgaW5wdXRzIG11c3QgYmUgc2NhbGFyIG9yIHRoZSAnICtcbiAgICAgICAgICAgICdzaGFwZXMgJyArIHRoaXMudDEuc2hhcGUgKyAnIGFuZCAnICsgdGhpcy50Mi5zaGFwZSArXG4gICAgICAgICAgICAnIG11c3QgbWF0Y2guJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBNdWx0aXBseU5vZGUgZXh0ZW5kcyBOb2RlIHtcbiAgc3RhdGljIHJlYWRvbmx5IFQxID0gJ3QxJztcbiAgc3RhdGljIHJlYWRvbmx5IFQyID0gJ3QyJztcblxuICBjb25zdHJ1Y3RvcihncmFwaDogR3JhcGgsIHByaXZhdGUgdDE6IFRlbnNvciwgcHJpdmF0ZSB0MjogVGVuc29yKSB7XG4gICAgc3VwZXIoXG4gICAgICAgIGdyYXBoLCAnTXVsdGlwbHknLCB7dDEsIHQyfSxcbiAgICAgICAgbmV3IFRlbnNvcih1dGlsLnNpemVGcm9tU2hhcGUodDEuc2hhcGUpID09PSAxID8gdDIuc2hhcGUgOiB0MS5zaGFwZSkpO1xuICB9XG5cbiAgdmFsaWRhdGUoKSB7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIHV0aWwuc2l6ZUZyb21TaGFwZSh0aGlzLnQxLnNoYXBlKSA9PT0gMSB8fFxuICAgICAgICAgICAgdXRpbC5zaXplRnJvbVNoYXBlKHRoaXMudDIuc2hhcGUpID09PSAxIHx8XG4gICAgICAgICAgICB1dGlsLmFycmF5c0VxdWFsKHRoaXMudDEuc2hhcGUsIHRoaXMudDIuc2hhcGUpLFxuICAgICAgICAnRXJyb3IgYWRkaW5nIG11bHRpcGx5IG9wOiBvbmUgb2YgaW5wdXRzIG11c3QgYmUgc2NhbGFyIG9yIHRoZSAnICtcbiAgICAgICAgICAgICdzaGFwZXMgJyArIHRoaXMudDEuc2hhcGUgKyAnIGFuZCAnICsgdGhpcy50Mi5zaGFwZSArXG4gICAgICAgICAgICAnIG11c3QgbWF0Y2guJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBEaXZpZGVOb2RlIGV4dGVuZHMgTm9kZSB7XG4gIHN0YXRpYyByZWFkb25seSBUMSA9ICd0MSc7XG4gIHN0YXRpYyByZWFkb25seSBUMiA9ICd0Mic7XG5cbiAgY29uc3RydWN0b3IoZ3JhcGg6IEdyYXBoLCBwcml2YXRlIHQxOiBUZW5zb3IsIHByaXZhdGUgdDI6IFRlbnNvcikge1xuICAgIHN1cGVyKFxuICAgICAgICBncmFwaCwgJ0RpdmlkZScsIHt0MSwgdDJ9LFxuICAgICAgICBuZXcgVGVuc29yKHV0aWwuc2l6ZUZyb21TaGFwZSh0MS5zaGFwZSkgPT09IDEgPyB0Mi5zaGFwZSA6IHQxLnNoYXBlKSk7XG4gIH1cblxuICB2YWxpZGF0ZSgpIHtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgdXRpbC5zaXplRnJvbVNoYXBlKHRoaXMudDEuc2hhcGUpID09PSAxIHx8XG4gICAgICAgICAgICB1dGlsLnNpemVGcm9tU2hhcGUodGhpcy50Mi5zaGFwZSkgPT09IDEgfHxcbiAgICAgICAgICAgIHV0aWwuYXJyYXlzRXF1YWwodGhpcy50MS5zaGFwZSwgdGhpcy50Mi5zaGFwZSksXG4gICAgICAgICdFcnJvciBhZGRpbmcgZGl2aWRlIG9wOiBvbmUgb2YgaW5wdXRzIG11c3QgYmUgc2NhbGFyIG9yIHRoZSAnICtcbiAgICAgICAgICAgICdzaGFwZXMgJyArIHRoaXMudDEuc2hhcGUgKyAnIGFuZCAnICsgdGhpcy50Mi5zaGFwZSArXG4gICAgICAgICAgICAnIG11c3QgbWF0Y2guJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBSZWR1Y2VTdW1Ob2RlIGV4dGVuZHMgTm9kZSB7XG4gIHN0YXRpYyByZWFkb25seSBYID0gJ3gnO1xuXG4gIGNvbnN0cnVjdG9yKGdyYXBoOiBHcmFwaCwgeDogVGVuc29yKSB7XG4gICAgc3VwZXIoZ3JhcGgsICdSZWR1Y2VTdW0nLCB7eH0sIG5ldyBUZW5zb3IoW10pKTtcbiAgfVxuXG4gIHZhbGlkYXRlKCkge31cbn1cblxuLyoqXG4gKiBDb25jYXQzRE5vZGUgcmVwcmVzZW50cyBhIDNEIGNvbmNhdGVuYXRpb24gb2YgdHdvIHRlbnNvcnMgYWxvbmcgYW4gYXhpcy5cbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbmNhdDNETm9kZSBleHRlbmRzIE5vZGUge1xuICBzdGF0aWMgcmVhZG9ubHkgWDEgPSAneDEnO1xuICBzdGF0aWMgcmVhZG9ubHkgWDIgPSAneDInO1xuICBzdGF0aWMgcmVhZG9ubHkgQVhJUyA9ICdheGlzJztcbiAgY29uc3RydWN0b3IoXG4gICAgICBncmFwaDogR3JhcGgsIHByaXZhdGUgeDE6IFRlbnNvciwgcHJpdmF0ZSB4MjogVGVuc29yLFxuICAgICAgcHVibGljIGF4aXM6IG51bWJlcikge1xuICAgIHN1cGVyKFxuICAgICAgICBncmFwaCwgJ0NvbmNhdDNEJywge3gxLCB4Mn0sXG4gICAgICAgIG5ldyBUZW5zb3IoY29uY2F0M2RfdXRpbC5jb21wdXRlQ29uY2F0M0RPdXRwdXRTaGFwZShcbiAgICAgICAgICAgIHgxLnNoYXBlLCB4Mi5zaGFwZSwgYXhpcykpKTtcbiAgfVxuICB2YWxpZGF0ZSgpIHtcbiAgICBjb25jYXQzZF91dGlsLmFzc2VydENvbmNhdDNEU2hhcGVzTWF0Y2goXG4gICAgICAgIHRoaXMueDEuc2hhcGUsIHRoaXMueDIuc2hhcGUsIHRoaXMuYXhpcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0TWF0TXVsT3V0cHV0U2hhcGUoeDFTaGFwZTogbnVtYmVyW10sIHgyU2hhcGU6IG51bWJlcltdKTogbnVtYmVyW10ge1xuICBpZiAoeDFTaGFwZS5sZW5ndGggPT09IDEgJiYgeDJTaGFwZS5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gWzFdO1xuICB9IGVsc2UgaWYgKHgxU2hhcGUubGVuZ3RoID09PSAxICYmIHgyU2hhcGUubGVuZ3RoID09PSAyKSB7XG4gICAgcmV0dXJuIFt4MlNoYXBlWzFdXTtcbiAgfSBlbHNlIGlmICh4MVNoYXBlLmxlbmd0aCA9PT0gMiAmJiB4MlNoYXBlLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBbeDFTaGFwZVswXV07XG4gIH1cbiAgcmV0dXJuIFt4MVNoYXBlWzBdLCB4MlNoYXBlWzFdXTtcbn1cblxuLyoqXG4gKiBNYXRNdWxOb2RlIHJlcHJlc2VudHMgYSBmdWxseSBjb25uZWN0ZWQgbGF5ZXIgaW4gdGhlIGdyYXBoLlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgTWF0TXVsTm9kZSBleHRlbmRzIE5vZGUge1xuICBzdGF0aWMgcmVhZG9ubHkgWDEgPSAneDEnO1xuICBzdGF0aWMgcmVhZG9ubHkgWDIgPSAneDInO1xuICBjb25zdHJ1Y3RvcihncmFwaDogR3JhcGgsIHByaXZhdGUgeDE6IFRlbnNvciwgcHJpdmF0ZSB4MjogVGVuc29yKSB7XG4gICAgc3VwZXIoXG4gICAgICAgIGdyYXBoLCAnTWF0TXVsJywge3gxLCB4Mn0sXG4gICAgICAgIG5ldyBUZW5zb3IoZ2V0TWF0TXVsT3V0cHV0U2hhcGUoeDEuc2hhcGUsIHgyLnNoYXBlKSkpO1xuICB9XG5cbiAgdmFsaWRhdGUoKSB7XG4gICAgaWYgKHRoaXMueDEuc2hhcGUubGVuZ3RoID09PSAyICYmIHRoaXMueDIuc2hhcGUubGVuZ3RoID09PSAyKSB7XG4gICAgICB1dGlsLmFzc2VydChcbiAgICAgICAgICB0aGlzLngxLnNoYXBlWzFdID09PSB0aGlzLngyLnNoYXBlWzBdLFxuICAgICAgICAgICdFcnJvciBhZGRpbmcgbWF0bXVsIG9wOiBpbm5lciBzaGFwZXMgb2YgbWF0cmljZXMgd2l0aCBzaGFwZXMgJyArXG4gICAgICAgICAgICAgIHRoaXMueDEuc2hhcGUgKyAnIGFuZCAnICsgdGhpcy54Mi5zaGFwZSArICcgbXVzdCBtYXRjaC4nKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMueDEuc2hhcGUubGVuZ3RoID09PSAyICYmIHRoaXMueDIuc2hhcGUubGVuZ3RoID09PSAxKSB7XG4gICAgICB1dGlsLmFzc2VydChcbiAgICAgICAgICB0aGlzLngxLnNoYXBlWzFdID09PSB0aGlzLngyLnNoYXBlWzBdLFxuICAgICAgICAgICdFcnJvciBhZGRpbmcgbWF0bXVsIG9wOiBzZWNvbmQgZGltZW5zaW9uIG9mIG1hdHJpeCB3aXRoIHNoYXBlICcgK1xuICAgICAgICAgICAgICB0aGlzLngxLnNoYXBlICsgJyBtdXN0IG1hdGNoIHNpemUgb2YgdmVjdG9yIHdpdGggc2hhcGUgJyArXG4gICAgICAgICAgICAgIHRoaXMueDIuc2hhcGUgKyAnLicpO1xuICAgIH0gZWxzZSBpZiAodGhpcy54MS5zaGFwZS5sZW5ndGggPT09IDEgJiYgdGhpcy54Mi5zaGFwZS5sZW5ndGggPT09IDIpIHtcbiAgICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICAgIHRoaXMueDEuc2hhcGVbMF0gPT09IHRoaXMueDIuc2hhcGVbMF0sXG4gICAgICAgICAgJ0Vycm9yIGFkZGluZyBtYXRtdWwgb3A6IHNpemUgb2YgdmVjdG9yIHdpdGggc2hhcGUgJyArIHRoaXMueDEuc2hhcGUgK1xuICAgICAgICAgICAgICAnIG11c3QgbWF0Y2ggZmlyc3QgZGltZW5zaW9uIG9mIG1hdHJpeCB3aXRoICcgK1xuICAgICAgICAgICAgICAnc2hhcGUgJyArIHRoaXMueDIuc2hhcGUgKyAnLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ0Vycm9yIGFkZGluZyBtYXRtdWwgb3A6IGlucHV0cyBtdXN0IGJlIHZlY3RvcnMgb3IgbWF0cmljZXMuJyk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ29udm9sdXRpb24yRE5vZGUgcmVwcmVzZW50cyBhIDJkIGNvbnZvbHV0aW9uIG9wZXJhdGlvbiBpbiB0aGUgZ3JhcGguXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBDb252b2x1dGlvbjJETm9kZSBleHRlbmRzIE5vZGUge1xuICBzdGF0aWMgcmVhZG9ubHkgWCA9ICd4JztcbiAgc3RhdGljIHJlYWRvbmx5IFcgPSAndyc7XG4gIHN0YXRpYyByZWFkb25seSBCID0gJ2InO1xuICBjb25zdHJ1Y3RvcihcbiAgICAgIGdyYXBoOiBHcmFwaCwgcHJpdmF0ZSB4OiBUZW5zb3IsIHByaXZhdGUgdzogVGVuc29yLCBwcml2YXRlIGI6IFRlbnNvcixcbiAgICAgIHB1YmxpYyBmaWVsZFNpemU6IG51bWJlciwgcHVibGljIG91dHB1dERlcHRoOiBudW1iZXIsIHB1YmxpYyBzdHJpZGUgPSAxLFxuICAgICAgcHVibGljIHplcm9QYWQ/OiBudW1iZXIpIHtcbiAgICBzdXBlcihcbiAgICAgICAgZ3JhcGgsICdDb252b2x1dGlvbiAyRCcsIHt4LCB3LCBifSxcbiAgICAgICAgbmV3IFRlbnNvcihjb252X3V0aWwuY29tcHV0ZU91dHB1dFNoYXBlM0QoXG4gICAgICAgICAgICB4LnNoYXBlIGFzIFtudW1iZXIsIG51bWJlciwgbnVtYmVyXSwgZmllbGRTaXplLCBvdXRwdXREZXB0aCwgc3RyaWRlLFxuICAgICAgICAgICAgemVyb1BhZCkpKTtcbiAgfVxuICB2YWxpZGF0ZSgpIHtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgdGhpcy54LnNoYXBlLmxlbmd0aCA9PT0gMyxcbiAgICAgICAgJ0Vycm9yIGFkZGluZyBjb252MmQgb3A6IGlucHV0IG11c3QgYmUgb2YgcmFuayAzLCBidXQgZ290IHNoYXBlOiAnICtcbiAgICAgICAgICAgIHRoaXMueC5zaGFwZSArICcuJyk7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIHRoaXMudy5zaGFwZS5sZW5ndGggPT09IDQsXG4gICAgICAgICdFcnJvciBhZGRpbmcgY29udjJkIG9wOiB3ZWlnaHRzIG11c3QgYmUgb2YgcmFuayA0LCBidXQgZ290IHNoYXBlOiAnICtcbiAgICAgICAgICAgIHRoaXMudy5zaGFwZSArICcuJyk7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIHRoaXMuYi5zaGFwZS5sZW5ndGggPT09IDEsXG4gICAgICAgICdFcnJvciBhZGRpbmcgY29udjJkIG9wOiBiaWFzZXMgbXVzdCBiZSBvZiByYW5rIDEsIGJ1dCBnb3Qgc2hhcGU6ICcgK1xuICAgICAgICAgICAgdGhpcy5iLnNoYXBlICsgJy4nKTtcblxuICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICB0aGlzLnguc2hhcGVbMl0gPT09IHRoaXMudy5zaGFwZVsyXSxcbiAgICAgICAgJ0Vycm9yIGFkZGluZyBjb252MmQgb3A6IGRlcHRoIG9mIGlucHV0ICgnICsgdGhpcy54LnNoYXBlWzJdICtcbiAgICAgICAgICAgICcpIG11c3QgbWF0Y2ggaW5wdXQgZGVwdGggZm9yIHdlaWdodHMgKCcgKyB0aGlzLncuc2hhcGVbMl0gKyAnKS4nKTtcbiAgfVxufVxuXG4vKipcbiAqIE1heFBvb2xOb2RlIHJlcHJlc2VudHMgYSAyZCBtYXggcG9vbCBvcGVyYXRpb24gaW4gdGhlIGdyYXBoLlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgTWF4UG9vbE5vZGUgZXh0ZW5kcyBOb2RlIHtcbiAgc3RhdGljIHJlYWRvbmx5IFggPSAneCc7XG4gIGNvbnN0cnVjdG9yKFxuICAgICAgZ3JhcGg6IEdyYXBoLCBwcml2YXRlIHg6IFRlbnNvciwgcHVibGljIGZpZWxkU2l6ZTogbnVtYmVyLFxuICAgICAgcHVibGljIHN0cmlkZSA9IDEsIHB1YmxpYyB6ZXJvUGFkPzogbnVtYmVyKSB7XG4gICAgc3VwZXIoXG4gICAgICAgIGdyYXBoLCAnTWF4IHBvb2wnLCB7eH0sXG4gICAgICAgIG5ldyBUZW5zb3IoY29udl91dGlsLmNvbXB1dGVPdXRwdXRTaGFwZTNEKFxuICAgICAgICAgICAgeC5zaGFwZSBhcyBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0sIGZpZWxkU2l6ZSwgeC5zaGFwZVsyXSwgc3RyaWRlLFxuICAgICAgICAgICAgemVyb1BhZCkpKTtcbiAgfVxuICB2YWxpZGF0ZSgpIHtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgdGhpcy54LnNoYXBlLmxlbmd0aCA9PT0gMyxcbiAgICAgICAgJ0Vycm9yIGFkZGluZyBtYXhQb29sIG9wOiBpbnB1dCBtdXN0IGJlIG9mIHJhbmsgMywgYnV0IGdvdCBzaGFwZTogJyArXG4gICAgICAgICAgICB0aGlzLnguc2hhcGUgKyAnLicpO1xuICB9XG59XG5cbi8qKlxuICogUmVMVU5vZGUgcmVwcmVzZW50cyBhIFJlTFUgb3BlcmF0aW9uIGluIHRoZSBncmFwaC5cbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIFJlTFVOb2RlIGV4dGVuZHMgTm9kZSB7XG4gIHN0YXRpYyByZWFkb25seSBYID0gJ3gnO1xuICBjb25zdHJ1Y3RvcihncmFwaDogR3JhcGgsIHg6IFRlbnNvcikge1xuICAgIHN1cGVyKGdyYXBoLCAnUmVMVScsIHt4fSwgbmV3IFRlbnNvcih4LnNoYXBlKSk7XG4gIH1cbiAgdmFsaWRhdGUoKSB7fVxufVxuXG4vKipcbiAqIEV4cE5vZGUgcmVwcmVzZW50cyBhIEV4cG9uZW50aWF0aW9uIG9wZXJhdGlvbiBpbiB0aGUgZ3JhcGguXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBFeHBOb2RlIGV4dGVuZHMgTm9kZSB7XG4gIHN0YXRpYyByZWFkb25seSBYID0gJ3gnO1xuICBjb25zdHJ1Y3RvcihncmFwaDogR3JhcGgsIHg6IFRlbnNvcikge1xuICAgIHN1cGVyKGdyYXBoLCAnRXhwJywge3h9LCBuZXcgVGVuc29yKHguc2hhcGUpKTtcbiAgfVxuICB2YWxpZGF0ZSgpIHt9XG59XG5cbi8qKlxuICogTG9nTm9kZSByZXByZXNlbnRzIGEgRXhwb25lbnRpYXRpb24gb3BlcmF0aW9uIGluIHRoZSBncmFwaC5cbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIExvZ05vZGUgZXh0ZW5kcyBOb2RlIHtcbiAgc3RhdGljIHJlYWRvbmx5IFggPSAneCc7XG4gIGNvbnN0cnVjdG9yKGdyYXBoOiBHcmFwaCwgeDogVGVuc29yKSB7XG4gICAgc3VwZXIoZ3JhcGgsICdMb2cnLCB7eH0sIG5ldyBUZW5zb3IoeC5zaGFwZSkpO1xuICB9XG4gIHZhbGlkYXRlKCkge31cbn1cblxuLyoqXG4gKiBUYW5ITm9kZSByZXByZXNlbnRzIGEgdGFuaCBvcGVyYXRpb24gaW4gdGhlIGdyYXBoLlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgVGFuSE5vZGUgZXh0ZW5kcyBOb2RlIHtcbiAgc3RhdGljIHJlYWRvbmx5IFggPSAneCc7XG4gIGNvbnN0cnVjdG9yKGdyYXBoOiBHcmFwaCwgeDogVGVuc29yKSB7XG4gICAgc3VwZXIoZ3JhcGgsICdUYW5IJywge3h9LCBuZXcgVGVuc29yKHguc2hhcGUpKTtcbiAgfVxuICB2YWxpZGF0ZSgpIHt9XG59XG5cbi8qKlxuICogU2lnbW9pZE5vZGUgcmVwcmVzZW50cyBhIHNpZ21vaWQgb3BlcmF0aW9uIGluIHRoZSBncmFwaC5cbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIFNpZ21vaWROb2RlIGV4dGVuZHMgTm9kZSB7XG4gIHN0YXRpYyByZWFkb25seSBYID0gJ3gnO1xuICBjb25zdHJ1Y3RvcihncmFwaDogR3JhcGgsIHg6IFRlbnNvcikge1xuICAgIHN1cGVyKGdyYXBoLCAnU2lnbW9pZCcsIHt4fSwgbmV3IFRlbnNvcih4LnNoYXBlKSk7XG4gIH1cbiAgdmFsaWRhdGUoKSB7fVxufVxuXG4vKipcbiAqIFNxdWFyZSBub2RlIHJlcHJlc2VudHMgYW4gZWxlbWVudC13aXNlIHNxdWFyZSBvcGVyYXRpb24gaW4gdGhlIGdyYXBoLlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgU3F1YXJlTm9kZSBleHRlbmRzIE5vZGUge1xuICBzdGF0aWMgcmVhZG9ubHkgWCA9ICd4JztcbiAgY29uc3RydWN0b3IoZ3JhcGg6IEdyYXBoLCB4OiBUZW5zb3IpIHtcbiAgICBzdXBlcihncmFwaCwgJ1NxdWFyZScsIHt4fSwgbmV3IFRlbnNvcih4LnNoYXBlKSk7XG4gIH1cbiAgdmFsaWRhdGUoKSB7fVxufVxuXG4vKipcbiAqIFNvZnRtYXhDcm9zc0VudHJvcHlDb3N0Tm9kZSByZXByZXNlbnRzIGEgc29mdG1heCBjcm9zcy1lbnRyb3B5IGNvc3Qgb3BlcmF0aW9uXG4gKiBpbiB0aGUgZ3JhcGguXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBTb2Z0bWF4Q3Jvc3NFbnRyb3B5Q29zdE5vZGUgZXh0ZW5kcyBOb2RlIHtcbiAgc3RhdGljIHJlYWRvbmx5IFggPSAneCc7XG4gIHN0YXRpYyByZWFkb25seSBUQVJHRVQgPSAndGFyZ2V0JztcbiAgY29uc3RydWN0b3IoZ3JhcGg6IEdyYXBoLCBwcml2YXRlIHg6IFRlbnNvciwgcHJpdmF0ZSB0YXJnZXQ6IFRlbnNvcikge1xuICAgIHN1cGVyKGdyYXBoLCAnU29mdG1heENyb3NzRW50cm9weUNvc3QnLCB7eCwgdGFyZ2V0fSwgbmV3IFRlbnNvcihbXSkpO1xuICB9XG4gIHZhbGlkYXRlKCkge1xuICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICB1dGlsLmFycmF5c0VxdWFsKHRoaXMueC5zaGFwZSwgdGhpcy50YXJnZXQuc2hhcGUpLFxuICAgICAgICAnRXJyb3IgYWRkaW5nIHNvZnRtYXhDcm9zc0VudHJvcHlDb3N0IG9wOiB4IHNoYXBlICgnICsgdGhpcy54LnNoYXBlICtcbiAgICAgICAgICAgICcpIG11c3QgbWF0Y2ggdGFyZ2V0IHNoYXBlICgnICsgdGhpcy50YXJnZXQuc2hhcGUgKyAnKS4nKTtcbiAgfVxufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIFNvZnRtYXhOb2RlIGV4dGVuZHMgTm9kZSB7XG4gIHN0YXRpYyByZWFkb25seSBYID0gJ3gnO1xuXG4gIGNvbnN0cnVjdG9yKGdyYXBoOiBHcmFwaCwgcHJpdmF0ZSB4OiBUZW5zb3IpIHtcbiAgICBzdXBlcihncmFwaCwgJ1NvZnRtYXgnLCB7eH0sIG5ldyBUZW5zb3IoeC5zaGFwZSkpO1xuICB9XG4gIHZhbGlkYXRlKCkge1xuICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICB0aGlzLnguc2hhcGUubGVuZ3RoID09PSAxLFxuICAgICAgICAnVGhlIGlucHV0IHRvIGEgc29mdG1heCBtdXN0IGJlIGEgMS1EIHRlbnNvcicpO1xuICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICB0aGlzLnguc2hhcGVbMF0gPj0gMixcbiAgICAgICAgJ1RoZSBpbnB1dCB0byBhIHNvZnRtYXggbXVzdCBoYXZlIGF0IGxlYXN0IDIgdmFsdWVzJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBNZWFuU3F1YXJlZENvc3ROb2RlIHJlcHJlc2VudHMgYSBtZWFuIHNxdWFyZWQgY29zdCBvcGVyYXRpb25cbiAqIGluIHRoZSBncmFwaC5cbiAqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBNZWFuU3F1YXJlZENvc3ROb2RlIGV4dGVuZHMgTm9kZSB7XG4gIHN0YXRpYyByZWFkb25seSBMQUJFTCA9ICdsYWJlbCc7XG4gIHN0YXRpYyByZWFkb25seSBQUkVESUNUSU9OID0gJ3ByZWRpY3Rpb24nO1xuICBjb25zdHJ1Y3RvcihncmFwaDogR3JhcGgsIHByaXZhdGUgbGFiZWw6IFRlbnNvciwgcHJpdmF0ZSBwcmVkaWN0aW9uOiBUZW5zb3IpIHtcbiAgICBzdXBlcihncmFwaCwgJ01lYW4gU3F1YXJlZCBDb3N0Jywge2xhYmVsLCBwcmVkaWN0aW9ufSwgbmV3IFRlbnNvcihbXSkpO1xuICB9XG4gIHZhbGlkYXRlKCkge1xuICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICB1dGlsLmFycmF5c0VxdWFsKHRoaXMubGFiZWwuc2hhcGUsIHRoaXMucHJlZGljdGlvbi5zaGFwZSksXG4gICAgICAgICdFcnJvciBhZGRpbmcgbWVhblNxdWFyZWRDb3N0IG9wOiBsYWJlbCBzaGFwZSAoJyArIHRoaXMubGFiZWwuc2hhcGUgK1xuICAgICAgICAgICAgJykgbXVzdCBtYXRjaCBwcmVkaWN0aW9uIHNoYXBlICgnICsgdGhpcy5wcmVkaWN0aW9uLnNoYXBlICsgJykuJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBBcmdNYXhOb2RlIHJlcHJlc2VudHMgYW4gYXJnbWF4IG9wZXJhdGlvbiBpbiB0aGUgZ3JhcGguXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBBcmdNYXhOb2RlIGV4dGVuZHMgTm9kZSB7XG4gIHN0YXRpYyByZWFkb25seSBYID0gJ3gnO1xuICBjb25zdHJ1Y3RvcihncmFwaDogR3JhcGgsIHB1YmxpYyB4OiBUZW5zb3IpIHtcbiAgICBzdXBlcihncmFwaCwgJ0FyZ01heCcsIHt4fSwgbmV3IFRlbnNvcihbMV0pKTtcbiAgfVxuICB2YWxpZGF0ZSgpIHtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgdXRpbC5zaXplRnJvbVNoYXBlKHRoaXMueC5zaGFwZSkgPiAwLFxuICAgICAgICAnRXJyb3IgYWRkaW5nIGFyZ21heCBvcDogaW5wdXQgdGVuc29yIG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgZW50cnkuJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBBcmdNYXhFcXVhbHNOb2RlIHJlcHJlc2VudHMgYSBhcmdtYXggZXF1YWxzIG9wZXJhdGlvbiBpbiB0aGUgZ3JhcGguXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBBcmdNYXhFcXVhbHNOb2RlIGV4dGVuZHMgTm9kZSB7XG4gIHN0YXRpYyByZWFkb25seSBYMSA9ICd4MSc7XG4gIHN0YXRpYyByZWFkb25seSBYMiA9ICd4Mic7XG4gIGNvbnN0cnVjdG9yKGdyYXBoOiBHcmFwaCwgcHJpdmF0ZSB4MTogVGVuc29yLCBwcml2YXRlIHgyOiBUZW5zb3IpIHtcbiAgICBzdXBlcihncmFwaCwgJ0FyZ01heEVxdWFscycsIHt4MSwgeDJ9LCBuZXcgVGVuc29yKFsxXSkpO1xuICB9XG4gIHZhbGlkYXRlKCkge1xuICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICB1dGlsLmFycmF5c0VxdWFsKHRoaXMueDEuc2hhcGUsIHRoaXMueDIuc2hhcGUpLFxuICAgICAgICAnRXJyb3IgYWRkaW5nIEFyZ01heEVxdWFscyBvcDogeDEgc2hhcGUgKCcgKyB0aGlzLngxLnNoYXBlICtcbiAgICAgICAgICAgICcpIG11c3QgbWF0Y2ggeDIgc2hhcGUgKCcgKyB0aGlzLngyLnNoYXBlICsgJykuJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBTcGxpdCBub2RlcyBhcmUgdXNlZCB0byBhY2N1bXVsYXRlIGJhY2twcm9wIGRlcml2YXRpdmVzIHdoZW4gYSBub2RlJ3Mgb3V0cHV0XG4gKiB0ZW5zb3IgaXMgY29uc3VtZWQgYnkgbXVsdGlwbGUgbm9kZXMuXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBTcGxpdE5vZGUgZXh0ZW5kcyBOb2RlIHtcbiAgc3RhdGljIHJlYWRvbmx5IFggPSAneCc7XG5cbiAgb3V0cHV0czogVGVuc29yW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihncmFwaDogR3JhcGgsIHg6IFRlbnNvcikge1xuICAgIHN1cGVyKGdyYXBoLCAnU3BsaXROb2RlJywge3h9LCBuZXcgVGVuc29yKHguc2hhcGUpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYSBuZXcgY29uc3VtZXIgb2YgdGhpcyBzcGxpdCBub2RlLCBpLmUuIGEgbmV3IG5vZGUgdGhhdCB1c2VzIHRoZVxuICAgKiBub2RlJ3Mgb3V0cHV0IHRlbnNvci5cbiAgICovXG4gIGdldE5ld091dHB1dFRlbnNvcigpOiBUZW5zb3Ige1xuICAgIGNvbnN0IG91dHB1dCA9IG5ldyBUZW5zb3IodGhpcy5pbnB1dHNbU3BsaXROb2RlLlhdLnNoYXBlKTtcbiAgICBvdXRwdXQubm9kZSA9IHRoaXM7XG4gICAgdGhpcy5vdXRwdXRzLnB1c2gob3V0cHV0KTtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9XG4gIHZhbGlkYXRlKCkge31cbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCB0eXBlIEFycmF5RGF0YSA9XG4gICAgTkRBcnJheXxudW1iZXJ8bnVtYmVyW118bnVtYmVyW11bXXxudW1iZXJbXVtdW118bnVtYmVyW11bXVtdW107XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCB7R3JhcGgsIFRlbnNvcn0gZnJvbSAnLi9ncmFwaCc7XG5pbXBvcnQge0luaXRpYWxpemVyLCBWYXJpYW5jZVNjYWxpbmdJbml0aWFsaXplciwgWmVyb3NJbml0aWFsaXplcn0gZnJvbSAnLi9pbml0aWFsaXplcnMnO1xuaW1wb3J0IHtOREFycmF5fSBmcm9tICcuL21hdGgvbmRhcnJheSc7XG5cbi8qKlxuICogQSBsYXllcnMgc3VnYXIgY2xhc3MgYXJvdW5kIHRoZSBncmFwaCB0aGF0IGluaXRpYWxpemVzIHZhcmlhYmxlc1xuICogYXV0b21hdGljYWxseSBmb3IgbGF5ZXJzLlxuICovXG5leHBvcnQgY2xhc3MgR3JhcGhMYXllcnMge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGc6IEdyYXBoKSB7fVxuXG4gIGRlbnNlKFxuICAgICAgbmFtZTogc3RyaW5nLCB4OiBUZW5zb3IsIHVuaXRzOiBudW1iZXIsXG4gICAgICBhY3RpdmF0aW9uOiAoKHg6IFRlbnNvcikgPT4gVGVuc29yKXxudWxsID0gbnVsbCwgdXNlQmlhcyA9IHRydWUsXG4gICAgICBrZXJuZWxJbml0aWFsaXplcjogSW5pdGlhbGl6ZXIgPSBuZXcgVmFyaWFuY2VTY2FsaW5nSW5pdGlhbGl6ZXIoKSxcbiAgICAgIGJpYXNJbml0aWFsaXplcjogSW5pdGlhbGl6ZXIgPSBuZXcgWmVyb3NJbml0aWFsaXplcigpKSB7XG4gICAgY29uc3Qgd2VpZ2h0cyA9IHRoaXMuZy52YXJpYWJsZShcbiAgICAgICAgbmFtZSArICctd2VpZ2h0cycsXG4gICAgICAgIGtlcm5lbEluaXRpYWxpemVyLmluaXRpYWxpemUoW3guc2hhcGVbMF0sIHVuaXRzXSwgeC5zaGFwZVswXSwgdW5pdHMpKTtcblxuICAgIGxldCBvdXQgPSB0aGlzLmcubWF0bXVsKHgsIHdlaWdodHMpO1xuXG4gICAgaWYgKHVzZUJpYXMpIHtcbiAgICAgIGNvbnN0IGJpYXMgPSB0aGlzLmcudmFyaWFibGUoXG4gICAgICAgICAgbmFtZSArICctYmlhcycsXG4gICAgICAgICAgYmlhc0luaXRpYWxpemVyLmluaXRpYWxpemUoW3VuaXRzXSwgeC5zaGFwZVswXSwgdW5pdHMpKTtcbiAgICAgIG91dCA9IHRoaXMuZy5hZGQob3V0LCBiaWFzKTtcbiAgICB9XG5cbiAgICBpZiAoYWN0aXZhdGlvbiAhPSBudWxsKSB7XG4gICAgICBvdXQgPSBhY3RpdmF0aW9uKG91dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbiAgfVxufVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQgKiBhcyBkYXRhc2V0IGZyb20gJy4vZGF0YXNldCc7XG5pbXBvcnQge0dyYXBoLCBUZW5zb3J9IGZyb20gJy4vZ3JhcGgnO1xuaW1wb3J0IHtJbnB1dFByb3ZpZGVyfSBmcm9tICcuL2lucHV0X3Byb3ZpZGVyJztcbmltcG9ydCB7TkRBcnJheU1hdGh9IGZyb20gJy4vbWF0aC9tYXRoJztcbmltcG9ydCB7TkRBcnJheU1hdGhDUFV9IGZyb20gJy4vbWF0aC9tYXRoX2NwdSc7XG5pbXBvcnQge05EQXJyYXksIFNjYWxhcn0gZnJvbSAnLi9tYXRoL25kYXJyYXknO1xuaW1wb3J0IHtPcHRpbWl6ZXJ9IGZyb20gJy4vb3B0aW1pemVyJztcbmltcG9ydCB7Q29zdFJlZHVjdGlvbiwgRmVlZEVudHJ5LCBTZXNzaW9ufSBmcm9tICcuL3Nlc3Npb24nO1xuXG5jb25zdCBERUZBVUxUX0VWQUxfSU5URVJWQUxfTVMgPSAxNTAwO1xuY29uc3QgREVGQVVMVF9DT1NUX0lOVEVSVkFMX01TID0gNTAwO1xuY29uc3QgREVGQVVMVF9JTkZFUkVOQ0VfRVhBTVBMRV9JTlRFUlZBTF9NUyA9IDMwMDA7XG5cbmV4cG9ydCBpbnRlcmZhY2UgR3JhcGhSdW5uZXJFdmVudE9ic2VydmVyIHtcbiAgYmF0Y2hlc1RyYWluZWRDYWxsYmFjaz86ICh0b3RhbEJhdGNoZXNUcmFpbmVkOiBudW1iZXIpID0+IHZvaWQ7XG4gIGF2Z0Nvc3RDYWxsYmFjaz86IChhdmdDb3N0OiBTY2FsYXIpID0+IHZvaWQ7XG4gIG1ldHJpY0NhbGxiYWNrPzogKG1ldHJpYzogTkRBcnJheSkgPT4gdm9pZDtcbiAgaW5mZXJlbmNlRXhhbXBsZXNDYWxsYmFjaz86XG4gICAgICAoZmVlZHM6IEZlZWRFbnRyeVtdW10sIGluZmVyZW5jZVZhbHVlczogTkRBcnJheVtdKSA9PiB2b2lkO1xuICBpbmZlcmVuY2VFeGFtcGxlc1BlclNlY0NhbGxiYWNrPzogKGV4YW1wbGVzUGVyU2VjOiBudW1iZXIpID0+IHZvaWQ7XG4gIHRyYWluRXhhbXBsZXNQZXJTZWNDYWxsYmFjaz86IChleGFtcGxlc1BlclNlYzogbnVtYmVyKSA9PiB2b2lkO1xuICB0b3RhbFRpbWVDYWxsYmFjaz86ICh0b3RhbFRpbWVTZWM6IG51bWJlcikgPT4gdm9pZDtcbiAgZG9uZVRyYWluaW5nQ2FsbGJhY2s/OiAoKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgZW51bSBNZXRyaWNSZWR1Y3Rpb24ge1xuICBTVU0sXG4gIE1FQU5cbn1cblxuLyoqXG4gKiBBIGNsYXNzIHRoYXQgZHJpdmVzIHRoZSB0cmFpbmluZyBvZiBhIGdyYXBoIG1vZGVsIGdpdmVuIGEgZGF0YXNldC4gSXQgYWxsb3dzXG4gKiB0aGUgdXNlciB0byBwcm92aWRlIGEgc2V0IG9mIGNhbGxiYWNrcyBmb3IgbWVhc3VyZW1lbnRzIGxpa2UgY29zdCwgYWNjdXJhY3ksXG4gKiBhbmQgc3BlZWQgb2YgdHJhaW5pbmcuXG4gKi9cbmV4cG9ydCBjbGFzcyBHcmFwaFJ1bm5lciB7XG4gIHByaXZhdGUgY29zdFRlbnNvcjogVGVuc29yO1xuICBwcml2YXRlIHRyYWluRmVlZEVudHJpZXM6IEZlZWRFbnRyeVtdO1xuICBwcml2YXRlIGJhdGNoU2l6ZTogbnVtYmVyO1xuICBwcml2YXRlIG9wdGltaXplcjogT3B0aW1pemVyO1xuICBwcml2YXRlIGN1cnJlbnRUcmFpbkxvb3BOdW1CYXRjaGVzOiBudW1iZXJ8dW5kZWZpbmVkO1xuICBwcml2YXRlIGNvc3RJbnRlcnZhbE1zOiBudW1iZXI7XG5cbiAgcHJpdmF0ZSBtZXRyaWNUZW5zb3I6IFRlbnNvcnx1bmRlZmluZWQ7XG4gIHByaXZhdGUgbWV0cmljRmVlZEVudHJpZXM6IEZlZWRFbnRyeVtdfHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBtZXRyaWNCYXRjaFNpemU6IG51bWJlcnx1bmRlZmluZWQ7XG4gIHByaXZhdGUgbWV0cmljUmVkdWN0aW9uOiBNZXRyaWNSZWR1Y3Rpb247XG4gIHByaXZhdGUgbWV0cmljSW50ZXJ2YWxNczogbnVtYmVyO1xuXG4gIHByaXZhdGUgaW5mZXJlbmNlVGVuc29yOiBUZW5zb3I7XG4gIHByaXZhdGUgaW5mZXJlbmNlRmVlZEVudHJpZXM6IEZlZWRFbnRyeVtdfHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBpbmZlcmVuY2VFeGFtcGxlSW50ZXJ2YWxNczogbnVtYmVyO1xuICBwcml2YXRlIGluZmVyZW5jZUV4YW1wbGVDb3VudDogbnVtYmVyO1xuXG4gIC8vIFJ1bnRpbWUgaW5mb3JtYXRpb24uXG4gIHByaXZhdGUgaXNUcmFpbmluZzogYm9vbGVhbjtcbiAgcHJpdmF0ZSB0b3RhbEJhdGNoZXNUcmFpbmVkOiBudW1iZXI7XG4gIHByaXZhdGUgYmF0Y2hlc1RyYWluZWRUaGlzUnVuOiBudW1iZXI7XG4gIHByaXZhdGUgbGFzdENvbXB1dGVkTWV0cmljOiBOREFycmF5O1xuXG4gIHByaXZhdGUgaXNJbmZlcnJpbmc6IGJvb2xlYW47XG4gIHByaXZhdGUgY3VycmVudEluZmVyZW5jZUxvb3BOdW1QYXNzZXM6IG51bWJlcnx1bmRlZmluZWQ7XG4gIHByaXZhdGUgaW5mZXJlbmNlUGFzc2VzVGhpc1J1bjogbnVtYmVyO1xuXG4gIHByaXZhdGUgdHJhaW5TdGFydFRpbWVzdGFtcDogbnVtYmVyO1xuICBwcml2YXRlIGxhc3RDb3N0VGltZXN0YW1wID0gMDtcbiAgcHJpdmF0ZSBsYXN0RXZhbFRpbWVzdGFtcCA9IDA7XG5cbiAgcHJpdmF0ZSBsYXN0U3RvcFRpbWVzdGFtcDogbnVtYmVyfG51bGw7XG4gIHByaXZhdGUgdG90YWxJZGxlVGltZU1zID0gMDtcblxuICBwcml2YXRlIHplcm9TY2FsYXI6IFNjYWxhcjtcbiAgcHJpdmF0ZSBtZXRyaWNCYXRjaFNpemVTY2FsYXI6IFNjYWxhcjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIHByaXZhdGUgbWF0aDogTkRBcnJheU1hdGgsIHByaXZhdGUgc2Vzc2lvbjogU2Vzc2lvbixcbiAgICAgIHByaXZhdGUgZXZlbnRPYnNlcnZlcjogR3JhcGhSdW5uZXJFdmVudE9ic2VydmVyKSB7XG4gICAgdGhpcy5yZXNldFN0YXRpc3RpY3MoKTtcbiAgICB0aGlzLnplcm9TY2FsYXIgPSBTY2FsYXIubmV3KDApO1xuICB9XG5cbiAgcmVzZXRTdGF0aXN0aWNzKCkge1xuICAgIHRoaXMudG90YWxCYXRjaGVzVHJhaW5lZCA9IDA7XG4gICAgdGhpcy50b3RhbElkbGVUaW1lTXMgPSAwO1xuICAgIHRoaXMubGFzdFN0b3BUaW1lc3RhbXAgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IHRoZSB0cmFpbmluZyBsb29wIHdpdGggYW4gb3B0aW9uYWwgbnVtYmVyIG9mIGJhdGNoZXMgdG8gdHJhaW4gZm9yLlxuICAgKiBPcHRpb25hbGx5IHRha2VzIGEgbWV0cmljIHRlbnNvciBhbmQgZmVlZCBlbnRyaWVzIHRvIGNvbXB1dGUgcGVyaW9kaWNhbGx5LlxuICAgKiBUaGlzIGNhbiBiZSB1c2VkIGZvciBjb21wdXRpbmcgYWNjdXJhY3ksIG9yIGEgc2ltaWxhciBtZXRyaWMuXG4gICAqL1xuICB0cmFpbihcbiAgICAgIGNvc3RUZW5zb3I6IFRlbnNvciwgdHJhaW5GZWVkRW50cmllczogRmVlZEVudHJ5W10sIGJhdGNoU2l6ZTogbnVtYmVyLFxuICAgICAgb3B0aW1pemVyOiBPcHRpbWl6ZXIsIG51bUJhdGNoZXM/OiBudW1iZXIsIG1ldHJpY1RlbnNvcj86IFRlbnNvcixcbiAgICAgIG1ldHJpY0ZlZWRFbnRyaWVzPzogRmVlZEVudHJ5W10sIG1ldHJpY0JhdGNoU2l6ZT86IG51bWJlcixcbiAgICAgIG1ldHJpY1JlZHVjdGlvbiA9IE1ldHJpY1JlZHVjdGlvbi5NRUFOLFxuICAgICAgZXZhbEludGVydmFsTXMgPSBERUZBVUxUX0VWQUxfSU5URVJWQUxfTVMsXG4gICAgICBjb3N0SW50ZXJ2YWxNcyA9IERFRkFVTFRfQ09TVF9JTlRFUlZBTF9NUykge1xuICAgIHRoaXMuY29zdFRlbnNvciA9IGNvc3RUZW5zb3I7XG4gICAgdGhpcy50cmFpbkZlZWRFbnRyaWVzID0gdHJhaW5GZWVkRW50cmllcztcbiAgICB0aGlzLm1ldHJpY1RlbnNvciA9IG1ldHJpY1RlbnNvcjtcbiAgICB0aGlzLm1ldHJpY0ZlZWRFbnRyaWVzID0gbWV0cmljRmVlZEVudHJpZXM7XG4gICAgaWYgKG1ldHJpY0JhdGNoU2l6ZSAhPSBudWxsICYmIHRoaXMubWV0cmljQmF0Y2hTaXplICE9PSBtZXRyaWNCYXRjaFNpemUpIHtcbiAgICAgIGlmICh0aGlzLm1ldHJpY0JhdGNoU2l6ZVNjYWxhciAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMubWV0cmljQmF0Y2hTaXplU2NhbGFyLmRpc3Bvc2UoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubWV0cmljQmF0Y2hTaXplU2NhbGFyID0gU2NhbGFyLm5ldyhtZXRyaWNCYXRjaFNpemUpO1xuICAgIH1cbiAgICB0aGlzLm1ldHJpY0JhdGNoU2l6ZSA9IG1ldHJpY0JhdGNoU2l6ZTtcbiAgICB0aGlzLm1ldHJpY1JlZHVjdGlvbiA9IG1ldHJpY1JlZHVjdGlvbjtcbiAgICB0aGlzLmJhdGNoU2l6ZSA9IGJhdGNoU2l6ZTtcbiAgICB0aGlzLm9wdGltaXplciA9IG9wdGltaXplcjtcblxuICAgIHRoaXMubWV0cmljSW50ZXJ2YWxNcyA9IGV2YWxJbnRlcnZhbE1zO1xuICAgIHRoaXMuY29zdEludGVydmFsTXMgPSBjb3N0SW50ZXJ2YWxNcztcbiAgICB0aGlzLmN1cnJlbnRUcmFpbkxvb3BOdW1CYXRjaGVzID0gbnVtQmF0Y2hlcztcblxuICAgIHRoaXMuYmF0Y2hlc1RyYWluZWRUaGlzUnVuID0gMDtcbiAgICB0aGlzLmlzVHJhaW5pbmcgPSB0cnVlO1xuICAgIHRoaXMudHJhaW5TdGFydFRpbWVzdGFtcCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIHRoaXMudHJhaW5OZXR3b3JrKCk7XG4gIH1cblxuICBzdG9wVHJhaW5pbmcoKSB7XG4gICAgdGhpcy5pc1RyYWluaW5nID0gZmFsc2U7XG4gICAgdGhpcy5sYXN0U3RvcFRpbWVzdGFtcCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICB9XG5cbiAgcmVzdW1lVHJhaW5pbmcoKSB7XG4gICAgdGhpcy5pc1RyYWluaW5nID0gdHJ1ZTtcbiAgICBpZiAodGhpcy5sYXN0U3RvcFRpbWVzdGFtcCAhPSBudWxsKSB7XG4gICAgICB0aGlzLnRvdGFsSWRsZVRpbWVNcyArPSBwZXJmb3JtYW5jZS5ub3coKSAtIHRoaXMubGFzdFN0b3BUaW1lc3RhbXA7XG4gICAgfVxuICAgIHRoaXMudHJhaW5OZXR3b3JrKCk7XG4gIH1cblxuICBwcml2YXRlIHRyYWluTmV0d29yaygpIHtcbiAgICBpZiAodGhpcy5iYXRjaGVzVHJhaW5lZFRoaXNSdW4gPT09IHRoaXMuY3VycmVudFRyYWluTG9vcE51bUJhdGNoZXMpIHtcbiAgICAgIHRoaXMuc3RvcFRyYWluaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmlzVHJhaW5pbmcpIHtcbiAgICAgIGlmICh0aGlzLmV2ZW50T2JzZXJ2ZXIuZG9uZVRyYWluaW5nQ2FsbGJhY2sgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLmV2ZW50T2JzZXJ2ZXIuZG9uZVRyYWluaW5nQ2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIGNvbnN0IHNob3VsZENvbXB1dGVDb3N0ID0gdGhpcy5ldmVudE9ic2VydmVyLmF2Z0Nvc3RDYWxsYmFjayAhPSBudWxsICYmXG4gICAgICAgIChzdGFydCAtIHRoaXMubGFzdENvc3RUaW1lc3RhbXAgPiB0aGlzLmNvc3RJbnRlcnZhbE1zKTtcbiAgICBpZiAoc2hvdWxkQ29tcHV0ZUNvc3QpIHtcbiAgICAgIHRoaXMubGFzdENvc3RUaW1lc3RhbXAgPSBzdGFydDtcbiAgICB9XG5cbiAgICBjb25zdCBjb3N0UmVkdWN0aW9uID1cbiAgICAgICAgc2hvdWxkQ29tcHV0ZUNvc3QgPyBDb3N0UmVkdWN0aW9uLk1FQU4gOiBDb3N0UmVkdWN0aW9uLk5PTkU7XG5cbiAgICB0aGlzLm1hdGguc2NvcGUoKGtlZXApID0+IHtcbiAgICAgIGNvbnN0IGF2Z0Nvc3QgPSB0aGlzLnNlc3Npb24udHJhaW4oXG4gICAgICAgICAgdGhpcy5jb3N0VGVuc29yLCB0aGlzLnRyYWluRmVlZEVudHJpZXMsIHRoaXMuYmF0Y2hTaXplLFxuICAgICAgICAgIHRoaXMub3B0aW1pemVyLCBjb3N0UmVkdWN0aW9uKTtcblxuICAgICAgaWYgKHNob3VsZENvbXB1dGVDb3N0KSB7XG4gICAgICAgIGNvbnN0IHRyYWluVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnQ7XG5cbiAgICAgICAgdGhpcy5ldmVudE9ic2VydmVyLmF2Z0Nvc3RDYWxsYmFjayEoYXZnQ29zdCk7XG5cbiAgICAgICAgaWYgKHRoaXMuZXZlbnRPYnNlcnZlci50cmFpbkV4YW1wbGVzUGVyU2VjQ2FsbGJhY2sgIT0gbnVsbCkge1xuICAgICAgICAgIGNvbnN0IGV4YW1wbGVzUGVyU2VjID0gKHRoaXMuYmF0Y2hTaXplICogMTAwMCAvIHRyYWluVGltZSk7XG4gICAgICAgICAgdGhpcy5ldmVudE9ic2VydmVyLnRyYWluRXhhbXBsZXNQZXJTZWNDYWxsYmFjayhleGFtcGxlc1BlclNlYyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZXZlbnRPYnNlcnZlci5tZXRyaWNDYWxsYmFjayAhPSBudWxsICYmXG4gICAgICAgICAgdGhpcy5tZXRyaWNGZWVkRW50cmllcyAhPSBudWxsICYmXG4gICAgICAgICAgc3RhcnQgLSB0aGlzLmxhc3RFdmFsVGltZXN0YW1wID4gdGhpcy5tZXRyaWNJbnRlcnZhbE1zKSB7XG4gICAgICAgIHRoaXMubGFzdEV2YWxUaW1lc3RhbXAgPSBzdGFydDtcblxuICAgICAgICBpZiAodGhpcy5sYXN0Q29tcHV0ZWRNZXRyaWMgIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMubGFzdENvbXB1dGVkTWV0cmljLmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxhc3RDb21wdXRlZE1ldHJpYyA9IHRoaXMuY29tcHV0ZU1ldHJpYygpO1xuICAgICAgICB0aGlzLmV2ZW50T2JzZXJ2ZXIubWV0cmljQ2FsbGJhY2sodGhpcy5sYXN0Q29tcHV0ZWRNZXRyaWMpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5ldmVudE9ic2VydmVyLnRvdGFsVGltZUNhbGxiYWNrICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5ldmVudE9ic2VydmVyLnRvdGFsVGltZUNhbGxiYWNrKFxuICAgICAgICAgICAgKHN0YXJ0IC0gdGhpcy50cmFpblN0YXJ0VGltZXN0YW1wKSAvIDEwMDApO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmJhdGNoZXNUcmFpbmVkVGhpc1J1bisrO1xuICAgICAgdGhpcy50b3RhbEJhdGNoZXNUcmFpbmVkKys7XG5cbiAgICAgIGlmICh0aGlzLmV2ZW50T2JzZXJ2ZXIuYmF0Y2hlc1RyYWluZWRDYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuZXZlbnRPYnNlcnZlci5iYXRjaGVzVHJhaW5lZENhbGxiYWNrKHRoaXMudG90YWxCYXRjaGVzVHJhaW5lZCk7XG4gICAgICB9XG5cbiAgICB9KTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMudHJhaW5OZXR3b3JrKCkpO1xuICB9XG5cbiAgaW5mZXIoXG4gICAgICBpbmZlcmVuY2VUZW5zb3I6IFRlbnNvciwgaW5mZXJlbmNlRmVlZEVudHJpZXM6IEZlZWRFbnRyeVtdLFxuICAgICAgaW5mZXJlbmNlRXhhbXBsZUludGVydmFsTXMgPSBERUZBVUxUX0lORkVSRU5DRV9FWEFNUExFX0lOVEVSVkFMX01TLFxuICAgICAgaW5mZXJlbmNlRXhhbXBsZUNvdW50ID0gNSwgbnVtUGFzc2VzPzogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuZXZlbnRPYnNlcnZlci5pbmZlcmVuY2VFeGFtcGxlc0NhbGxiYWNrID09IG51bGwgJiZcbiAgICAgICAgdGhpcy5ldmVudE9ic2VydmVyLmluZmVyZW5jZUV4YW1wbGVzUGVyU2VjQ2FsbGJhY2sgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdDYW5ub3Qgc3RhcnQgaW5mZXJlbmNlIGxvb3AsIG5vIGluZmVyZW5jZSBleGFtcGxlIG9yICcgK1xuICAgICAgICAgICdleGFtcGxlcy9zZWMgb2JzZXJ2ZXIgcHJvdmlkZWQuJyk7XG4gICAgfVxuXG4gICAgLy8gTWFrZSBzdXJlIHRoZSBmZWVkIHZhbHVlcyBhcmUgcHJvdmlkZXJzLCBhbmQgbm90IE5EQXJyYXlzLlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5mZXJlbmNlRmVlZEVudHJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGZlZWRFbnRyeSA9IGluZmVyZW5jZUZlZWRFbnRyaWVzW2ldO1xuXG4gICAgICBpZiAoZmVlZEVudHJ5LmRhdGEgaW5zdGFuY2VvZiBOREFycmF5KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdDYW5ub3Qgc3RhcnQgaW5mZXJlbmNlIG9uIHRoZSBtb2RlbCBydW5uZXIgd2l0aCBmZWVkIGVudHJpZXMgb2YgJyArXG4gICAgICAgICAgICAndHlwZSBOREFycmF5LiBQbGVhc2UgdXNlIElucHV0UHJvdmlkZXJzLicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuaW5mZXJlbmNlRXhhbXBsZUludGVydmFsTXMgPSBpbmZlcmVuY2VFeGFtcGxlSW50ZXJ2YWxNcztcbiAgICB0aGlzLmluZmVyZW5jZVRlbnNvciA9IGluZmVyZW5jZVRlbnNvcjtcbiAgICB0aGlzLmluZmVyZW5jZUZlZWRFbnRyaWVzID0gaW5mZXJlbmNlRmVlZEVudHJpZXM7XG4gICAgdGhpcy5pbmZlcmVuY2VFeGFtcGxlQ291bnQgPSBpbmZlcmVuY2VFeGFtcGxlQ291bnQ7XG4gICAgdGhpcy5jdXJyZW50SW5mZXJlbmNlTG9vcE51bVBhc3NlcyA9IG51bVBhc3NlcztcbiAgICBpZiAoIXRoaXMuaXNJbmZlcnJpbmcpIHtcbiAgICAgIHRoaXMuaW5mZXJlbmNlUGFzc2VzVGhpc1J1biA9IDA7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuaW5mZXJOZXR3b3JrKCkpO1xuICAgIH1cbiAgICB0aGlzLmlzSW5mZXJyaW5nID0gdHJ1ZTtcbiAgfVxuXG4gIHByaXZhdGUgaW5mZXJOZXR3b3JrKCkge1xuICAgIGlmICghdGhpcy5pc0luZmVycmluZyB8fFxuICAgICAgICB0aGlzLmluZmVyZW5jZVBhc3Nlc1RoaXNSdW4gPT09IHRoaXMuY3VycmVudEluZmVyZW5jZUxvb3BOdW1QYXNzZXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLm1hdGguc2NvcGUoKGtlZXAsIHRyYWNrKSA9PiB7XG4gICAgICBjb25zdCBmZWVkczogRmVlZEVudHJ5W11bXSA9IFtdO1xuICAgICAgY29uc3QgaW5mZXJlbmNlVmFsdWVzOiBOREFycmF5W10gPSBbXTtcblxuICAgICAgY29uc3Qgc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5pbmZlcmVuY2VFeGFtcGxlQ291bnQ7IGkrKykge1xuICAgICAgICAvLyBQb3B1bGF0ZSBhIG5ldyBGZWVkRW50cnlbXSBwb3B1bGF0ZWQgd2l0aCBOREFycmF5cy5cbiAgICAgICAgY29uc3QgbmRhcnJheUZlZWRFbnRyaWVzOiBGZWVkRW50cnlbXSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuaW5mZXJlbmNlRmVlZEVudHJpZXMhLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgY29uc3QgZmVlZEVudHJ5ID0gdGhpcy5pbmZlcmVuY2VGZWVkRW50cmllcyFbal07XG4gICAgICAgICAgbmRhcnJheUZlZWRFbnRyaWVzLnB1c2goe1xuICAgICAgICAgICAgdGVuc29yOiBmZWVkRW50cnkudGVuc29yLFxuICAgICAgICAgICAgZGF0YTpcbiAgICAgICAgICAgICAgICB0cmFjaygoZmVlZEVudHJ5LmRhdGEgYXMgSW5wdXRQcm92aWRlcikuZ2V0TmV4dENvcHkodGhpcy5tYXRoKSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmZWVkcy5wdXNoKG5kYXJyYXlGZWVkRW50cmllcyk7XG5cbiAgICAgICAgaW5mZXJlbmNlVmFsdWVzLnB1c2goXG4gICAgICAgICAgICB0aGlzLnNlc3Npb24uZXZhbCh0aGlzLmluZmVyZW5jZVRlbnNvciwgbmRhcnJheUZlZWRFbnRyaWVzKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmV2ZW50T2JzZXJ2ZXIuaW5mZXJlbmNlRXhhbXBsZXNQZXJTZWNDYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgIC8vIEZvcmNlIGEgR1BVIGRvd25sb2FkLCBzaW5jZSBpbmZlcmVuY2UgcmVzdWx0cyBhcmUgZ2VuZXJhbGx5IG5lZWRlZCBvblxuICAgICAgICAvLyB0aGUgQ1BVIGFuZCBpdCdzIG1vcmUgZmFpciB0byBpbmNsdWRlIGJsb2NraW5nIG9uIHRoZSBHUFUgdG8gY29tcGxldGVcbiAgICAgICAgLy8gaXRzIHdvcmsgZm9yIHRoZSBpbmZlcmVuY2UgbWVhc3VyZW1lbnQuXG4gICAgICAgIGluZmVyZW5jZVZhbHVlc1tpbmZlcmVuY2VWYWx1ZXMubGVuZ3RoIC0gMV0uZ2V0VmFsdWVzKCk7XG5cbiAgICAgICAgY29uc3QgaW5mZXJlbmNlRXhhbXBsZXNQZXJTZWNUaW1lID0gcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydDtcblxuICAgICAgICBjb25zdCBleGFtcGxlc1BlclNlYyA9XG4gICAgICAgICAgICAodGhpcy5pbmZlcmVuY2VFeGFtcGxlQ291bnQgKiAxMDAwIC8gaW5mZXJlbmNlRXhhbXBsZXNQZXJTZWNUaW1lKTtcbiAgICAgICAgdGhpcy5ldmVudE9ic2VydmVyLmluZmVyZW5jZUV4YW1wbGVzUGVyU2VjQ2FsbGJhY2shKGV4YW1wbGVzUGVyU2VjKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZXZlbnRPYnNlcnZlci5pbmZlcmVuY2VFeGFtcGxlc0NhbGxiYWNrICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5ldmVudE9ic2VydmVyLmluZmVyZW5jZUV4YW1wbGVzQ2FsbGJhY2soZmVlZHMsIGluZmVyZW5jZVZhbHVlcyk7XG4gICAgICB9XG4gICAgICB0aGlzLmluZmVyZW5jZVBhc3Nlc1RoaXNSdW4rKztcblxuICAgIH0pO1xuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5pbmZlck5ldHdvcmsoKSwgdGhpcy5pbmZlcmVuY2VFeGFtcGxlSW50ZXJ2YWxNcyk7XG4gIH1cblxuICBzdG9wSW5mZXJyaW5nKCkge1xuICAgIHRoaXMuaXNJbmZlcnJpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIGlzSW5mZXJlbmNlUnVubmluZygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pc0luZmVycmluZztcbiAgfVxuXG4gIGNvbXB1dGVNZXRyaWMoKTogU2NhbGFyIHtcbiAgICBpZiAodGhpcy5tZXRyaWNGZWVkRW50cmllcyA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBjb21wdXRlIG1ldHJpYywgbm8gbWV0cmljIEZlZWRFbnRyaWVzIHByb3ZpZGVkLicpO1xuICAgIH1cblxuICAgIGxldCBtZXRyaWMgPSB0aGlzLnplcm9TY2FsYXI7XG5cbiAgICByZXR1cm4gdGhpcy5tYXRoLnNjb3BlKChrZWVwKSA9PiB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubWV0cmljQmF0Y2hTaXplITsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG1ldHJpY1ZhbHVlID1cbiAgICAgICAgICAgIHRoaXMuc2Vzc2lvbi5ldmFsKHRoaXMubWV0cmljVGVuc29yISwgdGhpcy5tZXRyaWNGZWVkRW50cmllcyEpO1xuXG4gICAgICAgIG1ldHJpYyA9IHRoaXMubWF0aC5hZGQobWV0cmljLCBtZXRyaWNWYWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm1ldHJpY1JlZHVjdGlvbiA9PT0gTWV0cmljUmVkdWN0aW9uLk1FQU4pIHtcbiAgICAgICAgbWV0cmljID0gdGhpcy5tYXRoLmRpdmlkZShtZXRyaWMsIHRoaXMubWV0cmljQmF0Y2hTaXplU2NhbGFyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1ldHJpYztcbiAgICB9KTtcbiAgfVxuXG4gIGdldFRvdGFsQmF0Y2hlc1RyYWluZWQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy50b3RhbEJhdGNoZXNUcmFpbmVkO1xuICB9XG5cbiAgZ2V0TGFzdENvbXB1dGVkTWV0cmljKCk6IFNjYWxhciB7XG4gICAgcmV0dXJuIHRoaXMubGFzdENvbXB1dGVkTWV0cmljO1xuICB9XG5cbiAgc2V0TWF0aChtYXRoOiBOREFycmF5TWF0aCkge1xuICAgIHRoaXMubWF0aCA9IG1hdGg7XG4gIH1cblxuICBzZXRTZXNzaW9uKHNlc3Npb246IFNlc3Npb24pIHtcbiAgICB0aGlzLnNlc3Npb24gPSBzZXNzaW9uO1xuICB9XG5cbiAgc2V0SW5mZXJlbmNlVGVuc29yKGluZmVyZW5jZVRlbnNvcjogVGVuc29yKSB7XG4gICAgdGhpcy5pbmZlcmVuY2VUZW5zb3IgPSBpbmZlcmVuY2VUZW5zb3I7XG4gIH1cblxuICBzZXRJbmZlcmVuY2VFeGFtcGxlQ291bnQoaW5mZXJlbmNlRXhhbXBsZUNvdW50OiBudW1iZXIpIHtcbiAgICB0aGlzLmluZmVyZW5jZUV4YW1wbGVDb3VudCA9IGluZmVyZW5jZUV4YW1wbGVDb3VudDtcbiAgfVxufVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQge0NvbnN0YW50Tm9kZSwgR3JhcGgsIE5vZGUsIFBsYWNlaG9sZGVyTm9kZSwgVGVuc29yLCBWYXJpYWJsZU5vZGV9IGZyb20gJy4vZ3JhcGgnO1xuaW1wb3J0ICogYXMgcHJpb3JpdHlfcXVldWUgZnJvbSAnLi9wcmlvcml0eV9xdWV1ZSc7XG5pbXBvcnQge1ByaW9yaXR5UXVldWV9IGZyb20gJy4vcHJpb3JpdHlfcXVldWUnO1xuaW1wb3J0IHtUZW5zb3JBcnJheU1hcH0gZnJvbSAnLi90ZW5zb3JfYXJyYXlfbWFwJztcblxuLyoqXG4gKiBHaXZlbiBhIHRhcmdldCBub2RlIGluIGEgZ3JhcGgsIGFjY3VtdWxhdGUgdGhlIHNldCBvZiBhbGwgbm9kZXMgdGhhdCBuZWVkIHRvXG4gKiBiZSBldmFsdWF0ZWQgaW4gb3JkZXIgdG8gZXZhbHVhdGUgdGhlIHRhcmdldCBncmFwaC4gVHJhdmVyc2FsIHN0b3BzIGFueXdoZXJlXG4gKiBhIG5vZGUncyB2YWx1ZXMgYXJlIGZlZCBpbiBleHRlcm5hbGx5IHZpYSBcImZlZWQgZGljdHNcIi5cbiAqIEBwYXJhbSBub2RlcyBUaGUgbm9kZXMgdG8gYmUgZXZhbHVhdGVkLlxuICogQHBhcmFtIHRlcm1pbmF0aW5nTm9kZXMgVGhlIHNldCBvZiBub2RlcyB0aGF0IHN0b3AgdHJhdmVyc2FsLlxuICogQHJldHVybiBUaGUgdW5vcmRlcmVkIHNldCBvZiBub2RlcyB0aGF0IG5lZWQgdG8gYmUgZXZhbHVhdGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VW5vcmRlcmVkRXZhbHVhdGlvblNldChcbiAgICBub2RlczogTm9kZVtdLCB0ZXJtaW5hdGluZ05vZGVzOiBOb2RlW10pOiBOb2RlW10ge1xuICBjb25zdCB0ZXJtaW5hdGluZ05vZGVNYXA6IHtbaWQ6IG51bWJlcl06IE5vZGV9ID0ge307XG4gIGNvbnN0IHNlZW46IHtbaWQ6IG51bWJlcl06IE5vZGV9ID0ge307XG4gIGNvbnN0IHNldDogTm9kZVtdID0gW107XG4gIGNvbnN0IHZpc2l0OiBOb2RlW10gPSBub2Rlcy5zbGljZSgpO1xuICB0ZXJtaW5hdGluZ05vZGVzLmZvckVhY2gobm9kZSA9PiB0ZXJtaW5hdGluZ05vZGVNYXBbbm9kZS5pZF0gPSBub2RlKTtcbiAgLyogRmxvb2QgZmlsbDogV2hpbGUgdGhlICd0byB2aXNpdCcgc3RhY2sgaXMgbm90IGVtcHR5LCBwb3AgYSBub2RlIG9mZiBvZiBpdC5cbiAgICogSWYgdGhlIG5vZGUgaGFzIG5vdCB5ZXQgYmVlbiB2aXNpdGVkLCBhZGQgaXQgdG8gdGhlIHNldCwgbWFyayBpdCBhcyBzZWVuLFxuICAgKiBhbmQgZW5xdWV1ZSBhbGwgb2YgaXRzIGFuY2VzdG9yIChpbnB1dCkgbm9kZXMuICovXG4gIHdoaWxlICh2aXNpdC5sZW5ndGggIT09IDApIHtcbiAgICBjb25zdCBjdXIgPSB2aXNpdC5wb3AoKSE7XG4gICAgaWYgKHNlZW5bY3VyLmlkXSA9PSBudWxsKSB7XG4gICAgICBpZiAodGVybWluYXRpbmdOb2RlTWFwW2N1ci5pZF0gPT0gbnVsbCkge1xuICAgICAgICBPYmplY3Qua2V5cyhjdXIuaW5wdXRzKVxuICAgICAgICAgICAgLm1hcChpbnB1dE5hbWUgPT4gY3VyLmlucHV0c1tpbnB1dE5hbWVdKVxuICAgICAgICAgICAgLmZvckVhY2goaW5wdXQgPT4gdmlzaXQucHVzaChpbnB1dC5ub2RlKSk7XG4gICAgICB9XG4gICAgICBzZXQucHVzaChjdXIpO1xuICAgICAgc2VlbltjdXIuaWRdID0gY3VyO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2V0O1xufVxuXG4vKipcbiAqIEdpdmVuIGEgc2V0IG9mIG5vZGVzLCBjb21wdXRlIHRoZWlyIG9yZGVyIHN1Y2ggdGhhdCBhbGwgZGVwZW5kZW50IG5vZGVzIGFyZVxuICogZXZhbHVhdGVkIGFmdGVyIHRoZWlyIGRlcGVuZGVlcy4gVGhpcyBpcyB0aGUgJ2luZmVyZW5jZSBvcmRlcicgZm9yIG5vZGVzIGluXG4gKiB0aGUgb3BlcmF0aW9uIGdyYXBoLlxuICogQHBhcmFtIHVub3JkZXJlZEV2YWx1YXRpb25TZXQgVGhlIHVub3JkZXJlZCBzZXQgb2Ygbm9kZXMgdGhhdCBuZWVkIHRvIGJlXG4gKiBldmFsdWF0ZWQuXG4gKiBAcmV0dXJuIFRoZSBpbnB1dCBub2RlcyBpbiBmb3J3YXJkIGV2YWx1YXRpb24gb3JkZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcmRlcmVkRXZhbHVhdGlvblNldCh1bm9yZGVyZWRFdmFsdWF0aW9uU2V0OiBOb2RlW10pOlxuICAgIE5vZGVbXSB7XG4gIC8qIEEgcHJpb3JpdHkgcXVldWUgaXMgdXNlZCwgd2hlcmUgdGhlIHByaW9yaXR5IGlzIHRoZSByZW1haW5pbmcgbnVtYmVyIG9mXG4gICAqIHVuZXZhbHVhdGVkIG5vZGVzIHdob3NlIGlucHV0cyBjb21lIGZyb20gdGhlIGVsZW1lbnQgbm9kZS4gVGhpcyBndWFyYW50ZWVzXG4gICAqIHRoYXQgYWxsIGRvd25zdHJlYW0gbm9kZXMgd2lsbCBiZSBkZXF1ZXVlZCBiZWZvcmUgdGhlaXIgYW5jZXN0b3JzLiAqL1xuICBjb25zdCBzZXQ6IE5vZGVbXSA9IFtdO1xuICBjb25zdCBub2RlSW5kaWNlczoge1tpZDogbnVtYmVyXTogbnVtYmVyfSA9IHt9O1xuICBjb25zdCBwZW5kaW5nRGVwZW5kZW5jaWVzOiB7W2lkOiBudW1iZXJdOiBudW1iZXJ9ID0ge307XG5cbiAgLyogVGhlIHF1ZXVlIHByaW9yaXR5IGNhbGxiYWNrIGxvb2tzIGF0IHRoZSBudW1iZXIgb2YgcGVuZGluZyBkZXBlbmRlbmNpZXMgb2ZcbiAgICogYSBnaXZlbiBub2RlLiBUaGUgcXVldWUgaW5kZXggb2JzZXJ2ZXIgY2FsbGJhY2sgbWFpbnRhaW5zIHRoZSBsb2NhdGlvbiBvZlxuICAgKiBlYWNoIG5vZGUgaW4gdGhlIGFycmF5LCBmb3IgcHJpb3JpdHkgdXBkYXRlcy4gKi9cbiAgY29uc3Qgbm9kZVF1ZXVlID0gbmV3IFByaW9yaXR5UXVldWU8Tm9kZT4oXG4gICAgICAoYTogTm9kZSwgYjogTm9kZSkgPT4gcHJpb3JpdHlfcXVldWUuZGVmYXVsdENvbXBhcmUoXG4gICAgICAgICAgcGVuZGluZ0RlcGVuZGVuY2llc1thLmlkXSwgcGVuZGluZ0RlcGVuZGVuY2llc1tiLmlkXSksXG4gICAgICAobm9kZTogTm9kZSwgbmV3SW5kZXg6IG51bWJlcikgPT4gbm9kZUluZGljZXNbbm9kZS5pZF0gPSBuZXdJbmRleCk7XG5cbiAgdW5vcmRlcmVkRXZhbHVhdGlvblNldC5mb3JFYWNoKG5vZGUgPT4gcGVuZGluZ0RlcGVuZGVuY2llc1tub2RlLmlkXSA9IDApO1xuXG4gIC8qIEZvciBldmVyeSBkZXNjZW5kZW50IG9mIGEgbm9kZSAob3V0cHV0IG9mIGFuY2VzdG9yIGlzIGlucHV0IHRvIGRlc2NlbmRhbnQpLFxuICAgKiBpbmNyZW1lbnQgdGhlICdwZW5kaW5nIGRlcGVuZGVuY3kgY291bnQnIGZvciB0aGUgYW5jZXN0b3IuIFRoaXMgcHJlcGFyZXNcbiAgICogdGhlICdwZW5kaW5nIGRlcGVuZGVuY3kgY291bnQnIGFzIGEgcHJpb3JpdHkgbWFwLiAqL1xuICB1bm9yZGVyZWRFdmFsdWF0aW9uU2V0LmZvckVhY2goXG4gICAgICBub2RlID0+IE9iamVjdC5rZXlzKG5vZGUuaW5wdXRzKVxuICAgICAgICAgICAgICAgICAgLm1hcChrZXkgPT4gbm9kZS5pbnB1dHNba2V5XSlcbiAgICAgICAgICAgICAgICAgIC5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVub3JkZXJlZEV2YWx1YXRpb25TZXQuaW5kZXhPZihpbnB1dC5ub2RlKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nRGVwZW5kZW5jaWVzW2lucHV0Lm5vZGUuaWRdKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pKTtcblxuICB1bm9yZGVyZWRFdmFsdWF0aW9uU2V0LmZvckVhY2gobm9kZSA9PiBub2RlUXVldWUuZW5xdWV1ZShub2RlKSk7XG5cbiAgd2hpbGUgKCFub2RlUXVldWUuZW1wdHkoKSkge1xuICAgIHNldC51bnNoaWZ0KG5vZGVRdWV1ZS5kZXF1ZXVlKCkpO1xuICAgIC8qIEFzIGVhY2ggbm9kZSBpcyB2aXNpdGVkLCBkZWNyZW1lbnQgdGhlICdwZW5kaW5nIGRlcGVuZGVuY3kgY291bnQnIG9mXG4gICAgICogZWFjaCBhbmNlc3RvciwgYW5kIHRlbGwgdGhlIHByaW9yaXR5IHF1ZXVlIHRoYXQgdGhlIHByaW9yaXR5IGhhcyBjaGFuZ2VkLlxuICAgICAqL1xuICAgIE9iamVjdC5rZXlzKHNldFswXS5pbnB1dHMpLm1hcChrZXkgPT4gc2V0WzBdLmlucHV0c1trZXldKS5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgIGlmICh1bm9yZGVyZWRFdmFsdWF0aW9uU2V0LmluZGV4T2YoaW5wdXQubm9kZSkgPT09IC0xKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHBlbmRpbmdEZXBlbmRlbmNpZXNbaW5wdXQubm9kZS5pZF0tLTtcbiAgICAgIG5vZGVRdWV1ZS51cGRhdGUoaW5wdXQubm9kZSwgbm9kZUluZGljZXNbaW5wdXQubm9kZS5pZF0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHNldDtcbn1cblxuLyoqXG4gKiBAcmV0dXJuIFRydWUgaWZmIHRoZSBub2RlIGlzIGFuIGlucHV0IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0lucHV0Tm9kZShub2RlOiBOb2RlKTogYm9vbGVhbiB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhub2RlLmlucHV0cykubGVuZ3RoID09PSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkQmFja1Byb3AodDogVGVuc29yKTogYm9vbGVhbiB7XG4gIHJldHVybiAhKHQubm9kZSBpbnN0YW5jZW9mIENvbnN0YW50Tm9kZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Bhc3N0aHJvdWdoTm9kZShub2RlOiBOb2RlLCBtYXA6IFRlbnNvckFycmF5TWFwKTogYm9vbGVhbiB7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhub2RlLmlucHV0cyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGlucHV0ID0gbm9kZS5pbnB1dHNba2V5c1tpXV07XG4gICAgaWYgKG1hcC5nZXQoaW5wdXQsIHRydWUpID09PSBtYXAuZ2V0KG5vZGUub3V0cHV0LCB0cnVlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0ICogYXMgY29udl91dGlsIGZyb20gJy4vbWF0aC9jb252X3V0aWwnO1xuaW1wb3J0ICogYXMgZ3BncHVfdXRpbCBmcm9tICcuL21hdGgvd2ViZ2wvZ3BncHVfdXRpbCc7XG5pbXBvcnQgKiBhcyByZW5kZXJfbmRhcnJheV9ncHVfdXRpbCBmcm9tICcuL21hdGgvd2ViZ2wvcmVuZGVyX25kYXJyYXlfZ3B1X3V0aWwnO1xuaW1wb3J0ICogYXMgd2ViZ2xfdXRpbCBmcm9tICcuL21hdGgvd2ViZ2wvd2ViZ2xfdXRpbCc7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4vdXRpbCc7XG5cbmV4cG9ydCB7Q2hlY2twb2ludExvYWRlcn0gZnJvbSAnLi9jaGVja3BvaW50X2xvYWRlcic7XG5leHBvcnQge0RhdGFTdGF0cywgSW5NZW1vcnlEYXRhc2V0fSBmcm9tICcuL2RhdGFzZXQnO1xuZXhwb3J0IHtHcmFwaCwgVGVuc29yfSBmcm9tICcuL2dyYXBoJztcbmV4cG9ydCB7R3JhcGhSdW5uZXIsIEdyYXBoUnVubmVyRXZlbnRPYnNlcnZlciwgTWV0cmljUmVkdWN0aW9ufSBmcm9tICcuL2dyYXBoX3J1bm5lcic7XG5leHBvcnQge0NvbnN0YW50SW5pdGlhbGl6ZXIsIEluaXRpYWxpemVyLCBOREFycmF5SW5pdGlhbGl6ZXIsIE9uZXNJbml0aWFsaXplciwgUmFuZG9tTm9ybWFsSW5pdGlhbGl6ZXIsIFJhbmRvbVRydW5jYXRlZE5vcm1hbEluaXRpYWxpemVyLCBSYW5kb21Vbmlmb3JtSW5pdGlhbGl6ZXIsIFZhcmlhbmNlU2NhbGluZ0luaXRpYWxpemVyLCBaZXJvc0luaXRpYWxpemVyfSBmcm9tICcuL2luaXRpYWxpemVycyc7XG5leHBvcnQge0luQ1BVTWVtb3J5U2h1ZmZsZWRJbnB1dFByb3ZpZGVyQnVpbGRlciwgSW5HUFVNZW1vcnlTaHVmZmxlZElucHV0UHJvdmlkZXJCdWlsZGVyLCBJbnB1dFByb3ZpZGVyfSBmcm9tICcuL2lucHV0X3Byb3ZpZGVyJztcbmV4cG9ydCB7TWF0cml4T3JpZW50YXRpb24sIE5EQXJyYXlNYXRofSBmcm9tICcuL21hdGgvbWF0aCc7XG5leHBvcnQge05EQXJyYXlNYXRoQ1BVfSBmcm9tICcuL21hdGgvbWF0aF9jcHUnO1xuZXhwb3J0IHtOREFycmF5TWF0aEdQVX0gZnJvbSAnLi9tYXRoL21hdGhfZ3B1JztcbmV4cG9ydCB7QXJyYXkxRCwgQXJyYXkyRCwgQXJyYXkzRCwgQXJyYXk0RCwgTkRBcnJheSwgU2NhbGFyfSBmcm9tICcuL21hdGgvbmRhcnJheSc7XG5leHBvcnQge0dQR1BVQ29udGV4dH0gZnJvbSAnLi9tYXRoL3dlYmdsL2dwZ3B1X2NvbnRleHQnO1xuZXhwb3J0IHtPcHRpbWl6ZXJ9IGZyb20gJy4vb3B0aW1pemVyJztcbmV4cG9ydCB7Q29zdFJlZHVjdGlvbiwgRmVlZEVudHJ5LCBTZXNzaW9ufSBmcm9tICcuL3Nlc3Npb24nO1xuZXhwb3J0IHtTR0RPcHRpbWl6ZXJ9IGZyb20gJy4vc2dkX29wdGltaXplcic7XG4vLyBTZWNvbmQgbGV2ZWwgZXhwb3J0cy5cbmV4cG9ydCB7Y29udl91dGlsLCBncGdwdV91dGlsLCByZW5kZXJfbmRhcnJheV9ncHVfdXRpbCwgdXRpbCwgd2ViZ2xfdXRpbH07XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCB7TkRBcnJheX0gZnJvbSAnLi9tYXRoL25kYXJyYXknO1xuXG4vKipcbiAqIEluaXRpYWxpemVyIGludGVyZmFjZSwgYWxsIGluaXRpYWxpemVyIGltcGxlbWVudCB0aGlzIGludGVyZmFjZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbml0aWFsaXplciB7XG4gIGluaXRpYWxpemUod2VpZ2h0c1NoYXBlOiBudW1iZXJbXSwgaW5wdXRVbml0czogbnVtYmVyLCBvdXRwdXRVbml0czogbnVtYmVyKTpcbiAgICAgIE5EQXJyYXk7XG59XG5cbmV4cG9ydCBjbGFzcyBWYXJpYW5jZVNjYWxpbmdJbml0aWFsaXplciBpbXBsZW1lbnRzIEluaXRpYWxpemVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgICBwcml2YXRlIHNjYWxlID0gMS4wLFxuICAgICAgcHJpdmF0ZSBtb2RlOiAnZmFuX2luJ3wnZmFuX291dCd8J2Zhbl9hdmcnID0gJ2Zhbl9pbicsXG4gICAgICBwcml2YXRlIGRpc3RyaWJ1dGlvbjogJ3VuaWZvcm0nfCdub3JtYWwnID0gJ25vcm1hbCcpIHt9XG5cbiAgaW5pdGlhbGl6ZSh3ZWlnaHRzU2hhcGU6IG51bWJlcltdLCBpbnB1dFVuaXRzOiBudW1iZXIsIG91dHB1dFVuaXRzOiBudW1iZXIpOlxuICAgICAgTkRBcnJheSB7XG4gICAgbGV0IG4gPSAwO1xuICAgIGlmICh0aGlzLm1vZGUgPT09ICdmYW5faW4nKSB7XG4gICAgICBuID0gaW5wdXRVbml0cztcbiAgICB9IGVsc2UgaWYgKHRoaXMubW9kZSA9PT0gJ2Zhbl9vdXQnKSB7XG4gICAgICBuID0gb3V0cHV0VW5pdHM7XG4gICAgfSBlbHNlIGlmICh0aGlzLm1vZGUgPT09ICdmYW5fYXZnJykge1xuICAgICAgbiA9IChpbnB1dFVuaXRzICsgb3V0cHV0VW5pdHMpIC8gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdVbmV4cGVjdGVkIG1vZGUgZm9yIHZhcmlhbmNlIHNjYWxpbmcgaW5pdGlhbGl6ZXI6ICcgKyB0aGlzLm1vZGUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmRpc3RyaWJ1dGlvbiA9PT0gJ25vcm1hbCcpIHtcbiAgICAgIHJldHVybiBOREFycmF5LnJhbmRUcnVuY2F0ZWROb3JtYWwoXG4gICAgICAgICAgd2VpZ2h0c1NoYXBlLCAwLjAsIE1hdGguc3FydCh0aGlzLnNjYWxlIC8gbikpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5kaXN0cmlidXRpb24gPT09ICd1bmlmb3JtJykge1xuICAgICAgcmV0dXJuIE5EQXJyYXkucmFuZFVuaWZvcm0oXG4gICAgICAgICAgd2VpZ2h0c1NoYXBlLCAwLjAsIE1hdGguc3FydCgzICogdGhpcy5zY2FsZSAvIG4pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdVbmV4cGVjdGVkIGRpc3RyaWJ1dGlvbiBmb3IgdmFyaWFuY2Ugc2NhbGluZyBpbml0aWFsaXplcjogJyArXG4gICAgICAgICAgdGhpcy5kaXN0cmlidXRpb24pO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgWmVyb3NJbml0aWFsaXplciBpbXBsZW1lbnRzIEluaXRpYWxpemVyIHtcbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIGluaXRpYWxpemUod2VpZ2h0c1NoYXBlOiBudW1iZXJbXSwgaW5wdXRVbml0czogbnVtYmVyLCBvdXRwdXRVbml0czogbnVtYmVyKTpcbiAgICAgIE5EQXJyYXkge1xuICAgIHJldHVybiBOREFycmF5Lnplcm9zKHdlaWdodHNTaGFwZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE9uZXNJbml0aWFsaXplciBpbXBsZW1lbnRzIEluaXRpYWxpemVyIHtcbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIGluaXRpYWxpemUod2VpZ2h0c1NoYXBlOiBudW1iZXJbXSwgaW5wdXRVbml0czogbnVtYmVyLCBvdXRwdXRVbml0czogbnVtYmVyKTpcbiAgICAgIE5EQXJyYXkge1xuICAgIGNvbnN0IHZhbHVlcyA9IE5EQXJyYXkuemVyb3Mod2VpZ2h0c1NoYXBlKTtcbiAgICB2YWx1ZXMuZmlsbCgxKTtcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb25zdGFudEluaXRpYWxpemVyIGltcGxlbWVudHMgSW5pdGlhbGl6ZXIge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZhbHVlID0gMCkge31cblxuICBpbml0aWFsaXplKHdlaWdodHNTaGFwZTogbnVtYmVyW10sIGlucHV0VW5pdHM6IG51bWJlciwgb3V0cHV0VW5pdHM6IG51bWJlcik6XG4gICAgICBOREFycmF5IHtcbiAgICBjb25zdCB2YWx1ZXMgPSBOREFycmF5Lnplcm9zKHdlaWdodHNTaGFwZSk7XG4gICAgdmFsdWVzLmZpbGwodGhpcy52YWx1ZSk7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTkRBcnJheUluaXRpYWxpemVyIGltcGxlbWVudHMgSW5pdGlhbGl6ZXIge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5kYXJyYXk6IE5EQXJyYXkpIHt9XG5cbiAgaW5pdGlhbGl6ZSh3ZWlnaHRzU2hhcGU6IG51bWJlcltdLCBpbnB1dFVuaXRzOiBudW1iZXIsIG91dHB1dFVuaXRzOiBudW1iZXIpOlxuICAgICAgTkRBcnJheSB7XG4gICAgcmV0dXJuIHRoaXMubmRhcnJheTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmFuZG9tTm9ybWFsSW5pdGlhbGl6ZXIgaW1wbGVtZW50cyBJbml0aWFsaXplciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbWVhbiA9IDAsIHByaXZhdGUgc3RkZXYgPSAuMDUpIHt9XG5cbiAgaW5pdGlhbGl6ZSh3ZWlnaHRzU2hhcGU6IG51bWJlcltdLCBpbnB1dFVuaXRzOiBudW1iZXIsIG91dHB1dFVuaXRzOiBudW1iZXIpOlxuICAgICAgTkRBcnJheSB7XG4gICAgcmV0dXJuIE5EQXJyYXkucmFuZE5vcm1hbCh3ZWlnaHRzU2hhcGUsIHRoaXMubWVhbiwgdGhpcy5zdGRldik7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJhbmRvbVRydW5jYXRlZE5vcm1hbEluaXRpYWxpemVyIGltcGxlbWVudHMgSW5pdGlhbGl6ZXIge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1lYW4gPSAwLCBwcml2YXRlIHN0ZGV2ID0gLjA1KSB7fVxuXG4gIGluaXRpYWxpemUod2VpZ2h0c1NoYXBlOiBudW1iZXJbXSwgaW5wdXRVbml0czogbnVtYmVyLCBvdXRwdXRVbml0czogbnVtYmVyKTpcbiAgICAgIE5EQXJyYXkge1xuICAgIHJldHVybiBOREFycmF5LnJhbmRUcnVuY2F0ZWROb3JtYWwod2VpZ2h0c1NoYXBlLCB0aGlzLm1lYW4sIHRoaXMuc3RkZXYpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSYW5kb21Vbmlmb3JtSW5pdGlhbGl6ZXIgaW1wbGVtZW50cyBJbml0aWFsaXplciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbWludmFsID0gLS4wNSwgcHJpdmF0ZSBtYXh2YWwgPSAuMDUpIHt9XG5cbiAgaW5pdGlhbGl6ZSh3ZWlnaHRzU2hhcGU6IG51bWJlcltdLCBpbnB1dFVuaXRzOiBudW1iZXIsIG91dHB1dFVuaXRzOiBudW1iZXIpOlxuICAgICAgTkRBcnJheSB7XG4gICAgcmV0dXJuIE5EQXJyYXkucmFuZFVuaWZvcm0od2VpZ2h0c1NoYXBlLCB0aGlzLm1pbnZhbCwgdGhpcy5tYXh2YWwpO1xuICB9XG59XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCB7TkRBcnJheU1hdGh9IGZyb20gJy4vbWF0aC9tYXRoJztcbmltcG9ydCB7TkRBcnJheX0gZnJvbSAnLi9tYXRoL25kYXJyYXknO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuL3V0aWwnO1xuXG4vKipcbiAqIFRoZSBpbnRlcmZhY2UgZm9yIGlucHV0IHByb3ZpZGVycy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbnB1dFByb3ZpZGVyIHtcbiAgLyoqXG4gICAqIEdldCB0aGUgbmV4dCBpbnB1dCBhcyBhIGNvcHkuIFRoaXMgaXMgaW1wb3J0YW50IGJlY2F1c2UgdGhlIGRhdGEgbWlnaHRcbiAgICogZ2V0IHVwbG9hZGVkIHRvIHRoZSBHUFUgYW5kIG1vZGlmeSB0aGUgb3JpZ2luYWwgZGF0YS5cbiAgICogQHBhcmFtIG1hdGggTkRBcnJheU1hdGhcbiAgICovXG4gIGdldE5leHRDb3B5KG1hdGg6IE5EQXJyYXlNYXRoKTogTkRBcnJheTtcbiAgLyoqXG4gICAqIERpc3Bvc2UgdGhlIGlucHV0IGNvcHkuXG4gICAqIEBwYXJhbSBtYXRoIE5EQXJyYXlNYXRoXG4gICAqIEBwYXJhbSBjb3B5IFRoZSBjb3B5IHByb3ZpZGVkIGZyb20gZ2V0TmV4dENvcHlcbiAgICovXG4gIGRpc3Bvc2VDb3B5KG1hdGg6IE5EQXJyYXlNYXRoLCBjb3B5OiBOREFycmF5KTogdm9pZDtcbn1cblxuLyoqXG4gKiBBIGNvbW1vbiBpbnRlcmZhY2UgZm9yIHNodWZmbGVkIGlucHV0IHByb3ZpZGVyIGJ1aWxkZXJzLiBUaGlzIHJldHVybnNcbiAqIElucHV0UHJvdmlkZXJzIHRoYXQgYXJlIHN5bmNocm9uaXplZC5cbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTaHVmZmxlZElucHV0UHJvdmlkZXJCdWlsZGVyIHtcbiAgZ2V0SW5wdXRQcm92aWRlcnMoKTogSW5wdXRQcm92aWRlcltdO1xufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEluTWVtb3J5U2h1ZmZsZWRJbnB1dFByb3ZpZGVyQnVpbGRlciBpbXBsZW1lbnRzXG4gICAgU2h1ZmZsZWRJbnB1dFByb3ZpZGVyQnVpbGRlciB7XG4gIHByb3RlY3RlZCBzaHVmZmxlZEluZGljZXM6IFVpbnQzMkFycmF5O1xuICBwcm90ZWN0ZWQgbnVtSW5wdXRzOiBudW1iZXI7XG5cbiAgcHJvdGVjdGVkIGlkeCA9IDA7XG4gIC8vIENvdW50ZXIgZm9yIGhvdyBtYW55IHRpbWVzIHRoZSBjdXJyZW50IGluZGV4IGhhcyBiZWVuIGNhbGxlZC4gUmVzZXRzIHRvIDBcbiAgLy8gd2hlbiBpdCByZWFjaGVzIHRoZSBudW1iZXIgb2YgaW5wdXRzLlxuICBwcm90ZWN0ZWQgaW5wdXRDb3VudGVyID0gMDtcbiAgcHJvdGVjdGVkIGVwb2NoID0gMDtcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhbiBgSW5NZW1vcnlTaHVmZmxlZElucHV0UHJvdmlkZXJgLiBBbGwgb2YgdGhlIGlucHV0cyBtdXN0IGJlXG4gICAqIGluIG1lbW9yeS5cbiAgICogQHBhcmFtIGlucHV0cyBBbGwgb2YgdGhlIGlucHV0cywgc2l6ZTogW251bWJlciBvZiBpbnB1dHNdW251bWJlciBvZlxuICAgKiBleGFtcGxlc10uXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaW5wdXRzOiBOREFycmF5W11bXSkge1xuICAgIHRoaXMuc2h1ZmZsZWRJbmRpY2VzID0gdXRpbC5jcmVhdGVTaHVmZmxlZEluZGljZXMoaW5wdXRzWzBdLmxlbmd0aCk7XG4gICAgdGhpcy5udW1JbnB1dHMgPSBpbnB1dHMubGVuZ3RoO1xuXG4gICAgLy8gTWFrZSBzdXJlIHRoZSBudW1iZXIgb2YgZXhhbXBsZXMgaW4gZWFjaCBpbnB1dCBtYXRjaGVzLlxuICAgIGNvbnN0IG51bUV4YW1wbGVzID0gdGhpcy5pbnB1dHNbMF0ubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5udW1JbnB1dHM7IGkrKykge1xuICAgICAgdXRpbC5hc3NlcnQoXG4gICAgICAgICAgdGhpcy5pbnB1dHNbaV0ubGVuZ3RoID09PSBudW1FeGFtcGxlcyxcbiAgICAgICAgICAnTnVtYmVyIG9mIGV4YW1wbGVzIG11c3QgbWF0Y2ggYWNyb3NzIGRpZmZlcmVudCBpbnB1dHMuJyk7XG4gICAgfVxuXG4gICAgLy8gTWFrZSBzdXJlIHRoZSBzaGFwZXMgd2l0aGluIGlucHV0cyBhbGwgbWF0Y2guXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm51bUlucHV0czsgaSsrKSB7XG4gICAgICBjb25zdCBpbnB1dFNoYXBlID0gdGhpcy5pbnB1dHNbaV1bMF0uc2hhcGU7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuaW5wdXRzW2ldLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHV0aWwuYXNzZXJ0U2hhcGVzTWF0Y2goaW5wdXRTaGFwZSwgdGhpcy5pbnB1dHNbaV1bal0uc2hhcGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRDdXJyZW50RXhhbXBsZUluZGV4KCk6IG51bWJlciB7XG4gICAgY29uc3QgcmV0dXJuSWR4ID0gdGhpcy5pZHg7XG5cbiAgICB0aGlzLmlucHV0Q291bnRlcisrO1xuICAgIGlmICh0aGlzLmlucHV0Q291bnRlciA+PSB0aGlzLm51bUlucHV0cykge1xuICAgICAgdGhpcy5pZHgrKztcbiAgICAgIHRoaXMuaW5wdXRDb3VudGVyID0gMDtcblxuICAgICAgaWYgKHRoaXMuaWR4ID49IHRoaXMuaW5wdXRzWzBdLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmlkeCA9IDA7XG4gICAgICAgIHRoaXMuZXBvY2grKztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldHVybklkeDtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXROZXh0SW5wdXQoaW5wdXRJZDogbnVtYmVyKTogTkRBcnJheSB7XG4gICAgY29uc3QgY3VycmVudEV4YW1wbGVJbmRleCA9IHRoaXMuZ2V0Q3VycmVudEV4YW1wbGVJbmRleCgpO1xuXG4gICAgcmV0dXJuIHRoaXMuaW5wdXRzW2lucHV0SWRdW3RoaXMuc2h1ZmZsZWRJbmRpY2VzW2N1cnJlbnRFeGFtcGxlSW5kZXhdXTtcbiAgfVxuXG4gIGdldEVwb2NoKCkge1xuICAgIHJldHVybiB0aGlzLmVwb2NoO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgaW5wdXQgcHJvdmlkZXJzIHdoaWNoIHNodWZmbGUgdGhlIGlucHV0cyBhbmQgc3RheSBpbiBzeW5jLlxuICAgKi9cbiAgZ2V0SW5wdXRQcm92aWRlcnMoKTogSW5wdXRQcm92aWRlcltdIHtcbiAgICBjb25zdCBpbnB1dFByb3ZpZGVyczogSW5wdXRQcm92aWRlcltdID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubnVtSW5wdXRzOyBpKyspIHtcbiAgICAgIGlucHV0UHJvdmlkZXJzLnB1c2godGhpcy5nZXRJbnB1dFByb3ZpZGVyKGkpKTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0UHJvdmlkZXJzO1xuICB9XG5cbiAgYWJzdHJhY3QgZ2V0SW5wdXRQcm92aWRlcihpbnB1dElkOiBudW1iZXIpOiBJbnB1dFByb3ZpZGVyO1xufVxuXG4vKipcbiAqIEFuIGluIENQVSBtZW1vcnkgU2h1ZmZsZWRJbnB1dFByb3ZpZGVyQnVpbGRlciB0aGF0IHNodWZmbGVzIE5EQXJyYXlzIG9uIHRoZVxuICogQ1BVIGFuZCBrZWVwcyB0aGVtIG11dHVhbGx5IGluIHN5bmMuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbkNQVU1lbW9yeVNodWZmbGVkSW5wdXRQcm92aWRlckJ1aWxkZXIgZXh0ZW5kc1xuICAgIEluTWVtb3J5U2h1ZmZsZWRJbnB1dFByb3ZpZGVyQnVpbGRlciB7XG4gIGdldElucHV0UHJvdmlkZXIoaW5wdXRJZDogbnVtYmVyKSB7XG4gICAgY29uc3Qgc2h1ZmZsZWRJbnB1dFByb3ZpZGVyID0gdGhpcztcblxuICAgIHJldHVybiB7XG4gICAgICBnZXROZXh0Q29weShtYXRoOiBOREFycmF5TWF0aCk6IE5EQXJyYXkge1xuICAgICAgICByZXR1cm4gTkRBcnJheS5saWtlKHNodWZmbGVkSW5wdXRQcm92aWRlci5nZXROZXh0SW5wdXQoaW5wdXRJZCkpO1xuICAgICAgfSxcbiAgICAgIGRpc3Bvc2VDb3B5KG1hdGg6IE5EQXJyYXlNYXRoLCBjb3B5OiBOREFycmF5KSB7XG4gICAgICAgIGNvcHkuZGlzcG9zZSgpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBBbiBpbiBHUFUgbWVtb3J5IFNodWZmbGVkSW5wdXRQcm92aWRlckJ1aWxkZXIgdGhhdCBzaHVmZmxlcyBOREFycmF5cyBvbiB0aGVcbiAqIEdQVSBhbmQga2VlcHMgdGhlbSBtdXR1YWxseSBpbiBzeW5jLiBUaGlzIGlzIG1vcmUgcGVyZm9ybWFudCB0aGFuIHRoZSBDUFVcbiAqIHZlcnNpb24gYXMgdGV4dHVyZXMgd2lsbCBzdGF5IGluIG1lbW9yeSwgaG93ZXZlciB0aGlzIGlzIG1vcmUgR1BVIG1lbW9yeVxuICogaW50ZW5zaXZlIGFzIGl0IGtlZXBzIHRleHR1cmVzIHJlc2lkZW50IGluIEdQVSBtZW1vcnkuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbkdQVU1lbW9yeVNodWZmbGVkSW5wdXRQcm92aWRlckJ1aWxkZXIgZXh0ZW5kc1xuICAgIEluTWVtb3J5U2h1ZmZsZWRJbnB1dFByb3ZpZGVyQnVpbGRlciB7XG4gIGdldElucHV0UHJvdmlkZXIoaW5wdXRJZDogbnVtYmVyKSB7XG4gICAgY29uc3Qgc2h1ZmZsZWRJbnB1dFByb3ZpZGVyID0gdGhpcztcblxuICAgIHJldHVybiB7XG4gICAgICBnZXROZXh0Q29weShtYXRoOiBOREFycmF5TWF0aCk6IE5EQXJyYXkge1xuICAgICAgICByZXR1cm4gbWF0aC5jbG9uZShzaHVmZmxlZElucHV0UHJvdmlkZXIuZ2V0TmV4dElucHV0KGlucHV0SWQpKTtcbiAgICAgIH0sXG4gICAgICBkaXNwb3NlQ29weShtYXRoOiBOREFycmF5TWF0aCwgY29weTogTkRBcnJheSkge1xuICAgICAgICBjb3B5LmRpc3Bvc2UoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCB7TkRBcnJheU1hdGh9IGZyb20gJy4vbWF0aCc7XG5pbXBvcnQge05EQXJyYXksIFNjYWxhcn0gZnJvbSAnLi9uZGFycmF5JztcblxuLyoqIEEgbm9kZSdzIGFjdGl2YXRpb24gZnVuY3Rpb24gYW5kIGl0cyBkZXJpdmF0aXZlLiAqL1xuZXhwb3J0IGludGVyZmFjZSBBY3RpdmF0aW9uRnVuY3Rpb24ge1xuICBvdXRwdXQ8VCBleHRlbmRzIE5EQXJyYXk+KG1hdGg6IE5EQXJyYXlNYXRoLCBpbnB1dDogVCk6IFQ7XG4gIGRlcjxUIGV4dGVuZHMgTkRBcnJheT4obWF0aDogTkRBcnJheU1hdGgsIGlucHV0OiBULCBvdXRwdXQ6IFQpOiBUO1xufVxuXG5leHBvcnQgY2xhc3MgVGFuSEZ1bmMgaW1wbGVtZW50cyBBY3RpdmF0aW9uRnVuY3Rpb24ge1xuICBvdXRwdXQobWF0aDogTkRBcnJheU1hdGgsIHg6IE5EQXJyYXkpIHtcbiAgICByZXR1cm4gbWF0aC5zY29wZSgoKSA9PiB7XG4gICAgICByZXR1cm4gbWF0aC50YW5oKHgpO1xuICAgIH0pO1xuICB9XG5cbiAgZGVyKG1hdGg6IE5EQXJyYXlNYXRoLCB4OiBOREFycmF5LCB5OiBOREFycmF5KSB7XG4gICAgcmV0dXJuIG1hdGguc2NvcGUoKCkgPT4ge1xuICAgICAgY29uc3QgeVNxdWFyZWQgPSBtYXRoLmVsZW1lbnRXaXNlTXVsKHksIHkpO1xuICAgICAgLy8gMSAtIHleMi5cbiAgICAgIHJldHVybiBtYXRoLnNjYWxhck1pbnVzQXJyYXkoU2NhbGFyLk9ORSwgeVNxdWFyZWQpO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZUxVRnVuYyBpbXBsZW1lbnRzIEFjdGl2YXRpb25GdW5jdGlvbiB7XG4gIG91dHB1dChtYXRoOiBOREFycmF5TWF0aCwgeDogTkRBcnJheSkge1xuICAgIHJldHVybiBtYXRoLnNjb3BlKCgpID0+IHtcbiAgICAgIHJldHVybiBtYXRoLnJlbHUoeCk7XG4gICAgfSk7XG4gIH1cblxuICBkZXIobWF0aDogTkRBcnJheU1hdGgsIHg6IE5EQXJyYXksIHk6IE5EQXJyYXkpIHtcbiAgICByZXR1cm4gbWF0aC5zY29wZSgoKSA9PiB7XG4gICAgICByZXR1cm4gbWF0aC5zdGVwKHgpO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTaWdtb2lkRnVuYyBpbXBsZW1lbnRzIEFjdGl2YXRpb25GdW5jdGlvbiB7XG4gIG91dHB1dChtYXRoOiBOREFycmF5TWF0aCwgeDogTkRBcnJheSkge1xuICAgIHJldHVybiBtYXRoLnNjb3BlKCgpID0+IHtcbiAgICAgIHJldHVybiBtYXRoLnNpZ21vaWQoeCk7XG4gICAgfSk7XG4gIH1cblxuICBkZXIobWF0aDogTkRBcnJheU1hdGgsIHg6IE5EQXJyYXksIHk6IE5EQXJyYXkpIHtcbiAgICByZXR1cm4gbWF0aC5zY29wZSgoKSA9PiB7XG4gICAgICAvLyB5ICogKDEgLSB5KSA9IHkgLSB5XjJcbiAgICAgIGNvbnN0IHlTcXVhcmVkID0gbWF0aC5lbGVtZW50V2lzZU11bCh5LCB5KTtcbiAgICAgIHJldHVybiBtYXRoLnN1Yih5LCB5U3F1YXJlZCk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFNxdWFyZUZ1bmMgaW1wbGVtZW50cyBBY3RpdmF0aW9uRnVuY3Rpb24ge1xuICBvdXRwdXQobWF0aDogTkRBcnJheU1hdGgsIHg6IE5EQXJyYXkpIHtcbiAgICByZXR1cm4gbWF0aC5zY29wZSgoKSA9PiB7XG4gICAgICByZXR1cm4gbWF0aC5lbGVtZW50V2lzZU11bCh4LCB4KTtcbiAgICB9KTtcbiAgfVxuXG4gIGRlcihtYXRoOiBOREFycmF5TWF0aCwgeDogTkRBcnJheSwgeTogTkRBcnJheSkge1xuICAgIHJldHVybiBtYXRoLnNjb3BlKCgpID0+IHtcbiAgICAgIC8vIGR5L2R4ID0gMip4LlxuICAgICAgcmV0dXJuIG1hdGguc2NhbGFyVGltZXNBcnJheShTY2FsYXIuVFdPLCB4KTtcbiAgICB9KTtcbiAgfVxufVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4uL3V0aWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0Q29uY2F0M0RTaGFwZXNNYXRjaChcbiAgICB4MVNoYXBlOiBudW1iZXJbXSwgeDJTaGFwZTogbnVtYmVyW10sIGF4aXM6IG51bWJlcixcbiAgICBlcnJvck1lc3NhZ2VQcmVmaXggPSAnJykge1xuICB1dGlsLmFzc2VydChcbiAgICAgIHgxU2hhcGUubGVuZ3RoID09PSAzLFxuICAgICAgZXJyb3JNZXNzYWdlUHJlZml4ICsgJ0NvbmNhdDNEIHgxIHNoYXBlIHNob3VsZCBiZSBvZiByYW5rIDMuJyk7XG4gIHV0aWwuYXNzZXJ0KFxuICAgICAgeDJTaGFwZS5sZW5ndGggPT09IDMsXG4gICAgICBlcnJvck1lc3NhZ2VQcmVmaXggKyAnQ29uY2F0M0QgeDIgc2hhcGUgc2hvdWxkIGJlIG9mIHJhbmsgMy4nKTtcblxuICB1dGlsLmFzc2VydChcbiAgICAgIGF4aXMgPj0gMCAmJiBheGlzIDwgMywgJ0F4aXMgZm9yIGNvbmNhdDNEIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAyLicpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIChpID09PSBheGlzKSB8fCAoeDFTaGFwZVtpXSA9PT0geDJTaGFwZVtpXSksXG4gICAgICAgIGVycm9yTWVzc2FnZVByZWZpeCArXG4gICAgICAgICAgICBgU2hhcGUgKCR7eDFTaGFwZX0pIGRvZXMgbm90IG1hdGNoICgke3gyU2hhcGV9KSBhbG9uZyBgICtcbiAgICAgICAgICAgIGBub24tY29uY2F0ZW5hdGVkIGF4aXMuYCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVDb25jYXQzRE91dHB1dFNoYXBlKFxuICAgIHgxU2hhcGU6IG51bWJlcltdLCB4MlNoYXBlOiBudW1iZXJbXSxcbiAgICBheGlzOiBudW1iZXIpOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0ge1xuICB1dGlsLmFzc2VydCh4MVNoYXBlLmxlbmd0aCA9PT0gMywgJ0NvbmNhdDNEIHgxIHNoYXBlIHNob3VsZCBiZSBvZiByYW5rIDMuJyk7XG4gIHV0aWwuYXNzZXJ0KHgyU2hhcGUubGVuZ3RoID09PSAzLCAnQ29uY2F0M0QgeDJzaGFwZSBzaG91bGQgYmUgb2YgcmFuayAzLicpO1xuXG4gIGNvbnN0IG91dHB1dFNoYXBlID0geDFTaGFwZS5zbGljZSgpO1xuICBvdXRwdXRTaGFwZVtheGlzXSArPSB4MlNoYXBlW2F4aXNdO1xuICByZXR1cm4gb3V0cHV0U2hhcGUgYXMgW251bWJlciwgbnVtYmVyLCBudW1iZXJdO1xufSIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuLi91dGlsJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVPdXRwdXRTaGFwZTNEKFxuICAgIGlucHV0U2hhcGVSb3dDb2xEZXB0aDogW251bWJlciwgbnVtYmVyLCBudW1iZXJdLCBmaWVsZFNpemU6IG51bWJlcixcbiAgICBkZXB0aDogbnVtYmVyLCBzdHJpZGU6IG51bWJlciwgemVyb1BhZD86IG51bWJlcik6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXSB7XG4gIGlmICh6ZXJvUGFkID09IG51bGwpIHtcbiAgICB6ZXJvUGFkID0gY29tcHV0ZURlZmF1bHRQYWQoaW5wdXRTaGFwZVJvd0NvbERlcHRoLCBmaWVsZFNpemUsIHN0cmlkZSk7XG4gIH1cbiAgY29uc3QgaW5wdXRSb3dzID0gaW5wdXRTaGFwZVJvd0NvbERlcHRoWzBdO1xuICBjb25zdCBpbnB1dENvbHMgPSBpbnB1dFNoYXBlUm93Q29sRGVwdGhbMV07XG4gIGNvbnN0IG91dHB1dFJvd3MgPSAoaW5wdXRSb3dzIC0gZmllbGRTaXplICsgMiAqIHplcm9QYWQpIC8gc3RyaWRlICsgMTtcbiAgdXRpbC5hc3NlcnQoXG4gICAgICB1dGlsLmlzSW50KG91dHB1dFJvd3MpLFxuICAgICAgYFRoZSBvdXRwdXQgIyBvZiByb3dzICgke291dHB1dFJvd3N9KSBtdXN0IGJlIGFuIGludGVnZXIuIENoYW5nZSB0aGUgYCArXG4gICAgICAgICAgYHN0cmlkZSBhbmQvb3IgemVybyBwYWQgcGFyYW1ldGVyc2ApO1xuXG4gIGNvbnN0IG91dHB1dENvbHMgPSAoaW5wdXRDb2xzIC0gZmllbGRTaXplICsgMiAqIHplcm9QYWQpIC8gc3RyaWRlICsgMTtcbiAgdXRpbC5hc3NlcnQoXG4gICAgICB1dGlsLmlzSW50KG91dHB1dENvbHMpLFxuICAgICAgYFRoZSBvdXRwdXQgIyBvZiBjb2x1bW5zICgke291dHB1dENvbHN9KSBtdXN0IGJlIGFuIGludGVnZXIuIENoYW5nZSBgICtcbiAgICAgICAgICBgdGhlIHN0cmlkZSBhbmQvb3IgemVybyBwYWQgcGFyYW1ldGVyc2ApO1xuXG4gIHJldHVybiBbb3V0cHV0Um93cywgb3V0cHV0Q29scywgZGVwdGhdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZURlZmF1bHRQYWQoXG4gICAgaW5wdXRTaGFwZTogW251bWJlciwgbnVtYmVyLCBudW1iZXJdLCBmaWVsZFNpemU6IG51bWJlcixcbiAgICBzdHJpZGU6IG51bWJlcik6IG51bWJlciB7XG4gIHJldHVybiBNYXRoLmZsb29yKChpbnB1dFNoYXBlWzBdICogKHN0cmlkZSAtIDEpIC0gc3RyaWRlICsgZmllbGRTaXplKSAvIDIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZVRleFNoYXBlRnJvbTNEKFxuICAgIHNoYXBlUm93Q29sRGVwdGg6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXSk6IFtudW1iZXIsIG51bWJlcl0ge1xuICByZXR1cm4gW3NoYXBlUm93Q29sRGVwdGhbMF0sIHNoYXBlUm93Q29sRGVwdGhbMV0gKiBzaGFwZVJvd0NvbERlcHRoWzJdXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVXZWlnaHRzU2hhcGU0RChcbiAgICBpbnB1dERlcHRoOiBudW1iZXIsIG91dHB1dERlcHRoOiBudW1iZXIsXG4gICAgZlNpemU6IG51bWJlcik6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdIHtcbiAgcmV0dXJuIFtmU2l6ZSwgZlNpemUsIGlucHV0RGVwdGgsIG91dHB1dERlcHRoXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVXZWlnaHRzVGV4U2hhcGUoXG4gICAgaW5wdXREZXB0aDogbnVtYmVyLCBvdXRwdXREZXB0aDogbnVtYmVyLFxuICAgIGZpZWxkU2l6ZTogbnVtYmVyKTogW251bWJlciwgbnVtYmVyXSB7XG4gIHJldHVybiBbZmllbGRTaXplICogZmllbGRTaXplICogaW5wdXREZXB0aCwgb3V0cHV0RGVwdGhdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZUJpYXNlc1RleFNoYXBlKG91dHB1dERlcHRoOiBudW1iZXIpOiBbbnVtYmVyLCBudW1iZXJdIHtcbiAgcmV0dXJuIFsxLCBvdXRwdXREZXB0aF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlRGlsYXRlZFJDKFxuICAgIHJjOiBbbnVtYmVyLCBudW1iZXJdLCBvcmlnU3RyaWRlOiBudW1iZXIpOiBbbnVtYmVyLCBudW1iZXJdIHtcbiAgY29uc3Qgcm93c0RpbGF0ZWQgPSAocmNbMF0gLSAxKSAqIG9yaWdTdHJpZGUgKyAxO1xuICBjb25zdCBjb2xzRGlsYXRlZCA9IChyY1sxXSAtIDEpICogb3JpZ1N0cmlkZSArIDE7XG4gIHJldHVybiBbcm93c0RpbGF0ZWQsIGNvbHNEaWxhdGVkXTtcbn1cbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlU2hhcGVzKFxuICAgIHNvdXJjZVNpemU6IFtudW1iZXIsIG51bWJlcl0sIGRlc3RTaXplOiBbbnVtYmVyLCBudW1iZXJdKSB7XG4gIGNvbnN0IHNyY0FyZWEgPSBzb3VyY2VTaXplWzBdICogc291cmNlU2l6ZVsxXTtcbiAgY29uc3QgZHN0QXJlYSA9IGRlc3RTaXplWzBdICogZGVzdFNpemVbMV07XG4gIGlmIChzcmNBcmVhICE9PSBkc3RBcmVhKSB7XG4gICAgY29uc3Qgc3JjU3RyID0gJ1snICsgc291cmNlU2l6ZVswXSArICcsICcgKyBzb3VyY2VTaXplWzFdICsgJ10nO1xuICAgIGNvbnN0IGRzdFN0ciA9ICdbJyArIGRlc3RTaXplWzBdICsgJywgJyArIGRlc3RTaXplWzFdICsgJ10nO1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2NvcHkyRCBzaGFwZXMgaGF2ZSBkaWZmZXJlbnQgYXJlYXM6XFxuICBzb3VyY2VTaXplICcgKyBzcmNTdHIgK1xuICAgICAgICAnLCBhcmVhICcgKyBzcmNBcmVhICsgJ1xcbiAgZGVzdFNpemUgJyArIGRzdFN0ciArICcsIGFyZWEgJyArIGRzdEFyZWEpO1xuICB9XG59XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCB7TkRBcnJheU1hdGh9IGZyb20gJy4vbWF0aCc7XG5pbXBvcnQge05EQXJyYXksIFNjYWxhcn0gZnJvbSAnLi9uZGFycmF5JztcblxuLyoqXG4gKiBBbiBlcnJvciBmdW5jdGlvbiBhbmQgaXRzIGRlcml2YXRpdmUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRWxlbWVudFdpc2VDb3N0RnVuY3Rpb24ge1xuICBjb3N0PFQgZXh0ZW5kcyBOREFycmF5PihtYXRoOiBOREFycmF5TWF0aCwgeDE6IFQsIHgyOiBUKTogVDtcbiAgZGVyPFQgZXh0ZW5kcyBOREFycmF5PihtYXRoOiBOREFycmF5TWF0aCwgeDE6IFQsIHgyOiBUKTogVDtcbiAgZGlzcG9zZSgpOiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgU3F1YXJlQ29zdEZ1bmMgaW1wbGVtZW50cyBFbGVtZW50V2lzZUNvc3RGdW5jdGlvbiB7XG4gIHByaXZhdGUgaGFsZk9uZSA9IFNjYWxhci5uZXcoMC41KTtcblxuICBjb3N0KG1hdGg6IE5EQXJyYXlNYXRoLCB4MTogTkRBcnJheSwgeDI6IE5EQXJyYXkpOiBOREFycmF5IHtcbiAgICBjb25zdCBkaWZmID0gbWF0aC5zdWIoeDEsIHgyKTtcbiAgICBjb25zdCBkaWZmU3F1YXJlZCA9IG1hdGguZWxlbWVudFdpc2VNdWwoZGlmZiwgZGlmZik7XG4gICAgY29uc3QgcmVzdWx0ID0gbWF0aC5zY2FsYXJUaW1lc0FycmF5KHRoaXMuaGFsZk9uZSwgZGlmZlNxdWFyZWQpO1xuXG4gICAgZGlmZi5kaXNwb3NlKCk7XG4gICAgZGlmZlNxdWFyZWQuZGlzcG9zZSgpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGRlcihtYXRoOiBOREFycmF5TWF0aCwgeDE6IE5EQXJyYXksIHgyOiBOREFycmF5KTogTkRBcnJheSB7XG4gICAgcmV0dXJuIG1hdGguc3ViKHgxLCB4Mik7XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIHRoaXMuaGFsZk9uZS5kaXNwb3NlKCk7XG4gIH1cbn1cbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuLi91dGlsJztcbmltcG9ydCAqIGFzIGNvbmNhdDNkX3V0aWwgZnJvbSAnLi9jb25jYXQzZF91dGlsJztcbmltcG9ydCAqIGFzIGNvcHkyZF91dGlsIGZyb20gJy4vY29weTJkX3V0aWwnO1xuXG5pbXBvcnQge0FycmF5MUQsIEFycmF5MkQsIEFycmF5M0QsIEFycmF5NEQsIE5EQXJyYXksIFNjYWxhcn0gZnJvbSAnLi9uZGFycmF5JztcblxuZXhwb3J0IHR5cGUgU2NvcGVSZXN1bHQgPSBOREFycmF5W118TkRBcnJheXx2b2lkO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTkRBcnJheU1hdGgge1xuICBwcml2YXRlIG5kYXJyYXlTY29wZXM6IE5EQXJyYXlbXVtdID0gW107XG4gIHByaXZhdGUgYWN0aXZlU2NvcGU6IE5EQXJyYXlbXTtcblxuICBwcml2YXRlIG5kYXJyYXlzVG9LZWVwOiBOREFycmF5W11bXSA9IFtdO1xuICBwcml2YXRlIGFjdGl2ZVNjb3BlTkRBcnJheXNUb0tlZXA6IE5EQXJyYXlbXSA9IFtdO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0gc2FmZU1vZGUgSW4gc2FmZSBtb2RlLCB5b3UgbXVzdCB1c2UgbWF0aCBvcGVyYXRpb25zIGluc2lkZVxuICAgKiBhIG1hdGguc2NvcGUoKSB3aGljaCB3aWxsIGF1dG9tYXRpY2FsbHkgY2xlYW4gdXAgaW50ZXJtZWRpYXRlIE5EQXJyYXlzLlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzYWZlTW9kZTogYm9vbGVhbikge31cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IG1hdGggc2NvcGUuIFB1dCBjaGFpbmVkIG1hdGggb3BlcmF0aW9ucyBpbnNpZGUgYSBzY29wZVxuICAgKiBmdW5jdGlvbiBjbG9zdXJlIHNvIHRoYXQgdGhlIGxpYnJhcnkgYXV0b21hdGljYWxseSBjbGVhbnMgdXAgTkRBcnJheXNcbiAgICogZnJvbSBpbnRlcm1lZGlhdGUgbWF0aCBvcGVyYXRpb25zLiBZb3UgbXVzdCBjcmVhdGUgYSBzY29wZSBpbiBzYWZlIG1vZGVcbiAgICogdG8gY2FsbCBtYXRoIG9wZXJhdGlvbnMuIElmIGEgcmVzdWx0IGlzIHJldHVybmVkIGZyb20gdGhlIHNjb3BlLCBpdCB3aWxsXG4gICAqIGFsc28gYmUgdHJhY2tlZCwgd2hpY2ggbWVhbnMgdGhlcmUgbXVzdCBiZSB5ZXQgYW5vdGhlciB3cmFwcGluZyBzY29wZS5cbiAgICogQHBhcmFtIHNjb3BlRm4gVGhlIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2l0aCBjaGFpbmVkIG1hdGggb3BlcmF0aW9ucy5cbiAgICovXG4gIHNjb3BlPFQgZXh0ZW5kcyBTY29wZVJlc3VsdD4oXG4gICAgICBzY29wZUZuOlxuICAgICAgICAgIChrZWVwOiA8VDEgZXh0ZW5kcyBOREFycmF5PihuZGFycmF5OiBUMSkgPT4gVDEsXG4gICAgICAgICAgIHRyYWNrOiA8VDIgZXh0ZW5kcyBOREFycmF5PihuZGFycmF5OiBUMikgPT4gVDIpID0+IFQpIHtcbiAgICB0aGlzLnN0YXJ0U2NvcGUoKTtcblxuICAgIGNvbnN0IGtlZXBGbiA9IDxUIGV4dGVuZHMgTkRBcnJheT4obmRhcnJheTogVCk6IFQgPT4gdGhpcy5rZWVwKG5kYXJyYXkpO1xuICAgIGNvbnN0IHRyYWNrRm4gPSA8VCBleHRlbmRzIE5EQXJyYXk+KG5kYXJyYXk6IFQpOiBUID0+IHRoaXMudHJhY2sobmRhcnJheSk7XG4gICAgY29uc3QgcmVzdWx0ID0gc2NvcGVGbihrZWVwRm4sIHRyYWNrRm4pO1xuXG4gICAgdGhpcy5lbmRTY29wZShyZXN1bHQpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydCBhIHNjb3BlLiBVc2UgdGhpcyB3aXRoIGVuZFNjb3BlKCkgdG8gYWNoaWV2ZSB0aGUgc2FtZSBmdW5jdGlvbmFsaXR5XG4gICAqIGFzIHNjb3BlKCkgd2l0aG91dCB0aGUgbmVlZCBmb3IgYSBmdW5jdGlvbiBjbG9zdXJlLlxuICAgKi9cbiAgc3RhcnRTY29wZSgpIHtcbiAgICBjb25zdCBuZXdTY29wZTogTkRBcnJheVtdID0gW107XG4gICAgdGhpcy5uZGFycmF5U2NvcGVzLnB1c2gobmV3U2NvcGUpO1xuICAgIHRoaXMuYWN0aXZlU2NvcGUgPSBuZXdTY29wZTtcblxuICAgIGNvbnN0IG5ld05EQXJyYXlzVG9LZWVwOiBOREFycmF5W10gPSBbXTtcbiAgICB0aGlzLm5kYXJyYXlzVG9LZWVwLnB1c2gobmV3TkRBcnJheXNUb0tlZXApO1xuICAgIHRoaXMuYWN0aXZlU2NvcGVOREFycmF5c1RvS2VlcCA9IG5ld05EQXJyYXlzVG9LZWVwO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuZCBhIHNjb3BlLiBVc2UgdGhpcyB3aXRoIHN0YXJ0U2NvcGUoKSB0byBhY2hpZXZlIHRoZSBzYW1lIGZ1bmN0aW9uYWxpdHlcbiAgICogYXMgc2NvcGUoKSB3aXRob3V0IHRoZSBuZWVkIGZvciBhIGZ1bmN0aW9uIGNsb3N1cmUuXG4gICAqL1xuICBlbmRTY29wZShyZXN1bHQ6IFNjb3BlUmVzdWx0KSB7XG4gICAgLy8gRGlzcG9zZSB0aGUgY3VycmVudCBzY29wZS5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYWN0aXZlU2NvcGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IG5kYXJyYXkgPSB0aGlzLmFjdGl2ZVNjb3BlW2ldO1xuXG4gICAgICBpZiAodGhpcy5pc05EQXJyYXlEYXRhSW5MaXN0KG5kYXJyYXksIHRoaXMuYWN0aXZlU2NvcGVOREFycmF5c1RvS2VlcCkgfHxcbiAgICAgICAgICAocmVzdWx0ICE9IG51bGwgJiYgcmVzdWx0IGluc3RhbmNlb2YgTkRBcnJheSAmJlxuICAgICAgICAgICBuZGFycmF5LmdldERhdGEoKSA9PT0gKHJlc3VsdCBhcyBOREFycmF5KS5nZXREYXRhKCkpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgbmRhcnJheS5kaXNwb3NlKCk7XG4gICAgfVxuXG4gICAgLy8gUG9wIHRoZSBjdXJyZW50IHNjb3BlLlxuICAgIHRoaXMubmRhcnJheVNjb3Blcy5wb3AoKTtcbiAgICB0aGlzLmFjdGl2ZVNjb3BlID0gdGhpcy5uZGFycmF5U2NvcGVzLmxlbmd0aCA9PT0gMCA/XG4gICAgICAgIG51bGwhIDpcbiAgICAgICAgdGhpcy5uZGFycmF5U2NvcGVzW3RoaXMubmRhcnJheVNjb3Blcy5sZW5ndGggLSAxXTtcblxuICAgIC8vIFRyYWNrIHRoZSBjdXJyZW50IHJlc3VsdCBpbiB0aGUgcGFyZW50IHNjb3BlLlxuICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBOREFycmF5ICYmXG4gICAgICAgICF0aGlzLmlzTkRBcnJheURhdGFJbkxpc3QocmVzdWx0LCB0aGlzLmFjdGl2ZVNjb3BlTkRBcnJheXNUb0tlZXApKSB7XG4gICAgICB0aGlzLnRyYWNrKHJlc3VsdCk7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICAgIHJlc3VsdC5mb3JFYWNoKHIgPT4ge1xuICAgICAgICBpZiAociBpbnN0YW5jZW9mIE5EQXJyYXkgJiZcbiAgICAgICAgICAgICF0aGlzLmlzTkRBcnJheURhdGFJbkxpc3QociwgdGhpcy5hY3RpdmVTY29wZU5EQXJyYXlzVG9LZWVwKSkge1xuICAgICAgICAgIHRoaXMudHJhY2socik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMubmRhcnJheXNUb0tlZXAucG9wKCk7XG4gICAgdGhpcy5hY3RpdmVTY29wZU5EQXJyYXlzVG9LZWVwID0gdGhpcy5uZGFycmF5c1RvS2VlcC5sZW5ndGggPT09IDAgP1xuICAgICAgICBudWxsISA6XG4gICAgICAgIHRoaXMubmRhcnJheXNUb0tlZXBbdGhpcy5uZGFycmF5c1RvS2VlcC5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIHByaXZhdGUgaXNOREFycmF5RGF0YUluTGlzdChuZGFycmF5OiBOREFycmF5LCBuZGFycmF5TGlzdDogTkRBcnJheVtdKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZGFycmF5TGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKG5kYXJyYXlMaXN0W2ldLmdldERhdGEoKSA9PT0gbmRhcnJheS5nZXREYXRhKCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBLZWVwcyBhbiBOREFycmF5IGluIHRoZSBjdXJyZW50IHNjb3BlIGZyb20gYmVpbmcgZGlzcG9zZWQgYXV0b21hdGljYWxseS5cbiAgICogQHBhcmFtIHJlc3VsdCBUaGUgTkRBcnJheSB0byBrZWVwIGZyb20gYmVpbmcgZGlzcG9zZWQuXG4gICAqL1xuICBrZWVwPFQgZXh0ZW5kcyBOREFycmF5PihyZXN1bHQ6IFQpOiBUIHtcbiAgICBpZiAodGhpcy5hY3RpdmVTY29wZSA9PSBudWxsKSB7XG4gICAgICBpZiAodGhpcy5zYWZlTW9kZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAnWW91IGFyZSB1c2luZyBtYXRoIGluIHNhZmUgbW9kZS4gRW5jbG9zZSBhbGwgJyArXG4gICAgICAgICAgICAnbWF0aC5tZXRob2QoKSBjYWxscyBpbnNpZGUgYSBzY29wZTogJyArXG4gICAgICAgICAgICAnbWF0aC5zY29wZSgoKSA9PiB7bWF0aC5tZXRob2QoKTsuLi59KSB0byBhdm9pZCBtZW1vcnkgJyArXG4gICAgICAgICAgICAnbGVha3MuJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZVNjb3BlTkRBcnJheXNUb0tlZXAucHVzaChyZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVHJhY2tzIGFuIE5EQXJyYXkgaW4gdGhlIGN1cnJlbnQgc2NvcGUgdG8gYmUgYXV0b21hdGljYWxseSBjbGVhbmVkIHVwIHdoZW5cbiAgICogdGhlIGN1cnJlbnQgc2NvcGUgZW5kcywgYW5kIHJldHVybnMgdGhlIHZhbHVlLlxuICAgKiBAcGFyYW0gcmVzdWx0IFRoZSBOREFycmF5IHRvIHRyYWNrIGluIHRoZSBjdXJyZW50IHNjb3BlLlxuICAgKi9cbiAgdHJhY2s8VCBleHRlbmRzIE5EQXJyYXk+KHJlc3VsdDogVCk6IFQge1xuICAgIGlmICh0aGlzLmFjdGl2ZVNjb3BlID09IG51bGwpIHtcbiAgICAgIGlmICh0aGlzLnNhZmVNb2RlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdZb3UgYXJlIHVzaW5nIG1hdGggaW4gc2FmZSBtb2RlLiBFbmNsb3NlIGFsbCAnICtcbiAgICAgICAgICAgICdtYXRoLm1ldGhvZCgpIGNhbGxzIGluc2lkZSBhIHNjb3BlOiAnICtcbiAgICAgICAgICAgICdtYXRoLnNjb3BlKCgpID0+IHttYXRoLm1ldGhvZCgpOy4uLn0pIHRvIGF2b2lkIG1lbW9yeSAnICtcbiAgICAgICAgICAgICdsZWFrcy4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHRoaXMuYWN0aXZlU2NvcGUucHVzaChyZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byBtYXRyaWNlcywgQSAqIEIuIFRoZXNlIG11c3QgYmUgbWF0cmljZXMsXG4gICAqIHVzZSBtYXRyaXhUaW1lc1ZlY3RvciBhbmQgdmVjdG9yVGltZXNNYXRyaXgsIGRvdFByb2R1Y3QsIGFuZCBvdXRlclByb2R1Y3RcbiAgICogaW4gb3RoZXIgY2FzZXMuXG4gICAqIEBwYXJhbSBhIEZpcnN0IG1hdHJpeCBpbiBkb3QgcHJvZHVjdCBvcGVyYXRpb24uXG4gICAqIEBwYXJhbSBiIFNlY29uZCBtYXRyaXggaW4gZG90IHByb2R1Y3Qgb3BlcmF0aW9uLlxuICAgKiBAcGFyYW0gYU9yaWVudGF0aW9uIFRoZSBNYXRyaXhPcmllbnRhdGlvbiBvZiBBLiBJZiB1c2luZyBUUkFOU1BPU0VELCB3aWxsXG4gICAqIGNvbXB1dGUgQV5UICogQi5cbiAgICogQHBhcmFtIGJPcmllbnRhdGlvbiBUaGUgTWF0cml4T3JpZW50YXRpb24gb2YgQi4gSWYgdXNpbmcgVFJBTlNQT1NFRCwgd2lsbFxuICAgKiBjb21wdXRlIEEgKiBCXlQuXG4gICAqL1xuICBtYXRNdWwoXG4gICAgICBhOiBBcnJheTJELCBiOiBBcnJheTJELCBhT3JpZW50YXRpb24gPSBNYXRyaXhPcmllbnRhdGlvbi5SRUdVTEFSLFxuICAgICAgYk9yaWVudGF0aW9uID0gTWF0cml4T3JpZW50YXRpb24uUkVHVUxBUik6IEFycmF5MkQge1xuICAgIGNvbnN0IGlubmVyU2hhcGVBID1cbiAgICAgICAgKGFPcmllbnRhdGlvbiA9PT0gTWF0cml4T3JpZW50YXRpb24uUkVHVUxBUikgPyBhLnNoYXBlWzFdIDogYS5zaGFwZVswXTtcbiAgICBjb25zdCBpbm5lclNoYXBlQiA9XG4gICAgICAgIChiT3JpZW50YXRpb24gPT09IE1hdHJpeE9yaWVudGF0aW9uLlJFR1VMQVIpID8gYi5zaGFwZVswXSA6IGIuc2hhcGVbMV07XG5cbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgYS5yYW5rID09PSAyICYmIGIucmFuayA9PT0gMixcbiAgICAgICAgYEVycm9yIGluIG1hdE11bDogaW5wdXRzIG11c3QgYmUgcmFuayAyLCBnb3QgcmFua3MgJHthLnJhbmt9YCArXG4gICAgICAgICAgICBgYW5kICR7Yi5yYW5rfS5gKTtcblxuICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICBpbm5lclNoYXBlQSA9PT0gaW5uZXJTaGFwZUIsXG4gICAgICAgIGBFcnJvciBpbiBtYXRNdWw6IGlubmVyIHNoYXBlcyAoJHtpbm5lclNoYXBlQX0pIGFuZCAoYCArXG4gICAgICAgICAgICBgJHtpbm5lclNoYXBlQn0pIG9mIE5EQXJyYXlzIHdpdGggc2hhcGVzICR7YS5zaGFwZX0gYW5kIGAgK1xuICAgICAgICAgICAgYCR7Yi5zaGFwZX0gYW5kIG9yaWVudGF0aW9ucyAke01hdHJpeE9yaWVudGF0aW9uW2FPcmllbnRhdGlvbl19YCArXG4gICAgICAgICAgICBgIGFuZCAke01hdHJpeE9yaWVudGF0aW9uW2JPcmllbnRhdGlvbl19IG11c3QgbWF0Y2guYCk7XG5cbiAgICByZXR1cm4gdGhpcy50cmFjayh0aGlzLm1hdE11bEludGVybmFsKGEsIGIsIGFPcmllbnRhdGlvbiwgYk9yaWVudGF0aW9uKSk7XG4gIH1cbiAgcHJvdGVjdGVkIGFic3RyYWN0IG1hdE11bEludGVybmFsKFxuICAgICAgYTogQXJyYXkyRCwgYjogQXJyYXkyRCwgYU9yaWVudGF0aW9uOiBNYXRyaXhPcmllbnRhdGlvbixcbiAgICAgIGJPcmllbnRhdGlvbjogTWF0cml4T3JpZW50YXRpb24pOiBBcnJheTJEO1xuXG4gIC8qKlxuICAgKiBDb21wdXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgYSB2ZWN0b3IgYW5kIGEgbWF0cml4LCB2ICogQi5cbiAgICogQHBhcmFtIHYgVGhlIHZlY3RvciBpbiBkb3QgcHJvZHVjdCBvcGVyYXRpb24uXG4gICAqIEBwYXJhbSBtYXRyaXggVGhlIG1hdHJpeCBpbiBkb3QgcHJvZHVjdCBvcGVyYXRpb24uXG4gICAqL1xuICB2ZWN0b3JUaW1lc01hdHJpeCh2OiBBcnJheTFELCBtYXRyaXg6IEFycmF5MkQpOiBBcnJheTFEIHtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgdi5yYW5rID09PSAxLFxuICAgICAgICBgRXJyb3IgaW4gdmVjdG9yVGltZXNNYXRyaXg6IGZpcnN0IGlucHV0IG11c3QgYmUgcmFuayAxLCBidXQgZ290IGAgK1xuICAgICAgICAgICAgYHJhbmsgJHt2LnJhbmt9LmApO1xuICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICBtYXRyaXgucmFuayA9PT0gMixcbiAgICAgICAgYEVycm9yIGluIHZlY3RvclRpbWVzTWF0cml4OiBzZWNvbmQgaW5wdXQgbXVzdCBiZSByYW5rIDIsIGJ1dCBnb3QgYCArXG4gICAgICAgICAgICBgcmFuayAke21hdHJpeC5yYW5rfS5gKTtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgdi5zaXplID09PSBtYXRyaXguc2hhcGVbMF0sXG4gICAgICAgIGBFcnJvciBpbiB2ZWN0b3JUaW1lc01hdHJpeDogc2l6ZSBvZiBmaXJzdCByYW5rIDEgaW5wdXQgKCR7di5zaXplfSkgYCArXG4gICAgICAgICAgICBgbXVzdCBtYXRjaCBpbm5lciBkaW1lbnNpb24gb2Ygc2Vjb25kIHJhbmsgMiBpbnB1dCwgYnV0IGdvdCBgICtcbiAgICAgICAgICAgIGByYW5rICR7bWF0cml4LnJhbmt9LmApO1xuXG4gICAgcmV0dXJuIHRoaXMubWF0TXVsKHYuYXMyRCgxLCB2LnNpemUpLCBtYXRyaXgpLmFzMUQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wdXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgYSBtYXRyaXggYW5kIHZlY3RvciwgQSAqIHYuXG4gICAqIEBwYXJhbSBtYXRyaXggVGhlIG1hdHJpeCBpbiBkb3QgcHJvZHVjdCBvcGVyYXRpb24uXG4gICAqIEBwYXJhbSB2IFRoZSB2ZWN0b3IgaW4gZG90IHByb2R1Y3Qgb3BlcmF0aW9uLlxuICAgKi9cbiAgbWF0cml4VGltZXNWZWN0b3IobWF0cml4OiBBcnJheTJELCB2OiBBcnJheTFEKTogQXJyYXkxRCB7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIHYucmFuayA9PT0gMSxcbiAgICAgICAgYEVycm9yIGluIHZlY3RvclRpbWVzTWF0cml4OiBzZWNvbmQgaW5wdXQgbXVzdCByYW5rIDEsIGJ1dCBnb3QgYCArXG4gICAgICAgICAgICBgcmFuayAke3YucmFua30uYCk7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIG1hdHJpeC5yYW5rID09PSAyLFxuICAgICAgICBgRXJyb3IgaW4gdmVjdG9yVGltZXNNYXRyaXg6IGZpcnN0IGlucHV0IG11c3QgYmUgYSByYW5rIDIsIGJ1dCBnb3QgYCArXG4gICAgICAgICAgICBgcmFuayAke21hdHJpeC5yYW5rfS5gKTtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgdi5zaXplID09PSBtYXRyaXguc2hhcGVbMV0sXG4gICAgICAgIGBFcnJvciBpbiB2ZWN0b3JUaW1lc01hdHJpeDogc2l6ZSBvZiBmaXJzdCByYW5rIDEgaW5wdXQgJHt2LnNpemV9IGAgK1xuICAgICAgICAgICAgYG11c3QgbWF0Y2ggaW5uZXIgZGltZW5zaW9uIG9mIHNlY29uZCByYW5rIDIgaW5wdXQsIGJ1dCBnb3QgYCArXG4gICAgICAgICAgICBgc2hhcGUgJHttYXRyaXguc2hhcGV9LmApO1xuXG4gICAgcmV0dXJuIHRoaXMubWF0TXVsKG1hdHJpeCwgdi5hczJEKHYuc2l6ZSwgMSkpLmFzMUQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wdXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlY3RvcnMsIHYxICogdjIuXG4gICAqIEBwYXJhbSB2MSBUaGUgZmlyc3QgdmVjdG9yIGluIHRoZSBkb3QgcHJvZHVjdCBvcGVyYXRpb24uXG4gICAqIEBwYXJhbSB2MiBUaGUgc2Vjb25kIHZlY3RvciBpbiB0aGUgZG90IHByb2R1Y3Qgb3BlcmF0aW9uLlxuICAgKi9cbiAgZG90UHJvZHVjdCh2MTogQXJyYXkxRCwgdjI6IEFycmF5MUQpOiBTY2FsYXIge1xuICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICB2MS5yYW5rID09PSAxICYmIHYyLnJhbmsgPT09IDEsXG4gICAgICAgIGBFcnJvciBpbiBkb3RQcm9kdWN0OiBpbnB1dHMgbXVzdCBiZSByYW5rIDEsIGJ1dCBnb3QgcmFua3MgYCArXG4gICAgICAgICAgICBgJHt2MS5yYW5rfSBhbmQgJHt2Mi5yYW5rfS5gKTtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgdjEuc2l6ZSA9PT0gdjIuc2l6ZSxcbiAgICAgICAgYEVycm9yIGluIGRvdFByb2R1Y3Q6IHNpemUgb2YgaW5wdXRzICgke3YxLnNpemV9KSBhbmQgKGAgK1xuICAgICAgICAgICAgYCR7djIuc2l6ZX0pIG11c3QgbWF0Y2guYCk7XG4gICAgcmV0dXJuIHRoaXMubWF0TXVsKHYxLmFzMkQoMSwgdjEuc2l6ZSksIHYyLmFzMkQodjIuc2l6ZSwgMSkpLmFzU2NhbGFyKCk7XG4gIH1cblxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIG91dGVyIHByb2R1Y3Qgb2YgdHdvIHZlY3RvcnMsIHYxIGFuZCB2Mi5cbiAgICogQHBhcmFtIHYxIFRoZSBmaXJzdCB2ZWN0b3IgaW4gdGhlIG91dGVyIHByb2R1Y3Qgb3BlcmF0aW9uLlxuICAgKiBAcGFyYW0gdjIgVGhlIHNlY29uZCB2ZWN0b3IgaW4gdGhlIGRvdCBwcm9kdWN0IG9wZXJhdGlvbi5cbiAgICovXG4gIG91dGVyUHJvZHVjdCh2MTogQXJyYXkxRCwgdjI6IEFycmF5MUQpOiBBcnJheTJEIHtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgdjEucmFuayA9PT0gMSAmJiB2Mi5yYW5rID09PSAxLFxuICAgICAgICBgRXJyb3IgaW4gb3V0ZXJQcm9kdWN0OiBpbnB1dHMgbXVzdCBiZSByYW5rIDEsIGJ1dCBnb3QgcmFua3MgYCArXG4gICAgICAgICAgICBgJHt2MS5yYW5rfSBhbmQgJHt2Mi5yYW5rfS5gKTtcblxuICAgIHJldHVybiB0aGlzLm1hdE11bCh2MS5hczJEKHYxLnNpemUsIDEpLCB2Mi5hczJEKDEsIHYyLnNpemUpKTtcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vL1xuICAvLyBTaGFwZSBvcHMgLy9cbiAgLy8vLy8vLy8vLy8vLy8vXG5cbiAgLyoqXG4gICAqIENsb25lcyBhbiBOREFycmF5IG9mIGFueSBzaGFwZS5cbiAgICogQHBhcmFtIG5kYXJyYXkgVGhlIE5EQXJyYXkgdG8gY2xvbmUuXG4gICAqL1xuICBjbG9uZTxUIGV4dGVuZHMgTkRBcnJheT4obmRhcnJheTogVCk6IFQge1xuICAgIHJldHVybiB0aGlzLnRyYWNrKHRoaXMuY2xvbmVJbnRlcm5hbChuZGFycmF5KSk7XG4gIH1cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGNsb25lSW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KG5kYXJyYXk6IFQpOiBUO1xuXG4gIC8qKlxuICAgKiBSZXNoYXBlcyBhbiBOREFycmF5IHRvIGEgbmV3IHNoYXBlLiBUaGUgc2l6ZSBvZiB0aGUgaW5wdXQgTkRBcnJheSBtdXN0XG4gICAqIG1hdGNoIHRoZSBzaXplIG9mIHRoZSByZXF1ZXN0ZWQgc2hhcGUuXG4gICAqIEBwYXJhbSBuZGFycmF5IFRoZSBpbnB1dCBOREFycmF5LlxuICAgKiBAcGFyYW0gbmV3U2hhcGUgVGhlIG5ldyBzaGFwZSB0byByZXNoYXBlIHRoZSBOREFycmF5IHRvLiBNdXN0IGJlIHRoZSBzYW1lXG4gICAqIHNpemUgYXMgdGhlIE5EQXJyYXkuXG4gICAqL1xuICByZXNoYXBlPFQxIGV4dGVuZHMgTkRBcnJheSwgVDIgZXh0ZW5kcyBOREFycmF5PihcbiAgICAgIG5kYXJyYXk6IFQxLCBuZXdTaGFwZTogbnVtYmVyW10pOiBUMiB7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIG5kYXJyYXkuc2l6ZSA9PT0gdXRpbC5zaXplRnJvbVNoYXBlKG5ld1NoYXBlKSxcbiAgICAgICAgYEVycm9yIGluIHJlc2hhcGU6IG9sZCBzaXplICR7bmRhcnJheS5zaXplfSBtdXN0IG1hdGNoIG5ldyBzaXplIGAgK1xuICAgICAgICAgICAgYCR7dXRpbC5zaXplRnJvbVNoYXBlKG5ld1NoYXBlKX0uYCk7XG4gICAgcmV0dXJuIHRoaXMudHJhY2sodGhpcy5yZXNoYXBlSW50ZXJuYWw8VDEsIFQyPihuZGFycmF5LCBuZXdTaGFwZSkpO1xuICB9XG4gIHByb3RlY3RlZCBhYnN0cmFjdCByZXNoYXBlSW50ZXJuYWw8VDEgZXh0ZW5kcyBOREFycmF5LCBUMiBleHRlbmRzIE5EQXJyYXk+KFxuICAgICAgbmRhcnJheTogVDEsIG5ld1NoYXBlOiBudW1iZXJbXSk6IFQyO1xuXG4gIC8qKlxuICAgKiBFeHRyYWN0cyBhIHNsaWNlIGZyb20gYSBtYXRyaXguIFRoZSBvcGVyYXRpb24gZXh0cmFjZXMgYSBzbGljZSBmcm9tIGlucHV0XG4gICAqIHRoYXQgc3RhcnRzIGF0IGNvb3JkaW5hdGVzIGBiZWdpbmAgYW5kIGlzIG9mIHNpemUgYHNpemVgLlxuICAgKiBAcGFyYW0gaW5wdXQgVGhlIGlucHV0IG1hdHJpeCB0byBzbGljZSBmcm9tLlxuICAgKiBAcGFyYW0gYmVnaW4gVGhlIDJEIGNvb3JkaW5hdGVzIGluIHRoZSBpbnB1dCBtYXRyaXggdG8gc3RhcnQgdGhlIHNsaWNlXG4gICAqIGZyb20uXG4gICAqIEBwYXJhbSBzaXplIFRoZSBzaWNlIG9mIHRoZSAyRCB3aW5kb3cgdG8gc2xpY2UuXG4gICAqL1xuICBzbGljZTJEKGlucHV0OiBBcnJheTJELCBiZWdpbjogW251bWJlciwgbnVtYmVyXSwgc2l6ZTogW251bWJlciwgbnVtYmVyXSk6XG4gICAgICBBcnJheTJEIHtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgYmVnaW5bMF0gKyBzaXplWzBdIDw9IGlucHV0LnNoYXBlWzBdICYmXG4gICAgICAgICAgICBiZWdpblsxXSArIHNpemVbMV0gPD0gaW5wdXQuc2hhcGVbMV0sXG4gICAgICAgIGBFcnJvciBpbiBzbGljZTJEOiByZXF1ZXN0ZWQgc3RhcnQgcG9zaXRpb24gJHtiZWdpbn0gYW5kIHNpemUgYCArXG4gICAgICAgICAgICBgJHtzaXplfSB3b3VsZCBvdmVyZmxvdyBpbnB1dCBvZiBzaGFwZSAke2lucHV0LnNoYXBlfS5gKTtcbiAgICByZXR1cm4gdGhpcy50cmFjayh0aGlzLnNsaWNlMkRJbnRlcm5hbChpbnB1dCwgYmVnaW4sIHNpemUpKTtcbiAgfVxuICBwcm90ZWN0ZWQgYWJzdHJhY3Qgc2xpY2UyREludGVybmFsKFxuICAgICAgaW5wdXQ6IEFycmF5MkQsIGJlZ2luOiBbbnVtYmVyLCBudW1iZXJdLCBzaXplOiBbbnVtYmVyLCBudW1iZXJdKTogQXJyYXkyRDtcblxuICAvKipcbiAgICogQ29waWVzIGEgd2luZG93IGZyb20gdGhlIGBzb3VyY2VgIG1hdHJpeCBzdGFydGluZyBhdCBgc291cmNlQmVnaW5gIGFuZCBpc1xuICAgKiBvZiBzaXplIGBzb3VyY2VTaXplYCB0byBhIHdpbmRvdyBpbiB0aGUgYGRlc3RgIG1hdHJpeCBzdGFydGluZyBhdFxuICAgKiBgZGVzdEJlZ2luYCBhbmQgaXMgb2Ygc2l6ZSBgZGVzdFNpemVgL1xuICAgKiBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2UgbWF0cml4IHRvIGNvcHkgZnJvbS5cbiAgICogQHBhcmFtIHNvdXJjZUJlZ2luIFRoZSBjb29yZGluYXRlcyB0byBzdGFydCB0aGUgY29weSBmcm9tLlxuICAgKiBAcGFyYW0gc291cmNlU2l6ZSBUaGUgc2l6ZSBvZiB0aGUgY29weSB3aW5kb3cuXG4gICAqIEBwYXJhbSBkZXN0IFRoZSBkZXN0aW5hdGlvbiBtYXRyaXggdG8gY29weSB0by5cbiAgICogQHBhcmFtIGRlc3RCZWdpbiBUaGUgY29vcmRpbmF0ZXMgaW4gYGRlc3RgIHRvIGNvcHkgdG8uXG4gICAqIEBwYXJhbSBkZXN0U2l6ZSBUaGUgc2l6ZSBvZiB0aGUgZGVzdGluYXRpb24gd2luZG93LlxuICAgKi9cbiAgY29weTJEKFxuICAgICAgc291cmNlOiBBcnJheTJELCBzb3VyY2VCZWdpbjogW251bWJlciwgbnVtYmVyXSxcbiAgICAgIHNvdXJjZVNpemU6IFtudW1iZXIsIG51bWJlcl0sIGRlc3Q6IEFycmF5MkQsIGRlc3RCZWdpbjogW251bWJlciwgbnVtYmVyXSxcbiAgICAgIGRlc3RTaXplOiBbbnVtYmVyLCBudW1iZXJdKSB7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIHNvdXJjZUJlZ2luWzBdICsgc291cmNlU2l6ZVswXSA8PSBzb3VyY2Uuc2hhcGVbMF0gJiZcbiAgICAgICAgICAgIHNvdXJjZUJlZ2luWzFdICsgc291cmNlU2l6ZVsxXSA8PSBzb3VyY2Uuc2hhcGVbMV0sXG4gICAgICAgIGBFcnJvciBpbiBjb3B5MkQ6IHJlcXVlc3RlZCBzb3VyY2Ugc3RhcnQgcG9zaXRpb24gJHtzb3VyY2VCZWdpbn0gYCArXG4gICAgICAgICAgICBgYW5kIHNvdXJjZSBzaXplICR7c291cmNlU2l6ZX0gd291bGQgb3ZlcmZsb3cgc291cmNlIE5EQXJyYXlgICtcbiAgICAgICAgICAgIGBvZiBzaGFwZSAke3NvdXJjZS5zaGFwZX0uYCk7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIGRlc3RCZWdpblswXSArIGRlc3RTaXplWzBdIDw9IGRlc3Quc2hhcGVbMF0gJiZcbiAgICAgICAgICAgIGRlc3RCZWdpblsxXSArIGRlc3RTaXplWzFdIDw9IGRlc3Quc2hhcGVbMV0sXG4gICAgICAgIGBFcnJvciBpbiBjb3B5MkQ6IHJlcXVlc3RlZCBkZXN0IHN0YXJ0IHBvc2l0aW9uICR7ZGVzdEJlZ2lufSBgICtcbiAgICAgICAgICAgIGBhbmQgc291cmNlIHNpemUgJHtkZXN0U2l6ZX0gd291bGQgb3ZlcmZsb3cgZGVzdCBOREFycmF5IG9mYCArXG4gICAgICAgICAgICBgc2hhcGUgJHtkZXN0LnNoYXBlfS5gKTtcbiAgICBjb3B5MmRfdXRpbC52YWxpZGF0ZVNoYXBlcyhzb3VyY2VTaXplLCBkZXN0U2l6ZSk7XG5cbiAgICByZXR1cm4gdGhpcy5jb3B5MkRJbnRlcm5hbChcbiAgICAgICAgc291cmNlLCBzb3VyY2VCZWdpbiwgc291cmNlU2l6ZSwgZGVzdCwgZGVzdEJlZ2luLCBkZXN0U2l6ZSk7XG4gIH1cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGNvcHkyREludGVybmFsKFxuICAgICAgc291cmNlOiBBcnJheTJELCBzb3VyY2VCZWdpbjogW251bWJlciwgbnVtYmVyXSxcbiAgICAgIHNvdXJjZVNpemU6IFtudW1iZXIsIG51bWJlcl0sIGRlc3Q6IEFycmF5MkQsIGRlc3RCZWdpbjogW251bWJlciwgbnVtYmVyXSxcbiAgICAgIGRlc3RTaXplOiBbbnVtYmVyLCBudW1iZXJdKTogdm9pZDtcblxuICAvKipcbiAgICogQ29uY2F0ZW5hdGVzIHR3byAzRCBuZGFycmF5cyBhbG9uZyBhIGdpdmVuIGF4aXMuXG4gICAqXG4gICAqIEZvciBleGFtcGxlLCBpZjpcbiAgICogQTogc2hhcGUoMiwgMSwgMykgPSB8IHIxLCBnMSwgYjEgfFxuICAgKiAgICAgICAgICAgICAgICAgICAgIHwgcjIsIGcyLCBiMiB8XG4gICAqXG4gICAqIEI6IHNoYXBlKDIsIDEsIDMpID0gfCByMywgZzMsIGIzIHxcbiAgICogICAgICAgICAgICAgICAgICAgICB8IHI0LCBnNCwgYjQgfFxuICAgKlxuICAgKiBDID0gY29uY2F0M0QoQSwgQiwgYXhpcylcbiAgICpcbiAgICogaWYgYXhpcyA9IDA6XG4gICAqIEM6IHNoYXBlKDQsIDEsIDMpID0gfCByMSwgZzEsIGIxIHxcbiAgICogICAgICAgICAgICAgICAgICAgICB8IHIyLCBnMiwgYjIgfFxuICAgKiAgICAgICAgICAgICAgICAgICAgIHwgcjMsIGczLCBiMyB8XG4gICAqICAgICAgICAgICAgICAgICAgICAgfCByNCwgZzQsIGI0IHxcbiAgICpcbiAgICogaWYgYXhpcyA9IDE6XG4gICAqIEM6IHNoYXBlKDIsIDIsIDMpID0gfCByMSwgZzEsIGIxLCByMywgZzMsIGIzIHxcbiAgICogICAgICAgICAgICAgICAgICAgICB8IHIyLCBnMiwgYjIsIHI0LCBnNCwgYjQgfFxuICAgKlxuICAgKiBpZiBheGlzID0gMjpcbiAgICogQyA9IHNoYXBlKDIsIDEsIDYpID0gfCByMSwgZzEsIGIxLCByMywgZzMsIGIzIHxcbiAgICogICAgICAgICAgICAgICAgICAgICAgfCByMiwgZzIsIGIyLCByNCwgZzQsIGI0IHxcbiAgICpcbiAgICogQHBhcmFtIG5kYXJyYXkxIFRoZSBmaXJzdCBhcnJheSB0byBjb25jYXQuXG4gICAqIEBwYXJhbSBuZGFycmF5MiBUaGUgc2Vjb25kIGFycmF5IHRvIGNvbmF0LlxuICAgKiBAcGFyYW0gYXhpcyBUaGUgYXhpcyB0byBjb25jYXRlIGFsb25nLlxuICAgKi9cbiAgY29uY2F0M0QobmRhcnJheTE6IEFycmF5M0QsIG5kYXJyYXkyOiBBcnJheTNELCBheGlzOiBudW1iZXIpOiBBcnJheTNEIHtcbiAgICBjb25jYXQzZF91dGlsLmFzc2VydENvbmNhdDNEU2hhcGVzTWF0Y2goXG4gICAgICAgIG5kYXJyYXkxLnNoYXBlLCBuZGFycmF5Mi5zaGFwZSwgYXhpcywgJ0Vycm9yIGluIGNvbmNhdDNkOiAnKTtcbiAgICByZXR1cm4gdGhpcy50cmFjayh0aGlzLmNvbmNhdDNESW50ZXJuYWwobmRhcnJheTEsIG5kYXJyYXkyLCBheGlzKSk7XG4gIH1cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGNvbmNhdDNESW50ZXJuYWwoXG4gICAgICBuZGFycmF5MTogQXJyYXkzRCwgbmRhcnJheTI6IEFycmF5M0QsIGF4aXM6IG51bWJlcik6IEFycmF5M0Q7XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBSZWR1Y3Rpb24gb3BzIC8vXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIHRoZSBsb2coc3VtKGUgXiB4KSkgZm9yIGVhY2ggeCBpbiB0aGUgaW5wdXQgbmRhcnJheS5cbiAgICogQHBhcmFtIG5kYXJyYXkgVGhlIGlucHV0IE5EQXJyYXkgdG8gY29tcHV0ZSB0aGUgbG9nU3VtRXhwIG92ZXIuXG4gICAqL1xuICBsb2dTdW1FeHAobmRhcnJheTogTkRBcnJheSk6IFNjYWxhciB7XG4gICAgcmV0dXJuIHRoaXMudHJhY2sodGhpcy5sb2dTdW1FeHBJbnRlcm5hbChuZGFycmF5KSk7XG4gIH1cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGxvZ1N1bUV4cEludGVybmFsKG5kYXJyYXk6IE5EQXJyYXkpOiBTY2FsYXI7XG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIHRoZSBzdW0gb2YgYWxsIHRoZSBlbnRyaWVzIGluIHRoZSBpbnB1dCBOREFycmF5LlxuICAgKiBAcGFyYW0gbmRhcnJheSBUaGUgaW5wdXQgTkRBcnJheSB0byBjb21wdXRlIHRoZSBzdW0gb3Zlci5cbiAgICovXG4gIHN1bShuZGFycmF5OiBOREFycmF5KTogU2NhbGFyIHtcbiAgICByZXR1cm4gdGhpcy50cmFjayh0aGlzLnN1bUludGVybmFsKG5kYXJyYXkpKTtcbiAgfVxuICBwcm90ZWN0ZWQgYWJzdHJhY3Qgc3VtSW50ZXJuYWwobmRhcnJheTogTkRBcnJheSk6IFNjYWxhcjtcblxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIGZsYXR0ZW5lZCBpbmRleCBvZiB0aGUgbWluaW11bSBlbGVtZW50IGluIHRoZSBuZGFycmF5LlxuICAgKiBAcGFyYW0gbmRhcnJheSBUaGUgaW5wdXQgTkRBcnJheS5cbiAgICovXG4gIGFyZ01pbihuZGFycmF5OiBOREFycmF5KTogU2NhbGFyIHtcbiAgICByZXR1cm4gdGhpcy50cmFjayh0aGlzLmFyZ01pbkludGVybmFsKG5kYXJyYXkpKTtcbiAgfVxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgYXJnTWluSW50ZXJuYWwobmRhcnJheTogTkRBcnJheSk6IFNjYWxhcjtcblxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIGZsYXR0ZW5lZCBpbmRleCBvZiB0aGUgbWF4aW11bSBlbGVtZW50IGluIHRoZSBuZGFycmF5LlxuICAgKiBAcGFyYW0gbmRhcnJheSBUaGUgaW5wdXQgTkRBcnJheS5cbiAgICovXG4gIGFyZ01heChuZGFycmF5OiBOREFycmF5KTogU2NhbGFyIHtcbiAgICByZXR1cm4gdGhpcy50cmFjayh0aGlzLmFyZ01heEludGVybmFsKG5kYXJyYXkpKTtcbiAgfVxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgYXJnTWF4SW50ZXJuYWwobmRhcnJheTogTkRBcnJheSk6IFNjYWxhcjtcblxuICAvKipcbiAgICogUmV0dXJucyBhIDEgaWYgdGhlIGFyZ01heCBvZiB4MSBhbmQgeDIgYXJlIHRoZSBzYW1lLCBvdGhlcndpc2UgMC5cbiAgICogQHBhcmFtIHgxIFRoZSBmaXJzdCBpbnB1dCBOREFycmF5LlxuICAgKiBAcGFyYW0geDIgVGhlIHNlY29uZCBpbnB1dCBOREFycmF5LlxuICAgKi9cbiAgYXJnTWF4RXF1YWxzKHgxOiBOREFycmF5LCB4MjogTkRBcnJheSk6IFNjYWxhciB7XG4gICAgdXRpbC5hc3NlcnRTaGFwZXNNYXRjaCh4MS5zaGFwZSwgeDIuc2hhcGUsICdFcnJvciBpbiBhcmdNYXhFcXVhbHM6ICcpO1xuICAgIHJldHVybiB0aGlzLnRyYWNrKHRoaXMuYXJnTWF4RXF1YWxzSW50ZXJuYWwoeDEsIHgyKSk7XG4gIH1cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGFyZ01heEVxdWFsc0ludGVybmFsKHgxOiBOREFycmF5LCB4MjogTkRBcnJheSk6IFNjYWxhcjtcblxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIHRvcCBLIHZhbHVlcyBhbmQgZmxhdHRlbmVkIGluZGljZXMuXG4gICAqIEBwYXJhbSBuZGFycmF5IFRoZSBpbnB1dCBOREFycmF5LlxuICAgKiBAcGFyYW0gayBIb3cgbWFueSB0b3AgdmFsdWVzIHRvIGNvbXB1dGUuXG4gICAqL1xuICB0b3BLKG5kYXJyYXk6IE5EQXJyYXksIGs6IG51bWJlcik6IHt2YWx1ZXM6IEFycmF5MUQsIGluZGljZXM6IEFycmF5MUR9IHtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgayA8PSBuZGFycmF5LnNpemUsXG4gICAgICAgIGBFcnJvciBpbiB0b3BLOiBrIHZhbHVlICgke2t9KSBtdXN0IGJlIGxlc3MgdGhhbiBzaXplIG9mIGlucHV0IGAgK1xuICAgICAgICAgICAgYG5kYXJyYXksIGdvdCBzaGFwZSAke25kYXJyYXkuc2hhcGV9LmApO1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMudG9wS0ludGVybmFsKG5kYXJyYXksIGspO1xuICAgIHRoaXMudHJhY2socmVzdWx0LnZhbHVlcyk7XG4gICAgdGhpcy50cmFjayhyZXN1bHQuaW5kaWNlcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgdG9wS0ludGVybmFsKG5kYXJyYXk6IE5EQXJyYXksIGs6IG51bWJlcik6XG4gICAgICB7dmFsdWVzOiBBcnJheTFELCBpbmRpY2VzOiBBcnJheTFEfTtcblxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIG1pbmltdW0gdmFsdWUgZnJvbSB0aGUgaW5wdXQuXG4gICAqIEBwYXJhbSBuZGFycmF5IFRoZSBpbnB1dCBOREFycmF5LlxuICAgKi9cbiAgbWluKG5kYXJyYXk6IE5EQXJyYXkpOiBTY2FsYXIge1xuICAgIHJldHVybiB0aGlzLnRyYWNrKHRoaXMubWluSW50ZXJuYWwobmRhcnJheSkpO1xuICB9XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBtaW5JbnRlcm5hbChuZGFycmF5OiBOREFycmF5KTogU2NhbGFyO1xuXG4gIC8qKlxuICAgKiBDb21wdXRlcyB0aGUgbWF4aW11bSB2YWx1ZSBmcm9tIHRoZSBpbnB1dC5cbiAgICogQHBhcmFtIG5kYXJyYXkgVGhlIGlucHV0IE5EQXJyYXkuXG4gICAqL1xuICBtYXgobmRhcnJheTogTkRBcnJheSk6IFNjYWxhciB7XG4gICAgcmV0dXJuIHRoaXMudHJhY2sodGhpcy5tYXhJbnRlcm5hbChuZGFycmF5KSk7XG4gIH1cbiAgcHJvdGVjdGVkIGFic3RyYWN0IG1heEludGVybmFsKG5kYXJyYXk6IE5EQXJyYXkpOiBTY2FsYXI7XG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIHRoZSBzb2Z0bWF4IG5vcm1hbGl6ZWQgdmVjdG9yIGZyb20gdGhlIGlucHV0IHZlY3Rvci5cbiAgICogQHBhcmFtIHggVGhlIGlucHV0IHZlY3Rvci5cbiAgICovXG4gIHNvZnRtYXgoeDogQXJyYXkxRCk6IEFycmF5MUQge1xuICAgIHJldHVybiB0aGlzLnNjb3BlKCgpID0+IHtcbiAgICAgIC8vIERvIGl0IGluIGxvZyBzcGFjZSBmb3IgbnVtZXJpY2FsIHN0YWJpbGl0eS5cbiAgICAgIC8vIGV4cChYIC0gbG9nU3VtRXhwKFgpKVxuICAgICAgY29uc3QgbHNlID0gdGhpcy5sb2dTdW1FeHAoeCk7XG4gICAgICBjb25zdCBsb2dSZXN1bHQgPSB0aGlzLmFycmF5TWludXNTY2FsYXIoeCwgbHNlKTtcbiAgICAgIHJldHVybiB0aGlzLmV4cChsb2dSZXN1bHQpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBFbGVtZW50LXdpc2Ugb3BzIC8vXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAvKipcbiAgICogU3dpdGNoZXMgZGltZW5zaW9ucyBvZiB0aGUgaW5wdXQgTkRBcnJheS5cbiAgICogQHBhcmFtIGEgVGhlIGlucHV0IE5EQXJyYXkuXG4gICAqIEBwYXJhbSBuZXdEaW0gVGhlIG5ldyBpbmRpY2VzIHRoYXQgZGVmaW5lIHdoaWNoIHNoYXBlcyB2YWx1ZXMgdG8gc3dpdGNoLlxuICAgKi9cbiAgc3dpdGNoRGltPFQgZXh0ZW5kcyBOREFycmF5PihhOiBULCBuZXdEaW06IG51bWJlcltdKTogVCB7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIGEucmFuayA9PT0gbmV3RGltLmxlbmd0aCxcbiAgICAgICAgYEVycm9yIGluIHN3aXRjaERpbTogbGVuZ3RoIG9mIGlucHV0IHNoYXBlICR7YS5zaGFwZX0gYCArXG4gICAgICAgICAgICBgbXVzdCBtYXRjaCBzaXplIG9mIG5ld0RpbSBhcnJheSAke25ld0RpbX0uYCk7XG4gICAgcmV0dXJuIHRoaXMudHJhY2sodGhpcy5zd2l0Y2hEaW1JbnRlcm5hbChhLCBuZXdEaW0pKTtcbiAgfVxuICBwcm90ZWN0ZWQgYWJzdHJhY3Qgc3dpdGNoRGltSW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KFxuICAgICAgYTogVCwgbmV3RGltOiBudW1iZXJbXSk6IFQ7XG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIGEgc2NhbGFyIHBsdXMgTkRBcnJheSwgYyArIEEuXG4gICAqIEBwYXJhbSBjIFRoZSBzY2FsYXIgYyBpbiBjICsgQS5cbiAgICogQHBhcmFtIGEgVGhlIE5EQXJyYXkgQSBpbiBjICsgQS5cbiAgICovXG4gIHNjYWxhclBsdXNBcnJheTxUIGV4dGVuZHMgTkRBcnJheT4oYzogU2NhbGFyLCBhOiBUKTogVCB7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIGMuc2l6ZSA9PT0gMSxcbiAgICAgICAgYEVycm9yIGluIHNjYWxhclBsdXNBcnJheTogZmlyc3QgYXJndW1lbnQgbXVzdCBiZSByYW5rIDAsIGJ1dCBnb3QgYCArXG4gICAgICAgICAgICBgcmFuayAke2MucmFua30uYCk7XG4gICAgcmV0dXJuIHRoaXMudHJhY2sodGhpcy5zY2FsYXJQbHVzQXJyYXlJbnRlcm5hbChjLCBhKSk7XG4gIH1cbiAgcHJvdGVjdGVkIGFic3RyYWN0IHNjYWxhclBsdXNBcnJheUludGVybmFsPFQgZXh0ZW5kcyBOREFycmF5PihcbiAgICAgIGM6IFNjYWxhciwgYTogVCk6IFQ7XG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIGEgc2NhbGFyIG1pbnVzIE5EQXJyYXksIGMgLSBBLlxuICAgKiBAcGFyYW0gYyBUaGUgc2NhbGFyIGMgaW4gYyAtIEEuXG4gICAqIEBwYXJhbSBhIFRoZSBOREFycmF5IEEgaW4gYyAtIEEuXG4gICAqL1xuICBzY2FsYXJNaW51c0FycmF5PFQgZXh0ZW5kcyBOREFycmF5PihjOiBTY2FsYXIsIGE6IFQpOiBUIHtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgYy5zaXplID09PSAxLFxuICAgICAgICBgRXJyb3IgaW4gc2NhbGFyTWludXNBcnJheTogZmlyc3QgYXJndW1lbnQgbXVzdCBiZSByYW5rIDAsIGJ1dCBnb3QgYCArXG4gICAgICAgICAgICBgcmFuayAke2MucmFua30uYCk7XG4gICAgcmV0dXJuIHRoaXMudHJhY2sodGhpcy5zY2FsYXJNaW51c0FycmF5SW50ZXJuYWwoYywgYSkpO1xuICB9XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBzY2FsYXJNaW51c0FycmF5SW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KFxuICAgICAgYzogU2NhbGFyLCBhOiBUKTogVDtcblxuICAvKipcbiAgICogQ29tcHV0ZXMgYSBzY2FsYXIgbWludXMgTkRBcnJheSwgQSAtIGMuXG4gICAqIEBwYXJhbSBhIFRoZSBOREFycmF5IEEgaW4gQSAtIGMuXG4gICAqIEBwYXJhbSBjIFRoZSBzY2FsYXIgYyBpbiBBIC0gYy5cbiAgICovXG4gIGFycmF5TWludXNTY2FsYXI8VCBleHRlbmRzIE5EQXJyYXk+KGE6IFQsIGM6IFNjYWxhcik6IFQge1xuICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICBjLnNpemUgPT09IDEsXG4gICAgICAgIGBFcnJvciBpbiBhcnJheU1pbnVzU2NhbGFyOiBzZWNvbmQgYXJndW1lbnQgbXVzdCBiZSByYW5rIDAsIGJ1dCBgICtcbiAgICAgICAgICAgIGBnb3QgcmFuayAke2MucmFua30uYCk7XG4gICAgcmV0dXJuIHRoaXMudHJhY2sodGhpcy5hcnJheU1pbnVzU2NhbGFySW50ZXJuYWwoYSwgYykpO1xuICB9XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBhcnJheU1pbnVzU2NhbGFySW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KFxuICAgICAgYTogVCwgYzogU2NhbGFyKTogVDtcblxuICAvKipcbiAgICogQ29tcHV0ZXMgLTEgKiBBIGVsZW1lbnQtd2lzZS5cbiAgICogQHBhcmFtIGEgVGhlIGlucHV0IGFycmF5LlxuICAgKi9cbiAgbmVnPFQgZXh0ZW5kcyBOREFycmF5PihhOiBUKTogVCB7XG4gICAgcmV0dXJuIHRoaXMudHJhY2sodGhpcy5uZWdJbnRlcm5hbChhKSk7XG4gIH1cbiAgcHJvdGVjdGVkIGFic3RyYWN0IG5lZ0ludGVybmFsPFQgZXh0ZW5kcyBOREFycmF5PihhOiBUKTogVDtcblxuICAvKipcbiAgICogQWRkcyB0d28gTkRBcnJheXMgZWxlbWVudC13aXNlLCBBICsgQi4gSW5wdXRzIG11c3QgYmUgdGhlIHNhbWUgc2hhcGUuXG4gICAqIEBwYXJhbSBhIFRoZSBmaXJzdCBOREFycmF5IHRvIGFkZCBlbGVtZW50LXdpc2UuXG4gICAqIEBwYXJhbSBiIFRoZSBzZWNvbmQgTkRBcnJheSB0byBhZGQgZWxlbWVudC13aXNlLlxuICAgKi9cbiAgYWRkPFQgZXh0ZW5kcyBOREFycmF5PihhOiBULCBiOiBUKTogVCB7XG4gICAgdXRpbC5hc3NlcnRTaGFwZXNNYXRjaChhLnNoYXBlLCBiLnNoYXBlLCAnRXJyb3IgaW4gYWRkOiAnKTtcbiAgICByZXR1cm4gdGhpcy50cmFjayh0aGlzLmFkZEludGVybmFsKGEsIGIpKTtcbiAgfVxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgYWRkSW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KGE6IFQsIGI6IFQpOiBUO1xuXG4gIC8qKlxuICAgKiBTdWJ0cmFjdHMgdHdvIE5EQXJyYXlzIGVsZW1lbnQtd2lzZSwgQSAtIEIuIElucHV0cyBtdXN0IGJlIHRoZSBzYW1lIHNoYXBlLlxuICAgKiBAcGFyYW0gYSBUaGUgZmlyc3QgTkRBcnJheSB0byBzdWJ0cmFjdCBlbGVtZW50LXdpc2UuXG4gICAqIEBwYXJhbSBiIFRoZSBzZWNvbmQgTkRBcnJheSB0byBzdWJ0cmFjdCBlbGVtZW50LXdpc2UuXG4gICAqL1xuICBzdWI8VCBleHRlbmRzIE5EQXJyYXk+KGE6IFQsIGI6IFQpOiBUIHtcbiAgICB1dGlsLmFzc2VydFNoYXBlc01hdGNoKGEuc2hhcGUsIGIuc2hhcGUsICdFcnJvciBpbiBzdWI6ICcpO1xuICAgIHJldHVybiB0aGlzLnRyYWNrKHRoaXMuc3ViSW50ZXJuYWwoYSwgYikpO1xuICB9XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBzdWJJbnRlcm5hbDxUIGV4dGVuZHMgTkRBcnJheT4oYTogVCwgYjogVCk6IFQ7XG5cbiAgLyoqXG4gICAqIE11bHRpcGxpZXMgdHdvIE5EQXJyYXlzIGVsZW1lbnQtd2lzZSAoaGFkYW1hcmQgcHJvZHVjdCksIEEgKiBCLiBJbnB1dHMgbXVzdFxuICAgKiBiZSB0aGUgc2FtZSBzaGFwZS5cbiAgICogQHBhcmFtIGEgVGhlIGZpcnN0IE5EQXJyYXkgdG8gbXVsdGlwbHkgZWxlbWVudC13aXNlLlxuICAgKiBAcGFyYW0gYiBUaGUgc2Vjb25kIE5EQXJyYXkgdG8gbXVsdGlwbHkgZWxlbWVudC13aXNlLlxuICAgKi9cbiAgZWxlbWVudFdpc2VNdWw8VCBleHRlbmRzIE5EQXJyYXk+KGE6IFQsIGI6IFQpOiBUIHtcbiAgICB1dGlsLmFzc2VydFNoYXBlc01hdGNoKGEuc2hhcGUsIGIuc2hhcGUsICdFcnJvciBpbiBlbGVtZW50V2lzZU11bDogJyk7XG4gICAgcmV0dXJuIHRoaXMudHJhY2sodGhpcy5lbGVtZW50V2lzZU11bEludGVybmFsKGEsIGIpKTtcbiAgfVxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgZWxlbWVudFdpc2VNdWxJbnRlcm5hbDxUIGV4dGVuZHMgTkRBcnJheT4oYTogVCwgYjogVCk6IFQ7XG5cbiAgLyoqXG4gICAqIERpdmlkZXMgdHdvIE5EQXJyYXlzIGVsZW1lbnQtd2lzZSAoaGFkYW1hcmQgcHJvZHVjdCksIEEgLyBCLiBJbnB1dHMgbXVzdCBiZVxuICAgKiB0aGUgc2FtZSBzaGFwZS5cbiAgICogQHBhcmFtIGEgVGhlIGZpcnN0IE5EQXJyYXkgdG8gZGl2aWRlIGVsZW1lbnQtd2lzZS5cbiAgICogQHBhcmFtIGIgVGhlIHNlY29uZCBOREFycmF5IHRvIGRpdmlkZSBlbGVtZW50LXdpc2UuXG4gICAqL1xuICBkaXZpZGU8VCBleHRlbmRzIE5EQXJyYXk+KGE6IFQsIGI6IFQpOiBUIHtcbiAgICB1dGlsLmFzc2VydFNoYXBlc01hdGNoKGEuc2hhcGUsIGIuc2hhcGUsICdFcnJvciBpbiBkaXZpZGU6ICcpO1xuICAgIHJldHVybiB0aGlzLnRyYWNrKHRoaXMuZGl2aWRlSW50ZXJuYWwoYSwgYikpO1xuICB9XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBkaXZpZGVJbnRlcm5hbDxUIGV4dGVuZHMgTkRBcnJheT4oYTogVCwgYjogVCk6IFQ7XG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIGEgc2NhbGFyIGRpdmlkZWQgYnkgYW4gTkRBcnJheSwgYnJvYWRjYXN0ZWQgb3ZlciB0aGUgTkRBcnJheSwgYyAvXG4gICAqIEEuXG4gICAqIEBwYXJhbSBjIFRoZSBzY2FsYXIgdmFsdWUgaW4gYyAvIEEuXG4gICAqIEBwYXJhbSBhIFRoZSBOREFycmF5IHZhbHVlIGluIGMgLyBBLlxuICAgKi9cbiAgc2NhbGFyRGl2aWRlZEJ5QXJyYXk8VCBleHRlbmRzIE5EQXJyYXk+KGM6IFNjYWxhciwgYTogVCk6IFQge1xuICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICBjLnNpemUgPT09IDEsXG4gICAgICAgIGBFcnJvciBpbiBzY2FsYXJEaXZpZGVkQnlBcnJheTogZmlyc3QgYXJndW1lbnQgbXVzdCBiZSByYW5rIDAsIGJ1dCBgICtcbiAgICAgICAgICAgIGBnb3QgTkRBcnJheSBvZiByYW5rICR7Yy5yYW5rfS5gKTtcbiAgICByZXR1cm4gdGhpcy50cmFjayh0aGlzLnNjYWxhckRpdmlkZWRCeUFycmF5SW50ZXJuYWwoYywgYSkpO1xuICB9XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBzY2FsYXJEaXZpZGVkQnlBcnJheUludGVybmFsPFQgZXh0ZW5kcyBOREFycmF5PihcbiAgICAgIGM6IFNjYWxhciwgYTogVCk6IFQ7XG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIGFuIE5EQXJyYXkgZGl2aWRlZCBieSBhIHNjYWxhciwgYnJvYWRjYXN0ZWQgb3ZlciB0aGUgTkRBcnJheSwgQSAvXG4gICAqIGMuXG4gICAqIEBwYXJhbSBhIFRoZSBOREFycmF5IHZhbHVlIGluIEEgLyBjLlxuICAgKiBAcGFyYW0gYyBUaGUgc2NhbGFyIHZhbHVlIGluIEEgLyBjLlxuICAgKi9cbiAgYXJyYXlEaXZpZGVkQnlTY2FsYXI8VCBleHRlbmRzIE5EQXJyYXk+KGE6IFQsIGM6IFNjYWxhcik6IFQge1xuICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICBjLnNpemUgPT09IDEsXG4gICAgICAgIGBFcnJvciBpbiBhcnJheURpdmlkZWRCeVNjYWxhcjogc2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgcmFuayAwLCBgICtcbiAgICAgICAgICAgIGBidXQgZ290IE5EQXJyYXkgb2YgcmFuayAke2MucmFua30uYCk7XG4gICAgcmV0dXJuIHRoaXMudHJhY2sodGhpcy5hcnJheURpdmlkZWRCeVNjYWxhckludGVybmFsKGEsIGMpKTtcbiAgfVxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgYXJyYXlEaXZpZGVkQnlTY2FsYXJJbnRlcm5hbDxUIGV4dGVuZHMgTkRBcnJheT4oXG4gICAgICBhOiBULCBjOiBTY2FsYXIpOiBUO1xuXG4gIC8qKlxuICAgKiBDb21wdXRlcyBleHBvbmVudGlhbCBvZiB0aGUgaW5wdXQgTkRBcnJheSBlbGVtZW50LXdpc2UuIHkgPSBlIF4geFxuICAgKiBAcGFyYW0gbmRhcnJheSBUaGUgaW5wdXQgTkRBcnJheS5cbiAgICovXG4gIGV4cDxUIGV4dGVuZHMgTkRBcnJheT4obmRhcnJheTogVCk6IFQge1xuICAgIHJldHVybiB0aGlzLnRyYWNrKHRoaXMuZXhwSW50ZXJuYWwobmRhcnJheSkpO1xuICB9XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBleHBJbnRlcm5hbDxUIGV4dGVuZHMgTkRBcnJheT4obmRhcnJheTogVCk6IFQ7XG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIG5hdHVyYWwgbG9nYXJpdGhtIG9mIHRoZSBpbnB1dCBOREFycmF5IGVsZW1lbnQtd2lzZS4geSA9IGxuKHgpXG4gICAqIEBwYXJhbSBuZGFycmF5IFRoZSBpbnB1dCBOREFycmF5LlxuICAgKi9cbiAgbG9nPFQgZXh0ZW5kcyBOREFycmF5PihuZGFycmF5OiBUKTogVCB7XG4gICAgcmV0dXJuIHRoaXMudHJhY2sodGhpcy5sb2dJbnRlcm5hbChuZGFycmF5KSk7XG4gIH1cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGxvZ0ludGVybmFsPFQgZXh0ZW5kcyBOREFycmF5PihuZGFycmF5OiBUKTogVDtcblxuICAvKipcbiAgICogQ29tcHV0ZXMgcmVjdGlmaWVkIGxpbmVhciBlbGVtZW50LXdpc2UsIG1heCh4LCAwKS5cbiAgICogQHBhcmFtIG5kYXJyYXkgVGhlIGlucHV0IE5EQXJyYXkuXG4gICAqL1xuICByZWx1PFQgZXh0ZW5kcyBOREFycmF5PihuZGFycmF5OiBUKTogVCB7XG4gICAgcmV0dXJuIHRoaXMudHJhY2sodGhpcy5yZWx1SW50ZXJuYWwobmRhcnJheSkpO1xuICB9XG4gIHByb3RlY3RlZCBhYnN0cmFjdCByZWx1SW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KG5kYXJyYXk6IFQpOiBUO1xuXG4gIC8qKlxuICAgKiBDb21wdXRlcyBzaWdtb2lkIGVsZW1lbnQtd2lzZSwgeSA9IDEgLyAoMSArIGV4cCgteCkpLlxuICAgKiBAcGFyYW0gbmRhcnJheSBUaGUgaW5wdXQgTkRBcnJheS5cbiAgICovXG4gIHNpZ21vaWQ8VCBleHRlbmRzIE5EQXJyYXk+KG5kYXJyYXk6IFQpOiBUIHtcbiAgICByZXR1cm4gdGhpcy50cmFjayh0aGlzLnNpZ21vaWRJbnRlcm5hbChuZGFycmF5KSk7XG4gIH1cbiAgcHJvdGVjdGVkIGFic3RyYWN0IHNpZ21vaWRJbnRlcm5hbDxUIGV4dGVuZHMgTkRBcnJheT4obmRhcnJheTogVCk6IFQ7XG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIGh5cGVyYm9saWMgdGFuZ2VudCBvZiB0aGUgaW5wdXQgTkRBcnJheSBlbGVtZW50LXdpc2UuXG4gICAqIEBwYXJhbSBuZGFycmF5IFRoZSBpbnB1dCBOREFycmF5LlxuICAgKi9cbiAgdGFuaDxUIGV4dGVuZHMgTkRBcnJheT4obmRhcnJheTogVCk6IFQge1xuICAgIHJldHVybiB0aGlzLnRyYWNrKHRoaXMudGFuaEludGVybmFsKG5kYXJyYXkpKTtcbiAgfVxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgdGFuaEludGVybmFsPFQgZXh0ZW5kcyBOREFycmF5PihuZGFycmF5OiBUKTogVDtcblxuICAvKipcbiAgICogQ29tcHV0ZXMgc2luIG9mIHRoZSBpbnB1dCBOREFycmF5IGVsZW1lbnQtd2lzZSwgeSA9IHNpbih4KS5cbiAgICogQHBhcmFtIG5kYXJyYXkgVGhlIGlucHV0IE5EQXJyYXkuXG4gICAqL1xuICBzaW48VCBleHRlbmRzIE5EQXJyYXk+KG5kYXJyYXk6IFQpOiBUIHtcbiAgICByZXR1cm4gdGhpcy50cmFjayh0aGlzLnNpbkludGVybmFsKG5kYXJyYXkpKTtcbiAgfVxuICBwcm90ZWN0ZWQgYWJzdHJhY3Qgc2luSW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KG5kYXJyYXk6IFQpOiBUO1xuXG4gIC8qKlxuICAgKiBDb21wdXRlcyBzdGVwIG9mIHRoZSBpbnB1dCBOREFycmF5IGVsZW1lbnQtd2lzZSwgeSA9IDEgaWYgeCA+IDAgfCAwIGlmIHggPD1cbiAgICogMFxuICAgKiBAcGFyYW0gbmRhcnJheSBUaGUgaW5wdXQgTkRBcnJheS5cbiAgICovXG4gIHN0ZXA8VCBleHRlbmRzIE5EQXJyYXk+KG5kYXJyYXk6IFQpOiBUIHtcbiAgICByZXR1cm4gdGhpcy50cmFjayh0aGlzLnN0ZXBJbnRlcm5hbChuZGFycmF5KSk7XG4gIH1cbiAgcHJvdGVjdGVkIGFic3RyYWN0IHN0ZXBJbnRlcm5hbDxUIGV4dGVuZHMgTkRBcnJheT4obmRhcnJheTogVCk6IFQ7XG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIGEgc2NhbGVkIGFycmF5IGFkZCBvcGVyYXRpb24sIGMxICogQSArIGMyICogQi5cbiAgICogQHBhcmFtIGMxIFRoZSBmaXJzdCBzY2FsYXIgaW4gdGhlIHNjYWxlZCBhcnJheSBhZGQgY29tcHV0YXRpb24uXG4gICAqIEBwYXJhbSBhIFRoZSBmaXJzdCBOREFycmF5IGluIHRoZSBzY2FsZWQgYXJyYXkgYWRkIGNvbXB1dGF0aW9uLlxuICAgKiBAcGFyYW0gYzIgVGhlIHNlY29uZCBzY2FsYXIgaW4gdGhlIHNjYWxlZCBhcnJheSBhZGQgY29tcHV0YXRpb24uXG4gICAqIEBwYXJhbSBjYiBUaGUgc2Vjb25kIE5EQXJyYXkgaW4gdGhlIHNjYWxlZCBhcnJheSBhZGQgY29tcHV0YXRpb24uXG4gICAqL1xuICBzY2FsZWRBcnJheUFkZDxUIGV4dGVuZHMgTkRBcnJheT4oYzE6IFNjYWxhciwgYTogVCwgYzI6IFNjYWxhciwgYjogVCk6IFQge1xuICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICBjMS5zaXplID09PSAxLFxuICAgICAgICBgRXJyb3IgaW4gc2NhbGVkQXJyYXlBZGQ6IGZpcnN0IGFyZ3VtZW50IG11c3QgcmFuayAwLCBidXQgZ290IGAgK1xuICAgICAgICAgICAgYCByYW5rICR7YzEucmFua30uYCk7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIGMyLnNpemUgPT09IDEsXG4gICAgICAgIGBFcnJvciBpbiBzY2FsZWRBcnJheUFkZDogdGhpcmQgYXJndW1lbnQgbXVzdCBiZSByYW5rIDAsIGJ1dCBnb3QgYCArXG4gICAgICAgICAgICBgTkRBcnJheSBvZiByYW5rICR7YzIucmFua30uYCk7XG4gICAgdXRpbC5hc3NlcnRTaGFwZXNNYXRjaChhLnNoYXBlLCBiLnNoYXBlLCAnRXJyb3IgaW4gc2NhbGVkQXJyYXlBZGQ6ICcpO1xuXG4gICAgcmV0dXJuIHRoaXMudHJhY2sodGhpcy5zY2FsZWRBcnJheUFkZEludGVybmFsKGMxLCBhLCBjMiwgYikpO1xuICB9XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBzY2FsZWRBcnJheUFkZEludGVybmFsPFQgZXh0ZW5kcyBOREFycmF5PihcbiAgICAgIGMxOiBTY2FsYXIsIGE6IFQsIGMyOiBTY2FsYXIsIGI6IFQpOiBUO1xuXG4gIC8qKlxuICAgKiBDb21wdXRlcyBhIHNjYWxhciB0aW1lcyBhcnJheSBvcGVyYXRpb24gYnJvYWRjYXN0ZWQgb3ZlciB0aGUgTkRBcnJheSwgYyAqXG4gICAqIEEuXG4gICAqIEBwYXJhbSBjIFRoZSBzY2FsYXIgaW4gdGhlIG9wZXJhdGlvbi5cbiAgICogQHBhcmFtIEEgdGhlIE5EQXJyYXkgaW4gdGhlIG9wZXJhdGlvbiB0aGF0IHdpbGwgYmUgYnJvYWRjYXN0ZWQgb3Zlci5cbiAgICovXG4gIHNjYWxhclRpbWVzQXJyYXk8VCBleHRlbmRzIE5EQXJyYXk+KGM6IFNjYWxhciwgYTogVCk6IFQge1xuICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICBjLnNpemUgPT09IDEsXG4gICAgICAgIGBFcnJvciBpbiBhcnJheURpdmlkZWRCeVNjYWxhcjogZmlyc3QgYXJndW1lbnQgbXVzdCBiZSByYW5rIDAsIGJ1dCBgICtcbiAgICAgICAgICAgIGBnb3QgcmFuayAke2MucmFua30uYCk7XG4gICAgcmV0dXJuIHRoaXMudHJhY2sodGhpcy5zY2FsYXJUaW1lc0FycmF5SW50ZXJuYWwoYywgYSkpO1xuICB9XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBzY2FsYXJUaW1lc0FycmF5SW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KFxuICAgICAgYzogU2NhbGFyLCBhOiBUKTogVDtcblxuICAvKipcbiAgICogQ29tcHV0ZXMgYW4gZWxlbWVudC13aXNlIGJyb2FkY2FzdGVkIG11bHRpcGxpY2F0aW9uIG9mIHR3byBtYXRyaWNlcyBBIGFuZFxuICAgKiBCLiBXaWxsIHJldHVybiBhIG5ldyBtYXRyaXggdGhhdCBpcyB0aGUgbWF4IG9mIEEgYW5kIEIsIHdoZXJlIHRoZSBzbWFsbGVyXG4gICAqIG1hdHJpeCB3aWxsIGJyb2FkY2FzdCBvdmVyIHRoZSBsYXJnZXIgbWF0cml4LlxuICAgKiBAcGFyYW0gYyBUaGUgc2NhbGFyIGluIHRoZSBvcGVyYXRpb24uXG4gICAqIEBwYXJhbSBBIHRoZSBOREFycmF5IGluIHRoZSBvcGVyYXRpb24gdGhhdCB3aWxsIGJlIGJyb2FkY2FzdGVkIG92ZXIuXG4gICAqL1xuICBlbGVtZW50V2lzZU11bEJyb2FkY2FzdChhOiBBcnJheTJELCBiOiBBcnJheTJEKTogQXJyYXkyRCB7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIGEucmFuayA9PT0gMixcbiAgICAgICAgYEVycm9yIGluIGVsZW1lbnRXaXNlTXVsQnJvYWRjYXN0OiBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGAgK1xuICAgICAgICAgICAgYHJhbmsgMiwgYnV0IGdvdCByYW5rICR7YS5yYW5rfS5gKTtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgYi5yYW5rID09PSAyLFxuICAgICAgICBgRXJyb3IgaW4gZWxlbWVudFdpc2VNdWxCcm9hZGNhc3Q6IHNlY29uZCBhcmd1bWVudCBtdXN0IGJlIGAgK1xuICAgICAgICAgICAgYHJhbmsgMiwgYnV0IGdvdCByYW5rICR7Yi5yYW5rfS5gKTtcbiAgICByZXR1cm4gdGhpcy50cmFjayh0aGlzLmVsZW1lbnRXaXNlTXVsQnJvYWRjYXN0SW50ZXJuYWwoYSwgYikpO1xuICB9XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBlbGVtZW50V2lzZU11bEJyb2FkY2FzdEludGVybmFsKGE6IEFycmF5MkQsIGI6IEFycmF5MkQpOlxuICAgICAgQXJyYXkyRDtcblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gQ29udm9sdXRpb24gb3BzIC8vXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIC8qKlxuICAgKiBDb21wdXRlcyBhIDJEIGNvbnZvbHV0aW9uIG92ZXIgdGhlIGlucHV0IHguXG4gICAqIEBwYXJhbSB4IFRoZSBpbnB1dCBpbWFnZSwgbXVzdCBiZSByYW5rIDMsIG9mIHNoYXBlIFtyb3dzLCBjb2xzLCBkZXB0aDFdLlxuICAgKiBAcGFyYW0gd2VpZ2h0cyBUaGUgd2VpZ2h0cyBOREFycmF5LCBtdXN0IGJlIHJhbmsgNCwgb2Ygc2hhcGUgW2YsIGYsIGRlcHRoMSxcbiAgICogZGVwdGgyXS5cbiAgICogQHBhcmFtIGJpYXNlcyBPcHRpb25hbCBiaWFzZXMgTkRBcnJheSwgbXVzdCBiZSByYW5rIDEgb2Ygc2hhcGUgW2RlcHRoMl0uXG4gICAqIEBwYXJhbSBzdHJpZGUgVGhlIHN0cmlkZSBvZiB0aGUgY29udm9sdXRpb24uXG4gICAqIEBwYXJhbSB6ZXJvUGFkIFRoZSB6ZXJvIHBhZGRpbmcgb2YgZWFjaCBzaWRlIG9mIHRoZSBpbnB1dCBOREFycmF5LiBXaWxsIHBhZFxuICAgKiBlcXVhbGx5IG9uIGFsbCBzaWRlcy5cbiAgICovXG4gIGNvbnYyZChcbiAgICAgIHg6IEFycmF5M0QsIHdlaWdodHM6IEFycmF5NEQsIGJpYXNlczogQXJyYXkxRHxudWxsLCBzdHJpZGU6IG51bWJlcixcbiAgICAgIHplcm9QYWQ6IG51bWJlcik6IEFycmF5M0Qge1xuICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICB4LnJhbmsgPT09IDMsXG4gICAgICAgIGBFcnJvciBpbiBjb252MmQ6IHggbXVzdCBiZSByYW5rIDMsIGJ1dCBnb3QgcmFuayAke3gucmFua30uYCk7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIHdlaWdodHMucmFuayA9PT0gNCxcbiAgICAgICAgYEVycm9yIGluIGNvbnYyZDogd2VpZ2h0cyBtdXN0IGJlIHJhbmsgNCwgYnV0IGdvdCByYW5rIGAgK1xuICAgICAgICAgICAgYCR7d2VpZ2h0cy5yYW5rfS5gKTtcbiAgICBpZiAoYmlhc2VzICE9IG51bGwpIHtcbiAgICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICAgIGJpYXNlcy5yYW5rID09PSAxLFxuICAgICAgICAgIGBFcnJvciBpbiBjb252MmQ6IGJpYXNlcyBtdXN0IGJlIHJhbmsgMSwgYnV0IGdvdCByYW5rIGAgK1xuICAgICAgICAgICAgICBgJHtiaWFzZXMucmFua30uYCk7XG4gICAgfVxuXG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIHguc2hhcGVbMl0gPT09IHdlaWdodHMuc2hhcGVbMl0sXG4gICAgICAgIGBFcnJvciBpbiBjb252MmQ6IGRlcHRoIG9mIGlucHV0ICgke3guc2hhcGVbMl19KSBtdXN0IG1hdGNoICBgICtcbiAgICAgICAgICAgIGBpbnB1dCBkZXB0aCBmb3Igd2VpZ2h0cyAke3dlaWdodHMuc2hhcGVbMl19LmApO1xuXG5cbiAgICByZXR1cm4gdGhpcy50cmFjayh0aGlzLmNvbnYyZEludGVybmFsKHgsIHdlaWdodHMsIGJpYXNlcywgc3RyaWRlLCB6ZXJvUGFkKSk7XG4gIH1cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGNvbnYyZEludGVybmFsKFxuICAgICAgeDogQXJyYXkzRCwgd2VpZ2h0czogQXJyYXk0RCwgYmlhc2VzOiBBcnJheTFEfG51bGwsIHN0cmlkZTogbnVtYmVyLFxuICAgICAgemVyb1BhZDogbnVtYmVyKTogQXJyYXkzRDtcblxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIGJhY2twcm9wIG9mIGEgMkQgY29udm9sdXRpb24uXG4gICAqIEBwYXJhbSB4IFRoZSBpbnB1dCBpbWFnZSwgbXVzdCBiZSByYW5rIDMsIG9mIHNoYXBlIFt4cm93cywgeGNvbHMsIGRlcHRoMV0uXG4gICAqIEBwYXJhbSBkeSBUaGUgZHkgaW1hZ2UsIG11c3QgYmUgcmFuayAzLCBvZiBzaGFwZSBbeXJvd3MsIHljb2xzLCBkZXB0aDJdLlxuICAgKiBAcGFyYW0gd2VpZ2h0cyBUaGUgd2VpZ2h0cyBOREFycmF5LCBtdXN0IGJlIHJhbmsgNCwgb2Ygc2hhcGUgW2YsIGYsIGRlcHRoMSxcbiAgICogZGVwdGgyXS5cbiAgICogQHBhcmFtIHN0cmlkZSBUaGUgc3RyaWRlIG9mIHRoZSBvcmlnaW5hbCBjb252b2x1dGlvbi5cbiAgICogQHBhcmFtIHBhZCBUaGUgcGFkZGluZyBvZiB0aGUgb3JpZ2luYWwgY29udm9sdXRpb24uXG4gICAqL1xuICBjb252MmRCYWNrUHJvcChcbiAgICAgIHg6IEFycmF5M0QsIGR5OiBBcnJheTNELCB3ZWlnaHRzOiBBcnJheTRELCBzdHJpZGU6IG51bWJlcixcbiAgICAgIHBhZDogbnVtYmVyKToge2R4OiBBcnJheTNELCBkdzogQXJyYXk0RCwgZGI6IEFycmF5MUR9IHtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgeC5yYW5rID09PSAzLFxuICAgICAgICBgRXJyb3IgaW4gY29udjJkQmFja1Byb3A6IHggbXVzdCBiZSByYW5rIDMsIGJ1dCBnb3Qgc2hhcGUgYCArXG4gICAgICAgICAgICBgJHt4LnNoYXBlfS5gKTtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgZHkucmFuayA9PT0gMyxcbiAgICAgICAgYEVycm9yIGluIGNvbnYyZEJhY2tQcm9wOiBkeSBtdXN0IGJlIHJhbmsgMywgYnV0IGdvdCBzaGFwZSBgICtcbiAgICAgICAgICAgIGAke2R5LnNoYXBlfS5gKTtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgd2VpZ2h0cy5yYW5rID09PSA0LFxuICAgICAgICBgRXJyb3IgaW4gY29udjJkQmFja1Byb3A6IHdlaWdodHMgbXVzdCBiZSByYW5rIDQsIGJ1dCBnb3Qgc2hhcGUgYCArXG4gICAgICAgICAgICBgJHt3ZWlnaHRzLnNoYXBlfS5gKTtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgeC5zaGFwZVsyXSA9PT0gd2VpZ2h0cy5zaGFwZVsyXSxcbiAgICAgICAgYEVycm9yIGluIGNvbnYyZEJhY2tQcm9wOiBkZXB0aCBvZiB4ICR7eC5zaGFwZVsyXX0pIG11c3QgYCArXG4gICAgICAgICAgICBgbWF0Y2ggaW5wdXQgZGVwdGggZm9yIHdlaWdodHMgKCR7d2VpZ2h0cy5zaGFwZVsyXX0uYCk7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIGR5LnNoYXBlWzJdID09PSB3ZWlnaHRzLnNoYXBlWzNdLFxuICAgICAgICBgRXJyb3IgaW4gY29udjJkQmFja1Byb3A6IGRlcHRoIG9mIGR5ICgke2R5LnNoYXBlWzJdfSkgbXVzdCBgICtcbiAgICAgICAgICAgIGBtYXRjaCBvdXRwdXQgZGVwdGggZm9yIHdlaWdodHMgKCR7d2VpZ2h0cy5zaGFwZVszXX0pLmApO1xuXG4gICAgY29uc3QgYmFja3Byb3BSZXN1bHQgPVxuICAgICAgICB0aGlzLmNvbnYyZEJhY2tQcm9wSW50ZXJuYWwoeCwgZHksIHdlaWdodHMsIHN0cmlkZSwgcGFkKTtcblxuICAgIHRoaXMudHJhY2soYmFja3Byb3BSZXN1bHQuZGIpO1xuICAgIHRoaXMudHJhY2soYmFja3Byb3BSZXN1bHQuZHcpO1xuICAgIHRoaXMudHJhY2soYmFja3Byb3BSZXN1bHQuZHgpO1xuXG4gICAgcmV0dXJuIGJhY2twcm9wUmVzdWx0O1xuICB9XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBjb252MmRCYWNrUHJvcEludGVybmFsKFxuICAgICAgeDogQXJyYXkzRCwgZHk6IEFycmF5M0QsIHdlaWdodHM6IEFycmF5NEQsIHN0cmlkZTogbnVtYmVyLFxuICAgICAgcGFkOiBudW1iZXIpOiB7ZHg6IEFycmF5M0QsIGR3OiBBcnJheTRELCBkYjogQXJyYXkxRH07XG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIHRoZSB0cmFuc3Bvc2VkIDJEIGNvbnZvbHV0aW9uIG9mIGFuIGltYWdlLCBhbHNvIGtub3duIGFzIGFcbiAgICogZGVjb252b2x1dGlvbi5cbiAgICogQHBhcmFtIHggVGhlIGlucHV0IGltYWdlLCBtdXN0IGJlIHJhbmsgMywgb2Ygc2hhcGUgW3hyb3dzLCB4Y29scywgZGVwdGgxXS5cbiAgICogQHBhcmFtIHdlaWdodHMgVGhlIHdlaWdodHMgTkRBcnJheSwgbXVzdCBiZSByYW5rIDQsIG9mIHNoYXBlIFtmLCBmLCBkZXB0aDEsXG4gICAqIGRlcHRoMl0uXG4gICAqIEBwYXJhbSBiaWFzZXMgT3B0aW9uYWwgYmlhc2VzIE5EQXJyYXksIG11c3QgYmUgcmFuayAxIG9mIHNoYXBlIFtkZXB0aDJdLlxuICAgKiBAcGFyYW0gc3RyaWRlIFRoZSBzdHJpZGUgb2YgdGhlIGNvbnZvbHV0aW9uLlxuICAgKiBAcGFyYW0gcGFkIFRoZSBwYWRkaW5nIG9mIGVhY2ggc2lkZSBvZiB0aGUgaW5wdXQgTkRBcnJheS4gV2lsbCBwYWQgZXF1YWxseVxuICAgKiBvbiBhbGwgc2lkZXMuXG4gICAqL1xuICBjb252MmRUcmFuc3Bvc2UoXG4gICAgICB4OiBBcnJheTNELCB3ZWlnaHRzOiBBcnJheTRELCBiaWFzZXM6IEFycmF5MUR8bnVsbCwgc3RyaWRlOiBudW1iZXIsXG4gICAgICBwYWQ6IG51bWJlcik6IEFycmF5M0Qge1xuICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICB4LnJhbmsgPT09IDMsXG4gICAgICAgIGBFcnJvciBpbiBjb252MmRUcmFuc3Bvc2U6IHggbXVzdCBiZSByYW5rIDMsIGJ1dCBnb3QgcmFuayBgICtcbiAgICAgICAgICAgIGAke3gucmFua30uYCk7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIHdlaWdodHMucmFuayA9PT0gNCxcbiAgICAgICAgYEVycm9yIGluIGNvbnYyZFRyYW5zcG9zZTogd2VpZ2h0cyBtdXN0IGJlIHJhbmsgNCwgYnV0IGdvdCBgICtcbiAgICAgICAgICAgIGByYW5rICR7d2VpZ2h0cy5yYW5rfWApO1xuICAgIGlmIChiaWFzZXMgIT0gbnVsbCkge1xuICAgICAgdXRpbC5hc3NlcnQoXG4gICAgICAgICAgYmlhc2VzLnJhbmsgPT09IDEsXG4gICAgICAgICAgYEVycm9yIGluIGNvbnYyZFRyYW5zcG9zZTogYmlhc2VzIG11c3QgYmUgcmFuayAxLCBidXQgZ290ICcgK1xuICAgICAgICAgICAgICAncmFuayAke2JpYXNlcy5yYW5rfS5gKTtcbiAgICB9XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIHguc2hhcGVbMl0gPT09IHdlaWdodHMuc2hhcGVbM10sXG4gICAgICAgIGBFcnJvciBpbiBjb252MmRUcmFuc3Bvc2U6IGRlcHRoIG9mIGlucHV0ICgke3guc2hhcGVbMl19KSBtdXN0IGAgK1xuICAgICAgICAgICAgYG1hdGNoIGlucHV0IGRlcHRoIGZvciB3ZWlnaHRzICR7d2VpZ2h0cy5zaGFwZVszXX0uYCk7XG5cbiAgICByZXR1cm4gdGhpcy50cmFjayhcbiAgICAgICAgdGhpcy5jb252MmRUcmFuc3Bvc2VJbnRlcm5hbCh4LCB3ZWlnaHRzLCBiaWFzZXMsIHN0cmlkZSwgcGFkKSk7XG4gIH1cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGNvbnYyZFRyYW5zcG9zZUludGVybmFsKFxuICAgICAgeDogQXJyYXkzRCwgd2VpZ2h0czogQXJyYXk0RCwgYmlhc2VzOiBBcnJheTFEfG51bGwsIHN0cmlkZTogbnVtYmVyLFxuICAgICAgcGFkOiBudW1iZXIpOiBBcnJheTNEO1xuXG4gIC8qKlxuICAgKiBDb21wdXRlcyB0aGUgMkQgbWF4IHBvb2xpbmcgb2YgYW4gaW1hZ2UuXG4gICAqIEBwYXJhbSB4IFRoZSBpbnB1dCBpbWFnZSwgbXVzdCBiZSByYW5rIDMuXG4gICAqIEBwYXJhbSBmU2l6ZSBUaGUgZmllbGQgc2l6ZSBvZiB0aGUgbWF4IHBvb2wuXG4gICAqIEBwYXJhbSBzdHJpZGUgVGhlIHN0cmlkZSBvZiB0aGUgbWF4IHBvb2wuXG4gICAqIEBwYXJhbSBwYWQgVGhlIHBhZGRpbmcgb2YgZWFjaCBzaWRlIG9mIHRoZSBpbnB1dCBOREFycmF5LiBXaWxsIHBhZCBlcXVhbGx5XG4gICAqIG9uIGFsbCBzaWRlcy5cbiAgICovXG4gIG1heFBvb2woeDogQXJyYXkzRCwgZlNpemU6IG51bWJlciwgc3RyaWRlOiBudW1iZXIsIHBhZDogbnVtYmVyKTogQXJyYXkzRCB7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIHgucmFuayA9PT0gMyxcbiAgICAgICAgJ0Vycm9yIGluIG1heFBvb2w6IHggbXVzdCBiZSByYW5rIDMgYnV0IGdvdCByYW5rICcgKyB4LnJhbmsgKyAnLicpO1xuICAgIHJldHVybiB0aGlzLnRyYWNrKHRoaXMubWF4UG9vbEludGVybmFsKHgsIGZTaXplLCBzdHJpZGUsIHBhZCkpO1xuICB9XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBtYXhQb29sSW50ZXJuYWwoXG4gICAgICB4OiBBcnJheTNELCBmU2l6ZTogbnVtYmVyLCBzdHJpZGU6IG51bWJlciwgcGFkOiBudW1iZXIpOiBBcnJheTNEO1xuXG4gIC8qKlxuICAgKiBDb21wdXRlcyB0aGUgYmFja3Byb3Agb2YgYSBtYXggcG9vbC5cbiAgICogQHBhcmFtIGR5IFRoZSBkeSBlcnJvci5cbiAgICogQHBhcmFtIHggVGhlIGlucHV0IGltYWdlLCBtdXN0IGJlIHJhbmsgMy5cbiAgICogQHBhcmFtIGZTaXplIFRoZSBmaWVsZCBzaXplIG9mIHRoZSBtYXggcG9vbC5cbiAgICogQHBhcmFtIHN0cmlkZSBUaGUgc3RyaWRlIG9mIHRoZSBtYXggcG9vbC5cbiAgICogQHBhcmFtIHBhZCBUaGUgcGFkZGluZyBvZiBlYWNoIHNpZGUgb2YgdGhlIGlucHV0IE5EQXJyYXkuIFdpbGwgcGFkIGVxdWFsbHlcbiAgICogb24gYWxsIHNpZGVzLlxuICAgKi9cbiAgbWF4UG9vbEJhY2twcm9wKFxuICAgICAgZHk6IEFycmF5M0QsIHg6IEFycmF5M0QsIGZTaXplOiBudW1iZXIsIHN0cmlkZTogbnVtYmVyLFxuICAgICAgcGFkOiBudW1iZXIpOiBBcnJheTNEIHtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgZHkucmFuayA9PT0gMyxcbiAgICAgICAgYEVycm9yIGluIG1heFBvb2xCYWNrcHJvcDogZHkgbXVzdCBiZSByYW5rIDMgYnV0IGdvdCByYW5rIGAgK1xuICAgICAgICAgICAgYCR7ZHkucmFua30uYCk7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIHgucmFuayA9PT0gMyxcbiAgICAgICAgYEVycm9yIGluIG1heFBvb2xCYWNrcHJvcDogeCBtdXN0IGJlIHJhbmsgMyBidXQgZ290IHJhbmsgYCArXG4gICAgICAgICAgICBgJHt4LnJhbmt9LmApO1xuXG4gICAgcmV0dXJuIHRoaXMudHJhY2sodGhpcy5tYXhQb29sQmFja3Byb3BJbnRlcm5hbChkeSwgeCwgZlNpemUsIHN0cmlkZSwgcGFkKSk7XG4gIH1cbiAgcHJvdGVjdGVkIGFic3RyYWN0IG1heFBvb2xCYWNrcHJvcEludGVybmFsKFxuICAgICAgZHk6IEFycmF5M0QsIHg6IEFycmF5M0QsIGZTaXplOiBudW1iZXIsIHN0cmlkZTogbnVtYmVyLFxuICAgICAgcGFkOiBudW1iZXIpOiBBcnJheTNEO1xuXG4gIC8qKlxuICAgKiBDb21wdXRlcyB0aGUgMkQgbWluIHBvb2xpbmcgb2YgYW4gaW1hZ2UuXG4gICAqIEBwYXJhbSB4IFRoZSBpbnB1dCBpbWFnZSwgbXVzdCBiZSByYW5rIDMuXG4gICAqIEBwYXJhbSBmU2l6ZSBUaGUgZmllbGQgc2l6ZSBvZiB0aGUgbWF4IHBvb2wuXG4gICAqIEBwYXJhbSBzdHJpZGUgVGhlIHN0cmlkZSBvZiB0aGUgbWF4IHBvb2wuXG4gICAqIEBwYXJhbSBwYWQgVGhlIHBhZGRpbmcgb2YgZWFjaCBzaWRlIG9mIHRoZSBpbnB1dCBOREFycmF5LiBXaWxsIHBhZCBlcXVhbGx5XG4gICAqIG9uIGFsbCBzaWRlcy5cbiAgICovXG4gIG1pblBvb2woeDogQXJyYXkzRCwgZlNpemU6IG51bWJlciwgc3RyaWRlOiBudW1iZXIsIHBhZDogbnVtYmVyKTogQXJyYXkzRCB7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIHgucmFuayA9PT0gMyxcbiAgICAgICAgYEVycm9yIGluIG1pblBvb2w6IHggbXVzdCBiZSByYW5rIDMgYnV0IGdvdCByYW5rICR7eC5yYW5rfS5gKTtcbiAgICByZXR1cm4gdGhpcy50cmFjayh0aGlzLm1pblBvb2xJbnRlcm5hbCh4LCBmU2l6ZSwgc3RyaWRlLCBwYWQpKTtcbiAgfVxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgbWluUG9vbEludGVybmFsKFxuICAgICAgeDogQXJyYXkzRCwgZlNpemU6IG51bWJlciwgc3RyaWRlOiBudW1iZXIsIHBhZDogbnVtYmVyKTogQXJyYXkzRDtcblxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIDJEIGF2ZXJhZ2UgcG9vbGluZyBvZiBhbiBpbWFnZS5cbiAgICogQHBhcmFtIHggVGhlIGlucHV0IGltYWdlLCBtdXN0IGJlIHJhbmsgMy5cbiAgICogQHBhcmFtIGZTaXplIFRoZSBmaWVsZCBzaXplIG9mIHRoZSBtYXggcG9vbC5cbiAgICogQHBhcmFtIHN0cmlkZSBUaGUgc3RyaWRlIG9mIHRoZSBtYXggcG9vbC5cbiAgICogQHBhcmFtIHBhZCBUaGUgcGFkZGluZyBvZiBlYWNoIHNpZGUgb2YgdGhlIGlucHV0IE5EQXJyYXkuIFdpbGwgcGFkIGVxdWFsbHlcbiAgICogb24gYWxsIHNpZGVzLlxuICAgKi9cbiAgYXZnUG9vbCh4OiBBcnJheTNELCBmU2l6ZTogbnVtYmVyLCBzdHJpZGU6IG51bWJlciwgcGFkOiBudW1iZXIpOiBBcnJheTNEIHtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgeC5yYW5rID09PSAzLFxuICAgICAgICBgRXJyb3IgaW4gYXZnUG9vbDogeCBtdXN0IGJlIHJhbmsgMyBidXQgZ290IHJhbmsgJHt4LnJhbmt9LmApO1xuICAgIHJldHVybiB0aGlzLnRyYWNrKHRoaXMuYXZnUG9vbEludGVybmFsKHgsIGZTaXplLCBzdHJpZGUsIHBhZCkpO1xuICB9XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBhdmdQb29sSW50ZXJuYWwoXG4gICAgICB4OiBBcnJheTNELCBmU2l6ZTogbnVtYmVyLCBzdHJpZGU6IG51bWJlciwgcGFkOiBudW1iZXIpOiBBcnJheTNEO1xuXG4gIC8qXG4gICAqIEJpbGluZWFyIHJlc2l6ZSBhIDNEIGFycmF5IHBlciBlYWNoIGNoYW5uZWwgdG8gYSBuZXcgMkQgc2hhcGUuXG4gICAqIEBwYXJhbSB4IFRoZSBpbnB1dCBBcnJheTNELlxuICAgKiBAcGFyYW0gbmV3U2hhcGUyRCBUaGUgbmV3IHNoYXBlIHRvIHJlc2l6ZSB0aGUgQXJyYXkzRCB0by4gRWFjaCBjaGFubmVsIGlzXG4gICAqIHJlc2l6ZWQgaW5kaXZpZHVhbGx5LlxuICAgKiBAcGFyYW0gYWxpZ25Db3JuZXJzIEFuIG9wdGlvbmFsIGJvb2wuIERlZmF1bHRzIHRvIEZhbHNlLiBJZiB0cnVlLCByZXNjYWxlXG4gICAqIGlucHV0IGJ5IChuZXdfaGVpZ2h0IC0gMSkgLyAoaGVpZ2h0IC0gMSksIHdoaWNoIGV4YWN0bHkgYWxpZ25zIHRoZSA0XG4gICAqIGNvcm5lcnMgb2YgaW1hZ2VzIGFuZCByZXNpemVkIGltYWdlcy4gSWYgZmFsc2UsIHJlc2NhbGUgYnkgbmV3X2hlaWdodCAvXG4gICAqIGhlaWdodC4gVHJlYXQgc2ltaWxhcmx5IHRoZSB3aWR0aCBkaW1lbnNpb24uXG4gICAqL1xuICByZXNpemVCaWxpbmVhcjNEKFxuICAgICAgeDogQXJyYXkzRCwgbmV3U2hhcGUyRDogW251bWJlciwgbnVtYmVyXSwgYWxpZ25Db3JuZXJzID0gZmFsc2UpOiBBcnJheTNEIHtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgeC5yYW5rID09PSAzLFxuICAgICAgICBgRXJyb3IgaW4gcmVzaXplQmlsaW5lYXIzRDogeCBtdXN0IGJlIHJhbmsgMyBidXQgZ290IHJhbmsgJHt4LnJhbmt9LmApO1xuICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICBuZXdTaGFwZTJELmxlbmd0aCA9PT0gMixcbiAgICAgICAgYEVycm9yIGluIHJlc2l6ZUJpbGluZWFyM0Q6IG5ldyBzaGFwZSBtdXN0IDJELCBidXQgZ290IHNoYXBlIGAgK1xuICAgICAgICAgICAgYCR7bmV3U2hhcGUyRH0uYCk7XG4gICAgcmV0dXJuIHRoaXMudHJhY2soXG4gICAgICAgIHRoaXMucmVzaXplQmlsaW5lYXIzREludGVybmFsKHgsIG5ld1NoYXBlMkQsIGFsaWduQ29ybmVycykpO1xuICB9XG4gIHByb3RlY3RlZCBhYnN0cmFjdCByZXNpemVCaWxpbmVhcjNESW50ZXJuYWwoXG4gICAgICB4OiBBcnJheTNELCBuZXdTaGFwZTJEOiBbbnVtYmVyLCBudW1iZXJdLCBhbGlnbkNvcm5lcnM6IGJvb2xlYW4pOiBBcnJheTNEO1xuXG4gIC8qKlxuICAgKiBCYXRjaCBub3JtYWxpemF0aW9uIDNELiBNZWFuLCB2YXJpYW5jZSwgc2NhbGUsIGFuZCBvZmZzZXQgY2FuIGJlIG9mIHR3b1xuICAgKiBzaGFwZXM6IDEpIFRoZSBzYW1lIHNoYXBlIGFzIHRoZSBpbnB1dDogYW4gQXJyYXkzRC4gMikgSW4gdGhlIGNvbW1vbiBjYXNlLFxuICAgKiB0aGUgZGVwdGggZGltZW5zaW9uIGlzIHRoZSBsYXN0IGRpbWVuc2lvbiBvZiB4LCBzbyB0aGUgdmFsdWVzIHdvdWxkIGJlIGFuXG4gICAqIEFycmF5MUQgb2Ygc2hhcGUgW2RlcHRoXS5cbiAgICogQHBhcmFtIHggVGhlIGlucHV0IE5EQXJyYXkuXG4gICAqIEBwYXJhbSBtZWFuIEEgbWVhbiBOREFycmF5LlxuICAgKiBAcGFyYW0gdmFyaWFuY2UgQSB2YXJpYW5jZSBOREFycmF5LlxuICAgKiBAcGFyYW0gdmFyaWFuY2VFcHNpbG9uIEEgc21hbGwgZmxvYXQgbnVtYmVyIHRvIGF2b2lkIGRpdmlkaW5nIGJ5IDAuXG4gICAqIEBwYXJhbSBzY2FsZSBBIHNjYWxlIE5EQXJyYXkuXG4gICAqIEBwYXJhbSBvZmZzZXQgQW4gb2Zmc2V0IE5EQXJyYXkuXG4gICAqL1xuICBiYXRjaE5vcm1hbGl6YXRpb24zRChcbiAgICAgIHg6IEFycmF5M0QsIG1lYW46IEFycmF5M0R8QXJyYXkxRCwgdmFyaWFuY2U6IEFycmF5M0R8QXJyYXkxRCxcbiAgICAgIHZhcmlhbmNlRXBzaWxvbiA9IC4wMDEsIHNjYWxlPzogQXJyYXkzRHxBcnJheTFELFxuICAgICAgb2Zmc2V0PzogQXJyYXkzRHxBcnJheTFEKTogQXJyYXkzRCB7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIHgucmFuayA9PT0gMyxcbiAgICAgICAgYEVycm9yIGluIGJhdGNoTm9ybWFsaXphdGlvbjNEOiB4IG11c3QgYmUgcmFuayAzIGJ1dCBnb3QgcmFuayBgICtcbiAgICAgICAgICAgIGAke3gucmFua30uYCk7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIG1lYW4ucmFuayA9PT0gMyB8fCBtZWFuLnJhbmsgPT09IDEsXG4gICAgICAgIGBFcnJvciBpbiBiYXRjaE5vcm1hbGl6YXRpb24zRDogbWVhbiBtdXN0IGJlIHJhbmsgMyBvciByYW5rIDEgYnV0IGAgK1xuICAgICAgICAgICAgYGdvdCByYW5rICR7bWVhbi5yYW5rfS5gKTtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgdmFyaWFuY2UucmFuayA9PT0gMyB8fCB2YXJpYW5jZS5yYW5rID09PSAxLFxuICAgICAgICBgRXJyb3IgaW4gYmF0Y2hOb3JtYWxpemF0aW9uM0Q6IHZhcmlhbmNlIG11c3QgYmUgcmFuayAzIG9yIHJhbmsgMSBgICtcbiAgICAgICAgICAgIGBidXQgZ290IHJhbmsgJHt2YXJpYW5jZS5yYW5rfS5gKTtcbiAgICBpZiAoc2NhbGUgIT0gbnVsbCkge1xuICAgICAgdXRpbC5hc3NlcnQoXG4gICAgICAgICAgc2NhbGUucmFuayA9PT0gMyB8fCBzY2FsZS5yYW5rID09PSAxLFxuICAgICAgICAgIGBFcnJvciBpbiBiYXRjaE5vcm1hbGl6YXRpb24zRDogc2NhbGUgbXVzdCBiZSByYW5rIDMgb3IgcmFuayAxIGAgK1xuICAgICAgICAgICAgICBgYnV0IGdvdCByYW5rICR7c2NhbGUhLnJhbmt9LmApO1xuICAgIH1cbiAgICBpZiAob2Zmc2V0ICE9IG51bGwpIHtcbiAgICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICAgIG9mZnNldC5yYW5rID09PSAzIHx8IG9mZnNldC5yYW5rID09PSAxLFxuICAgICAgICAgIGBFcnJvciBpbiBiYXRjaE5vcm1hbGl6YXRpb24zRDogb2Zmc2V0IG11c3QgYmUgcmFuayAzIG9yIHJhbmsgMSBgICtcbiAgICAgICAgICAgICAgYGJ1dCBnb3QgcmFuayAke29mZnNldCEucmFua30uYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudHJhY2sodGhpcy5iYXRjaE5vcm1hbGl6YXRpb24zREludGVybmFsKFxuICAgICAgICB4LCBtZWFuLCB2YXJpYW5jZSwgdmFyaWFuY2VFcHNpbG9uLCBzY2FsZSwgb2Zmc2V0KSk7XG4gIH1cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGJhdGNoTm9ybWFsaXphdGlvbjNESW50ZXJuYWwoXG4gICAgICB4OiBBcnJheTNELCBtZWFuOiBBcnJheTNEfEFycmF5MUQsIHZhcmlhbmNlOiBBcnJheTNEfEFycmF5MUQsXG4gICAgICB2YXJpYW5jZUVwc2lsb246IG51bWJlciwgc2NhbGU/OiBBcnJheTNEfEFycmF5MUQsXG4gICAgICBvZmZzZXQ/OiBBcnJheTNEfEFycmF5MUQpOiBBcnJheTNEO1xufVxuXG5leHBvcnQgZW51bSBNYXRyaXhPcmllbnRhdGlvbiB7XG4gIFJFR1VMQVIsXG4gIFRSQU5TUE9TRURcbn1cbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0ICogYXMgY29udl91dGlsIGZyb20gJy4uL21hdGgvY29udl91dGlsJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi4vdXRpbCc7XG5cbmltcG9ydCAqIGFzIGNvbmNhdDNkX3V0aWwgZnJvbSAnLi9jb25jYXQzZF91dGlsJztcbmltcG9ydCAqIGFzIGNvcHkyRF91dGlsIGZyb20gJy4vY29weTJkX3V0aWwnO1xuaW1wb3J0IHtNYXRyaXhPcmllbnRhdGlvbiwgTkRBcnJheU1hdGh9IGZyb20gJy4vbWF0aCc7XG5pbXBvcnQge0FycmF5MUQsIEFycmF5MkQsIEFycmF5M0QsIEFycmF5NEQsIE5EQXJyYXksIFNjYWxhcn0gZnJvbSAnLi9uZGFycmF5JztcblxuZXhwb3J0IGNsYXNzIE5EQXJyYXlNYXRoQ1BVIGV4dGVuZHMgTkRBcnJheU1hdGgge1xuICBjb25zdHJ1Y3RvcihzYWZlTW9kZSA9IGZhbHNlKSB7XG4gICAgc3VwZXIoc2FmZU1vZGUpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNsb25lSW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KG5kYXJyYXk6IFQpOiBUIHtcbiAgICByZXR1cm4gTkRBcnJheS5tYWtlPFQ+KFxuICAgICAgICBuZGFycmF5LnNoYXBlLCB7dmFsdWVzOiBuZXcgRmxvYXQzMkFycmF5KG5kYXJyYXkuZ2V0VmFsdWVzKCkpfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVzaGFwZUludGVybmFsPFQxIGV4dGVuZHMgTkRBcnJheSwgVDIgZXh0ZW5kcyBOREFycmF5PihcbiAgICAgIG5kYXJyYXk6IFQxLCBuZXdTaGFwZTogbnVtYmVyW10pOiBUMiB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmVJbnRlcm5hbChuZGFycmF5KS5yZXNoYXBlPFQyPihuZXdTaGFwZSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2xpY2UyREludGVybmFsKFxuICAgICAgaW5wdXQ6IEFycmF5MkQsIGJlZ2luUm93Q29sOiBbbnVtYmVyLCBudW1iZXJdLFxuICAgICAgc2l6ZVJvd0NvbDogW251bWJlciwgbnVtYmVyXSk6IEFycmF5MkQge1xuICAgIGNvbnN0IHJlc3VsdCA9IEFycmF5MkQuemVyb3Moc2l6ZVJvd0NvbCk7XG4gICAgdGhpcy5jb3B5MkRJbnRlcm5hbChcbiAgICAgICAgaW5wdXQsIGJlZ2luUm93Q29sLCBzaXplUm93Q29sLCByZXN1bHQsIFswLCAwXSwgc2l6ZVJvd0NvbCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByb3RlY3RlZCBjb3B5MkRJbnRlcm5hbChcbiAgICAgIHNvdXJjZTogQXJyYXkyRCwgc291cmNlQmVnaW5Sb3dDb2w6IFtudW1iZXIsIG51bWJlcl0sXG4gICAgICBzb3VyY2VTaXplUm93Q29sOiBbbnVtYmVyLCBudW1iZXJdLCBkZXN0OiBBcnJheTJELFxuICAgICAgZGVzdEJlZ2luUm93Q29sOiBbbnVtYmVyLCBudW1iZXJdLFxuICAgICAgZGVzdFNpemVSb3dDb2w6IFtudW1iZXIsIG51bWJlcl0pOiB2b2lkIHtcbiAgICBjb3B5MkRfdXRpbC52YWxpZGF0ZVNoYXBlcyhzb3VyY2VTaXplUm93Q29sLCBkZXN0U2l6ZVJvd0NvbCk7XG4gICAgY29uc3Qgc3JjVmFsdWVzID0gc291cmNlLmdldFZhbHVlcygpO1xuICAgIGNvbnN0IGRzdFZhbHVlcyA9IGRlc3QuZ2V0VmFsdWVzKCk7XG4gICAgY29uc3QgbiA9IHNvdXJjZVNpemVSb3dDb2xbMF0gKiBzb3VyY2VTaXplUm93Q29sWzFdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBjb25zdCBzcmNSb3cgPSBzb3VyY2VCZWdpblJvd0NvbFswXSArIE1hdGguZmxvb3IoaSAvIHNvdXJjZVNpemVSb3dDb2xbMV0pO1xuICAgICAgY29uc3Qgc3JjQ29sID0gc291cmNlQmVnaW5Sb3dDb2xbMV0gKyAoaSAlIHNvdXJjZVNpemVSb3dDb2xbMV0pO1xuICAgICAgY29uc3Qgc3JjT2ZmID0gc3JjUm93ICogc291cmNlLnNoYXBlWzFdICsgc3JjQ29sO1xuICAgICAgY29uc3QgZHN0Um93ID0gZGVzdEJlZ2luUm93Q29sWzBdICsgTWF0aC5mbG9vcihpIC8gZGVzdFNpemVSb3dDb2xbMV0pO1xuICAgICAgY29uc3QgZHN0Q29sID0gZGVzdEJlZ2luUm93Q29sWzFdICsgKGkgJSBkZXN0U2l6ZVJvd0NvbFsxXSk7XG4gICAgICBjb25zdCBkc3RPZmYgPSBkc3RSb3cgKiBkZXN0LnNoYXBlWzFdICsgZHN0Q29sO1xuICAgICAgZHN0VmFsdWVzW2RzdE9mZl0gPSBzcmNWYWx1ZXNbc3JjT2ZmXTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgY29uY2F0M0RJbnRlcm5hbCh4MTogQXJyYXkzRCwgeDI6IEFycmF5M0QsIGF4aXM6IG51bWJlcik6IEFycmF5M0Qge1xuICAgIGNvbnN0IG91dHB1dFNoYXBlID1cbiAgICAgICAgY29uY2F0M2RfdXRpbC5jb21wdXRlQ29uY2F0M0RPdXRwdXRTaGFwZSh4MS5zaGFwZSwgeDIuc2hhcGUsIGF4aXMpO1xuXG4gICAgY29uc3QgdmFsdWVzID0gTkRBcnJheS56ZXJvczxBcnJheTNEPihvdXRwdXRTaGFwZSk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dHB1dFNoYXBlWzBdOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgb3V0cHV0U2hhcGVbMV07IGorKykge1xuICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IG91dHB1dFNoYXBlWzJdOyBrKyspIHtcbiAgICAgICAgICAvLyBTaGFkZXIgYmVnaW5zLlxuICAgICAgICAgIGNvbnN0IGluZGV4OiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0gPSBbaSwgaiwga107XG4gICAgICAgICAgbGV0IHZhbHVlOiBudW1iZXI7XG4gICAgICAgICAgaWYgKGluZGV4W2F4aXNdIDwgeDEuc2hhcGVbYXhpc10pIHtcbiAgICAgICAgICAgIHZhbHVlID0geDEuZ2V0KGksIGosIGspO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbmRleFtheGlzXSAtPSB4MS5zaGFwZVtheGlzXTtcbiAgICAgICAgICAgIGNvbnN0IFtpMiwgajIsIGsyXSA9IGluZGV4O1xuICAgICAgICAgICAgdmFsdWUgPSB4Mi5nZXQoaTIsIGoyLCBrMik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFsdWVzLnNldCh2YWx1ZSwgaSwgaiwgayk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9XG5cbiAgcHJvdGVjdGVkIHNjYWxhclBsdXNBcnJheUludGVybmFsPFQgZXh0ZW5kcyBOREFycmF5PihjOiBTY2FsYXIsIGE6IFQpOiBUIHtcbiAgICBjb25zdCByZXN1bHRWYWx1ZXMgPSBuZXcgRmxvYXQzMkFycmF5KGEuc2l6ZSk7XG4gICAgY29uc3QgYVZhbHVlcyA9IGEuZ2V0VmFsdWVzKCk7XG4gICAgY29uc3QgY1ZhbCA9IGMuZ2V0KCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHRWYWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHJlc3VsdFZhbHVlc1tpXSA9IGNWYWwgKyBhVmFsdWVzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gTkRBcnJheS5tYWtlPFQ+KGEuc2hhcGUsIHt2YWx1ZXM6IHJlc3VsdFZhbHVlc30pO1xuICB9XG5cbiAgcHJvdGVjdGVkIHNjYWxlZEFycmF5QWRkSW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KFxuICAgICAgYzE6IFNjYWxhciwgYTogVCwgYzI6IFNjYWxhciwgYjogVCkge1xuICAgIGNvbnN0IGNWYWx1ZXMgPSBuZXcgRmxvYXQzMkFycmF5KGEuc2l6ZSk7XG4gICAgY29uc3QgYVZhbHVlcyA9IGEuZ2V0VmFsdWVzKCk7XG4gICAgY29uc3QgYlZhbHVlcyA9IGIuZ2V0VmFsdWVzKCk7XG4gICAgY29uc3QgYzFWYWwgPSBjMS5nZXQoKTtcbiAgICBjb25zdCBjMlZhbCA9IGMyLmdldCgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY1ZhbHVlcy5sZW5ndGg7ICsraSkge1xuICAgICAgY1ZhbHVlc1tpXSA9IGMxVmFsICogYVZhbHVlc1tpXSArIGMyVmFsICogYlZhbHVlc1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIE5EQXJyYXkubWFrZTxUPihhLnNoYXBlLCB7dmFsdWVzOiBjVmFsdWVzfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2NhbGFyVGltZXNBcnJheUludGVybmFsPFQgZXh0ZW5kcyBOREFycmF5PihjOiBTY2FsYXIsIGE6IFQpOiBUIHtcbiAgICBjb25zdCBuZXdWYWx1ZXMgPSBuZXcgRmxvYXQzMkFycmF5KGEuc2l6ZSk7XG4gICAgY29uc3QgYVZhbHVlcyA9IGEuZ2V0VmFsdWVzKCk7XG4gICAgY29uc3QgY1ZhbCA9IGMuZ2V0KCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhVmFsdWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICBuZXdWYWx1ZXNbaV0gPSBjVmFsICogYVZhbHVlc1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIE5EQXJyYXkubWFrZTxUPihhLnNoYXBlLCB7dmFsdWVzOiBuZXdWYWx1ZXN9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzY2FsYXJNaW51c0FycmF5SW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KGM6IFNjYWxhciwgYTogVCk6IFQge1xuICAgIGNvbnN0IG5lZ0EgPSB0aGlzLm5lZ0ludGVybmFsKGEpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuc2NhbGFyUGx1c0FycmF5SW50ZXJuYWwoYywgbmVnQSk7XG5cbiAgICBuZWdBLmRpc3Bvc2UoKTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXJyYXlNaW51c1NjYWxhckludGVybmFsPFQgZXh0ZW5kcyBOREFycmF5PihhOiBULCBjOiBTY2FsYXIpOiBUIHtcbiAgICBjb25zdCBuZWdDID0gdGhpcy5uZWdJbnRlcm5hbChjKTtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLnNjYWxhclBsdXNBcnJheUludGVybmFsKG5lZ0MsIGEpO1xuXG4gICAgbmVnQy5kaXNwb3NlKCk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJvdGVjdGVkIG5lZ0ludGVybmFsPFQgZXh0ZW5kcyBOREFycmF5PihhOiBUKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuc2NhbGFyVGltZXNBcnJheUludGVybmFsKFNjYWxhci5ORUdfT05FLCBhKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhZGRJbnRlcm5hbDxUIGV4dGVuZHMgTkRBcnJheT4oYTogVCwgYjogVCk6IFQge1xuICAgIHJldHVybiB0aGlzLnNjYWxlZEFycmF5QWRkSW50ZXJuYWw8VD4oU2NhbGFyLk9ORSwgYSwgU2NhbGFyLk9ORSwgYik7XG4gIH1cblxuICBwcm90ZWN0ZWQgc3ViSW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KGE6IFQsIGI6IFQpOiBUIHtcbiAgICByZXR1cm4gdGhpcy5zY2FsZWRBcnJheUFkZEludGVybmFsPFQ+KFNjYWxhci5PTkUsIGEsIFNjYWxhci5ORUdfT05FLCBiKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBtYXRNdWxJbnRlcm5hbChcbiAgICAgIGE6IEFycmF5MkQsIGI6IEFycmF5MkQsIGFPcmllbnRhdGlvbiA9IE1hdHJpeE9yaWVudGF0aW9uLlJFR1VMQVIsXG4gICAgICBiT3JpZW50YXRpb24gPSBNYXRyaXhPcmllbnRhdGlvbi5SRUdVTEFSKTogQXJyYXkyRCB7XG4gICAgY29uc3Qgc2hhcmVkRGltID1cbiAgICAgICAgKGFPcmllbnRhdGlvbiA9PT0gTWF0cml4T3JpZW50YXRpb24uUkVHVUxBUikgPyBhLnNoYXBlWzFdIDogYS5zaGFwZVswXTtcblxuICAgIGNvbnN0IGxlZnREaW0gPVxuICAgICAgICAoYU9yaWVudGF0aW9uID09PSBNYXRyaXhPcmllbnRhdGlvbi5SRUdVTEFSKSA/IGEuc2hhcGVbMF0gOiBhLnNoYXBlWzFdO1xuICAgIGNvbnN0IHJpZ2h0RGltID1cbiAgICAgICAgKGJPcmllbnRhdGlvbiA9PT0gTWF0cml4T3JpZW50YXRpb24uUkVHVUxBUikgPyBiLnNoYXBlWzFdIDogYi5zaGFwZVswXTtcblxuICAgIGNvbnN0IG5vcm1hbEdldHRlciA9IChtYXRyaXg6IEFycmF5MkQsIGk6IG51bWJlciwgajogbnVtYmVyKSA9PlxuICAgICAgICBtYXRyaXguZ2V0KGksIGopO1xuICAgIGNvbnN0IHRyYW5zcG9zZWRHZXR0ZXIgPSAobWF0cml4OiBBcnJheTJELCBpOiBudW1iZXIsIGo6IG51bWJlcikgPT5cbiAgICAgICAgbWF0cml4LmdldChqLCBpKTtcblxuICAgIGNvbnN0IGFHZXR0ZXIgPSAoYU9yaWVudGF0aW9uID09PSBNYXRyaXhPcmllbnRhdGlvbi5SRUdVTEFSKSA/XG4gICAgICAgIG5vcm1hbEdldHRlciA6XG4gICAgICAgIHRyYW5zcG9zZWRHZXR0ZXI7XG4gICAgY29uc3QgYkdldHRlciA9IChiT3JpZW50YXRpb24gPT09IE1hdHJpeE9yaWVudGF0aW9uLlJFR1VMQVIpID9cbiAgICAgICAgbm9ybWFsR2V0dGVyIDpcbiAgICAgICAgdHJhbnNwb3NlZEdldHRlcjtcbiAgICBjb25zdCB2YWx1ZXMgPSBuZXcgRmxvYXQzMkFycmF5KGxlZnREaW0gKiByaWdodERpbSk7XG4gICAgbGV0IGluZGV4ID0gMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVmdERpbTsgKytpKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHJpZ2h0RGltOyArK2opIHtcbiAgICAgICAgbGV0IHN1bSA9IDA7XG4gICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgc2hhcmVkRGltOyArK2spIHtcbiAgICAgICAgICAvLyBUT0RPOiBvcHRpbWl6ZSBDUFUgbWF0bXVsLlxuICAgICAgICAgIHN1bSArPSBhR2V0dGVyKGEsIGksIGspICogYkdldHRlcihiLCBrLCBqKTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZXNbaW5kZXgrK10gPSBzdW07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBBcnJheTJELm5ldyhbbGVmdERpbSwgcmlnaHREaW1dLCB2YWx1ZXMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGVsZW1lbnRXaXNlTXVsSW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KGE6IFQsIGI6IFQpOiBUIHtcbiAgICBjb25zdCBuZXdWYWx1ZXMgPSBuZXcgRmxvYXQzMkFycmF5KGEuc2l6ZSk7XG4gICAgY29uc3QgYVZhbHVlcyA9IGEuZ2V0VmFsdWVzKCk7XG4gICAgY29uc3QgYlZhbHVlcyA9IGIuZ2V0VmFsdWVzKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhVmFsdWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICBuZXdWYWx1ZXNbaV0gPSBhVmFsdWVzW2ldICogYlZhbHVlc1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIE5EQXJyYXkubWFrZTxUPihhLnNoYXBlLCB7dmFsdWVzOiBuZXdWYWx1ZXN9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBlbGVtZW50V2lzZU11bEJyb2FkY2FzdEludGVybmFsKGE6IEFycmF5MkQsIGI6IEFycmF5MkQpOiBBcnJheTJEIHtcbiAgICBjb25zdCBtYXhSb3cgPSBNYXRoLm1heChhLnNoYXBlWzBdLCBiLnNoYXBlWzBdKTtcbiAgICBjb25zdCBtYXhDb2wgPSBNYXRoLm1heChhLnNoYXBlWzFdLCBiLnNoYXBlWzFdKTtcblxuICAgIGNvbnN0IHZhbHVlcyA9IG5ldyBGbG9hdDMyQXJyYXkobWF4Um93ICogbWF4Q29sKTtcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IG1heFJvdzsgcm93KyspIHtcbiAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IG1heENvbDsgY29sKyspIHtcbiAgICAgICAgdmFsdWVzW2luZGV4KytdID0gYS5nZXQocm93ICUgYS5zaGFwZVswXSwgY29sICUgYS5zaGFwZVsxXSkgKlxuICAgICAgICAgICAgYi5nZXQocm93ICUgYi5zaGFwZVswXSwgY29sICUgYi5zaGFwZVsxXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBBcnJheTJELm5ldyhbbWF4Um93LCBtYXhDb2xdLCB2YWx1ZXMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGRpdmlkZUludGVybmFsPFQgZXh0ZW5kcyBOREFycmF5PihhOiBULCBiOiBUKTogVCB7XG4gICAgY29uc3QgbmV3VmFsdWVzID0gbmV3IEZsb2F0MzJBcnJheShhLnNpemUpO1xuICAgIGNvbnN0IGFWYWx1ZXMgPSBhLmdldFZhbHVlcygpO1xuICAgIGNvbnN0IGJWYWx1ZXMgPSBiLmdldFZhbHVlcygpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYVZhbHVlcy5sZW5ndGg7ICsraSkge1xuICAgICAgbmV3VmFsdWVzW2ldID0gYVZhbHVlc1tpXSAvIGJWYWx1ZXNbaV07XG4gICAgfVxuICAgIHJldHVybiBOREFycmF5Lm1ha2U8VD4oYS5zaGFwZSwge3ZhbHVlczogbmV3VmFsdWVzfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2NhbGFyRGl2aWRlZEJ5QXJyYXlJbnRlcm5hbDxUIGV4dGVuZHMgTkRBcnJheT4oYzogU2NhbGFyLCBhOiBUKTpcbiAgICAgIFQge1xuICAgIGNvbnN0IG5ld1ZhbHVlcyA9IG5ldyBGbG9hdDMyQXJyYXkoYS5zaXplKTtcbiAgICBjb25zdCBhVmFsdWVzID0gYS5nZXRWYWx1ZXMoKTtcbiAgICBjb25zdCBjVmFsdWUgPSBjLmdldCgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYVZhbHVlcy5sZW5ndGg7ICsraSkge1xuICAgICAgbmV3VmFsdWVzW2ldID0gY1ZhbHVlIC8gYVZhbHVlc1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIE5EQXJyYXkubWFrZTxUPihhLnNoYXBlLCB7dmFsdWVzOiBuZXdWYWx1ZXN9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhcnJheURpdmlkZWRCeVNjYWxhckludGVybmFsPFQgZXh0ZW5kcyBOREFycmF5PihhOiBULCBjOiBTY2FsYXIpOlxuICAgICAgVCB7XG4gICAgY29uc3QgbmV3VmFsdWVzID0gbmV3IEZsb2F0MzJBcnJheShhLnNpemUpO1xuICAgIGNvbnN0IGFWYWx1ZXMgPSBhLmdldFZhbHVlcygpO1xuICAgIGNvbnN0IGNWYWx1ZSA9IGMuZ2V0KCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhVmFsdWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICBuZXdWYWx1ZXNbaV0gPSBhVmFsdWVzW2ldIC8gY1ZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gTkRBcnJheS5tYWtlPFQ+KGEuc2hhcGUsIHt2YWx1ZXM6IG5ld1ZhbHVlc30pO1xuICB9XG5cbiAgcHJvdGVjdGVkIHN1bUludGVybmFsKG5kYXJyYXk6IE5EQXJyYXkpOiBTY2FsYXIge1xuICAgIGxldCBzdW0gPSAwO1xuICAgIGNvbnN0IHZhbHVlcyA9IG5kYXJyYXkuZ2V0VmFsdWVzKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHN1bSArPSB2YWx1ZXNbaV07XG4gICAgfVxuICAgIHJldHVybiBTY2FsYXIubmV3KHN1bSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXJnTWluSW50ZXJuYWwobmRhcnJheTogTkRBcnJheSk6IFNjYWxhciB7XG4gICAgbGV0IG1pbiA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgbGV0IG1pbkluZGV4ID0gLTE7XG4gICAgY29uc3QgdmFsdWVzID0gbmRhcnJheS5nZXRWYWx1ZXMoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7ICsraSkge1xuICAgICAgY29uc3QgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgICBpZiAoaXNOYU4odmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBTY2FsYXIubmV3KE5hTik7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPCBtaW4pIHtcbiAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgIG1pbkluZGV4ID0gaTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFNjYWxhci5uZXcobWluSW5kZXgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFyZ01heEludGVybmFsKG5kYXJyYXk6IE5EQXJyYXkpOiBTY2FsYXIge1xuICAgIGxldCBtYXggPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7XG4gICAgbGV0IG1heEluZGV4ID0gLTE7XG4gICAgY29uc3QgdmFsdWVzID0gbmRhcnJheS5nZXRWYWx1ZXMoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7ICsraSkge1xuICAgICAgY29uc3QgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgICBpZiAoaXNOYU4odmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBTY2FsYXIubmV3KE5hTik7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPiBtYXgpIHtcbiAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgIG1heEluZGV4ID0gaTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFNjYWxhci5uZXcobWF4SW5kZXgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFyZ01heEVxdWFsc0ludGVybmFsKHgxOiBOREFycmF5LCB4MjogTkRBcnJheSk6IFNjYWxhciB7XG4gICAgY29uc3QgYXJnTWF4MSA9IHRoaXMuYXJnTWF4SW50ZXJuYWwoeDEpLmdldCgpO1xuICAgIGNvbnN0IGFyZ01heDIgPSB0aGlzLmFyZ01heEludGVybmFsKHgyKS5nZXQoKTtcbiAgICBpZiAoaXNOYU4oYXJnTWF4MSkgfHwgaXNOYU4oYXJnTWF4MikpIHtcbiAgICAgIHJldHVybiBTY2FsYXIubmV3KE5hTik7XG4gICAgfVxuICAgIHJldHVybiBTY2FsYXIubmV3KCsoYXJnTWF4MSA9PT0gYXJnTWF4MikpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRvcEtJbnRlcm5hbChuZGFycmF5OiBOREFycmF5LCBrOiBudW1iZXIpOlxuICAgICAge3ZhbHVlczogQXJyYXkxRCwgaW5kaWNlczogQXJyYXkxRH0ge1xuICAgIGNvbnN0IHZhbHVlcyA9IG5kYXJyYXkuZ2V0VmFsdWVzKCk7XG4gICAgY29uc3QgdmFsdWVzQW5kSW5kaWNlczogQXJyYXk8e3ZhbHVlOiBudW1iZXIsIGluZGV4OiBudW1iZXJ9PiA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZXNBbmRJbmRpY2VzLnB1c2goe3ZhbHVlOiB2YWx1ZXNbaV0sIGluZGV4OiBpfSk7XG4gICAgfVxuICAgIHZhbHVlc0FuZEluZGljZXMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgcmV0dXJuIGIudmFsdWUgLSBhLnZhbHVlO1xuICAgIH0pO1xuICAgIGNvbnN0IHRvcGtWYWx1ZXMgPSBuZXcgRmxvYXQzMkFycmF5KGspO1xuICAgIGNvbnN0IHRvcGtJbmRpY2VzID0gbmV3IEZsb2F0MzJBcnJheShrKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGs7IGkrKykge1xuICAgICAgdG9wa1ZhbHVlc1tpXSA9IHZhbHVlc0FuZEluZGljZXNbaV0udmFsdWU7XG4gICAgICB0b3BrSW5kaWNlc1tpXSA9IHZhbHVlc0FuZEluZGljZXNbaV0uaW5kZXg7XG4gICAgfVxuICAgIHJldHVybiB7dmFsdWVzOiBBcnJheTFELm5ldyh0b3BrVmFsdWVzKSwgaW5kaWNlczogQXJyYXkxRC5uZXcodG9wa0luZGljZXMpfTtcbiAgfVxuXG4gIHByb3RlY3RlZCBtaW5JbnRlcm5hbChuZGFycmF5OiBOREFycmF5KTogU2NhbGFyIHtcbiAgICBjb25zdCB2YWx1ZXMgPSBuZGFycmF5LmdldFZhbHVlcygpO1xuICAgIGxldCBtaW4gPSB2YWx1ZXNbMF07XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCB2YWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW2ldO1xuICAgICAgaWYgKGlzTmFOKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gU2NhbGFyLm5ldyhOYU4pO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlIDwgbWluKSB7XG4gICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gU2NhbGFyLm5ldyhtaW4pO1xuICB9XG5cbiAgcHJvdGVjdGVkIG1heEludGVybmFsKG5kYXJyYXk6IE5EQXJyYXkpOiBTY2FsYXIge1xuICAgIGNvbnN0IHZhbHVlcyA9IG5kYXJyYXkuZ2V0VmFsdWVzKCk7XG4gICAgbGV0IG1heCA9IHZhbHVlc1swXTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHZhbHVlcy5sZW5ndGg7ICsraSkge1xuICAgICAgY29uc3QgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgICBpZiAoaXNOYU4odmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBTY2FsYXIubmV3KE5hTik7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPiBtYXgpIHtcbiAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBTY2FsYXIubmV3KG1heCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZXhwSW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KG5kYXJyYXk6IFQpOiBUIHtcbiAgICBjb25zdCB2YWx1ZXMgPSBuZGFycmF5LmdldFZhbHVlcygpO1xuICAgIGNvbnN0IG5ld1ZhbHVlcyA9IG5ldyBGbG9hdDMyQXJyYXkodmFsdWVzLmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIG5ld1ZhbHVlc1tpXSA9IE1hdGguZXhwKHZhbHVlc1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBOREFycmF5Lm1ha2U8VD4obmRhcnJheS5zaGFwZSwge3ZhbHVlczogbmV3VmFsdWVzfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgbG9nSW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KG5kYXJyYXk6IFQpOiBUIHtcbiAgICBjb25zdCB2YWx1ZXMgPSBuZGFycmF5LmdldFZhbHVlcygpO1xuICAgIGNvbnN0IG5ld1ZhbHVlcyA9IG5ldyBGbG9hdDMyQXJyYXkodmFsdWVzLmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW2ldO1xuICAgICAgbmV3VmFsdWVzW2ldID0gTWF0aC5sb2codmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gTkRBcnJheS5tYWtlPFQ+KG5kYXJyYXkuc2hhcGUsIHt2YWx1ZXM6IG5ld1ZhbHVlc30pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGxvZ1N1bUV4cEludGVybmFsKG5kYXJyYXk6IE5EQXJyYXkpOiBTY2FsYXIge1xuICAgIGNvbnN0IHhNYXggPSB0aGlzLm1heChuZGFycmF5KTtcbiAgICBjb25zdCBhID0gdGhpcy5hcnJheU1pbnVzU2NhbGFyKG5kYXJyYXksIHhNYXgpO1xuICAgIGNvbnN0IGIgPSB0aGlzLmV4cChhKTtcbiAgICBjb25zdCBjID0gdGhpcy5zdW0oYik7XG4gICAgY29uc3QgZCA9IHRoaXMubG9nKGMpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuYWRkKHhNYXgsIGQpO1xuXG4gICAgeE1heC5kaXNwb3NlKCk7XG4gICAgYS5kaXNwb3NlKCk7XG4gICAgYi5kaXNwb3NlKCk7XG4gICAgYy5kaXNwb3NlKCk7XG4gICAgZC5kaXNwb3NlKCk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlbHVJbnRlcm5hbDxUIGV4dGVuZHMgTkRBcnJheT4obmRhcnJheTogVCk6IFQge1xuICAgIGNvbnN0IHJlc3VsdFZhbHVlcyA9IG5ldyBGbG9hdDMyQXJyYXkobmRhcnJheS5zaXplKTtcbiAgICBjb25zdCB2YWx1ZXMgPSBuZGFycmF5LmdldFZhbHVlcygpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICByZXN1bHRWYWx1ZXNbaV0gPSBNYXRoLm1heCgwLCB2YWx1ZXNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gTkRBcnJheS5tYWtlPFQ+KG5kYXJyYXkuc2hhcGUsIHt2YWx1ZXM6IHJlc3VsdFZhbHVlc30pO1xuICB9XG5cbiAgcHJvdGVjdGVkIHNpZ21vaWRJbnRlcm5hbDxUIGV4dGVuZHMgTkRBcnJheT4obmRhcnJheTogVCk6IFQge1xuICAgIGNvbnN0IHJlc3VsdFZhbHVlcyA9IG5ldyBGbG9hdDMyQXJyYXkobmRhcnJheS5zaXplKTtcbiAgICBjb25zdCB2YWx1ZXMgPSBuZGFycmF5LmdldFZhbHVlcygpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICByZXN1bHRWYWx1ZXNbaV0gPSAxIC8gKDEgKyBNYXRoLmV4cCgtdmFsdWVzW2ldKSk7XG4gICAgfVxuICAgIHJldHVybiBOREFycmF5Lm1ha2U8VD4obmRhcnJheS5zaGFwZSwge3ZhbHVlczogcmVzdWx0VmFsdWVzfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdGFuaEludGVybmFsPFQgZXh0ZW5kcyBOREFycmF5PihuZGFycmF5OiBUKTogVCB7XG4gICAgY29uc3QgcmVzdWx0VmFsdWVzID0gbmV3IEZsb2F0MzJBcnJheShuZGFycmF5LnNpemUpO1xuICAgIGNvbnN0IHZhbHVlcyA9IG5kYXJyYXkuZ2V0VmFsdWVzKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHJlc3VsdFZhbHVlc1tpXSA9IHV0aWwudGFuaCh2YWx1ZXNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gTkRBcnJheS5tYWtlPFQ+KG5kYXJyYXkuc2hhcGUsIHt2YWx1ZXM6IHJlc3VsdFZhbHVlc30pO1xuICB9XG5cbiAgcHJvdGVjdGVkIHNpbkludGVybmFsPFQgZXh0ZW5kcyBOREFycmF5PihuZGFycmF5OiBUKTogVCB7XG4gICAgY29uc3QgcmVzdWx0VmFsdWVzID0gbmV3IEZsb2F0MzJBcnJheShuZGFycmF5LnNpemUpO1xuICAgIGNvbnN0IHZhbHVlcyA9IG5kYXJyYXkuZ2V0VmFsdWVzKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHJlc3VsdFZhbHVlc1tpXSA9IE1hdGguc2luKHZhbHVlc1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBOREFycmF5Lm1ha2U8VD4obmRhcnJheS5zaGFwZSwge3ZhbHVlczogcmVzdWx0VmFsdWVzfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc3RlcEludGVybmFsPFQgZXh0ZW5kcyBOREFycmF5PihuZGFycmF5OiBUKTogVCB7XG4gICAgY29uc3QgcmVzdWx0VmFsdWVzID0gbmV3IEZsb2F0MzJBcnJheShuZGFycmF5LnNpemUpO1xuICAgIGNvbnN0IHZhbHVlcyA9IG5kYXJyYXkuZ2V0VmFsdWVzKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW2ldO1xuICAgICAgcmVzdWx0VmFsdWVzW2ldID0gdmFsdWUgPiAwID8gMSA6ICh2YWx1ZSA8IDAgPyAwIDogdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gTkRBcnJheS5tYWtlPFQ+KG5kYXJyYXkuc2hhcGUsIHt2YWx1ZXM6IHJlc3VsdFZhbHVlc30pO1xuICB9XG5cbiAgLyoqXG4gICAqIGltYWdlIGlzIG9mIHNoYXBlIFtyLCBjLCBkMV0uXG4gICAqIHdlaWdodHMgaXMgb2Ygc2hhcGUgW0YsIEYsIGQxLCBkMl0uXG4gICAqL1xuICBwcm90ZWN0ZWQgY29udjJkSW50ZXJuYWwoXG4gICAgICB4OiBBcnJheTNELCB3ZWlnaHRzOiBBcnJheTRELCBiaWFzZXM6IEFycmF5MUR8bnVsbCwgc3RyaWRlOiBudW1iZXIsXG4gICAgICBwYWQ6IG51bWJlcik6IEFycmF5M0Qge1xuICAgIGNvbnN0IFt4Um93cywgeENvbHMsIGlucHV0RGVwdGhdID0geC5zaGFwZTtcbiAgICBjb25zdCBmaWVsZFNpemUgPSB3ZWlnaHRzLnNoYXBlWzBdO1xuICAgIGNvbnN0IG91dHB1dERlcHRoID0gd2VpZ2h0cy5zaGFwZVszXTtcbiAgICBjb25zdCBvdXRwdXRTaGFwZSA9IGNvbnZfdXRpbC5jb21wdXRlT3V0cHV0U2hhcGUzRChcbiAgICAgICAgW3hSb3dzLCB4Q29scywgaW5wdXREZXB0aF0sIGZpZWxkU2l6ZSwgb3V0cHV0RGVwdGgsIHN0cmlkZSwgcGFkKTtcbiAgICBjb25zdCB5ID0gQXJyYXkzRC56ZXJvcyhvdXRwdXRTaGFwZSk7XG4gICAgZm9yIChsZXQgZDIgPSAwOyBkMiA8IG91dHB1dERlcHRoOyArK2QyKSB7XG4gICAgICBmb3IgKGxldCB5UiA9IDA7IHlSIDwgeS5zaGFwZVswXTsgKyt5Uikge1xuICAgICAgICBjb25zdCB4UkNvcm5lciA9IHlSICogc3RyaWRlIC0gcGFkO1xuICAgICAgICBjb25zdCB4Uk1pbiA9IE1hdGgubWF4KDAsIHhSQ29ybmVyKTtcbiAgICAgICAgY29uc3QgeFJNYXggPSBNYXRoLm1pbih4Um93cywgZmllbGRTaXplICsgeFJDb3JuZXIpO1xuICAgICAgICBmb3IgKGxldCB5QyA9IDA7IHlDIDwgeS5zaGFwZVsxXTsgKyt5Qykge1xuICAgICAgICAgIGNvbnN0IHhDQ29ybmVyID0geUMgKiBzdHJpZGUgLSBwYWQ7XG4gICAgICAgICAgY29uc3QgeENNaW4gPSBNYXRoLm1heCgwLCB4Q0Nvcm5lcik7XG4gICAgICAgICAgY29uc3QgeENNYXggPSBNYXRoLm1pbih4Q29scywgZmllbGRTaXplICsgeENDb3JuZXIpO1xuICAgICAgICAgIGxldCBkb3RQcm9kID0gMDtcbiAgICAgICAgICBmb3IgKGxldCB4UiA9IHhSTWluOyB4UiA8IHhSTWF4OyArK3hSKSB7XG4gICAgICAgICAgICBjb25zdCB3UiA9IHhSIC0geFJDb3JuZXI7XG4gICAgICAgICAgICBmb3IgKGxldCB4QyA9IHhDTWluOyB4QyA8IHhDTWF4OyArK3hDKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHdDID0geEMgLSB4Q0Nvcm5lcjtcbiAgICAgICAgICAgICAgZm9yIChsZXQgZDEgPSAwOyBkMSA8IGlucHV0RGVwdGg7ICsrZDEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwaXhlbCA9IHguZ2V0KHhSLCB4QywgZDEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHdlaWdodCA9IHdlaWdodHMuZ2V0KHdSLCB3QywgZDEsIGQyKTtcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9IHBpeGVsICogd2VpZ2h0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGJpYXMgPSAoYmlhc2VzICE9IG51bGwpID8gYmlhc2VzLmdldChkMikgOiAwO1xuICAgICAgICAgIHkuc2V0KGRvdFByb2QgKyBiaWFzLCB5UiwgeUMsIGQyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjb252MmRCYWNrUHJvcEludGVybmFsKFxuICAgICAgeDogQXJyYXkzRCwgZHk6IEFycmF5M0QsIHdlaWdodHM6IEFycmF5NEQsIHN0cmlkZTogbnVtYmVyLFxuICAgICAgcGFkOiBudW1iZXIpOiB7ZHg6IEFycmF5M0QsIGR3OiBBcnJheTRELCBkYjogQXJyYXkxRH0ge1xuICAgIGNvbnN0IGZTaXplID0gd2VpZ2h0cy5zaGFwZVswXTtcbiAgICBjb25zdCBkdyA9IHRoaXMuY29udjJkRGVyV2VpZ2h0cyh4LCBkeSwgZlNpemUsIHN0cmlkZSwgcGFkKTtcbiAgICBjb25zdCBkYiA9IHRoaXMuY29udjJkRGVyQmlhcyhkeSk7XG4gICAgY29uc3QgZHggPSB0aGlzLmNvbnYyZFRyYW5zcG9zZUludGVybmFsKGR5LCB3ZWlnaHRzLCBudWxsLCBzdHJpZGUsIHBhZCk7XG4gICAgcmV0dXJuIHtkeCwgZGIsIGR3fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBpbWFnZSBpcyBvZiBzaGFwZSBbciwgYywgZDFdLlxuICAgKiB3ZWlnaHRzIGlzIG9mIHNoYXBlIFtGLCBGLCBkMSwgZDJdLlxuICAgKi9cbiAgcHJvdGVjdGVkIGNvbnYyZFRyYW5zcG9zZUludGVybmFsKFxuICAgICAgeDogQXJyYXkzRCwgd2VpZ2h0czogQXJyYXk0RCwgYmlhc2VzOiBBcnJheTFEfG51bGwsIG9yaWdTdHJpZGU6IG51bWJlcixcbiAgICAgIG9yaWdQYWQ6IG51bWJlcik6IEFycmF5M0Qge1xuICAgIGNvbnN0IGZTaXplID0gd2VpZ2h0cy5zaGFwZVswXTtcbiAgICBjb25zdCBwYWQgPSBmU2l6ZSAtIDEgLSBvcmlnUGFkO1xuICAgIGNvbnN0IG9yaWdJbnB1dERlcHRoID0gd2VpZ2h0cy5zaGFwZVsyXTtcbiAgICBjb25zdCBvcmlnT3V0cHV0RGVwdGggPSB3ZWlnaHRzLnNoYXBlWzNdO1xuICAgIGNvbnN0IFt4Um93cywgeENvbHMsIHhEZXB0aF0gPSB4LnNoYXBlO1xuXG4gICAgLy8gRGlsYXRlIHRoZSBpbnB1dC5cbiAgICBjb25zdCB4Um93c0RpbGF0ZWQgPSAoeFJvd3MgLSAxKSAqIG9yaWdTdHJpZGUgKyAxO1xuICAgIGNvbnN0IHhDb2xzRGlsYXRlZCA9ICh4Q29scyAtIDEpICogb3JpZ1N0cmlkZSArIDE7XG5cbiAgICBjb25zdCBvdXRwdXRTaGFwZSA9IGNvbnZfdXRpbC5jb21wdXRlT3V0cHV0U2hhcGUzRChcbiAgICAgICAgW3hSb3dzRGlsYXRlZCwgeENvbHNEaWxhdGVkLCBvcmlnT3V0cHV0RGVwdGhdLCBmU2l6ZSwgb3JpZ0lucHV0RGVwdGgsIDEsXG4gICAgICAgIHBhZCk7XG4gICAgY29uc3QgeSA9IEFycmF5M0QuemVyb3Mob3V0cHV0U2hhcGUpO1xuICAgIGZvciAobGV0IGQyID0gMDsgZDIgPCBvcmlnSW5wdXREZXB0aDsgKytkMikge1xuICAgICAgZm9yIChsZXQgeVIgPSAwOyB5UiA8IHkuc2hhcGVbMF07ICsreVIpIHtcbiAgICAgICAgY29uc3QgeFJDb3JuZXIgPSB5UiAtIHBhZDtcbiAgICAgICAgY29uc3QgeFJNaW4gPSBNYXRoLm1heCgwLCBNYXRoLmNlaWwoeFJDb3JuZXIgLyBvcmlnU3RyaWRlKSk7XG4gICAgICAgIGNvbnN0IHhSTWF4ID0gTWF0aC5taW4oeFJvd3MsIChmU2l6ZSArIHhSQ29ybmVyKSAvIG9yaWdTdHJpZGUpO1xuXG4gICAgICAgIGZvciAobGV0IHlDID0gMDsgeUMgPCB5LnNoYXBlWzFdOyArK3lDKSB7XG4gICAgICAgICAgY29uc3QgeENDb3JuZXIgPSB5QyAtIHBhZDtcbiAgICAgICAgICBjb25zdCB4Q01pbiA9IE1hdGgubWF4KDAsIE1hdGguY2VpbCh4Q0Nvcm5lciAvIG9yaWdTdHJpZGUpKTtcbiAgICAgICAgICBjb25zdCB4Q01heCA9IE1hdGgubWluKHhDb2xzLCAoZlNpemUgKyB4Q0Nvcm5lcikgLyBvcmlnU3RyaWRlKTtcblxuICAgICAgICAgIGxldCBkb3RQcm9kID0gMDtcbiAgICAgICAgICBmb3IgKGxldCB4UiA9IHhSTWluOyB4UiA8IHhSTWF4OyArK3hSKSB7XG4gICAgICAgICAgICBjb25zdCB3UiA9IHhSICogb3JpZ1N0cmlkZSAtIHhSQ29ybmVyO1xuXG4gICAgICAgICAgICBmb3IgKGxldCB4QyA9IHhDTWluOyB4QyA8IHhDTWF4OyArK3hDKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHdDID0geEMgKiBvcmlnU3RyaWRlIC0geENDb3JuZXI7XG5cbiAgICAgICAgICAgICAgZm9yIChsZXQgZDEgPSAwOyBkMSA8IG9yaWdPdXRwdXREZXB0aDsgKytkMSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBpeGVsID0geC5nZXQoeFIsIHhDLCBkMSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgd2VpZ2h0ID1cbiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0cy5nZXQoZlNpemUgLSAxIC0gd1IsIGZTaXplIC0gMSAtIHdDLCBkMiwgZDEpO1xuICAgICAgICAgICAgICAgIGRvdFByb2QgKz0gcGl4ZWwgKiB3ZWlnaHQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgYmlhcyA9IGJpYXNlcyAhPSBudWxsID8gYmlhc2VzLmdldChkMikgOiAwO1xuICAgICAgICAgIHkuc2V0KGRvdFByb2QgKyBiaWFzLCB5UiwgeUMsIGQyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geTtcbiAgfVxuXG4gIC8qKlxuICAgKiBpbWFnZSBpcyBvZiBzaGFwZSBbciwgYywgZDFdLlxuICAgKiB3ZWlnaHRzIGlzIG9mIHNoYXBlIFtGLCBGLCBkMSwgZDJdLlxuICAgKi9cbiAgcHJvdGVjdGVkIGNvbnYyZFRyYW5zcG9zZVNoYWRlckxpa2UoXG4gICAgICB4OiBBcnJheTNELCBvcmlnV2VpZ2h0czogQXJyYXk0RCwgb3JpZ1N0cmlkZTogbnVtYmVyLFxuICAgICAgb3JpZ1BhZDogbnVtYmVyKTogQXJyYXkzRCB7XG4gICAgY29uc3QgZlNpemUgPSBvcmlnV2VpZ2h0cy5zaGFwZVswXTtcbiAgICBjb25zdCBwYWQgPSBmU2l6ZSAtIDEgLSBvcmlnUGFkO1xuICAgIGNvbnN0IG9yaWdJbnB1dERlcHRoID0gb3JpZ1dlaWdodHMuc2hhcGVbMl07XG4gICAgY29uc3Qgb3JpZ091dHB1dERlcHRoID0gb3JpZ1dlaWdodHMuc2hhcGVbM107XG4gICAgY29uc3QgW3hSb3dzLCB4Q29scywgeERlcHRoXSA9IHguc2hhcGU7XG5cbiAgICAvLyBEaWxhdGUgdGhlIGlucHV0LlxuICAgIGNvbnN0IHhSb3dzRGlsYXRlZCA9ICh4Um93cyAtIDEpICogb3JpZ1N0cmlkZSArIDE7XG4gICAgY29uc3QgeENvbHNEaWxhdGVkID0gKHhDb2xzIC0gMSkgKiBvcmlnU3RyaWRlICsgMTtcblxuICAgIGNvbnN0IG91dHB1dFNoYXBlID0gY29udl91dGlsLmNvbXB1dGVPdXRwdXRTaGFwZTNEKFxuICAgICAgICBbeFJvd3NEaWxhdGVkLCB4Q29sc0RpbGF0ZWQsIG9yaWdPdXRwdXREZXB0aF0sIGZTaXplLCBvcmlnSW5wdXREZXB0aCwgMSxcbiAgICAgICAgcGFkKTtcbiAgICBjb25zdCB5ID0gQXJyYXkzRC56ZXJvcyhvdXRwdXRTaGFwZSk7XG5cbiAgICBmb3IgKGxldCBkMiA9IDA7IGQyIDwgb3JpZ0lucHV0RGVwdGg7ICsrZDIpIHtcbiAgICAgIGZvciAobGV0IHlSID0gMDsgeVIgPCB5LnNoYXBlWzBdOyArK3lSKSB7XG4gICAgICAgIGZvciAobGV0IHlDID0gMDsgeUMgPCB5LnNoYXBlWzFdOyArK3lDKSB7XG4gICAgICAgICAgLy8gU2hhZGVyIGNvZGUgYmVnaW5zLlxuICAgICAgICAgIGNvbnN0IHhSQ29ybmVyID0geVIgLSBwYWQ7XG4gICAgICAgICAgY29uc3QgeENDb3JuZXIgPSB5QyAtIHBhZDtcbiAgICAgICAgICBsZXQgZG90UHJvZCA9IDA7XG4gICAgICAgICAgZm9yIChsZXQgd1IgPSAwOyB3UiA8IGZTaXplOyArK3dSKSB7XG4gICAgICAgICAgICBjb25zdCB4UiA9ICh4UkNvcm5lciArIHdSKSAvIG9yaWdTdHJpZGU7XG4gICAgICAgICAgICBpZiAoeFIgPCAwIHx8IHhSID49IHhSb3dzIHx8IE1hdGguZmxvb3IoeFIpICE9PSB4Uikge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IHdDID0gMDsgd0MgPCBmU2l6ZTsgKyt3Qykge1xuICAgICAgICAgICAgICBjb25zdCB4QyA9ICh4Q0Nvcm5lciArIHdDKSAvIG9yaWdTdHJpZGU7XG4gICAgICAgICAgICAgIGlmICh4QyA8IDAgfHwgeEMgPj0geENvbHMgfHwgTWF0aC5mbG9vcih4QykgIT09IHhDKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZm9yIChsZXQgZDEgPSAwOyBkMSA8IG9yaWdPdXRwdXREZXB0aDsgKytkMSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBpeGVsID0geC5nZXQoeFIsIHhDLCBkMSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgd2VpZ2h0ID1cbiAgICAgICAgICAgICAgICAgICAgb3JpZ1dlaWdodHMuZ2V0KGZTaXplIC0gMSAtIHdSLCBmU2l6ZSAtIDEgLSB3QywgZDIsIGQxKTtcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9IHBpeGVsICogd2VpZ2h0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHkuc2V0KGRvdFByb2QsIHlSLCB5QywgZDIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB5O1xuICB9XG5cbiAgY29udjJkRGVyV2VpZ2h0cyhcbiAgICAgIHg6IEFycmF5M0QsIGRZOiBBcnJheTNELCBmU2l6ZTogbnVtYmVyLCBzdHJpZGU6IG51bWJlcixcbiAgICAgIHplcm9QYWQ6IG51bWJlcik6IEFycmF5NEQge1xuICAgIGNvbnN0IGlucHV0RGVwdGggPSB4LnNoYXBlWzJdO1xuICAgIGNvbnN0IG91dHB1dERlcHRoID0gZFkuc2hhcGVbMl07XG4gICAgY29uc3Qgd2VpZ2h0c1NoYXBlID1cbiAgICAgICAgY29udl91dGlsLmNvbXB1dGVXZWlnaHRzU2hhcGU0RChpbnB1dERlcHRoLCBvdXRwdXREZXB0aCwgZlNpemUpO1xuICAgIGNvbnN0IGRXID0gQXJyYXk0RC56ZXJvcyh3ZWlnaHRzU2hhcGUpO1xuXG4gICAgY29uc3QgeU51bVJvd3MgPSBkWS5zaGFwZVswXTtcbiAgICBjb25zdCB5TnVtQ29scyA9IGRZLnNoYXBlWzFdO1xuICAgIGNvbnN0IHhOdW1Sb3dzID0geC5zaGFwZVswXTtcbiAgICBjb25zdCB4TnVtQ29scyA9IHguc2hhcGVbMV07XG5cbiAgICBmb3IgKGxldCB3UiA9IDA7IHdSIDwgZlNpemU7ICsrd1IpIHtcbiAgICAgIGNvbnN0IHlSTWluID0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKCh6ZXJvUGFkIC0gd1IpIC8gc3RyaWRlKSk7XG4gICAgICBjb25zdCB5Uk1heCA9IE1hdGgubWluKHlOdW1Sb3dzLCAoeE51bVJvd3MgKyB6ZXJvUGFkIC0gd1IpIC8gc3RyaWRlKTtcblxuICAgICAgZm9yIChsZXQgd0MgPSAwOyB3QyA8IGZTaXplOyArK3dDKSB7XG4gICAgICAgIGNvbnN0IHlDTWluID0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKCh6ZXJvUGFkIC0gd0MpIC8gc3RyaWRlKSk7XG4gICAgICAgIGNvbnN0IHlDTWF4ID0gTWF0aC5taW4oeU51bUNvbHMsICh4TnVtQ29scyArIHplcm9QYWQgLSB3QykgLyBzdHJpZGUpO1xuXG4gICAgICAgIGZvciAobGV0IGQxID0gMDsgZDEgPCBpbnB1dERlcHRoOyArK2QxKSB7XG4gICAgICAgICAgZm9yIChsZXQgZDIgPSAwOyBkMiA8IG91dHB1dERlcHRoOyArK2QyKSB7XG4gICAgICAgICAgICAvLyBOZWVkIHRvIGNvbnZvbHZlLlxuICAgICAgICAgICAgbGV0IGRvdFByb2QgPSAwO1xuICAgICAgICAgICAgZm9yIChsZXQgeVIgPSB5Uk1pbjsgeVIgPCB5Uk1heDsgKyt5Uikge1xuICAgICAgICAgICAgICBjb25zdCB4UiA9IHdSICsgeVIgKiBzdHJpZGUgLSB6ZXJvUGFkO1xuICAgICAgICAgICAgICBmb3IgKGxldCB5QyA9IHlDTWluOyB5QyA8IHlDTWF4OyArK3lDKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeEMgPSB3QyArIHlDICogc3RyaWRlIC0gemVyb1BhZDtcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9IHguZ2V0KHhSLCB4QywgZDEpICogZFkuZ2V0KHlSLCB5QywgZDIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkVy5zZXQoZG90UHJvZCwgd1IsIHdDLCBkMSwgZDIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZFc7XG4gIH1cblxuICBjb252MmREZXJCaWFzKGRZOiBBcnJheTNEKTogQXJyYXkxRCB7XG4gICAgY29uc3Qgb3V0cHV0RGVwdGggPSBkWS5zaGFwZVsyXTtcbiAgICBjb25zdCBudW1Sb3dzID0gZFkuc2hhcGVbMF07XG4gICAgY29uc3QgbnVtQ29scyA9IGRZLnNoYXBlWzFdO1xuICAgIGNvbnN0IHZhbHVlcyA9IG5ldyBGbG9hdDMyQXJyYXkob3V0cHV0RGVwdGgpO1xuICAgIGZvciAobGV0IGQyID0gMDsgZDIgPCBvdXRwdXREZXB0aDsgKytkMikge1xuICAgICAgbGV0IHN1bSA9IDA7XG4gICAgICBmb3IgKGxldCByID0gMDsgciA8IG51bVJvd3M7ICsrcikge1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IG51bUNvbHM7ICsrYykge1xuICAgICAgICAgIHN1bSArPSBkWS5nZXQociwgYywgZDIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YWx1ZXNbZDJdID0gc3VtO1xuICAgIH1cbiAgICByZXR1cm4gQXJyYXkxRC5uZXcodmFsdWVzKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzd2l0Y2hEaW1JbnRlcm5hbDxUIGV4dGVuZHMgTkRBcnJheT4odDogVCwgbmV3RGltOiBudW1iZXJbXSk6IFQge1xuICAgIGNvbnN0IG5ld1NoYXBlOiBudW1iZXJbXSA9IG5ldyBBcnJheSh0LnJhbmspO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3U2hhcGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5ld1NoYXBlW2ldID0gdC5zaGFwZVtuZXdEaW1baV1dO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHRWYWx1ZXMgPSBuZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSk7XG4gICAgY29uc3QgdmFsdWVzID0gdC5nZXRWYWx1ZXMoKTtcbiAgICBjb25zdCByZXN1bHQgPSBOREFycmF5Lm1ha2U8VD4obmV3U2hhcGUsIHt2YWx1ZXM6IHJlc3VsdFZhbHVlc30pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdC5zaXplOyArK2kpIHtcbiAgICAgIGNvbnN0IGxvYyA9IHQuaW5kZXhUb0xvYyhpKTtcblxuICAgICAgLy8gUGVybXV0ZSBsb2NhdGlvbi5cbiAgICAgIGNvbnN0IG5ld0xvYzogbnVtYmVyW10gPSBuZXcgQXJyYXkobG9jLmxlbmd0aCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld0xvYy5sZW5ndGg7IGkrKykge1xuICAgICAgICBuZXdMb2NbaV0gPSBsb2NbbmV3RGltW2ldXTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbmV3SW5kZXggPSByZXN1bHQubG9jVG9JbmRleChuZXdMb2MpO1xuICAgICAgcmVzdWx0VmFsdWVzW25ld0luZGV4XSA9IHZhbHVlc1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgcG9vbChcbiAgICAgIHg6IEFycmF5M0QsIGZTaXplOiBudW1iZXIsIHN0cmlkZTogbnVtYmVyLCBwYWQ6IG51bWJlcixcbiAgICAgIHBvb2xUeXBlOiAnbWF4J3wnbWluJ3wnYXZnJykge1xuICAgIGNvbnN0IFt4Um93cywgeENvbHMsIGRlcHRoXSA9IHguc2hhcGU7XG4gICAgY29uc3Qgb3V0cHV0U2hhcGUgPSBjb252X3V0aWwuY29tcHV0ZU91dHB1dFNoYXBlM0QoXG4gICAgICAgIFt4Um93cywgeENvbHMsIGRlcHRoXSwgZlNpemUsIGRlcHRoLCBzdHJpZGUsIHBhZCk7XG4gICAgY29uc3QgeSA9IEFycmF5M0QuemVyb3Mob3V0cHV0U2hhcGUpO1xuICAgIGZvciAobGV0IGQgPSAwOyBkIDwgZGVwdGg7ICsrZCkge1xuICAgICAgZm9yIChsZXQgeVIgPSAwOyB5UiA8IHkuc2hhcGVbMF07ICsreVIpIHtcbiAgICAgICAgY29uc3QgeFJDb3JuZXIgPSB5UiAqIHN0cmlkZSAtIHBhZDtcbiAgICAgICAgY29uc3QgeFJNaW4gPSBNYXRoLm1heCgwLCB4UkNvcm5lcik7XG4gICAgICAgIGNvbnN0IHhSTWF4ID0gTWF0aC5taW4oeFJvd3MsIGZTaXplICsgeFJDb3JuZXIpO1xuICAgICAgICBmb3IgKGxldCB5QyA9IDA7IHlDIDwgeS5zaGFwZVsxXTsgKyt5Qykge1xuICAgICAgICAgIGNvbnN0IHhDQ29ybmVyID0geUMgKiBzdHJpZGUgLSBwYWQ7XG4gICAgICAgICAgY29uc3QgeENNaW4gPSBNYXRoLm1heCgwLCB4Q0Nvcm5lcik7XG4gICAgICAgICAgY29uc3QgeENNYXggPSBNYXRoLm1pbih4Q29scywgZlNpemUgKyB4Q0Nvcm5lcik7XG5cblxuICAgICAgICAgIGxldCBtaW5NYXhWYWx1ZSA9XG4gICAgICAgICAgICAgIChwb29sVHlwZSA9PT0gJ21heCcgPyBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKTtcbiAgICAgICAgICBsZXQgYXZnVmFsdWUgPSAwO1xuXG4gICAgICAgICAgZm9yIChsZXQgeFIgPSB4Uk1pbjsgeFIgPCB4Uk1heDsgKyt4Uikge1xuICAgICAgICAgICAgY29uc3Qgd1IgPSB4UiAtIHhSQ29ybmVyO1xuICAgICAgICAgICAgZm9yIChsZXQgeEMgPSB4Q01pbjsgeEMgPCB4Q01heDsgKyt4Qykge1xuICAgICAgICAgICAgICBjb25zdCB3QyA9IHhDIC0geENDb3JuZXI7XG4gICAgICAgICAgICAgIGNvbnN0IHBpeGVsID0geC5nZXQoeFIsIHhDLCBkKTtcbiAgICAgICAgICAgICAgaWYgKGlzTmFOKHBpeGVsKSkge1xuICAgICAgICAgICAgICAgIG1pbk1heFZhbHVlID0gTmFOO1xuICAgICAgICAgICAgICAgIGF2Z1ZhbHVlID0gTmFOO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICgocG9vbFR5cGUgPT09ICdtYXgnICYmIHBpeGVsID4gbWluTWF4VmFsdWUpIHx8XG4gICAgICAgICAgICAgICAgICAocG9vbFR5cGUgPT09ICdtaW4nICYmIHBpeGVsIDwgbWluTWF4VmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgbWluTWF4VmFsdWUgPSBwaXhlbDtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChwb29sVHlwZSA9PT0gJ2F2ZycpIHtcbiAgICAgICAgICAgICAgICBhdmdWYWx1ZSArPSBwaXhlbCAvIChmU2l6ZSAqIGZTaXplKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzTmFOKG1pbk1heFZhbHVlKSkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgeS5zZXQocG9vbFR5cGUgPT09ICdhdmcnID8gYXZnVmFsdWUgOiBtaW5NYXhWYWx1ZSwgeVIsIHlDLCBkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geTtcbiAgfVxuXG4gIHByb3RlY3RlZCBtYXhQb29sSW50ZXJuYWwoXG4gICAgICB4OiBBcnJheTNELCBmU2l6ZTogbnVtYmVyLCBzdHJpZGU6IG51bWJlciwgcGFkOiBudW1iZXIpOiBBcnJheTNEIHtcbiAgICByZXR1cm4gdGhpcy5wb29sKHgsIGZTaXplLCBzdHJpZGUsIHBhZCwgJ21heCcpO1xuICB9XG5cbiAgbWF4UG9vbFBvc2l0aW9ucyh4OiBBcnJheTNELCBmU2l6ZTogbnVtYmVyLCBzdHJpZGU6IG51bWJlciwgcGFkOiBudW1iZXIpIHtcbiAgICBjb25zdCBbeFJvd3MsIHhDb2xzLCBkZXB0aF0gPSB4LnNoYXBlO1xuICAgIGNvbnN0IG91dHB1dFNoYXBlID1cbiAgICAgICAgY29udl91dGlsLmNvbXB1dGVPdXRwdXRTaGFwZTNEKHguc2hhcGUsIGZTaXplLCBkZXB0aCwgc3RyaWRlLCBwYWQpO1xuICAgIGNvbnN0IG1heFBvc2l0aW9ucyA9IEFycmF5M0QuemVyb3Mob3V0cHV0U2hhcGUpO1xuICAgIGZvciAobGV0IGQgPSAwOyBkIDwgZGVwdGg7ICsrZCkge1xuICAgICAgZm9yIChsZXQgeVIgPSAwOyB5UiA8IG91dHB1dFNoYXBlWzBdOyArK3lSKSB7XG4gICAgICAgIGNvbnN0IHhSQ29ybmVyID0geVIgKiBzdHJpZGUgLSBwYWQ7XG4gICAgICAgIGNvbnN0IHhSTWluID0gTWF0aC5tYXgoMCwgeFJDb3JuZXIpO1xuICAgICAgICBjb25zdCB4Uk1heCA9IE1hdGgubWluKHhSb3dzLCBmU2l6ZSArIHhSQ29ybmVyKTtcbiAgICAgICAgZm9yIChsZXQgeUMgPSAwOyB5QyA8IG91dHB1dFNoYXBlWzFdOyArK3lDKSB7XG4gICAgICAgICAgY29uc3QgeENDb3JuZXIgPSB5QyAqIHN0cmlkZSAtIHBhZDtcbiAgICAgICAgICBjb25zdCB4Q01pbiA9IE1hdGgubWF4KDAsIHhDQ29ybmVyKTtcbiAgICAgICAgICBjb25zdCB4Q01heCA9IE1hdGgubWluKHhDb2xzLCBmU2l6ZSArIHhDQ29ybmVyKTtcbiAgICAgICAgICBsZXQgbWF4VmFsdWUgPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7XG4gICAgICAgICAgbGV0IG1heFBvc2l0aW9uID0gLTE7XG4gICAgICAgICAgZm9yIChsZXQgeFIgPSB4Uk1pbjsgeFIgPCB4Uk1heDsgKyt4Uikge1xuICAgICAgICAgICAgY29uc3Qgd1IgPSB4UiAtIHhSQ29ybmVyO1xuICAgICAgICAgICAgZm9yIChsZXQgeEMgPSB4Q01pbjsgeEMgPCB4Q01heDsgKyt4Qykge1xuICAgICAgICAgICAgICBjb25zdCB3QyA9IHhDIC0geENDb3JuZXI7XG4gICAgICAgICAgICAgIGNvbnN0IHBpeGVsID0geC5nZXQoeFIsIHhDLCBkKTtcbiAgICAgICAgICAgICAgaWYgKHBpeGVsID4gbWF4VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBtYXhWYWx1ZSA9IHBpeGVsO1xuICAgICAgICAgICAgICAgIG1heFBvc2l0aW9uID0gd1IgKiBmU2l6ZSArIHdDO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIG1heFBvc2l0aW9ucy5zZXQobWF4UG9zaXRpb24sIHlSLCB5QywgZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1heFBvc2l0aW9ucztcbiAgfVxuXG4gIHByb3RlY3RlZCBtYXhQb29sQmFja3Byb3BJbnRlcm5hbChcbiAgICAgIGR5OiBBcnJheTNELCB4OiBBcnJheTNELCBmU2l6ZTogbnVtYmVyLCBvcmlnU3RyaWRlOiBudW1iZXIsXG4gICAgICBvcmlnUGFkOiBudW1iZXIpOiBBcnJheTNEIHtcbiAgICBjb25zdCBtYXhQb3NpdGlvbnMgPSB0aGlzLm1heFBvb2xQb3NpdGlvbnMoeCwgZlNpemUsIG9yaWdTdHJpZGUsIG9yaWdQYWQpO1xuICAgIGNvbnN0IHBhZCA9IGZTaXplIC0gMSAtIG9yaWdQYWQ7XG4gICAgY29uc3QgW2R5Um93cywgZHlDb2xzLCBkZXB0aF0gPSBkeS5zaGFwZTtcblxuICAgIC8vIERpbGF0ZSB0aGUgaW5wdXQuXG4gICAgY29uc3QgZHlSb3dzRGlsYXRlZCA9IChkeVJvd3MgLSAxKSAqIG9yaWdTdHJpZGUgKyAxO1xuICAgIGNvbnN0IGR4Q29sc0RpbGF0ZWQgPSAoZHlDb2xzIC0gMSkgKiBvcmlnU3RyaWRlICsgMTtcblxuICAgIGNvbnN0IG91dHB1dFNoYXBlID0gY29udl91dGlsLmNvbXB1dGVPdXRwdXRTaGFwZTNEKFxuICAgICAgICBbZHlSb3dzRGlsYXRlZCwgZHhDb2xzRGlsYXRlZCwgZGVwdGhdLCBmU2l6ZSwgZGVwdGgsIDEsIHBhZCk7XG4gICAgY29uc3QgZHggPSBBcnJheTNELnplcm9zKG91dHB1dFNoYXBlKTtcblxuICAgIGZvciAobGV0IGQgPSAwOyBkIDwgZGVwdGg7ICsrZCkge1xuICAgICAgZm9yIChsZXQgZHhSID0gMDsgZHhSIDwgZHguc2hhcGVbMF07ICsrZHhSKSB7XG4gICAgICAgIGZvciAobGV0IGR4QyA9IDA7IGR4QyA8IGR4LnNoYXBlWzFdOyArK2R4Qykge1xuICAgICAgICAgIC8vIFNoYWRlciBjb2RlIGJlZ2lucy5cbiAgICAgICAgICBjb25zdCBkeVJDb3JuZXIgPSBkeFIgLSBwYWQ7XG4gICAgICAgICAgY29uc3QgZHlDQ29ybmVyID0gZHhDIC0gcGFkO1xuICAgICAgICAgIGxldCBkb3RQcm9kID0gMDtcbiAgICAgICAgICBmb3IgKGxldCB3UiA9IDA7IHdSIDwgZlNpemU7ICsrd1IpIHtcbiAgICAgICAgICAgIGNvbnN0IGR5UiA9IChkeVJDb3JuZXIgKyB3UikgLyBvcmlnU3RyaWRlO1xuICAgICAgICAgICAgaWYgKGR5UiA8IDAgfHwgZHlSID49IGR5Um93cyB8fCBNYXRoLmZsb29yKGR5UikgIT09IGR5Uikge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IHdDID0gMDsgd0MgPCBmU2l6ZTsgKyt3Qykge1xuICAgICAgICAgICAgICBjb25zdCBkeUMgPSAoZHlDQ29ybmVyICsgd0MpIC8gb3JpZ1N0cmlkZTtcbiAgICAgICAgICAgICAgaWYgKGR5QyA8IDAgfHwgZHlDID49IGR5Q29scyB8fCBNYXRoLmZsb29yKGR5QykgIT09IGR5Qykge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbnN0IG1heFBvcyA9IGZTaXplICogZlNpemUgLSAxIC0gbWF4UG9zaXRpb25zLmdldChkeVIsIGR5QywgZCk7XG4gICAgICAgICAgICAgIGNvbnN0IGN1clBvcyA9IHdSICogZlNpemUgKyB3QztcblxuICAgICAgICAgICAgICBjb25zdCBtYXNrID0gbWF4UG9zID09PSBjdXJQb3MgPyAxIDogMDtcbiAgICAgICAgICAgICAgaWYgKG1hc2sgPT09IDApIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNvbnN0IHBpeGVsID0gZHkuZ2V0KGR5UiwgZHlDLCBkKTtcbiAgICAgICAgICAgICAgZG90UHJvZCArPSBwaXhlbCAqIG1hc2s7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGR4LnNldChkb3RQcm9kLCBkeFIsIGR4QywgZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGR4O1xuICB9XG5cbiAgcHJvdGVjdGVkIG1pblBvb2xJbnRlcm5hbChcbiAgICAgIHg6IEFycmF5M0QsIGZTaXplOiBudW1iZXIsIHN0cmlkZTogbnVtYmVyLCBwYWQ6IG51bWJlcik6IEFycmF5M0Qge1xuICAgIHJldHVybiB0aGlzLnBvb2woeCwgZlNpemUsIHN0cmlkZSwgcGFkLCAnbWluJyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXZnUG9vbEludGVybmFsKFxuICAgICAgeDogQXJyYXkzRCwgZlNpemU6IG51bWJlciwgc3RyaWRlOiBudW1iZXIsIHBhZDogbnVtYmVyKTogQXJyYXkzRCB7XG4gICAgcmV0dXJuIHRoaXMucG9vbCh4LCBmU2l6ZSwgc3RyaWRlLCBwYWQsICdhdmcnKTtcbiAgfVxuXG4gIHByb3RlY3RlZCByZXNpemVCaWxpbmVhcjNESW50ZXJuYWwoXG4gICAgICB4OiBBcnJheTNELCBuZXdTaGFwZTJEOiBbbnVtYmVyLCBudW1iZXJdLFxuICAgICAgYWxpZ25Db3JuZXJzOiBib29sZWFuKTogQXJyYXkzRCB7XG4gICAgY29uc3Qgb3V0cHV0ID0gQXJyYXkzRC56ZXJvcyhbbmV3U2hhcGUyRFswXSwgbmV3U2hhcGUyRFsxXSwgeC5zaGFwZVsyXV0pO1xuXG4gICAgY29uc3QgZWZmZWN0aXZlSW5wdXRTaXplID1cbiAgICAgICAgYWxpZ25Db3JuZXJzID8gW3guc2hhcGVbMF0gLSAxLCB4LnNoYXBlWzFdIC0gMSwgeC5zaGFwZVsyXV0gOiB4LnNoYXBlO1xuICAgIGNvbnN0IGVmZmVjdGl2ZU91dHB1dFNpemUgPSBhbGlnbkNvcm5lcnMgP1xuICAgICAgICBbb3V0cHV0LnNoYXBlWzBdIC0gMSwgb3V0cHV0LnNoYXBlWzFdIC0gMSwgb3V0cHV0LnNoYXBlWzJdXSA6XG4gICAgICAgIG91dHB1dC5zaGFwZTtcbiAgICBmb3IgKGxldCByID0gMDsgciA8IG91dHB1dC5zaGFwZVswXTsgcisrKSB7XG4gICAgICBmb3IgKGxldCBjID0gMDsgYyA8IG91dHB1dC5zaGFwZVsxXTsgYysrKSB7XG4gICAgICAgIGZvciAobGV0IGQgPSAwOyBkIDwgb3V0cHV0LnNoYXBlWzJdOyBkKyspIHtcbiAgICAgICAgICAvLyBCZWdpbiBzaGFkZXIuXG5cbiAgICAgICAgICAvLyBDb21wdXRlIHRoZSBmcmFjdGlvbmFsIGluZGV4IG9mIHRoZSBzb3VyY2UuXG4gICAgICAgICAgY29uc3Qgc291cmNlRnJhY1JvdyA9XG4gICAgICAgICAgICAgIChlZmZlY3RpdmVJbnB1dFNpemVbMF0pICogciAvIChlZmZlY3RpdmVPdXRwdXRTaXplWzBdKTtcbiAgICAgICAgICBjb25zdCBzb3VyY2VGcmFjQ29sID1cbiAgICAgICAgICAgICAgKGVmZmVjdGl2ZUlucHV0U2l6ZVsxXSkgKiBjIC8gKGVmZmVjdGl2ZU91dHB1dFNpemVbMV0pO1xuXG4gICAgICAgICAgY29uc3Qgc291cmNlUm93Rmxvb3IgPSBNYXRoLmZsb29yKHNvdXJjZUZyYWNSb3cpO1xuICAgICAgICAgIGNvbnN0IHNvdXJjZVJvd0NlaWwgPVxuICAgICAgICAgICAgICBNYXRoLm1pbih4LnNoYXBlWzBdIC0gMSwgTWF0aC5jZWlsKHNvdXJjZUZyYWNSb3cpKTtcbiAgICAgICAgICBjb25zdCBzb3VyY2VDb2xGbG9vciA9IE1hdGguZmxvb3Ioc291cmNlRnJhY0NvbCk7XG4gICAgICAgICAgY29uc3Qgc291cmNlQ29sQ2VpbCA9XG4gICAgICAgICAgICAgIE1hdGgubWluKHguc2hhcGVbMV0gLSAxLCBNYXRoLmNlaWwoc291cmNlRnJhY0NvbCkpO1xuXG4gICAgICAgICAgY29uc3QgdG9wTGVmdCA9IHguZ2V0KHNvdXJjZVJvd0Zsb29yLCBzb3VyY2VDb2xGbG9vciwgZCk7XG4gICAgICAgICAgY29uc3QgYm90dG9tTGVmdCA9IHguZ2V0KHNvdXJjZVJvd0NlaWwsIHNvdXJjZUNvbEZsb29yLCBkKTtcbiAgICAgICAgICBjb25zdCB0b3BSaWdodCA9IHguZ2V0KHNvdXJjZVJvd0Zsb29yLCBzb3VyY2VDb2xDZWlsLCBkKTtcbiAgICAgICAgICBjb25zdCBib3R0b21SaWdodCA9IHguZ2V0KHNvdXJjZVJvd0NlaWwsIHNvdXJjZUNvbENlaWwsIGQpO1xuXG4gICAgICAgICAgY29uc3Qgcm93RnJhYyA9IHNvdXJjZUZyYWNSb3cgLSBzb3VyY2VSb3dGbG9vcjtcbiAgICAgICAgICBjb25zdCBjb2xGcmFjID0gc291cmNlRnJhY0NvbCAtIHNvdXJjZUNvbEZsb29yO1xuXG4gICAgICAgICAgY29uc3QgdG9wID0gdG9wTGVmdCArICh0b3BSaWdodCAtIHRvcExlZnQpICogY29sRnJhYztcbiAgICAgICAgICBjb25zdCBib3R0b20gPSBib3R0b21MZWZ0ICsgKGJvdHRvbVJpZ2h0IC0gYm90dG9tTGVmdCkgKiBjb2xGcmFjO1xuICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gdG9wICsgKGJvdHRvbSAtIHRvcCkgKiByb3dGcmFjO1xuXG4gICAgICAgICAgb3V0cHV0LnNldChuZXdWYWx1ZSwgciwgYywgZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9XG5cbiAgcHJvdGVjdGVkIGJhdGNoTm9ybWFsaXphdGlvbjNESW50ZXJuYWwoXG4gICAgICB4OiBBcnJheTNELCBtZWFuOiBBcnJheTNEfEFycmF5MUQsIHZhcmlhbmNlOiBBcnJheTNEfEFycmF5MUQsXG4gICAgICB2YXJpYW5jZUVwc2lsb24gPSAuMDAxLCBzY2FsZT86IEFycmF5M0R8QXJyYXkxRCxcbiAgICAgIG9mZnNldD86IEFycmF5M0R8QXJyYXkxRCk6IEFycmF5M0Qge1xuICAgIGNvbnN0IHhWYWx1ZXMgPSB4LmdldFZhbHVlcygpO1xuICAgIGNvbnN0IG1lYW5WYWx1ZXMgPSBtZWFuLmdldFZhbHVlcygpO1xuICAgIGNvbnN0IHZhcmlhbmNlVmFsdWVzID0gdmFyaWFuY2UuZ2V0VmFsdWVzKCk7XG4gICAgY29uc3Qgc2NhbGVWYWx1ZXMgPSBzY2FsZSA/IHNjYWxlLmdldFZhbHVlcygpIDogbmV3IEZsb2F0MzJBcnJheShbMV0pO1xuICAgIGNvbnN0IG9mZnNldFZhbHVlcyA9IG9mZnNldCA/IG9mZnNldC5nZXRWYWx1ZXMoKSA6IG5ldyBGbG9hdDMyQXJyYXkoWzBdKTtcbiAgICBjb25zdCBvdXRWYWx1ZXMgPSBuZXcgRmxvYXQzMkFycmF5KHhWYWx1ZXMubGVuZ3RoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgeFZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgb3V0VmFsdWVzW2ldID0gb2Zmc2V0VmFsdWVzW2kgJSBvZmZzZXRWYWx1ZXMubGVuZ3RoXSArXG4gICAgICAgICAgKHhWYWx1ZXNbaV0gLSBtZWFuVmFsdWVzW2kgJSBtZWFuVmFsdWVzLmxlbmd0aF0pICpcbiAgICAgICAgICAgICAgc2NhbGVWYWx1ZXNbaSAlIHNjYWxlVmFsdWVzLmxlbmd0aF0gL1xuICAgICAgICAgICAgICBNYXRoLnNxcnQoXG4gICAgICAgICAgICAgICAgICB2YXJpYW5jZVZhbHVlc1tpICUgdmFyaWFuY2VWYWx1ZXMubGVuZ3RoXSArIHZhcmlhbmNlRXBzaWxvbik7XG4gICAgfVxuICAgIHJldHVybiBOREFycmF5Lm1ha2U8QXJyYXkzRD4oeC5zaGFwZSwge3ZhbHVlczogb3V0VmFsdWVzfSk7XG4gIH1cbn1cbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuLi91dGlsJztcblxuaW1wb3J0ICogYXMgY29uY2F0M2RfdXRpbCBmcm9tICcuL2NvbmNhdDNkX3V0aWwnO1xuaW1wb3J0ICogYXMgY29udl91dGlsIGZyb20gJy4vY29udl91dGlsJztcbmltcG9ydCB7TWF0cml4T3JpZW50YXRpb24sIE5EQXJyYXlNYXRofSBmcm9tICcuL21hdGgnO1xuaW1wb3J0ICogYXMgbmRhcnJheSBmcm9tICcuL25kYXJyYXknO1xuaW1wb3J0IHtBcnJheTFELCBBcnJheTJELCBBcnJheTNELCBBcnJheTRELCBOREFycmF5LCBTY2FsYXJ9IGZyb20gJy4vbmRhcnJheSc7XG5pbXBvcnQgKiBhcyBhZGRzY2FsZWRtYXRfZ3B1IGZyb20gJy4vd2ViZ2wvYWRkc2NhbGVkbWF0X2dwdSc7XG5pbXBvcnQgKiBhcyBhZGRzdWJtdWxkaXZfZ3B1IGZyb20gJy4vd2ViZ2wvYWRkc3VibXVsZGl2X2dwdSc7XG5pbXBvcnQge09wZXJhbmRUeXBlfSBmcm9tICcuL3dlYmdsL2FkZHN1Ym11bGRpdl9ncHUnO1xuaW1wb3J0ICogYXMgYXJnbWF4ZXF1YWxzX2dwdSBmcm9tICcuL3dlYmdsL2FyZ21heGVxdWFsc19ncHUnO1xuaW1wb3J0ICogYXMgYXJnbWlubWF4X2dwdSBmcm9tICcuL3dlYmdsL2FyZ21pbm1heF9ncHUnO1xuaW1wb3J0ICogYXMgYXZnX3Bvb2xfZ3B1IGZyb20gJy4vd2ViZ2wvYXZnX3Bvb2xfZ3B1JztcbmltcG9ydCAqIGFzIGJhdGNobm9ybV9ncHUgZnJvbSAnLi93ZWJnbC9iYXRjaG5vcm1fZ3B1JztcbmltcG9ydCAqIGFzIGNvbmNhdDNkX2dwdSBmcm9tICcuL3dlYmdsL2NvbmNhdDNkX2dwdSc7XG5pbXBvcnQgKiBhcyBjb252X2JhY2twcm9wX2dwdSBmcm9tICcuL3dlYmdsL2NvbnZfYmFja3Byb3BfZ3B1JztcbmltcG9ydCAqIGFzIGNvbnZfZ3B1IGZyb20gJy4vd2ViZ2wvY29udl9ncHUnO1xuaW1wb3J0ICogYXMgY29weV9ncHUgZnJvbSAnLi93ZWJnbC9jb3B5X2dwdSc7XG5pbXBvcnQgKiBhcyBleHBfZ3B1IGZyb20gJy4vd2ViZ2wvZXhwX2dwdSc7XG5pbXBvcnQge0dQR1BVQ29udGV4dH0gZnJvbSAnLi93ZWJnbC9ncGdwdV9jb250ZXh0JztcbmltcG9ydCAqIGFzIGdwZ3B1X3V0aWwgZnJvbSAnLi93ZWJnbC9ncGdwdV91dGlsJztcbmltcG9ydCAqIGFzIGxvZ19ncHUgZnJvbSAnLi93ZWJnbC9sb2dfZ3B1JztcbmltcG9ydCAqIGFzIGxvZ3N1bWV4cF9ncHUgZnJvbSAnLi93ZWJnbC9sb2dzdW1leHBfZ3B1JztcbmltcG9ydCAqIGFzIG1heF9wb29sX2JhY2twcm9wX2dwdSBmcm9tICcuL3dlYmdsL21heF9wb29sX2JhY2twcm9wX2dwdSc7XG5pbXBvcnQgKiBhcyBtYXhfcG9vbF9ncHUgZnJvbSAnLi93ZWJnbC9tYXhfcG9vbF9ncHUnO1xuaW1wb3J0ICogYXMgbWluX3Bvb2xfZ3B1IGZyb20gJy4vd2ViZ2wvbWluX3Bvb2xfZ3B1JztcbmltcG9ydCAqIGFzIG1pbm1heF9ncHUgZnJvbSAnLi93ZWJnbC9taW5tYXhfZ3B1JztcbmltcG9ydCAqIGFzIG11bG1hdF9ncHUgZnJvbSAnLi93ZWJnbC9tdWxtYXRfZ3B1JztcbmltcG9ydCAqIGFzIG5lZ19ncHUgZnJvbSAnLi93ZWJnbC9uZWdfZ3B1JztcbmltcG9ydCAqIGFzIHBvb2xfZ3B1IGZyb20gJy4vd2ViZ2wvcG9vbF9ncHUnO1xuaW1wb3J0ICogYXMgcmVkdWNlc3VtX2dwdSBmcm9tICcuL3dlYmdsL3JlZHVjZXN1bV9ncHUnO1xuaW1wb3J0ICogYXMgcmVsdV9ncHUgZnJvbSAnLi93ZWJnbC9yZWx1X2dwdSc7XG5pbXBvcnQgKiBhcyByZXNoYXBlX2dwdSBmcm9tICcuL3dlYmdsL3Jlc2hhcGVfZ3B1JztcbmltcG9ydCAqIGFzIHJlc2l6ZV9iaWxpbmVhcl9ncHUgZnJvbSAnLi93ZWJnbC9yZXNpemVfYmlsaW5lYXJfZ3B1JztcbmltcG9ydCAqIGFzIHNoYWRlcl9jb21waWxlciBmcm9tICcuL3dlYmdsL3NoYWRlcl9jb21waWxlcic7XG5pbXBvcnQgKiBhcyBzaWdtb2lkX2dwdSBmcm9tICcuL3dlYmdsL3NpZ21vaWRfZ3B1JztcbmltcG9ydCAqIGFzIHN0ZXBfZ3B1IGZyb20gJy4vd2ViZ2wvc3RlcF9ncHUnO1xuaW1wb3J0IHtUZXh0dXJlTWFuYWdlcn0gZnJvbSAnLi93ZWJnbC90ZXh0dXJlX21hbmFnZXInO1xuaW1wb3J0ICogYXMgdHJpZ19ncHUgZnJvbSAnLi93ZWJnbC90cmlnX2dwdSc7XG5pbXBvcnQgKiBhcyB3ZWJnbF91dGlsIGZyb20gJy4vd2ViZ2wvd2ViZ2xfdXRpbCc7XG5cbmNvbnN0IEFSR01BWF9QUk9HID0gJ2FyZ21heCc7XG5jb25zdCBBUkdNQVhfRVFVQUxTX1BST0cgPSAnYXJnbWF4ZXF1YWxzJztcbmNvbnN0IEFSR01JTl9QUk9HID0gJ2FyZ21pbic7XG5cbmNvbnN0IEJBVENITk9STV9QUk9HID0gJ2JhdGNobm9ybSc7XG5cbmNvbnN0IENPUFlfUFJPRyA9ICdjb3B5JztcbmNvbnN0IENPTkNBVF9QUk9HID0gJ2NvbmNhdCc7XG5cbi8vIE1hdHJpeCBhbGdlYnJhLlxuY29uc3QgQUREX1NDQUxFRF9NQVRfUFJPRyA9ICdhZGRzY2FsZWRtYXQnO1xuY29uc3QgTUFUTVVMX1BST0cgPSAnbWF0bXVsJztcblxuLy8gRWxlbWVudC13aXNlIG9wcy5cbmNvbnN0IFJFTFVfUFJPRyA9ICdyZWx1JztcbmNvbnN0IFRBTkhfUFJPRyA9ICd0YW5oJztcbmNvbnN0IFNJTl9QUk9HID0gJ3Npbic7XG5jb25zdCBTSUdNT0lEX1BST0cgPSAnc2lnbW9pZCc7XG5jb25zdCBNQVhfUFJPRyA9ICdtYXgnO1xuY29uc3QgTUlOX1BST0cgPSAnbWluJztcbmNvbnN0IE5FR19QUk9HID0gJ25lZyc7XG5jb25zdCBFWFBfUFJPRyA9ICdleHAnO1xuY29uc3QgTE9HX1BST0cgPSAnbG9nJztcbmNvbnN0IFNVTV9QUk9HID0gJ3N1bSc7XG5jb25zdCBTVEVQX1BST0cgPSAnc3RlcCc7XG5jb25zdCBMT0dTVU1FWFBfUFJPRyA9ICdsb2dzdW1leHAnO1xuY29uc3QgUkVTSEFQRV9QUk9HID0gJ3Jlc2hhcGUnO1xuY29uc3QgQUREX1NVTV9NVUxfRElWX1BST0cgPSAnYWRkc3VtbXVsZGl2JztcblxuLy8gQ29udm9sdXRpb24uXG5jb25zdCBDT05WMkRfUFJPRyA9ICdjb252JztcbmNvbnN0IENPTlYyRF9UUkFOU1BPU0VfUFJPRyA9ICdjb252X3RyYW5zcG9zZSc7XG5jb25zdCBDT05WMkRfREVSV19QUk9HID0gJ2NvbnZfZGVydyc7XG5jb25zdCBDT05WMkRfREVSQl9QUk9HID0gJ2NvbnZfZGVyYic7XG5jb25zdCBNQVhfUE9PTF9QUk9HID0gJ21heHBvb2wnO1xuY29uc3QgTUFYX1BPT0xfUE9TSVRJT05TX1BST0cgPSAnbWF4cG9vbF9wb3NuJztcbmNvbnN0IE1BWF9QT09MX0JBQ0tQUk9QX1BST0cgPSAnbWF4cG9vbF9iYWNrcHJvcCc7XG5jb25zdCBNSU5fUE9PTF9QUk9HID0gJ21pbnBvb2wnO1xuY29uc3QgQVZHX1BPT0xfUFJPRyA9ICdhdmdwb29sJztcblxuY29uc3QgUkVTSVpFX0JJTElORUFSX1BST0cgPSAncmVzaXplYmlsaW4nO1xuXG5mdW5jdGlvbiBtYWtlQ29weVByb2dyYW1OYW1lKFxuICAgIHNvdXJjZVNoYXBlUm93Q29sOiBbbnVtYmVyLCBudW1iZXJdLCBzb3VyY2VTaXplUm93Q29sOiBbbnVtYmVyLCBudW1iZXJdLFxuICAgIGRlc3RTaXplUm93Q29sOiBbbnVtYmVyLCBudW1iZXJdKTogc3RyaW5nIHtcbiAgY29uc3Qgc2hhcGVOYW1lID0gYCR7c291cmNlU2hhcGVSb3dDb2xbMF19XyR7c291cmNlU2hhcGVSb3dDb2xbMV19YDtcbiAgY29uc3Qgc3JjU2l6ZU5hbWUgPSBgJHtzb3VyY2VTaXplUm93Q29sWzBdfV8ke3NvdXJjZVNpemVSb3dDb2xbMV19YDtcbiAgY29uc3QgZHN0U2l6ZU5hbWUgPSBgJHtkZXN0U2l6ZVJvd0NvbFswXX1fJHtkZXN0U2l6ZVJvd0NvbFsxXX1gO1xuICByZXR1cm4gYCR7Q09QWV9QUk9HfV8ke3NoYXBlTmFtZX1fJHtzcmNTaXplTmFtZX1fJHtkc3RTaXplTmFtZX1gO1xufVxuXG5leHBvcnQgY2xhc3MgTkRBcnJheU1hdGhHUFUgZXh0ZW5kcyBOREFycmF5TWF0aCB7XG4gIHByaXZhdGUgZ3BncHU6IEdQR1BVQ29udGV4dDtcbiAgcHJpdmF0ZSB0ZXh0dXJlTWFuYWdlcjogVGV4dHVyZU1hbmFnZXI7XG4gIHByaXZhdGUgcHJvZ3JhbUNhY2hlOiB7W2tleTogc3RyaW5nXTogV2ViR0xQcm9ncmFtfSA9IHt9O1xuICBwcml2YXRlIGdwZ3B1Q3JlYXRlZExvY2FsbHk6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoZ3BncHU/OiBHUEdQVUNvbnRleHQsIHNhZmVNb2RlID0gdHJ1ZSkge1xuICAgIHN1cGVyKHNhZmVNb2RlKTtcbiAgICBpZiAoZ3BncHUgPT0gbnVsbCkge1xuICAgICAgY29uc3QgZ2wgPSBncGdwdV91dGlsLmNyZWF0ZVdlYkdMQ29udGV4dCgpO1xuICAgICAgdGhpcy5ncGdwdSA9IG5ldyBHUEdQVUNvbnRleHQoZ2wpO1xuICAgICAgdGhpcy5ncGdwdUNyZWF0ZWRMb2NhbGx5ID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ncGdwdSA9IGdwZ3B1O1xuICAgICAgdGhpcy5ncGdwdUNyZWF0ZWRMb2NhbGx5ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy50ZXh0dXJlTWFuYWdlciA9IG5ldyBUZXh0dXJlTWFuYWdlcih0aGlzLmdwZ3B1KTtcblxuICAgIG5kYXJyYXkuaW5pdGlhbGl6ZUdQVSh0aGlzLmdwZ3B1LCB0aGlzLnRleHR1cmVNYW5hZ2VyKTtcbiAgfVxuXG4gIGdldEdQR1BVQ29udGV4dCgpOiBHUEdQVUNvbnRleHQge1xuICAgIHJldHVybiB0aGlzLmdwZ3B1O1xuICB9XG5cbiAgcHJvdGVjdGVkIGNsb25lSW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KG5kYXJyYXk6IFQpOiBUIHtcbiAgICBjb25zdCB0ZXh0dXJlU2hhcGVSQyA9IG5kYXJyYXkuZ2V0VGV4dHVyZVNoYXBlUkMoKTtcbiAgICBjb25zdCBwcm9ncmFtID0gdGhpcy5nZXRBbmRTYXZlUHJvZ3JhbShcbiAgICAgICAgbWFrZUNvcHlQcm9ncmFtTmFtZSh0ZXh0dXJlU2hhcGVSQywgdGV4dHVyZVNoYXBlUkMsIHRleHR1cmVTaGFwZVJDKSxcbiAgICAgICAgKCkgPT4gY29weV9ncHUuZ2V0RnJhZ21lbnRTaGFkZXJTb3VyY2UoXG4gICAgICAgICAgICB0ZXh0dXJlU2hhcGVSQywgdGV4dHVyZVNoYXBlUkMsIHRleHR1cmVTaGFwZVJDKSk7XG5cbiAgICBjb25zdCByZXN1bHRUZXh0dXJlID0gdGhpcy50ZXh0dXJlTWFuYWdlci5hY3F1aXJlVGV4dHVyZSh0ZXh0dXJlU2hhcGVSQyk7XG5cbiAgICBjb3B5X2dwdS5jb3B5KFxuICAgICAgICB0aGlzLmdwZ3B1LCBwcm9ncmFtLCBuZGFycmF5LmdldFRleHR1cmUoKSwgdGV4dHVyZVNoYXBlUkMsIFswLCAwXSxcbiAgICAgICAgdGV4dHVyZVNoYXBlUkMsIHJlc3VsdFRleHR1cmUsIHRleHR1cmVTaGFwZVJDLCBbMCwgMF0sIHRleHR1cmVTaGFwZVJDKTtcblxuICAgIHJldHVybiBOREFycmF5Lm1ha2U8VD4oXG4gICAgICAgIG5kYXJyYXkuc2hhcGUsIHt0ZXh0dXJlOiByZXN1bHRUZXh0dXJlLCB0ZXh0dXJlU2hhcGVSQ30pO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlc2hhcGVJbnRlcm5hbDxUMSBleHRlbmRzIE5EQXJyYXksIFQyIGV4dGVuZHMgTkRBcnJheT4oXG4gICAgICBuZGFycmF5OiBUMSwgbmV3U2hhcGU6IG51bWJlcltdKTogVDIge1xuICAgIGxldCBuZXdUZXhTaGFwZTogW251bWJlciwgbnVtYmVyXTtcblxuICAgIHN3aXRjaCAobmV3U2hhcGUubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIG5ld1RleFNoYXBlID0gWzEsIDFdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgbmV3VGV4U2hhcGUgPSBbbmV3U2hhcGVbMF0sIDFdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgbmV3VGV4U2hhcGUgPSBbbmV3U2hhcGVbMF0sIG5ld1NoYXBlWzFdXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIG5ld1RleFNoYXBlID0gW25ld1NoYXBlWzBdLCBuZXdTaGFwZVsxXSAqIG5ld1NoYXBlWzJdXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgICAgIGBSZXNoYXBlcyBpbnRvICR7bmV3U2hhcGUubGVuZ3RofS1kaW0gbmRhcnJheSBpcyBub3QgeWV0IGAgK1xuICAgICAgICAgICAgYHN1cHBvcnRlZCBvbiBHUFVgKTtcbiAgICB9XG5cbiAgICBjb25zdCBhY3R1YWxUZXhTaGFwZSA9IG5kYXJyYXkuZ2V0VGV4dHVyZVNoYXBlUkMobmV3VGV4U2hhcGUpO1xuICAgIGxldCBjbG9uZWRBcnJheTogVDE7XG4gICAgaWYgKCF1dGlsLmFycmF5c0VxdWFsKGFjdHVhbFRleFNoYXBlLCBuZXdUZXhTaGFwZSkpIHtcbiAgICAgIGNsb25lZEFycmF5ID0gdGhpcy5yZXNoYXBlVGV4dHVyZShuZGFycmF5LCBuZXdUZXhTaGFwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsb25lZEFycmF5ID0gdGhpcy5jbG9uZUludGVybmFsKG5kYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gY2xvbmVkQXJyYXkucmVzaGFwZTxUMj4obmV3U2hhcGUpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHNsaWNlMkRJbnRlcm5hbChcbiAgICAgIGlucHV0OiBBcnJheTJELCBiZWdpblJvd0NvbDogW251bWJlciwgbnVtYmVyXSxcbiAgICAgIHNpemVSb3dDb2w6IFtudW1iZXIsIG51bWJlcl0pOiBBcnJheTJEIHtcbiAgICBjb25zdCByZXN1bHQgPSBOREFycmF5Lm1ha2U8QXJyYXkyRD4oc2l6ZVJvd0NvbCwge1xuICAgICAgdGV4dHVyZTogdGhpcy50ZXh0dXJlTWFuYWdlci5hY3F1aXJlVGV4dHVyZShzaXplUm93Q29sKSxcbiAgICAgIHRleHR1cmVTaGFwZVJDOiBzaXplUm93Q29sXG4gICAgfSk7XG4gICAgdGhpcy5jb3B5MkRJbnRlcm5hbChcbiAgICAgICAgaW5wdXQsIGJlZ2luUm93Q29sLCBzaXplUm93Q29sLCByZXN1bHQsIFswLCAwXSwgc2l6ZVJvd0NvbCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByb3RlY3RlZCBjb3B5MkRJbnRlcm5hbChcbiAgICAgIHNvdXJjZTogQXJyYXkyRCwgc291cmNlQmVnaW5Sb3dDb2w6IFtudW1iZXIsIG51bWJlcl0sXG4gICAgICBzb3VyY2VTaXplUm93Q29sOiBbbnVtYmVyLCBudW1iZXJdLCBkZXN0OiBBcnJheTJELFxuICAgICAgZGVzdEJlZ2luUm93Q29sOiBbbnVtYmVyLCBudW1iZXJdLFxuICAgICAgZGVzdFNpemVSb3dDb2w6IFtudW1iZXIsIG51bWJlcl0pOiB2b2lkIHtcbiAgICBjb25zdCBzb3VyY2VTaGFwZVJDID0gc291cmNlLmdldFRleHR1cmVTaGFwZVJDKCk7XG4gICAgY29uc3QgZGVzdFNoYXBlUkMgPSBkZXN0LmdldFRleHR1cmVTaGFwZVJDKCk7XG4gICAgY29uc3QgcHJvZ3JhbSA9IHRoaXMuZ2V0QW5kU2F2ZVByb2dyYW0oXG4gICAgICAgIG1ha2VDb3B5UHJvZ3JhbU5hbWUoc291cmNlU2hhcGVSQywgc291cmNlU2l6ZVJvd0NvbCwgZGVzdFNpemVSb3dDb2wpLFxuICAgICAgICAoKSA9PiBjb3B5X2dwdS5nZXRGcmFnbWVudFNoYWRlclNvdXJjZShcbiAgICAgICAgICAgIHNvdXJjZVNoYXBlUkMsIHNvdXJjZVNpemVSb3dDb2wsIGRlc3RTaXplUm93Q29sKSk7XG5cbiAgICBjb3B5X2dwdS5jb3B5KFxuICAgICAgICB0aGlzLmdwZ3B1LCBwcm9ncmFtLCBzb3VyY2UuZ2V0VGV4dHVyZSgpLCBzb3VyY2VTaGFwZVJDLFxuICAgICAgICBzb3VyY2VCZWdpblJvd0NvbCwgc291cmNlU2l6ZVJvd0NvbCwgZGVzdC5nZXRUZXh0dXJlKCksIGRlc3RTaGFwZVJDLFxuICAgICAgICBkZXN0QmVnaW5Sb3dDb2wsIGRlc3RTaXplUm93Q29sKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjb25jYXQzREludGVybmFsKHgxOiBBcnJheTNELCB4MjogQXJyYXkzRCwgYXhpczogbnVtYmVyKTogQXJyYXkzRCB7XG4gICAgY29uc3QgeDFUZXhTaGFwZVJDOiBbbnVtYmVyLCBudW1iZXJdID1cbiAgICAgICAgY29udl91dGlsLmNvbXB1dGVUZXhTaGFwZUZyb20zRCh4MS5zaGFwZSk7XG4gICAgY29uc3QgeDJUZXhTaGFwZVJDOiBbbnVtYmVyLCBudW1iZXJdID1cbiAgICAgICAgY29udl91dGlsLmNvbXB1dGVUZXhTaGFwZUZyb20zRCh4Mi5zaGFwZSk7XG5cbiAgICAvLyBJZiB0aGUgdGV4dHVyZSBzaGFwZXMgZG9lc24ndCBtYXRjaCB0aGUgc2hhcGVzIHRoYXQgc2hhZGVycyBleHBlY3QsXG4gICAgLy8gZG8gcGh5c2ljYWwgdGV4dHVyZSByZXNoYXBlcyBvbiB0aGUgR1BVLlxuICAgIGNvbnN0IGFjdHVhbFgxVGV4U2hhcGUgPSB4MS5nZXRUZXh0dXJlU2hhcGVSQyh4MVRleFNoYXBlUkMpO1xuICAgIGxldCBjbGVhbnVwWDEgPSBmYWxzZTtcbiAgICBpZiAoIXV0aWwuYXJyYXlzRXF1YWwoYWN0dWFsWDFUZXhTaGFwZSwgeDFUZXhTaGFwZVJDKSkge1xuICAgICAgeDEgPSB0aGlzLnJlc2hhcGVUZXh0dXJlKHgxLCB4MVRleFNoYXBlUkMpO1xuICAgICAgY2xlYW51cFgxID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgYWN0dWFsWDJUZXhTaGFwZSA9IHgyLmdldFRleHR1cmVTaGFwZVJDKHgyVGV4U2hhcGVSQyk7XG4gICAgbGV0IGNsZWFudXBYMiA9IGZhbHNlO1xuICAgIGlmICghdXRpbC5hcnJheXNFcXVhbChhY3R1YWxYMlRleFNoYXBlLCB4MlRleFNoYXBlUkMpKSB7XG4gICAgICB4MiA9IHRoaXMucmVzaGFwZVRleHR1cmUoeDIsIHgyVGV4U2hhcGVSQyk7XG4gICAgICBjbGVhbnVwWDIgPSB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdFNoYXBlUkNEID1cbiAgICAgICAgY29uY2F0M2RfdXRpbC5jb21wdXRlQ29uY2F0M0RPdXRwdXRTaGFwZSh4MS5zaGFwZSwgeDIuc2hhcGUsIGF4aXMpO1xuXG4gICAgY29uc3QgcHJvZ3JhbSA9IHRoaXMuZ2V0QW5kU2F2ZVByb2dyYW0oXG4gICAgICAgIGAke0NPTkNBVF9QUk9HfV8ke3gxLnNoYXBlfV8ke3gyLnNoYXBlfV8ke2F4aXN9YCxcbiAgICAgICAgKCkgPT4gY29uY2F0M2RfZ3B1LmdldEZyYWdtZW50U2hhZGVyU291cmNlKFxuICAgICAgICAgICAgeDEuc2hhcGUsIHgyLnNoYXBlLCByZXN1bHRTaGFwZVJDRCwgYXhpcykpO1xuXG4gICAgY29uc3QgcmVzdWx0VGV4U2hhcGUgPSBjb252X3V0aWwuY29tcHV0ZVRleFNoYXBlRnJvbTNEKHJlc3VsdFNoYXBlUkNEKTtcbiAgICBjb25zdCByZXN1bHRUZXggPSB0aGlzLnRleHR1cmVNYW5hZ2VyLmFjcXVpcmVUZXh0dXJlKHJlc3VsdFRleFNoYXBlKTtcblxuICAgIGNvbmNhdDNkX2dwdS5jb25jYXQzRChcbiAgICAgICAgdGhpcy5ncGdwdSwgcHJvZ3JhbSwgeDEuZ2V0VGV4dHVyZSgpLCB4Mi5nZXRUZXh0dXJlKCksIHJlc3VsdFRleCxcbiAgICAgICAgcmVzdWx0VGV4U2hhcGUpO1xuXG4gICAgaWYgKGNsZWFudXBYMSkge1xuICAgICAgeDEuZGlzcG9zZSgpO1xuICAgIH1cblxuICAgIGlmIChjbGVhbnVwWDIpIHtcbiAgICAgIHgyLmRpc3Bvc2UoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gTkRBcnJheS5tYWtlPEFycmF5M0Q+KFxuICAgICAgICByZXN1bHRTaGFwZVJDRCwge3RleHR1cmU6IHJlc3VsdFRleCwgdGV4dHVyZVNoYXBlUkM6IHJlc3VsdFRleFNoYXBlfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2NhbGFyUGx1c0FycmF5SW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KGM6IFNjYWxhciwgYTogVCk6IFQge1xuICAgIHJldHVybiB0aGlzLmFkZFN1Yk11bERpdihcbiAgICAgICAgYywgYSwgYS5zaGFwZSwgT3BlcmFuZFR5cGUuU0NBTEFSLCAnKycsIE9wZXJhbmRUeXBlLk1BVFJJWCkgYXMgVDtcbiAgfVxuXG4gIHByb3RlY3RlZCBhcnJheU1pbnVzU2NhbGFySW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KGE6IFQsIGM6IFNjYWxhcik6IFQge1xuICAgIHJldHVybiB0aGlzLmFkZFN1Yk11bERpdihcbiAgICAgICAgYSwgYywgYS5zaGFwZSwgT3BlcmFuZFR5cGUuTUFUUklYLCAnLScsIE9wZXJhbmRUeXBlLlNDQUxBUikgYXMgVDtcbiAgfVxuXG4gIHByb3RlY3RlZCBzY2FsYXJNaW51c0FycmF5SW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KGM6IFNjYWxhciwgYTogVCk6IFQge1xuICAgIHJldHVybiB0aGlzLmFkZFN1Yk11bERpdihcbiAgICAgICAgYywgYSwgYS5zaGFwZSwgT3BlcmFuZFR5cGUuU0NBTEFSLCAnLScsIE9wZXJhbmRUeXBlLk1BVFJJWCkgYXMgVDtcbiAgfVxuXG4gIHByb3RlY3RlZCBzY2FsZWRBcnJheUFkZEludGVybmFsPFQgZXh0ZW5kcyBOREFycmF5PihcbiAgICAgIGMxOiBTY2FsYXIsIGE6IFQsIGMyOiBTY2FsYXIsIGI6IFQpIHtcbiAgICBsZXQgY2xlYW51cEIgPSBmYWxzZTtcbiAgICBpZiAoIXRoaXMuZG9HUFVTaGFwZXNNYXRjaChhLCBiKSkge1xuICAgICAgYiA9IHRoaXMucmVzaGFwZVRleHR1cmUoYiwgYS5nZXRUZXh0dXJlU2hhcGVSQygpKTtcbiAgICAgIGNsZWFudXBCID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBwcm9ncmFtID0gdGhpcy5nZXRBbmRTYXZlUHJvZ3JhbShcbiAgICAgICAgQUREX1NDQUxFRF9NQVRfUFJPRywgKCkgPT4gYWRkc2NhbGVkbWF0X2dwdS5nZXRGcmFnbWVudFNoYWRlclNvdXJjZSgpKTtcblxuICAgIGNvbnN0IHRleHR1cmVTaGFwZVJDID0gYS5nZXRUZXh0dXJlU2hhcGVSQygpO1xuICAgIGNvbnN0IHJlc3VsdFRleHR1cmUgPSB0aGlzLnRleHR1cmVNYW5hZ2VyLmFjcXVpcmVUZXh0dXJlKHRleHR1cmVTaGFwZVJDKTtcblxuICAgIGFkZHNjYWxlZG1hdF9ncHUuYWRkU2NhbGVkTWF0cmljZXMoXG4gICAgICAgIHRoaXMuZ3BncHUsIHByb2dyYW0sIGEuZ2V0VGV4dHVyZSgpLCBiLmdldFRleHR1cmUoKSwgdGV4dHVyZVNoYXBlUkNbMF0sXG4gICAgICAgIHRleHR1cmVTaGFwZVJDWzFdLCBjMS5nZXRUZXh0dXJlKCksIGMyLmdldFRleHR1cmUoKSwgcmVzdWx0VGV4dHVyZSk7XG5cbiAgICBpZiAoY2xlYW51cEIpIHtcbiAgICAgIGIuZGlzcG9zZSgpO1xuICAgIH1cbiAgICAvLyBCcmluZyB0aGUgcmVzdWx0IGJhY2sgdG8gdGhlIG9yaWdpbmFsIHNoYXBlLlxuICAgIHJldHVybiBOREFycmF5Lm1ha2U8VD4oYS5zaGFwZSwge3RleHR1cmU6IHJlc3VsdFRleHR1cmUsIHRleHR1cmVTaGFwZVJDfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2NhbGFyVGltZXNBcnJheUludGVybmFsPFQgZXh0ZW5kcyBOREFycmF5PihjOiBTY2FsYXIsIGE6IFQpOiBUIHtcbiAgICByZXR1cm4gdGhpcy5hZGRTdWJNdWxEaXYoXG4gICAgICAgIGMsIGEsIGEuc2hhcGUsIE9wZXJhbmRUeXBlLlNDQUxBUiwgJyonLCBPcGVyYW5kVHlwZS5NQVRSSVgpIGFzIFQ7XG4gIH1cblxuICBwcm90ZWN0ZWQgbmVnSW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KGE6IFQpOiBUIHtcbiAgICBjb25zdCBwcm9ncmFtID0gdGhpcy5nZXRBbmRTYXZlUHJvZ3JhbShcbiAgICAgICAgTkVHX1BST0csICgpID0+IG5lZ19ncHUuZ2V0RnJhZ21lbnRTaGFkZXJTb3VyY2UoKSk7XG5cbiAgICBjb25zdCB0ZXh0dXJlU2hhcGVSQyA9IGEuZ2V0VGV4dHVyZVNoYXBlUkMoKTtcbiAgICBjb25zdCByZXN1bHRUZXh0dXJlID0gdGhpcy50ZXh0dXJlTWFuYWdlci5hY3F1aXJlVGV4dHVyZSh0ZXh0dXJlU2hhcGVSQyk7XG5cbiAgICBuZWdfZ3B1Lm5lZyhcbiAgICAgICAgdGhpcy5ncGdwdSwgcHJvZ3JhbSwgYS5nZXRUZXh0dXJlKCksIHRleHR1cmVTaGFwZVJDWzBdLFxuICAgICAgICB0ZXh0dXJlU2hhcGVSQ1sxXSwgcmVzdWx0VGV4dHVyZSk7XG5cbiAgICByZXR1cm4gTkRBcnJheS5tYWtlPFQ+KGEuc2hhcGUsIHt0ZXh0dXJlOiByZXN1bHRUZXh0dXJlLCB0ZXh0dXJlU2hhcGVSQ30pO1xuICB9XG5cbiAgcHJpdmF0ZSByZXNoYXBlVGV4dHVyZTxUIGV4dGVuZHMgTkRBcnJheT4oYTogVCwgbmV3VGV4dHVyZVNoYXBlOiBbXG4gICAgbnVtYmVyLCBudW1iZXJcbiAgXSk6IFQge1xuICAgIGNvbnN0IGFUZXhTaGFwZSA9IGEuZ2V0VGV4dHVyZVNoYXBlUkMoKTtcblxuICAgIGNvbnN0IHByb2dyYW0gPSB0aGlzLmdldEFuZFNhdmVQcm9ncmFtKFxuICAgICAgICBSRVNIQVBFX1BST0csICgpID0+IHJlc2hhcGVfZ3B1LmdldEZyYWdtZW50U2hhZGVyU291cmNlKCkpO1xuXG4gICAgY29uc3QgcmVzdWx0VGV4dHVyZSA9IHRoaXMudGV4dHVyZU1hbmFnZXIuYWNxdWlyZVRleHR1cmUobmV3VGV4dHVyZVNoYXBlKTtcbiAgICByZXNoYXBlX2dwdS5yZXNoYXBlKFxuICAgICAgICB0aGlzLmdwZ3B1LCBwcm9ncmFtLCBhLmdldFRleHR1cmUoKSwgYVRleFNoYXBlWzBdLCBhVGV4U2hhcGVbMV0sXG4gICAgICAgIHJlc3VsdFRleHR1cmUsIG5ld1RleHR1cmVTaGFwZVswXSwgbmV3VGV4dHVyZVNoYXBlWzFdKTtcblxuICAgIHJldHVybiBOREFycmF5Lm1ha2U8VD4oXG4gICAgICAgIGEuc2hhcGUsIHt0ZXh0dXJlOiByZXN1bHRUZXh0dXJlLCB0ZXh0dXJlU2hhcGVSQzogbmV3VGV4dHVyZVNoYXBlfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgbWF0TXVsSW50ZXJuYWwoXG4gICAgICBhOiBBcnJheTJELCBiOiBBcnJheTJELCBhT3JpZW50YXRpb246IE1hdHJpeE9yaWVudGF0aW9uLFxuICAgICAgYk9yaWVudGF0aW9uOiBNYXRyaXhPcmllbnRhdGlvbik6IEFycmF5MkQge1xuICAgIGNvbnN0IHNoYXJlZERpbSA9XG4gICAgICAgIChhT3JpZW50YXRpb24gPT09IE1hdHJpeE9yaWVudGF0aW9uLlJFR1VMQVIpID8gYS5zaGFwZVsxXSA6IGEuc2hhcGVbMF07XG4gICAgY29uc3Qgb3V0ZXJTaGFwZUEgPVxuICAgICAgICAoYU9yaWVudGF0aW9uID09PSBNYXRyaXhPcmllbnRhdGlvbi5SRUdVTEFSKSA/IGEuc2hhcGVbMF0gOiBhLnNoYXBlWzFdO1xuICAgIGNvbnN0IG91dGVyU2hhcGVCID1cbiAgICAgICAgKGJPcmllbnRhdGlvbiA9PT0gTWF0cml4T3JpZW50YXRpb24uUkVHVUxBUikgPyBiLnNoYXBlWzFdIDogYi5zaGFwZVswXTtcbiAgICBjb25zdCBvdXRTaGFwZTogW251bWJlciwgbnVtYmVyXSA9IFtvdXRlclNoYXBlQSwgb3V0ZXJTaGFwZUJdO1xuICAgIGNvbnN0IG91dFRleFNoYXBlID1cbiAgICAgICAgd2ViZ2xfdXRpbC5nZXRUZXh0dXJlU2hhcGVGcm9tTG9naWNhbFNoYXBlKHRoaXMuZ3BncHUuZ2wsIG91dFNoYXBlKTtcbiAgICBjb25zdCBvdXRUZXh0dXJlID0gdGhpcy50ZXh0dXJlTWFuYWdlci5hY3F1aXJlVGV4dHVyZShvdXRUZXhTaGFwZSk7XG4gICAgY29uc3Qgb3V0ID0gbmV3IEFycmF5MkQoXG4gICAgICAgIG91dFNoYXBlLCB7dGV4dHVyZTogb3V0VGV4dHVyZSwgdGV4dHVyZVNoYXBlUkM6IG91dFRleFNoYXBlfSk7XG5cbiAgICBjb25zdCBrZXkgPSBzaGFkZXJfY29tcGlsZXIubWFrZVNoYWRlcktleShbYSwgYl0sIG91dCk7XG4gICAgY29uc3QgcHJvZ3JhbSA9IHRoaXMuZ2V0QW5kU2F2ZVByb2dyYW0oXG4gICAgICAgIGAke01BVE1VTF9QUk9HfV8ke2tleX1fJHthT3JpZW50YXRpb259XyR7Yk9yaWVudGF0aW9ufWAsXG4gICAgICAgICgpID0+IG11bG1hdF9ncHUuZ2V0RnJhZ21lbnRTaGFkZXIoXG4gICAgICAgICAgICBhLCBiLCBvdXQsIGFPcmllbnRhdGlvbiwgYk9yaWVudGF0aW9uKSk7XG5cbiAgICBtdWxtYXRfZ3B1Lm11bHRpcGx5TWF0cml4KFxuICAgICAgICB0aGlzLmdwZ3B1LCBwcm9ncmFtLCBhLmdldFRleHR1cmUoKSwgYi5nZXRUZXh0dXJlKCksIG91dFRleHR1cmUsXG4gICAgICAgIG91dFRleFNoYXBlKTtcblxuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICBwcm90ZWN0ZWQgZWxlbWVudFdpc2VNdWxJbnRlcm5hbDxUIGV4dGVuZHMgTkRBcnJheT4oYTogVCwgYjogVCk6IFQge1xuICAgIHJldHVybiB0aGlzLmFkZFN1Yk11bERpdihcbiAgICAgICAgYSwgYiwgYS5zaGFwZSwgT3BlcmFuZFR5cGUuTUFUUklYLCAnKicsIE9wZXJhbmRUeXBlLk1BVFJJWCkgYXMgVDtcbiAgfVxuXG4gIHByb3RlY3RlZCBlbGVtZW50V2lzZU11bEJyb2FkY2FzdEludGVybmFsKGE6IEFycmF5MkQsIGI6IEFycmF5MkQpOiBBcnJheTJEIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCB5ZXQgaW1wbGVtZW50ZWQhJyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYmF0Y2hOb3JtYWxpemF0aW9uM0RJbnRlcm5hbChcbiAgICAgIHg6IEFycmF5M0QsIG1lYW46IEFycmF5M0R8QXJyYXkxRCwgdmFyaWFuY2U6IEFycmF5M0R8QXJyYXkxRCxcbiAgICAgIHZhcmlhbmNlRXBzaWxvbjogbnVtYmVyLCBzY2FsZT86IEFycmF5M0R8QXJyYXkxRCxcbiAgICAgIG9mZnNldD86IEFycmF5M0R8QXJyYXkxRCk6IEFycmF5M0Qge1xuICAgIGNvbnN0IHhUZXhTaGFwZSA9IHguZ2V0VGV4dHVyZVNoYXBlUkMoKTtcblxuICAgIGxldCBjbGVhbnVwTWVhbiA9IGZhbHNlO1xuICAgIGNvbnN0IHByZWZlcnJlZE1lYW5UZXhTaGFwZTogW251bWJlciwgbnVtYmVyXSA9XG4gICAgICAgIG1lYW4ucmFuayA9PT0gMSA/IFsxLCBtZWFuLnNpemVdIDogeFRleFNoYXBlO1xuICAgIGxldCBtZWFuVGV4U2hhcGUgPSBtZWFuLmdldFRleHR1cmVTaGFwZVJDKHByZWZlcnJlZE1lYW5UZXhTaGFwZSk7XG4gICAgaWYgKCF1dGlsLmFycmF5c0VxdWFsKG1lYW5UZXhTaGFwZSwgcHJlZmVycmVkTWVhblRleFNoYXBlKSkge1xuICAgICAgbWVhbiA9IHRoaXMucmVzaGFwZVRleHR1cmUobWVhbiwgcHJlZmVycmVkTWVhblRleFNoYXBlKTtcbiAgICAgIG1lYW5UZXhTaGFwZSA9IHByZWZlcnJlZE1lYW5UZXhTaGFwZTtcbiAgICAgIGNsZWFudXBNZWFuID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBsZXQgY2xlYW51cFZhcmlhbmNlID0gZmFsc2U7XG4gICAgY29uc3QgcHJlZmVycmVkVmFyaWFuY2VUZXhTaGFwZTogW251bWJlciwgbnVtYmVyXSA9XG4gICAgICAgIHZhcmlhbmNlLnJhbmsgPT09IDEgPyBbMSwgdmFyaWFuY2Uuc2l6ZV0gOiB4VGV4U2hhcGU7XG4gICAgbGV0IHZhcmlhbmNlVGV4U2hhcGUgPSB2YXJpYW5jZS5nZXRUZXh0dXJlU2hhcGVSQyhwcmVmZXJyZWRNZWFuVGV4U2hhcGUpO1xuICAgIGlmICghdXRpbC5hcnJheXNFcXVhbCh2YXJpYW5jZVRleFNoYXBlLCBwcmVmZXJyZWRWYXJpYW5jZVRleFNoYXBlKSkge1xuICAgICAgdmFyaWFuY2UgPSB0aGlzLnJlc2hhcGVUZXh0dXJlKHZhcmlhbmNlLCBwcmVmZXJyZWRWYXJpYW5jZVRleFNoYXBlKTtcbiAgICAgIHZhcmlhbmNlVGV4U2hhcGUgPSBwcmVmZXJyZWRWYXJpYW5jZVRleFNoYXBlO1xuICAgICAgY2xlYW51cFZhcmlhbmNlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBsZXQgc2NhbGVUZXhTaGFwZTogW251bWJlciwgbnVtYmVyXXxudWxsID0gbnVsbDtcbiAgICBsZXQgY2xlYW51cFNjYWxlID0gZmFsc2U7XG4gICAgaWYgKHNjYWxlICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IHByZWZlcnJlZFNjYWxlVGV4U2hhcGU6IFtudW1iZXIsIG51bWJlcl0gPVxuICAgICAgICAgIHNjYWxlLnJhbmsgPT09IDEgPyBbMSwgc2NhbGUuc2l6ZV0gOiB4VGV4U2hhcGU7XG5cbiAgICAgIHNjYWxlVGV4U2hhcGUgPSBzY2FsZS5nZXRUZXh0dXJlU2hhcGVSQyhwcmVmZXJyZWRTY2FsZVRleFNoYXBlKTtcbiAgICAgIGlmICghdXRpbC5hcnJheXNFcXVhbChzY2FsZVRleFNoYXBlLCBwcmVmZXJyZWRTY2FsZVRleFNoYXBlKSkge1xuICAgICAgICBzY2FsZSA9IHRoaXMucmVzaGFwZVRleHR1cmUoc2NhbGUsIHByZWZlcnJlZFNjYWxlVGV4U2hhcGUpO1xuICAgICAgICBzY2FsZVRleFNoYXBlID0gcHJlZmVycmVkU2NhbGVUZXhTaGFwZTtcbiAgICAgICAgY2xlYW51cFNjYWxlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgb2Zmc2V0VGV4U2hhcGU6IFtudW1iZXIsIG51bWJlcl18bnVsbCA9IG51bGw7XG4gICAgbGV0IGNsZWFudXBPZmZzZXQgPSBmYWxzZTtcbiAgICBpZiAob2Zmc2V0ICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IHByZWZlcnJlZE9mZnNldFRleFNoYXBlOiBbbnVtYmVyLCBudW1iZXJdID1cbiAgICAgICAgICBvZmZzZXQucmFuayA9PT0gMSA/IFsxLCBvZmZzZXQuc2l6ZV0gOiB4VGV4U2hhcGU7XG5cbiAgICAgIG9mZnNldFRleFNoYXBlID0gb2Zmc2V0LmdldFRleHR1cmVTaGFwZVJDKHByZWZlcnJlZE9mZnNldFRleFNoYXBlKTtcbiAgICAgIGlmICghdXRpbC5hcnJheXNFcXVhbChvZmZzZXRUZXhTaGFwZSwgcHJlZmVycmVkT2Zmc2V0VGV4U2hhcGUpKSB7XG4gICAgICAgIG9mZnNldCA9IHRoaXMucmVzaGFwZVRleHR1cmUob2Zmc2V0LCBwcmVmZXJyZWRPZmZzZXRUZXhTaGFwZSk7XG4gICAgICAgIG9mZnNldFRleFNoYXBlID0gcHJlZmVycmVkT2Zmc2V0VGV4U2hhcGU7XG4gICAgICAgIGNsZWFudXBPZmZzZXQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdFRleFNoYXBlOiBbbnVtYmVyLCBudW1iZXJdID0geC5nZXRUZXh0dXJlU2hhcGVSQygpO1xuXG4gICAgY29uc3QgcHJvZ3JhbSA9IHRoaXMuZ2V0QW5kU2F2ZVByb2dyYW0oXG4gICAgICAgIGAke0JBVENITk9STV9QUk9HfV8ke3hUZXhTaGFwZX1fJHttZWFuVGV4U2hhcGV9XyR7dmFyaWFuY2VUZXhTaGFwZX1fYCArXG4gICAgICAgICAgICBgJHtzY2FsZVRleFNoYXBlIX1fJHtvZmZzZXRUZXhTaGFwZSF9XyR7dmFyaWFuY2VFcHNpbG9ufWAsXG4gICAgICAgICgpID0+IGJhdGNobm9ybV9ncHUuZ2V0RnJhZ21lbnRTaGFkZXJTb3VyY2UoXG4gICAgICAgICAgICB4VGV4U2hhcGUsIG1lYW5UZXhTaGFwZSwgdmFyaWFuY2VUZXhTaGFwZSwgb2Zmc2V0VGV4U2hhcGUsXG4gICAgICAgICAgICBzY2FsZVRleFNoYXBlLCB2YXJpYW5jZUVwc2lsb24pKTtcblxuICAgIGNvbnN0IHJlc3VsdFRleHR1cmUgPSB0aGlzLnRleHR1cmVNYW5hZ2VyLmFjcXVpcmVUZXh0dXJlKHJlc3VsdFRleFNoYXBlKTtcblxuICAgIGJhdGNobm9ybV9ncHUuYmF0Y2hOb3JtYWxpemF0aW9uKFxuICAgICAgICB0aGlzLmdwZ3B1LCBwcm9ncmFtLCB4LmdldFRleHR1cmUoKSwgeFRleFNoYXBlLCBtZWFuLmdldFRleHR1cmUoKSxcbiAgICAgICAgbWVhblRleFNoYXBlLCB2YXJpYW5jZS5nZXRUZXh0dXJlKCksIHZhcmlhbmNlVGV4U2hhcGUsXG4gICAgICAgIG9mZnNldCAhPSBudWxsID8gb2Zmc2V0LmdldFRleHR1cmUoKSA6IG51bGwsXG4gICAgICAgIG9mZnNldCAhPSBudWxsID8gb2Zmc2V0VGV4U2hhcGUgOiBudWxsLFxuICAgICAgICBzY2FsZSAhPSBudWxsID8gc2NhbGUuZ2V0VGV4dHVyZSgpIDogbnVsbCxcbiAgICAgICAgc2NhbGUgIT0gbnVsbCA/IHNjYWxlVGV4U2hhcGUgOiBudWxsLCByZXN1bHRUZXh0dXJlLCByZXN1bHRUZXhTaGFwZSk7XG5cbiAgICBpZiAoY2xlYW51cE1lYW4pIHtcbiAgICAgIG1lYW4uZGlzcG9zZSgpO1xuICAgIH1cbiAgICBpZiAoY2xlYW51cFZhcmlhbmNlKSB7XG4gICAgICB2YXJpYW5jZS5kaXNwb3NlKCk7XG4gICAgfVxuICAgIGlmIChjbGVhbnVwU2NhbGUpIHtcbiAgICAgIHNjYWxlIS5kaXNwb3NlKCk7XG4gICAgfVxuICAgIGlmIChjbGVhbnVwT2Zmc2V0KSB7XG4gICAgICBvZmZzZXQhLmRpc3Bvc2UoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gTkRBcnJheS5tYWtlPEFycmF5M0Q+KFxuICAgICAgICB4LnNoYXBlLCB7dGV4dHVyZTogcmVzdWx0VGV4dHVyZSwgdGV4dHVyZVNoYXBlUkM6IHJlc3VsdFRleFNoYXBlfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc3dpdGNoRGltSW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KGE6IFQsIG5ld0RpbTogbnVtYmVyW10pOiBUIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCB5ZXQgaW1wbGVtZW50ZWQhJyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc3VtSW50ZXJuYWwobmRhcnJheTogTkRBcnJheSk6IFNjYWxhciB7XG4gICAgY29uc3QgdGV4dHVyZVNoYXBlUkMgPSBuZGFycmF5LmdldFRleHR1cmVTaGFwZVJDKCk7XG4gICAgY29uc3QgW251bVJvd3MsIG51bUNvbHVtbnNdID0gdGV4dHVyZVNoYXBlUkM7XG5cbiAgICBjb25zdCBwcm9ncmFtID0gdGhpcy5nZXRBbmRTYXZlUHJvZ3JhbShcbiAgICAgICAgYCR7U1VNX1BST0d9XyR7bnVtUm93c31fJHtudW1Db2x1bW5zfWAsXG4gICAgICAgICgpID0+IHJlZHVjZXN1bV9ncHUuZ2V0RnJhZ21lbnRTaGFkZXJTb3VyY2UobnVtUm93cywgbnVtQ29sdW1ucykpO1xuXG4gICAgY29uc3QgcmVzdWx0VGV4dHVyZSA9IHRoaXMudGV4dHVyZU1hbmFnZXIuYWNxdWlyZVRleHR1cmUoWzEsIDFdKTtcblxuICAgIHJlZHVjZXN1bV9ncHUucmVkdWNlU3VtKFxuICAgICAgICB0aGlzLmdwZ3B1LCBwcm9ncmFtLCBuZGFycmF5LmdldFRleHR1cmUoKSwgbnVtUm93cywgbnVtQ29sdW1ucyxcbiAgICAgICAgcmVzdWx0VGV4dHVyZSk7XG5cbiAgICByZXR1cm4gbmV3IFNjYWxhcih7dGV4dHVyZTogcmVzdWx0VGV4dHVyZX0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFyZ01pbkludGVybmFsKG5kYXJyYXk6IE5EQXJyYXkpOiBTY2FsYXIge1xuICAgIGNvbnN0IHRleHR1cmVTaGFwZVJDID0gbmRhcnJheS5nZXRUZXh0dXJlU2hhcGVSQygpO1xuICAgIGNvbnN0IFtudW1Sb3dzLCBudW1Db2x1bW5zXSA9IHRleHR1cmVTaGFwZVJDO1xuXG4gICAgY29uc3QgcHJvZ3JhbSA9IHRoaXMuZ2V0QW5kU2F2ZVByb2dyYW0oXG4gICAgICAgIGAke0FSR01JTl9QUk9HfV8ke251bVJvd3N9XyR7bnVtQ29sdW1uc31gLFxuICAgICAgICAoKSA9PiBhcmdtaW5tYXhfZ3B1LmdldEFyZ01pbkZyYWdtZW50U2hhZGVyU291cmNlKG51bVJvd3MsIG51bUNvbHVtbnMpKTtcblxuICAgIGNvbnN0IHJlc3VsdFRleHR1cmUgPSB0aGlzLnRleHR1cmVNYW5hZ2VyLmFjcXVpcmVUZXh0dXJlKFsxLCAxXSk7XG5cbiAgICBhcmdtaW5tYXhfZ3B1LmFyZ01pbk1heChcbiAgICAgICAgdGhpcy5ncGdwdSwgcHJvZ3JhbSwgbmRhcnJheS5nZXRUZXh0dXJlKCksIG51bVJvd3MsIG51bUNvbHVtbnMsXG4gICAgICAgIHJlc3VsdFRleHR1cmUpO1xuXG4gICAgcmV0dXJuIG5ldyBTY2FsYXIoe3RleHR1cmU6IHJlc3VsdFRleHR1cmV9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhcmdNYXhJbnRlcm5hbChuZGFycmF5OiBOREFycmF5KTogU2NhbGFyIHtcbiAgICBjb25zdCB0ZXh0dXJlU2hhcGVSQyA9IG5kYXJyYXkuZ2V0VGV4dHVyZVNoYXBlUkMoKTtcbiAgICBjb25zdCBbbnVtUm93cywgbnVtQ29sdW1uc10gPSB0ZXh0dXJlU2hhcGVSQztcblxuICAgIGNvbnN0IHByb2dyYW0gPSB0aGlzLmdldEFuZFNhdmVQcm9ncmFtKFxuICAgICAgICBgJHtBUkdNQVhfUFJPR31fJHtudW1Sb3dzfV8ke251bUNvbHVtbnN9YCxcbiAgICAgICAgKCkgPT4gYXJnbWlubWF4X2dwdS5nZXRBcmdNYXhGcmFnbWVudFNoYWRlclNvdXJjZShudW1Sb3dzLCBudW1Db2x1bW5zKSk7XG5cbiAgICBjb25zdCByZXN1bHRUZXh0dXJlID0gdGhpcy50ZXh0dXJlTWFuYWdlci5hY3F1aXJlVGV4dHVyZShbMSwgMV0pO1xuXG4gICAgYXJnbWlubWF4X2dwdS5hcmdNaW5NYXgoXG4gICAgICAgIHRoaXMuZ3BncHUsIHByb2dyYW0sIG5kYXJyYXkuZ2V0VGV4dHVyZSgpLCBudW1Sb3dzLCBudW1Db2x1bW5zLFxuICAgICAgICByZXN1bHRUZXh0dXJlKTtcblxuICAgIHJldHVybiBuZXcgU2NhbGFyKHt0ZXh0dXJlOiByZXN1bHRUZXh0dXJlfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXJnTWF4RXF1YWxzSW50ZXJuYWwoeDE6IE5EQXJyYXksIHgyOiBOREFycmF5KTogU2NhbGFyIHtcbiAgICAvLyBJZiB0aGUgdGV4dHVyZSBzaGFwZXMgZG9lc24ndCBtYXRjaCwgZG8gYSBwaHlzaWNhbCByZXNoYXBlIHNvIHRoZXkgZG8uXG4gICAgY29uc3QgYWN0dWFsWDFUZXhTaGFwZSA9IHgxLmdldFRleHR1cmVTaGFwZVJDKCk7XG4gICAgY29uc3QgYWN0dWFsWDJUZXhTaGFwZSA9IHgyLmdldFRleHR1cmVTaGFwZVJDKCk7XG4gICAgbGV0IGNsZWFudXBYMiA9IGZhbHNlO1xuICAgIGlmICghdXRpbC5hcnJheXNFcXVhbChhY3R1YWxYMVRleFNoYXBlLCBhY3R1YWxYMlRleFNoYXBlKSkge1xuICAgICAgeDIgPSB0aGlzLnJlc2hhcGVUZXh0dXJlKHgyLCBhY3R1YWxYMVRleFNoYXBlKTtcbiAgICAgIGNsZWFudXBYMiA9IHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgdGV4dHVyZVNoYXBlUkMgPSB4MS5nZXRUZXh0dXJlU2hhcGVSQygpO1xuICAgIGNvbnN0IFtudW1Sb3dzLCBudW1Db2x1bW5zXSA9IHRleHR1cmVTaGFwZVJDO1xuXG4gICAgY29uc3QgcHJvZ3JhbSA9IHRoaXMuZ2V0QW5kU2F2ZVByb2dyYW0oXG4gICAgICAgIGAke0FSR01BWF9FUVVBTFNfUFJPR31fJHtudW1Sb3dzfV8ke251bUNvbHVtbnN9YCxcbiAgICAgICAgKCkgPT4gYXJnbWF4ZXF1YWxzX2dwdS5nZXRBcmdNYXhFcXVhbHNGcmFnbWVudFNoYWRlclNvdXJjZShcbiAgICAgICAgICAgIG51bVJvd3MsIG51bUNvbHVtbnMpKTtcblxuICAgIGNvbnN0IHJlc3VsdFRleHR1cmUgPSB0aGlzLnRleHR1cmVNYW5hZ2VyLmFjcXVpcmVUZXh0dXJlKFsxLCAxXSk7XG5cbiAgICBhcmdtYXhlcXVhbHNfZ3B1LmFyZ01heEVxdWFscyhcbiAgICAgICAgdGhpcy5ncGdwdSwgcHJvZ3JhbSwgeDEuZ2V0VGV4dHVyZSgpLCB4Mi5nZXRUZXh0dXJlKCksIG51bVJvd3MsXG4gICAgICAgIG51bUNvbHVtbnMsIHJlc3VsdFRleHR1cmUpO1xuXG4gICAgaWYgKGNsZWFudXBYMikge1xuICAgICAgeDIuZGlzcG9zZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgU2NhbGFyKHt0ZXh0dXJlOiByZXN1bHRUZXh0dXJlfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdG9wS0ludGVybmFsKG5kYXJyYXk6IE5EQXJyYXksIGs6IG51bWJlcik6XG4gICAgICB7dmFsdWVzOiBBcnJheTFELCBpbmRpY2VzOiBBcnJheTFEfSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd0b3BLIEdQVSBub3QgeWV0IGltcGxlbWVudGVkIScpO1xuICB9XG5cbiAgcHJvdGVjdGVkIG1pbkludGVybmFsKG5kYXJyYXk6IE5EQXJyYXkpOiBTY2FsYXIge1xuICAgIGNvbnN0IHRleHR1cmVTaGFwZVJDID0gbmRhcnJheS5nZXRUZXh0dXJlU2hhcGVSQygpO1xuICAgIGNvbnN0IFtudW1Sb3dzLCBudW1Db2x1bW5zXSA9IHRleHR1cmVTaGFwZVJDO1xuXG4gICAgY29uc3QgcHJvZ3JhbSA9IHRoaXMuZ2V0QW5kU2F2ZVByb2dyYW0oXG4gICAgICAgIGAke01JTl9QUk9HfV8ke251bVJvd3N9XyR7bnVtQ29sdW1uc31gLFxuICAgICAgICAoKSA9PiBtaW5tYXhfZ3B1LmdldE1pbkZyYWdtZW50U2hhZGVyU291cmNlKG51bVJvd3MsIG51bUNvbHVtbnMpKTtcblxuICAgIGNvbnN0IHJlc3VsdFRleHR1cmUgPSB0aGlzLnRleHR1cmVNYW5hZ2VyLmFjcXVpcmVUZXh0dXJlKFsxLCAxXSk7XG5cbiAgICBtaW5tYXhfZ3B1Lm1pbk1heChcbiAgICAgICAgdGhpcy5ncGdwdSwgcHJvZ3JhbSwgbmRhcnJheS5nZXRUZXh0dXJlKCksIG51bVJvd3MsIG51bUNvbHVtbnMsXG4gICAgICAgIHJlc3VsdFRleHR1cmUpO1xuXG4gICAgcmV0dXJuIG5ldyBTY2FsYXIoe3RleHR1cmU6IHJlc3VsdFRleHR1cmV9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBtYXhJbnRlcm5hbChuZGFycmF5OiBOREFycmF5KTogU2NhbGFyIHtcbiAgICBjb25zdCB0ZXh0dXJlU2hhcGVSQyA9IG5kYXJyYXkuZ2V0VGV4dHVyZVNoYXBlUkMoKTtcbiAgICBjb25zdCBbbnVtUm93cywgbnVtQ29sdW1uc10gPSB0ZXh0dXJlU2hhcGVSQztcblxuICAgIGNvbnN0IHByb2dyYW0gPSB0aGlzLmdldEFuZFNhdmVQcm9ncmFtKFxuICAgICAgICBgJHtNQVhfUFJPR31fJHtudW1Sb3dzfV8ke251bUNvbHVtbnN9YCxcbiAgICAgICAgKCkgPT4gbWlubWF4X2dwdS5nZXRNYXhGcmFnbWVudFNoYWRlclNvdXJjZShudW1Sb3dzLCBudW1Db2x1bW5zKSk7XG5cbiAgICBjb25zdCByZXN1bHRUZXh0dXJlID0gdGhpcy50ZXh0dXJlTWFuYWdlci5hY3F1aXJlVGV4dHVyZShbMSwgMV0pO1xuXG4gICAgbWlubWF4X2dwdS5taW5NYXgoXG4gICAgICAgIHRoaXMuZ3BncHUsIHByb2dyYW0sIG5kYXJyYXkuZ2V0VGV4dHVyZSgpLCBudW1Sb3dzLCBudW1Db2x1bW5zLFxuICAgICAgICByZXN1bHRUZXh0dXJlKTtcblxuICAgIHJldHVybiBuZXcgU2NhbGFyKHt0ZXh0dXJlOiByZXN1bHRUZXh0dXJlfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZGl2aWRlSW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KGE6IFQsIGI6IFQpOiBUIHtcbiAgICByZXR1cm4gdGhpcy5hZGRTdWJNdWxEaXYoXG4gICAgICAgIGEsIGIsIGEuc2hhcGUsIE9wZXJhbmRUeXBlLk1BVFJJWCwgJy8nLCBPcGVyYW5kVHlwZS5NQVRSSVgpIGFzIFQ7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2NhbGFyRGl2aWRlZEJ5QXJyYXlJbnRlcm5hbDxUIGV4dGVuZHMgTkRBcnJheT4oYzogU2NhbGFyLCBhOiBUKTpcbiAgICAgIFQge1xuICAgIHJldHVybiB0aGlzLmFkZFN1Yk11bERpdihcbiAgICAgICAgICAgICAgIGMsIGEsIGEuc2hhcGUsIE9wZXJhbmRUeXBlLlNDQUxBUiwgJy8nLCBPcGVyYW5kVHlwZS5NQVRSSVgpIGFzIFQ7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXJyYXlEaXZpZGVkQnlTY2FsYXJJbnRlcm5hbDxUIGV4dGVuZHMgTkRBcnJheT4oYTogVCwgYzogU2NhbGFyKTpcbiAgICAgIFQge1xuICAgIHJldHVybiB0aGlzLmFkZFN1Yk11bERpdihcbiAgICAgICAgICAgICAgIGEsIGMsIGEuc2hhcGUsIE9wZXJhbmRUeXBlLk1BVFJJWCwgJy8nLCBPcGVyYW5kVHlwZS5TQ0FMQVIpIGFzIFQ7XG4gIH1cblxuICBwcm90ZWN0ZWQgYWRkSW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KGE6IFQsIGI6IFQpOiBUIHtcbiAgICByZXR1cm4gdGhpcy5hZGRTdWJNdWxEaXYoXG4gICAgICAgIGEsIGIsIGEuc2hhcGUsIE9wZXJhbmRUeXBlLk1BVFJJWCwgJysnLCBPcGVyYW5kVHlwZS5NQVRSSVgpIGFzIFQ7XG4gIH1cblxuICBwcm90ZWN0ZWQgc3ViSW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KGE6IFQsIGI6IFQpOiBUIHtcbiAgICByZXR1cm4gdGhpcy5hZGRTdWJNdWxEaXYoXG4gICAgICAgIGEsIGIsIGEuc2hhcGUsIE9wZXJhbmRUeXBlLk1BVFJJWCwgJy0nLCBPcGVyYW5kVHlwZS5NQVRSSVgpIGFzIFQ7XG4gIH1cblxuICBwcm90ZWN0ZWQgbG9nU3VtRXhwSW50ZXJuYWwobmRhcnJheTogTkRBcnJheSk6IFNjYWxhciB7XG4gICAgY29uc3QgW251bVJvd3MsIG51bUNvbHVtbnNdID0gbmRhcnJheS5nZXRUZXh0dXJlU2hhcGVSQygpO1xuXG4gICAgY29uc3QgcHJvZ3JhbSA9IHRoaXMuZ2V0QW5kU2F2ZVByb2dyYW0oXG4gICAgICAgIGAke0xPR1NVTUVYUF9QUk9HfV8ke251bVJvd3N9XyR7bnVtQ29sdW1uc31gLFxuICAgICAgICAoKSA9PiBsb2dzdW1leHBfZ3B1LmdldEZyYWdtZW50U2hhZGVyU291cmNlKG51bVJvd3MsIG51bUNvbHVtbnMpKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9XG4gICAgICAgIG5ldyBTY2FsYXIoe3RleHR1cmU6IHRoaXMudGV4dHVyZU1hbmFnZXIuYWNxdWlyZVRleHR1cmUoWzEsIDFdKX0pO1xuXG4gICAgcmVkdWNlc3VtX2dwdS5yZWR1Y2VTdW0oXG4gICAgICAgIHRoaXMuZ3BncHUsIHByb2dyYW0sIG5kYXJyYXkuZ2V0VGV4dHVyZSgpLCBudW1Sb3dzLCBudW1Db2x1bW5zLFxuICAgICAgICByZXN1bHQuZ2V0VGV4dHVyZSgpKTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcm90ZWN0ZWQgZXhwSW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KG5kYXJyYXk6IFQpOiBUIHtcbiAgICBjb25zdCBwcm9ncmFtID0gdGhpcy5nZXRBbmRTYXZlUHJvZ3JhbShcbiAgICAgICAgRVhQX1BST0csICgpID0+IGV4cF9ncHUuZ2V0RnJhZ21lbnRTaGFkZXJTb3VyY2UoKSk7XG5cbiAgICBjb25zdCB0ZXh0dXJlU2hhcGVSQyA9IG5kYXJyYXkuZ2V0VGV4dHVyZVNoYXBlUkMoKTtcbiAgICBjb25zdCByZXN1bHRUZXh0dXJlID0gdGhpcy50ZXh0dXJlTWFuYWdlci5hY3F1aXJlVGV4dHVyZSh0ZXh0dXJlU2hhcGVSQyk7XG5cbiAgICBleHBfZ3B1LmV4cChcbiAgICAgICAgdGhpcy5ncGdwdSwgcHJvZ3JhbSwgbmRhcnJheS5nZXRUZXh0dXJlKCksIHRleHR1cmVTaGFwZVJDWzBdLFxuICAgICAgICB0ZXh0dXJlU2hhcGVSQ1sxXSwgcmVzdWx0VGV4dHVyZSk7XG5cbiAgICByZXR1cm4gTkRBcnJheS5tYWtlPFQ+KFxuICAgICAgICBuZGFycmF5LnNoYXBlLCB7dGV4dHVyZTogcmVzdWx0VGV4dHVyZSwgdGV4dHVyZVNoYXBlUkN9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBsb2dJbnRlcm5hbDxUIGV4dGVuZHMgTkRBcnJheT4obmRhcnJheTogVCk6IFQge1xuICAgIGNvbnN0IHByb2dyYW0gPSB0aGlzLmdldEFuZFNhdmVQcm9ncmFtKFxuICAgICAgICBMT0dfUFJPRywgKCkgPT4gbG9nX2dwdS5nZXRGcmFnbWVudFNoYWRlclNvdXJjZSgpKTtcblxuICAgIGNvbnN0IHRleHR1cmVTaGFwZVJDID0gbmRhcnJheS5nZXRUZXh0dXJlU2hhcGVSQygpO1xuICAgIGNvbnN0IHJlc3VsdFRleHR1cmUgPSB0aGlzLnRleHR1cmVNYW5hZ2VyLmFjcXVpcmVUZXh0dXJlKHRleHR1cmVTaGFwZVJDKTtcbiAgICBsb2dfZ3B1LmxvZyhcbiAgICAgICAgdGhpcy5ncGdwdSwgcHJvZ3JhbSwgbmRhcnJheS5nZXRUZXh0dXJlKCksIHRleHR1cmVTaGFwZVJDWzBdLFxuICAgICAgICB0ZXh0dXJlU2hhcGVSQ1sxXSwgcmVzdWx0VGV4dHVyZSk7XG5cbiAgICByZXR1cm4gTkRBcnJheS5tYWtlPFQ+KFxuICAgICAgICBuZGFycmF5LnNoYXBlLCB7dGV4dHVyZTogcmVzdWx0VGV4dHVyZSwgdGV4dHVyZVNoYXBlUkN9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCByZWx1SW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KG5kYXJyYXk6IFQpOiBUIHtcbiAgICBjb25zdCBwcm9ncmFtID0gdGhpcy5nZXRBbmRTYXZlUHJvZ3JhbShcbiAgICAgICAgUkVMVV9QUk9HLCAoKSA9PiByZWx1X2dwdS5nZXRGcmFnbWVudFNoYWRlclNvdXJjZSgpKTtcblxuICAgIGNvbnN0IHRleHR1cmVTaGFwZVJDID0gbmRhcnJheS5nZXRUZXh0dXJlU2hhcGVSQygpO1xuICAgIGNvbnN0IHJlc3VsdFRleHR1cmUgPSB0aGlzLnRleHR1cmVNYW5hZ2VyLmFjcXVpcmVUZXh0dXJlKHRleHR1cmVTaGFwZVJDKTtcblxuICAgIHJlbHVfZ3B1LnJlbHUoXG4gICAgICAgIHRoaXMuZ3BncHUsIHByb2dyYW0sIG5kYXJyYXkuZ2V0VGV4dHVyZSgpLCB0ZXh0dXJlU2hhcGVSQ1swXSxcbiAgICAgICAgdGV4dHVyZVNoYXBlUkNbMV0sIHJlc3VsdFRleHR1cmUpO1xuXG4gICAgcmV0dXJuIE5EQXJyYXkubWFrZTxUPihcbiAgICAgICAgbmRhcnJheS5zaGFwZSwge3RleHR1cmU6IHJlc3VsdFRleHR1cmUsIHRleHR1cmVTaGFwZVJDfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2lnbW9pZEludGVybmFsPFQgZXh0ZW5kcyBOREFycmF5PihuZGFycmF5OiBUKTogVCB7XG4gICAgY29uc3QgcHJvZ3JhbSA9IHRoaXMuZ2V0QW5kU2F2ZVByb2dyYW0oXG4gICAgICAgIFNJR01PSURfUFJPRywgKCkgPT4gc2lnbW9pZF9ncHUuZ2V0U2lnbW9pZEZyYWdtZW50U2hhZGVyU291cmNlKCkpO1xuXG4gICAgY29uc3QgdGV4dHVyZVNoYXBlUkMgPSBuZGFycmF5LmdldFRleHR1cmVTaGFwZVJDKCk7XG4gICAgY29uc3QgcmVzdWx0VGV4dHVyZSA9IHRoaXMudGV4dHVyZU1hbmFnZXIuYWNxdWlyZVRleHR1cmUodGV4dHVyZVNoYXBlUkMpO1xuXG4gICAgc2lnbW9pZF9ncHUuc2lnbW9pZChcbiAgICAgICAgdGhpcy5ncGdwdSwgcHJvZ3JhbSwgbmRhcnJheS5nZXRUZXh0dXJlKCksIHRleHR1cmVTaGFwZVJDWzBdLFxuICAgICAgICB0ZXh0dXJlU2hhcGVSQ1sxXSwgcmVzdWx0VGV4dHVyZSk7XG5cbiAgICByZXR1cm4gTkRBcnJheS5tYWtlPFQ+KFxuICAgICAgICBuZGFycmF5LnNoYXBlLCB7dGV4dHVyZTogcmVzdWx0VGV4dHVyZSwgdGV4dHVyZVNoYXBlUkN9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCB0YW5oSW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KG5kYXJyYXk6IFQpOiBUIHtcbiAgICBjb25zdCBwcm9ncmFtID0gdGhpcy5nZXRBbmRTYXZlUHJvZ3JhbShcbiAgICAgICAgVEFOSF9QUk9HLCAoKSA9PiB0cmlnX2dwdS5nZXRUYW5oRnJhZ21lbnRTaGFkZXJTb3VyY2UoKSk7XG5cbiAgICBjb25zdCB0ZXh0dXJlU2hhcGVSQyA9IG5kYXJyYXkuZ2V0VGV4dHVyZVNoYXBlUkMoKTtcbiAgICBjb25zdCByZXN1bHRUZXh0dXJlID0gdGhpcy50ZXh0dXJlTWFuYWdlci5hY3F1aXJlVGV4dHVyZSh0ZXh0dXJlU2hhcGVSQyk7XG5cbiAgICB0cmlnX2dwdS50YW5oKFxuICAgICAgICB0aGlzLmdwZ3B1LCBwcm9ncmFtLCBuZGFycmF5LmdldFRleHR1cmUoKSwgdGV4dHVyZVNoYXBlUkNbMF0sXG4gICAgICAgIHRleHR1cmVTaGFwZVJDWzFdLCByZXN1bHRUZXh0dXJlKTtcblxuICAgIHJldHVybiBOREFycmF5Lm1ha2U8VD4oXG4gICAgICAgIG5kYXJyYXkuc2hhcGUsIHt0ZXh0dXJlOiByZXN1bHRUZXh0dXJlLCB0ZXh0dXJlU2hhcGVSQ30pO1xuICB9XG5cbiAgcHJvdGVjdGVkIHNpbkludGVybmFsPFQgZXh0ZW5kcyBOREFycmF5PihuZGFycmF5OiBUKTogVCB7XG4gICAgY29uc3QgcHJvZ3JhbSA9IHRoaXMuZ2V0QW5kU2F2ZVByb2dyYW0oXG4gICAgICAgIFNJTl9QUk9HLCAoKSA9PiB0cmlnX2dwdS5nZXRTaW5GcmFnbWVudFNoYWRlclNvdXJjZSgpKTtcblxuICAgIGNvbnN0IHRleHR1cmVTaGFwZVJDID0gbmRhcnJheS5nZXRUZXh0dXJlU2hhcGVSQygpO1xuICAgIGNvbnN0IHJlc3VsdFRleHR1cmUgPSB0aGlzLnRleHR1cmVNYW5hZ2VyLmFjcXVpcmVUZXh0dXJlKHRleHR1cmVTaGFwZVJDKTtcblxuICAgIHRyaWdfZ3B1LnNpbihcbiAgICAgICAgdGhpcy5ncGdwdSwgcHJvZ3JhbSwgbmRhcnJheS5nZXRUZXh0dXJlKCksIHRleHR1cmVTaGFwZVJDWzBdLFxuICAgICAgICB0ZXh0dXJlU2hhcGVSQ1sxXSwgcmVzdWx0VGV4dHVyZSk7XG5cbiAgICByZXR1cm4gTkRBcnJheS5tYWtlPFQ+KFxuICAgICAgICBuZGFycmF5LnNoYXBlLCB7dGV4dHVyZTogcmVzdWx0VGV4dHVyZSwgdGV4dHVyZVNoYXBlUkN9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzdGVwSW50ZXJuYWw8VCBleHRlbmRzIE5EQXJyYXk+KG5kYXJyYXk6IFQpOiBUIHtcbiAgICBjb25zdCBwcm9ncmFtID0gdGhpcy5nZXRBbmRTYXZlUHJvZ3JhbShcbiAgICAgICAgU1RFUF9QUk9HLCAoKSA9PiBzdGVwX2dwdS5nZXRGcmFnbWVudFNoYWRlclNvdXJjZSgpKTtcblxuICAgIGNvbnN0IHRleHR1cmVTaGFwZVJDID0gbmRhcnJheS5nZXRUZXh0dXJlU2hhcGVSQygpO1xuICAgIGNvbnN0IHJlc3VsdFRleHR1cmUgPSB0aGlzLnRleHR1cmVNYW5hZ2VyLmFjcXVpcmVUZXh0dXJlKHRleHR1cmVTaGFwZVJDKTtcblxuICAgIHN0ZXBfZ3B1LnN0ZXAoXG4gICAgICAgIHRoaXMuZ3BncHUsIHByb2dyYW0sIG5kYXJyYXkuZ2V0VGV4dHVyZSgpLCB0ZXh0dXJlU2hhcGVSQ1swXSxcbiAgICAgICAgdGV4dHVyZVNoYXBlUkNbMV0sIHJlc3VsdFRleHR1cmUpO1xuXG4gICAgcmV0dXJuIE5EQXJyYXkubWFrZTxUPihcbiAgICAgICAgbmRhcnJheS5zaGFwZSwge3RleHR1cmU6IHJlc3VsdFRleHR1cmUsIHRleHR1cmVTaGFwZVJDfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgY29udjJkSW50ZXJuYWwoXG4gICAgICB4OiBBcnJheTNELCB3ZWlnaHRzOiBBcnJheTRELCBiaWFzZXM6IEFycmF5MUR8bnVsbCwgc3RyaWRlOiBudW1iZXIsXG4gICAgICB6ZXJvUGFkOiBudW1iZXIpOiBBcnJheTNEIHtcbiAgICBjb25zdCBmaWVsZFNpemUgPSB3ZWlnaHRzLnNoYXBlWzBdO1xuICAgIGNvbnN0IGlucHV0RGVwdGggPSB3ZWlnaHRzLnNoYXBlWzJdO1xuICAgIGNvbnN0IG91dHB1dERlcHRoID0gd2VpZ2h0cy5zaGFwZVszXTtcbiAgICBjb25zdCBwcm9nS2V5ID0gW1xuICAgICAgQ09OVjJEX1BST0csIHguc2hhcGUsIG91dHB1dERlcHRoLCBmaWVsZFNpemUsIHN0cmlkZSwgYmlhc2VzICE9IG51bGxcbiAgICBdLmpvaW4oJ18nKTtcbiAgICBjb25zdCBwcm9ncmFtID0gdGhpcy5nZXRBbmRTYXZlUHJvZ3JhbShwcm9nS2V5LCAoKSA9PiB7XG4gICAgICByZXR1cm4gY29udl9ncHUuZ2V0RnJhZ21lbnRTaGFkZXJTb3VyY2UoXG4gICAgICAgICAgeC5zaGFwZSwgb3V0cHV0RGVwdGgsIGZpZWxkU2l6ZSwgc3RyaWRlLCB6ZXJvUGFkLCBiaWFzZXMgIT0gbnVsbCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCB4VGV4U2hhcGUgPSBjb252X3V0aWwuY29tcHV0ZVRleFNoYXBlRnJvbTNEKHguc2hhcGUpO1xuICAgIGNvbnN0IHdUZXhTaGFwZSA9XG4gICAgICAgIGNvbnZfdXRpbC5jb21wdXRlV2VpZ2h0c1RleFNoYXBlKGlucHV0RGVwdGgsIG91dHB1dERlcHRoLCBmaWVsZFNpemUpO1xuICAgIGNvbnN0IGJpYXNUZXhTaGFwZSA9IGNvbnZfdXRpbC5jb21wdXRlQmlhc2VzVGV4U2hhcGUob3V0cHV0RGVwdGgpO1xuXG4gICAgLy8gSWYgdGhlIHRleHR1cmUgc2hhcGVzIGRvZXNuJ3QgbWF0Y2ggdGhlIHNoYXBlcyB0aGF0IHNoYWRlcnMgZXhwZWN0LFxuICAgIC8vIGRvIHBoeXNpY2FsIHRleHR1cmUgcmVzaGFwZXMgb24gdGhlIEdQVS5cbiAgICBjb25zdCBhY3R1YWxYVGV4U2hhcGUgPSB4LmdldFRleHR1cmVTaGFwZVJDKHhUZXhTaGFwZSk7XG4gICAgbGV0IGNsZWFudXBYID0gZmFsc2U7XG4gICAgaWYgKCF1dGlsLmFycmF5c0VxdWFsKGFjdHVhbFhUZXhTaGFwZSwgeFRleFNoYXBlKSkge1xuICAgICAgeCA9IHRoaXMucmVzaGFwZVRleHR1cmUoeCwgeFRleFNoYXBlKTtcbiAgICAgIGNsZWFudXBYID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBsZXQgY2xlYW51cFcgPSBmYWxzZTtcbiAgICBjb25zdCBhY3R1YWxXVGV4U2hhcGUgPSB3ZWlnaHRzLmdldFRleHR1cmVTaGFwZVJDKHdUZXhTaGFwZSk7XG4gICAgaWYgKCF1dGlsLmFycmF5c0VxdWFsKGFjdHVhbFdUZXhTaGFwZSwgd1RleFNoYXBlKSkge1xuICAgICAgd2VpZ2h0cyA9IHRoaXMucmVzaGFwZVRleHR1cmUod2VpZ2h0cywgd1RleFNoYXBlKTtcbiAgICAgIGNsZWFudXBXID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBsZXQgY2xlYW51cEIgPSBmYWxzZTtcbiAgICBpZiAoYmlhc2VzICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IGFjdHVhbEJUZXhTaGFwZSA9IGJpYXNlcy5nZXRUZXh0dXJlU2hhcGVSQyhiaWFzVGV4U2hhcGUpO1xuICAgICAgaWYgKCF1dGlsLmFycmF5c0VxdWFsKGFjdHVhbEJUZXhTaGFwZSwgYmlhc1RleFNoYXBlKSkge1xuICAgICAgICBiaWFzZXMgPSB0aGlzLnJlc2hhcGVUZXh0dXJlKGJpYXNlcywgYmlhc1RleFNoYXBlKTtcbiAgICAgICAgY2xlYW51cEIgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdFNoYXBlID0gY29udl91dGlsLmNvbXB1dGVPdXRwdXRTaGFwZTNEKFxuICAgICAgICB4LnNoYXBlLCBmaWVsZFNpemUsIG91dHB1dERlcHRoLCBzdHJpZGUsIHplcm9QYWQpO1xuICAgIGNvbnN0IHJlc3VsdFRleFNoYXBlID0gY29udl91dGlsLmNvbXB1dGVUZXhTaGFwZUZyb20zRChyZXN1bHRTaGFwZSk7XG4gICAgY29uc3QgcmVzdWx0VGV4ID0gdGhpcy50ZXh0dXJlTWFuYWdlci5hY3F1aXJlVGV4dHVyZShyZXN1bHRUZXhTaGFwZSk7XG5cbiAgICBjb252X2dwdS5jb252b2x2ZShcbiAgICAgICAgdGhpcy5ncGdwdSwgcHJvZ3JhbSwgeC5nZXRUZXh0dXJlKCksIHdlaWdodHMuZ2V0VGV4dHVyZSgpLFxuICAgICAgICBiaWFzZXMgIT0gbnVsbCA/IGJpYXNlcy5nZXRUZXh0dXJlKCkgOiBudWxsLCByZXN1bHRUZXgsIHJlc3VsdFRleFNoYXBlKTtcblxuICAgIGlmIChjbGVhbnVwWCkge1xuICAgICAgeC5kaXNwb3NlKCk7XG4gICAgfVxuICAgIGlmIChjbGVhbnVwVykge1xuICAgICAgd2VpZ2h0cy5kaXNwb3NlKCk7XG4gICAgfVxuICAgIGlmIChjbGVhbnVwQiAmJiBiaWFzZXMgIT0gbnVsbCkge1xuICAgICAgYmlhc2VzLmRpc3Bvc2UoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gTkRBcnJheS5tYWtlPEFycmF5M0Q+KFxuICAgICAgICByZXN1bHRTaGFwZSwge3RleHR1cmU6IHJlc3VsdFRleCwgdGV4dHVyZVNoYXBlUkM6IHJlc3VsdFRleFNoYXBlfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgY29udjJkQmFja1Byb3BJbnRlcm5hbChcbiAgICAgIHg6IEFycmF5M0QsIGR5OiBBcnJheTNELCB3ZWlnaHRzOiBBcnJheTRELCBzdHJpZGU6IG51bWJlcixcbiAgICAgIHBhZDogbnVtYmVyKToge2R4OiBBcnJheTNELCBkdzogQXJyYXk0RCwgZGI6IEFycmF5MUR9IHtcbiAgICBjb25zdCBmU2l6ZSA9IHdlaWdodHMuc2hhcGVbMF07XG4gICAgY29uc3QgaW5wdXREZXB0aCA9IHdlaWdodHMuc2hhcGVbMl07XG4gICAgY29uc3Qgb3V0cHV0RGVwdGggPSB3ZWlnaHRzLnNoYXBlWzNdO1xuICAgIGNvbnN0IHhUZXhTaGFwZSA9IGNvbnZfdXRpbC5jb21wdXRlVGV4U2hhcGVGcm9tM0QoeC5zaGFwZSk7XG4gICAgY29uc3Qgd1RleFNoYXBlID1cbiAgICAgICAgY29udl91dGlsLmNvbXB1dGVXZWlnaHRzVGV4U2hhcGUoaW5wdXREZXB0aCwgb3V0cHV0RGVwdGgsIGZTaXplKTtcbiAgICBjb25zdCB5VGV4U2hhcGUgPSBjb252X3V0aWwuY29tcHV0ZVRleFNoYXBlRnJvbTNEKGR5LnNoYXBlKTtcblxuICAgIC8vIElmIHRoZSB0ZXh0dXJlIHNoYXBlcyBkb2Vzbid0IG1hdGNoIHRoZSBzaGFwZXMgdGhhdCBzaGFkZXJzIGV4cGVjdCxcbiAgICAvLyBkbyBwaHlzaWNhbCB0ZXh0dXJlIHJlc2hhcGVzIG9uIHRoZSBHUFUuXG4gICAgbGV0IGNsZWFudXBYID0gZmFsc2U7XG4gICAgY29uc3QgYWN0dWFsWFRleFNoYXBlID0geC5nZXRUZXh0dXJlU2hhcGVSQyh4VGV4U2hhcGUpO1xuICAgIGlmICghdXRpbC5hcnJheXNFcXVhbChhY3R1YWxYVGV4U2hhcGUsIHhUZXhTaGFwZSkpIHtcbiAgICAgIHggPSB0aGlzLnJlc2hhcGVUZXh0dXJlKHgsIHhUZXhTaGFwZSk7XG4gICAgICBjbGVhbnVwWCA9IHRydWU7XG4gICAgfVxuXG4gICAgbGV0IGNsZWFudXBXID0gZmFsc2U7XG4gICAgY29uc3QgYWN0dWFsV1RleFNoYXBlID0gd2VpZ2h0cy5nZXRUZXh0dXJlU2hhcGVSQyh3VGV4U2hhcGUpO1xuICAgIGlmICghdXRpbC5hcnJheXNFcXVhbChhY3R1YWxXVGV4U2hhcGUsIHdUZXhTaGFwZSkpIHtcbiAgICAgIHdlaWdodHMgPSB0aGlzLnJlc2hhcGVUZXh0dXJlKHdlaWdodHMsIHdUZXhTaGFwZSk7XG4gICAgICBjbGVhbnVwVyA9IHRydWU7XG4gICAgfVxuXG4gICAgbGV0IGNsZWFudXBZID0gZmFsc2U7XG4gICAgY29uc3QgYWN0dWFsWVRleFNoYXBlID0gZHkuZ2V0VGV4dHVyZVNoYXBlUkMoeVRleFNoYXBlKTtcbiAgICBpZiAoIXV0aWwuYXJyYXlzRXF1YWwoYWN0dWFsWVRleFNoYXBlLCB5VGV4U2hhcGUpKSB7XG4gICAgICBkeSA9IHRoaXMucmVzaGFwZVRleHR1cmUoZHksIHlUZXhTaGFwZSk7XG4gICAgICBjbGVhbnVwWSA9IHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgZHcgPSB0aGlzLmNvbnYyZERlcldlaWdodHMoeCwgZHksIGZTaXplLCBzdHJpZGUsIHBhZCk7XG4gICAgY29uc3QgZGIgPSB0aGlzLmNvbnYyZERlckJpYXMoZHkpO1xuICAgIGNvbnN0IGR4ID0gdGhpcy5jb252MmRUcmFuc3Bvc2VJbnRlcm5hbChcbiAgICAgICAgZHksIHdlaWdodHMsIG51bGwgLyoqIGJpYXNlcyAqLywgc3RyaWRlLCBwYWQpO1xuXG4gICAgaWYgKGNsZWFudXBYKSB7XG4gICAgICB4LmRpc3Bvc2UoKTtcbiAgICB9XG4gICAgaWYgKGNsZWFudXBXKSB7XG4gICAgICB3ZWlnaHRzLmRpc3Bvc2UoKTtcbiAgICB9XG4gICAgaWYgKGNsZWFudXBZKSB7XG4gICAgICBkeS5kaXNwb3NlKCk7XG4gICAgfVxuICAgIHJldHVybiB7ZHgsIGRiLCBkd307XG4gIH1cblxuICBwcm90ZWN0ZWQgY29udjJkVHJhbnNwb3NlSW50ZXJuYWwoXG4gICAgICB4OiBBcnJheTNELCB3ZWlnaHRzOiBBcnJheTRELCBiaWFzZXM6IEFycmF5MUR8bnVsbCwgb3JpZ1N0cmlkZTogbnVtYmVyLFxuICAgICAgb3JpZ1BhZDogbnVtYmVyKTogQXJyYXkzRCB7XG4gICAgY29uc3Qgb3JpZ0lucHV0RGVwdGggPSB3ZWlnaHRzLnNoYXBlWzJdO1xuICAgIGNvbnN0IG9yaWdPdXRwdXREZXB0aCA9IHdlaWdodHMuc2hhcGVbM107XG4gICAgY29uc3QgZmllbGRTaXplID0gd2VpZ2h0cy5zaGFwZVswXTtcblxuICAgIGNvbnN0IHByb2dLZXkgPSBbXG4gICAgICBDT05WMkRfVFJBTlNQT1NFX1BST0csIHguc2hhcGUsIGZpZWxkU2l6ZSwgb3JpZ0lucHV0RGVwdGgsIG9yaWdTdHJpZGUsXG4gICAgICBvcmlnUGFkLCBiaWFzZXMgIT0gbnVsbFxuICAgIF0uam9pbignXycpO1xuICAgIGNvbnN0IHByb2dyYW0gPSB0aGlzLmdldEFuZFNhdmVQcm9ncmFtKHByb2dLZXksICgpID0+IHtcbiAgICAgIHJldHVybiBjb252X2JhY2twcm9wX2dwdS5nZXRGcmFnbWVudFNoYWRlckNvbnZUcmFuc3Bvc2VTb3VyY2UoXG4gICAgICAgICAgeC5zaGFwZSwgZmllbGRTaXplLCBvcmlnSW5wdXREZXB0aCwgb3JpZ1N0cmlkZSwgb3JpZ1BhZCxcbiAgICAgICAgICBiaWFzZXMgIT0gbnVsbCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCB4VGV4U2hhcGUgPSBjb252X3V0aWwuY29tcHV0ZVRleFNoYXBlRnJvbTNEKHguc2hhcGUpO1xuICAgIGNvbnN0IHdUZXhTaGFwZSA9IGNvbnZfdXRpbC5jb21wdXRlV2VpZ2h0c1RleFNoYXBlKFxuICAgICAgICBvcmlnSW5wdXREZXB0aCwgb3JpZ091dHB1dERlcHRoLCBmaWVsZFNpemUpO1xuICAgIGNvbnN0IGJpYXNUZXhTaGFwZSA9IGNvbnZfdXRpbC5jb21wdXRlQmlhc2VzVGV4U2hhcGUob3JpZ0lucHV0RGVwdGgpO1xuXG4gICAgLy8gSWYgdGhlIHRleHR1cmUgc2hhcGVzIGRvZXNuJ3QgbWF0Y2ggdGhlIHNoYXBlcyB0aGF0IHNoYWRlcnMgZXhwZWN0LFxuICAgIC8vIGRvIHBoeXNpY2FsIHRleHR1cmUgcmVzaGFwZXMgb24gdGhlIEdQVS5cbiAgICBjb25zdCBhY3R1YWxYVGV4U2hhcGUgPSB4LmdldFRleHR1cmVTaGFwZVJDKHhUZXhTaGFwZSk7XG4gICAgbGV0IGNsZWFudXBYID0gZmFsc2U7XG4gICAgaWYgKCF1dGlsLmFycmF5c0VxdWFsKGFjdHVhbFhUZXhTaGFwZSwgeFRleFNoYXBlKSkge1xuICAgICAgeCA9IHRoaXMucmVzaGFwZVRleHR1cmUoeCwgeFRleFNoYXBlKTtcbiAgICAgIGNsZWFudXBYID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBsZXQgY2xlYW51cFcgPSBmYWxzZTtcbiAgICBjb25zdCBhY3R1YWxXVGV4U2hhcGUgPSB3ZWlnaHRzLmdldFRleHR1cmVTaGFwZVJDKHdUZXhTaGFwZSk7XG4gICAgaWYgKCF1dGlsLmFycmF5c0VxdWFsKGFjdHVhbFdUZXhTaGFwZSwgd1RleFNoYXBlKSkge1xuICAgICAgd2VpZ2h0cyA9IHRoaXMucmVzaGFwZVRleHR1cmUod2VpZ2h0cywgd1RleFNoYXBlKTtcbiAgICAgIGNsZWFudXBXID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBsZXQgY2xlYW51cEIgPSBmYWxzZTtcbiAgICBpZiAoYmlhc2VzICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IGFjdHVhbEJpYXNUZXhTaGFwZSA9IGJpYXNlcy5nZXRUZXh0dXJlU2hhcGVSQyhiaWFzVGV4U2hhcGUpO1xuICAgICAgaWYgKCF1dGlsLmFycmF5c0VxdWFsKGFjdHVhbEJpYXNUZXhTaGFwZSwgYmlhc1RleFNoYXBlKSkge1xuICAgICAgICBiaWFzZXMgPSB0aGlzLnJlc2hhcGVUZXh0dXJlKGJpYXNlcywgYmlhc1RleFNoYXBlKTtcbiAgICAgICAgY2xlYW51cEIgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpZ3VyZSBvdXQgdGhlIG91dHB1dCBzaGFwZSBieSBkaWxhdGluZyB0aGUgaW5wdXQuXG4gICAgY29uc3QgZGlsYXRlZFJDID1cbiAgICAgICAgY29udl91dGlsLmNvbXB1dGVEaWxhdGVkUkMoW3guc2hhcGVbMF0sIHguc2hhcGVbMV1dLCBvcmlnU3RyaWRlKTtcbiAgICBjb25zdCBwYWQgPSBmaWVsZFNpemUgLSAxIC0gb3JpZ1BhZDtcbiAgICBjb25zdCByZXN1bHRTaGFwZSA9IGNvbnZfdXRpbC5jb21wdXRlT3V0cHV0U2hhcGUzRChcbiAgICAgICAgW2RpbGF0ZWRSQ1swXSwgZGlsYXRlZFJDWzFdLCBvcmlnT3V0cHV0RGVwdGhdLCBmaWVsZFNpemUsXG4gICAgICAgIG9yaWdJbnB1dERlcHRoLCAxLCBwYWQpO1xuICAgIGNvbnN0IHJlc3VsdFRleFNoYXBlID0gY29udl91dGlsLmNvbXB1dGVUZXhTaGFwZUZyb20zRChyZXN1bHRTaGFwZSk7XG4gICAgY29uc3QgcmVzdWx0VGV4ID0gdGhpcy50ZXh0dXJlTWFuYWdlci5hY3F1aXJlVGV4dHVyZShyZXN1bHRUZXhTaGFwZSk7XG5cbiAgICBjb252X2JhY2twcm9wX2dwdS5jb252VHJhbnNwb3NlKFxuICAgICAgICB0aGlzLmdwZ3B1LCBwcm9ncmFtLCB4LmdldFRleHR1cmUoKSwgd2VpZ2h0cy5nZXRUZXh0dXJlKCksXG4gICAgICAgIGJpYXNlcyAhPSBudWxsID8gYmlhc2VzLmdldFRleHR1cmUoKSA6IG51bGwsIHJlc3VsdFRleCwgcmVzdWx0VGV4U2hhcGUpO1xuXG4gICAgaWYgKGNsZWFudXBYKSB7XG4gICAgICB4LmRpc3Bvc2UoKTtcbiAgICB9XG4gICAgaWYgKGNsZWFudXBXKSB7XG4gICAgICB3ZWlnaHRzLmRpc3Bvc2UoKTtcbiAgICB9XG4gICAgaWYgKGNsZWFudXBCKSB7XG4gICAgICBiaWFzZXMhLmRpc3Bvc2UoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gTkRBcnJheS5tYWtlPEFycmF5M0Q+KFxuICAgICAgICByZXN1bHRTaGFwZSwge3RleHR1cmU6IHJlc3VsdFRleCwgdGV4dHVyZVNoYXBlUkM6IHJlc3VsdFRleFNoYXBlfSk7XG4gIH1cblxuICBjb252MmREZXJXZWlnaHRzKFxuICAgICAgeDogQXJyYXkzRCwgZFk6IEFycmF5M0QsIGZTaXplOiBudW1iZXIsIHN0cmlkZTogbnVtYmVyLFxuICAgICAgemVyb1BhZDogbnVtYmVyKTogQXJyYXk0RCB7XG4gICAgY29uc3QgaW5wdXREZXB0aCA9IHguc2hhcGVbMl07XG4gICAgY29uc3Qgb3V0cHV0RGVwdGggPSBkWS5zaGFwZVsyXTtcbiAgICBjb25zdCBwcm9nS2V5ID0gW1xuICAgICAgQ09OVjJEX0RFUldfUFJPRywgeC5zaGFwZSwgZlNpemUsIG91dHB1dERlcHRoLCBzdHJpZGUsIHplcm9QYWRcbiAgICBdLmpvaW4oJ18nKTtcbiAgICBjb25zdCBwcm9ncmFtID0gdGhpcy5nZXRBbmRTYXZlUHJvZ3JhbShwcm9nS2V5LCAoKSA9PiB7XG4gICAgICByZXR1cm4gY29udl9iYWNrcHJvcF9ncHUuZ2V0RnJhZ21lbnRTaGFkZXJEZXJXZWlnaHRzU291cmNlKFxuICAgICAgICAgIHguc2hhcGUsIGZTaXplLCBvdXRwdXREZXB0aCwgc3RyaWRlLCB6ZXJvUGFkKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHhUZXhTaGFwZSA9IGNvbnZfdXRpbC5jb21wdXRlVGV4U2hhcGVGcm9tM0QoeC5zaGFwZSk7XG4gICAgY29uc3QgeVNoYXBlID0gY29udl91dGlsLmNvbXB1dGVPdXRwdXRTaGFwZTNEKFxuICAgICAgICB4LnNoYXBlLCBmU2l6ZSwgb3V0cHV0RGVwdGgsIHN0cmlkZSwgemVyb1BhZCk7XG4gICAgY29uc3QgeVRleFNoYXBlID0gY29udl91dGlsLmNvbXB1dGVUZXhTaGFwZUZyb20zRCh5U2hhcGUpO1xuXG4gICAgLy8gSWYgdGhlIHRleHR1cmUgc2hhcGVzIGRvZXNuJ3QgbWF0Y2ggdGhlIHNoYXBlcyB0aGF0IHNoYWRlcnMgZXhwZWN0LFxuICAgIC8vIGRvIHBoeXNpY2FsIHRleHR1cmUgcmVzaGFwZXMgb24gdGhlIEdQVS5cbiAgICBjb25zdCBhY3R1YWxYVGV4U2hhcGUgPSB4LmdldFRleHR1cmVTaGFwZVJDKHhUZXhTaGFwZSk7XG4gICAgbGV0IGNsZWFudXBYID0gZmFsc2U7XG4gICAgaWYgKCF1dGlsLmFycmF5c0VxdWFsKGFjdHVhbFhUZXhTaGFwZSwgeFRleFNoYXBlKSkge1xuICAgICAgeCA9IHRoaXMucmVzaGFwZVRleHR1cmUoeCwgeFRleFNoYXBlKTtcbiAgICAgIGNsZWFudXBYID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBsZXQgY2xlYW51cFkgPSBmYWxzZTtcbiAgICBjb25zdCBhY3R1YWxZVGV4U2hhcGUgPSBkWS5nZXRUZXh0dXJlU2hhcGVSQyh5VGV4U2hhcGUpO1xuICAgIGlmICghdXRpbC5hcnJheXNFcXVhbChhY3R1YWxZVGV4U2hhcGUsIHlUZXhTaGFwZSkpIHtcbiAgICAgIGRZID0gdGhpcy5yZXNoYXBlVGV4dHVyZShkWSwgeVRleFNoYXBlKTtcbiAgICAgIGNsZWFudXBZID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHRUZXhTaGFwZSA9XG4gICAgICAgIGNvbnZfdXRpbC5jb21wdXRlV2VpZ2h0c1RleFNoYXBlKGlucHV0RGVwdGgsIG91dHB1dERlcHRoLCBmU2l6ZSk7XG4gICAgY29uc3QgcmVzdWx0VGV4ID0gdGhpcy50ZXh0dXJlTWFuYWdlci5hY3F1aXJlVGV4dHVyZShyZXN1bHRUZXhTaGFwZSk7XG5cbiAgICBjb252X2JhY2twcm9wX2dwdS5kZXJXZWlnaHRzKFxuICAgICAgICB0aGlzLmdwZ3B1LCBwcm9ncmFtLCB4LmdldFRleHR1cmUoKSwgZFkuZ2V0VGV4dHVyZSgpLCByZXN1bHRUZXgsXG4gICAgICAgIHJlc3VsdFRleFNoYXBlKTtcblxuICAgIGlmIChjbGVhbnVwWCkge1xuICAgICAgeC5kaXNwb3NlKCk7XG4gICAgfVxuICAgIGlmIChjbGVhbnVwWSkge1xuICAgICAgZFkuZGlzcG9zZSgpO1xuICAgIH1cblxuICAgIGNvbnN0IHdlaWdodHNTaGFwZSA9XG4gICAgICAgIGNvbnZfdXRpbC5jb21wdXRlV2VpZ2h0c1NoYXBlNEQoaW5wdXREZXB0aCwgb3V0cHV0RGVwdGgsIGZTaXplKTtcbiAgICByZXR1cm4gTkRBcnJheS5tYWtlPEFycmF5NEQ+KFxuICAgICAgICB3ZWlnaHRzU2hhcGUsIHt0ZXh0dXJlOiByZXN1bHRUZXgsIHRleHR1cmVTaGFwZVJDOiByZXN1bHRUZXhTaGFwZX0pO1xuICB9XG5cbiAgY29udjJkRGVyQmlhcyhkWTogQXJyYXkzRCk6IEFycmF5MUQge1xuICAgIGNvbnN0IG91dHB1dERlcHRoID0gZFkuc2hhcGVbMl07XG4gICAgY29uc3QgcHJvZ0tleSA9IFtDT05WMkRfREVSQl9QUk9HLCBkWS5zaGFwZV0uam9pbignXycpO1xuICAgIGNvbnN0IHByb2dyYW0gPSB0aGlzLmdldEFuZFNhdmVQcm9ncmFtKHByb2dLZXksICgpID0+IHtcbiAgICAgIHJldHVybiBjb252X2JhY2twcm9wX2dwdS5nZXRGcmFnbWVudFNoYWRlckRlckJpYXNTb3VyY2UoZFkuc2hhcGUpO1xuICAgIH0pO1xuICAgIGNvbnN0IHlUZXhTaGFwZSA9IGNvbnZfdXRpbC5jb21wdXRlVGV4U2hhcGVGcm9tM0QoZFkuc2hhcGUpO1xuXG4gICAgLy8gSWYgdGhlIHRleHR1cmUgc2hhcGVzIGRvZXNuJ3QgbWF0Y2ggdGhlIHNoYXBlcyB0aGF0IHNoYWRlcnMgZXhwZWN0LFxuICAgIC8vIGRvIHBoeXNpY2FsIHRleHR1cmUgcmVzaGFwZXMgb24gdGhlIEdQVS5cbiAgICBsZXQgY2xlYW51cFkgPSBmYWxzZTtcbiAgICBjb25zdCBhY3R1YWxZVGV4U2hhcGUgPSBkWS5nZXRUZXh0dXJlU2hhcGVSQyh5VGV4U2hhcGUpO1xuICAgIGlmICghdXRpbC5hcnJheXNFcXVhbChhY3R1YWxZVGV4U2hhcGUsIHlUZXhTaGFwZSkpIHtcbiAgICAgIGRZID0gdGhpcy5yZXNoYXBlVGV4dHVyZShkWSwgeVRleFNoYXBlKTtcbiAgICAgIGNsZWFudXBZID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHRUZXhTaGFwZSA9IGNvbnZfdXRpbC5jb21wdXRlQmlhc2VzVGV4U2hhcGUob3V0cHV0RGVwdGgpO1xuICAgIGNvbnN0IHJlc3VsdFRleCA9IHRoaXMudGV4dHVyZU1hbmFnZXIuYWNxdWlyZVRleHR1cmUocmVzdWx0VGV4U2hhcGUpO1xuXG4gICAgY29udl9iYWNrcHJvcF9ncHUuZGVyQmlhcyhcbiAgICAgICAgdGhpcy5ncGdwdSwgcHJvZ3JhbSwgZFkuZ2V0VGV4dHVyZSgpLCByZXN1bHRUZXgsIHJlc3VsdFRleFNoYXBlKTtcblxuICAgIGlmIChjbGVhbnVwWSkge1xuICAgICAgZFkuZGlzcG9zZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBOREFycmF5Lm1ha2U8QXJyYXkxRD4oXG4gICAgICAgIFtvdXRwdXREZXB0aF0sIHt0ZXh0dXJlOiByZXN1bHRUZXgsIHRleHR1cmVTaGFwZVJDOiByZXN1bHRUZXhTaGFwZX0pO1xuICB9XG5cbiAgcHJpdmF0ZSBwb29sKFxuICAgICAgcHJvZ3JhbTogV2ViR0xQcm9ncmFtLCB4OiBBcnJheTNELCBmU2l6ZTogbnVtYmVyLCBzdHJpZGU6IG51bWJlcixcbiAgICAgIHBhZDogbnVtYmVyKTogQXJyYXkzRCB7XG4gICAgY29uc3QgeFRleFNoYXBlID0gY29udl91dGlsLmNvbXB1dGVUZXhTaGFwZUZyb20zRCh4LnNoYXBlKTtcblxuICAgIC8vIElmIHRoZSB0ZXh0dXJlIHNoYXBlcyBkb2Vzbid0IG1hdGNoIHRoZSBzaGFwZXMgdGhhdCBzaGFkZXJzIGV4cGVjdCxcbiAgICAvLyBkbyBwaHlzaWNhbCB0ZXh0dXJlIHJlc2hhcGVzIG9uIHRoZSBHUFUuXG4gICAgY29uc3QgYWN0dWFsWFRleFNoYXBlID0geC5nZXRUZXh0dXJlU2hhcGVSQyh4VGV4U2hhcGUpO1xuICAgIGxldCBjbGVhbnVwWCA9IGZhbHNlO1xuICAgIGlmICghdXRpbC5hcnJheXNFcXVhbChhY3R1YWxYVGV4U2hhcGUsIHhUZXhTaGFwZSkpIHtcbiAgICAgIHggPSB0aGlzLnJlc2hhcGVUZXh0dXJlKHgsIHhUZXhTaGFwZSk7XG4gICAgICBjbGVhbnVwWCA9IHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0U2hhcGUgPVxuICAgICAgICBjb252X3V0aWwuY29tcHV0ZU91dHB1dFNoYXBlM0QoeC5zaGFwZSwgZlNpemUsIHguc2hhcGVbMl0sIHN0cmlkZSwgcGFkKTtcbiAgICBjb25zdCByZXN1bHRUZXhTaGFwZSA9IGNvbnZfdXRpbC5jb21wdXRlVGV4U2hhcGVGcm9tM0QocmVzdWx0U2hhcGUpO1xuICAgIGNvbnN0IHBvb2xSZXN1bHRUZXggPSB0aGlzLnRleHR1cmVNYW5hZ2VyLmFjcXVpcmVUZXh0dXJlKHJlc3VsdFRleFNoYXBlKTtcblxuICAgIHBvb2xfZ3B1LnBvb2xDb21tb24oXG4gICAgICAgIHRoaXMuZ3BncHUsIHByb2dyYW0sIHguZ2V0VGV4dHVyZSgpLCBwb29sUmVzdWx0VGV4LCByZXN1bHRUZXhTaGFwZSk7XG5cbiAgICBpZiAoY2xlYW51cFgpIHtcbiAgICAgIHguZGlzcG9zZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBOREFycmF5Lm1ha2U8QXJyYXkzRD4oXG4gICAgICAgIHJlc3VsdFNoYXBlLCB7dGV4dHVyZTogcG9vbFJlc3VsdFRleCwgdGV4dHVyZVNoYXBlUkM6IHJlc3VsdFRleFNoYXBlfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgbWF4UG9vbEludGVybmFsKFxuICAgICAgeDogQXJyYXkzRCwgZlNpemU6IG51bWJlciwgc3RyaWRlOiBudW1iZXIsIHBhZDogbnVtYmVyKTogQXJyYXkzRCB7XG4gICAgY29uc3QgbWF4UG9vbFByb2dLZXkgPVxuICAgICAgICBbTUFYX1BPT0xfUFJPRywgeC5zaGFwZSwgZlNpemUsIHN0cmlkZSwgcGFkXS5qb2luKCdfJyk7XG4gICAgY29uc3QgbWF4UG9vbFByb2dyYW0gPSB0aGlzLmdldEFuZFNhdmVQcm9ncmFtKG1heFBvb2xQcm9nS2V5LCAoKSA9PiB7XG4gICAgICByZXR1cm4gbWF4X3Bvb2xfZ3B1LmdldEZyYWdtZW50U2hhZGVyTWF4UG9vbFNvdXJjZShcbiAgICAgICAgICB4LnNoYXBlLCBmU2l6ZSwgc3RyaWRlLCBwYWQpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMucG9vbChtYXhQb29sUHJvZ3JhbSwgeCwgZlNpemUsIHN0cmlkZSwgcGFkKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBtaW5Qb29sSW50ZXJuYWwoXG4gICAgICB4OiBBcnJheTNELCBmU2l6ZTogbnVtYmVyLCBzdHJpZGU6IG51bWJlciwgcGFkOiBudW1iZXIpOiBBcnJheTNEIHtcbiAgICBjb25zdCBtaW5Qb29sUHJvZ0tleSA9XG4gICAgICAgIFtNSU5fUE9PTF9QUk9HLCB4LnNoYXBlLCBmU2l6ZSwgc3RyaWRlLCBwYWRdLmpvaW4oJ18nKTtcbiAgICBjb25zdCBtaW5Qb29sUHJvZ3JhbSA9IHRoaXMuZ2V0QW5kU2F2ZVByb2dyYW0obWluUG9vbFByb2dLZXksICgpID0+IHtcbiAgICAgIHJldHVybiBtaW5fcG9vbF9ncHUuZ2V0RnJhZ21lbnRTaGFkZXJNaW5Qb29sU291cmNlKFxuICAgICAgICAgIHguc2hhcGUsIGZTaXplLCBzdHJpZGUsIHBhZCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcy5wb29sKG1pblBvb2xQcm9ncmFtLCB4LCBmU2l6ZSwgc3RyaWRlLCBwYWQpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGF2Z1Bvb2xJbnRlcm5hbChcbiAgICAgIHg6IEFycmF5M0QsIGZTaXplOiBudW1iZXIsIHN0cmlkZTogbnVtYmVyLCBwYWQ6IG51bWJlcik6IEFycmF5M0Qge1xuICAgIGNvbnN0IGF2Z1Bvb2xQcm9nS2V5ID1cbiAgICAgICAgW0FWR19QT09MX1BST0csIHguc2hhcGUsIGZTaXplLCBzdHJpZGUsIHBhZF0uam9pbignXycpO1xuICAgIGNvbnN0IGF2Z1Bvb2xQcm9ncmFtID0gdGhpcy5nZXRBbmRTYXZlUHJvZ3JhbShhdmdQb29sUHJvZ0tleSwgKCkgPT4ge1xuICAgICAgcmV0dXJuIGF2Z19wb29sX2dwdS5nZXRGcmFnbWVudFNoYWRlckF2Z1Bvb2xTb3VyY2UoXG4gICAgICAgICAgeC5zaGFwZSwgZlNpemUsIHN0cmlkZSwgcGFkKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzLnBvb2woYXZnUG9vbFByb2dyYW0sIHgsIGZTaXplLCBzdHJpZGUsIHBhZCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgbWF4UG9vbEJhY2twcm9wSW50ZXJuYWwoXG4gICAgICBkeTogQXJyYXkzRCwgeDogQXJyYXkzRCwgZlNpemU6IG51bWJlciwgb3JpZ1N0cmlkZTogbnVtYmVyLFxuICAgICAgb3JpZ1BhZDogbnVtYmVyKTogQXJyYXkzRCB7XG4gICAgY29uc3QgbWF4UG9vbFBvc2l0aW9uc1Byb2dLZXkgPSBbXG4gICAgICBNQVhfUE9PTF9QT1NJVElPTlNfUFJPRywgeC5zaGFwZSwgZlNpemUsIG9yaWdTdHJpZGUsIG9yaWdQYWRcbiAgICBdLmpvaW4oJ18nKTtcbiAgICBjb25zdCBtYXhQb29sUG9zaXRpb25zUHJvZ3JhbSA9XG4gICAgICAgIHRoaXMuZ2V0QW5kU2F2ZVByb2dyYW0obWF4UG9vbFBvc2l0aW9uc1Byb2dLZXksICgpID0+IHtcbiAgICAgICAgICByZXR1cm4gbWF4X3Bvb2xfZ3B1LmdldEZyYWdtZW50U2hhZGVyTWF4UG9vbFBvc2l0aW9uc1NvdXJjZShcbiAgICAgICAgICAgICAgeC5zaGFwZSwgZlNpemUsIG9yaWdTdHJpZGUsIG9yaWdQYWQpO1xuICAgICAgICB9KTtcblxuICAgIGNvbnN0IG1heFBvb2xSZXN1bHRTaGFwZSA9IGNvbnZfdXRpbC5jb21wdXRlT3V0cHV0U2hhcGUzRChcbiAgICAgICAgeC5zaGFwZSwgZlNpemUsIHguc2hhcGVbMl0sIG9yaWdTdHJpZGUsIG9yaWdQYWQpO1xuICAgIGNvbnN0IG1heFBvb2xSZXN1bHRUZXhTaGFwZSA9XG4gICAgICAgIGNvbnZfdXRpbC5jb21wdXRlVGV4U2hhcGVGcm9tM0QobWF4UG9vbFJlc3VsdFNoYXBlKTtcbiAgICBjb25zdCBtYXhQb29sUG9zaXRpb25zUmVzdWx0VGV4ID1cbiAgICAgICAgdGhpcy50ZXh0dXJlTWFuYWdlci5hY3F1aXJlVGV4dHVyZShtYXhQb29sUmVzdWx0VGV4U2hhcGUpO1xuICAgIC8vIElmIHRoZSB0ZXh0dXJlIHNoYXBlcyBkb2Vzbid0IG1hdGNoIHRoZSBzaGFwZXMgdGhhdCBzaGFkZXJzIGV4cGVjdCxcbiAgICAvLyBkbyBwaHlzaWNhbCB0ZXh0dXJlIHJlc2hhcGVzIG9uIHRoZSBHUFUuXG4gICAgY29uc3QgeFRleFNoYXBlID0gY29udl91dGlsLmNvbXB1dGVUZXhTaGFwZUZyb20zRCh4LnNoYXBlKTtcbiAgICBjb25zdCBhY3R1YWxYVGV4U2hhcGUgPSB4LmdldFRleHR1cmVTaGFwZVJDKHhUZXhTaGFwZSk7XG4gICAgbGV0IGNsZWFudXBYID0gZmFsc2U7XG4gICAgaWYgKCF1dGlsLmFycmF5c0VxdWFsKGFjdHVhbFhUZXhTaGFwZSwgeFRleFNoYXBlKSkge1xuICAgICAgeCA9IHRoaXMucmVzaGFwZVRleHR1cmUoeCwgeFRleFNoYXBlKTtcbiAgICAgIGNsZWFudXBYID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBtYXhfcG9vbF9ncHUubWF4UG9vbENvbW1vbihcbiAgICAgICAgdGhpcy5ncGdwdSwgbWF4UG9vbFBvc2l0aW9uc1Byb2dyYW0sIHguZ2V0VGV4dHVyZSgpLFxuICAgICAgICBtYXhQb29sUG9zaXRpb25zUmVzdWx0VGV4LCBtYXhQb29sUmVzdWx0VGV4U2hhcGUpO1xuXG4gICAgY29uc3QgbWF4UG9vbEJhY2twcm9wUHJvZ0tleSA9IFtcbiAgICAgIE1BWF9QT09MX0JBQ0tQUk9QX1BST0csIGR5LnNoYXBlLCBmU2l6ZSwgb3JpZ1N0cmlkZSwgb3JpZ1BhZFxuICAgIF0uam9pbignXycpO1xuICAgIGNvbnN0IHByb2dyYW0gPSB0aGlzLmdldEFuZFNhdmVQcm9ncmFtKG1heFBvb2xCYWNrcHJvcFByb2dLZXksICgpID0+IHtcbiAgICAgIHJldHVybiBtYXhfcG9vbF9iYWNrcHJvcF9ncHUuZ2V0RnJhZ21lbnRTaGFkZXJNYXhQb29sQmFja3Byb3AoXG4gICAgICAgICAgZHkuc2hhcGUsIGZTaXplLCBvcmlnU3RyaWRlLCBvcmlnUGFkKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGR5VGV4U2hhcGUgPSBjb252X3V0aWwuY29tcHV0ZVRleFNoYXBlRnJvbTNEKGR5LnNoYXBlKTtcblxuICAgIC8vIElmIHRoZSB0ZXh0dXJlIHNoYXBlcyBkb2Vzbid0IG1hdGNoIHRoZSBzaGFwZXMgdGhhdCBzaGFkZXJzIGV4cGVjdCxcbiAgICAvLyBkbyBwaHlzaWNhbCB0ZXh0dXJlIHJlc2hhcGVzIG9uIHRoZSBHUFUuXG4gICAgY29uc3QgYWN0dWFsRHlUZXhTaGFwZSA9IGR5LmdldFRleHR1cmVTaGFwZVJDKGR5VGV4U2hhcGUpO1xuICAgIGxldCBjbGVhbnVwRHkgPSBmYWxzZTtcbiAgICBpZiAoIXV0aWwuYXJyYXlzRXF1YWwoYWN0dWFsRHlUZXhTaGFwZSwgZHlUZXhTaGFwZSkpIHtcbiAgICAgIGR5ID0gdGhpcy5yZXNoYXBlVGV4dHVyZShkeSwgZHlUZXhTaGFwZSk7XG4gICAgICBjbGVhbnVwRHkgPSB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IGRpbGF0ZWREeVJDID1cbiAgICAgICAgY29udl91dGlsLmNvbXB1dGVEaWxhdGVkUkMoW2R5LnNoYXBlWzBdLCBkeS5zaGFwZVsxXV0sIG9yaWdTdHJpZGUpO1xuICAgIGNvbnN0IHBhZCA9IGZTaXplIC0gMSAtIG9yaWdQYWQ7XG4gICAgY29uc3QgcmVzdWx0U2hhcGVSQ0QgPSBjb252X3V0aWwuY29tcHV0ZU91dHB1dFNoYXBlM0QoXG4gICAgICAgIFtkaWxhdGVkRHlSQ1swXSwgZGlsYXRlZER5UkNbMV0sIGR5LnNoYXBlWzJdXSwgZlNpemUsIGR5LnNoYXBlWzJdLCAxLFxuICAgICAgICBwYWQpO1xuICAgIGNvbnN0IHJlc3VsdFRleFNoYXBlID0gY29udl91dGlsLmNvbXB1dGVUZXhTaGFwZUZyb20zRChyZXN1bHRTaGFwZVJDRCk7XG4gICAgY29uc3QgcmVzdWx0VGV4ID0gdGhpcy50ZXh0dXJlTWFuYWdlci5hY3F1aXJlVGV4dHVyZShyZXN1bHRUZXhTaGFwZSk7XG5cbiAgICBtYXhfcG9vbF9iYWNrcHJvcF9ncHUubWF4UG9vbEJhY2twcm9wKFxuICAgICAgICB0aGlzLmdwZ3B1LCBwcm9ncmFtLCBkeS5nZXRUZXh0dXJlKCksIG1heFBvb2xQb3NpdGlvbnNSZXN1bHRUZXgsXG4gICAgICAgIHJlc3VsdFRleCwgcmVzdWx0VGV4U2hhcGUpO1xuXG4gICAgaWYgKGNsZWFudXBEeSkge1xuICAgICAgZHkuZGlzcG9zZSgpO1xuICAgIH1cblxuICAgIGlmIChjbGVhbnVwWCkge1xuICAgICAgeC5kaXNwb3NlKCk7XG4gICAgfVxuXG4gICAgdGhpcy50ZXh0dXJlTWFuYWdlci5yZWxlYXNlVGV4dHVyZShcbiAgICAgICAgbWF4UG9vbFBvc2l0aW9uc1Jlc3VsdFRleCwgbWF4UG9vbFJlc3VsdFRleFNoYXBlKTtcblxuICAgIHJldHVybiBOREFycmF5Lm1ha2U8QXJyYXkzRD4oXG4gICAgICAgIHJlc3VsdFNoYXBlUkNELCB7dGV4dHVyZTogcmVzdWx0VGV4LCB0ZXh0dXJlU2hhcGVSQzogcmVzdWx0VGV4U2hhcGV9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCByZXNpemVCaWxpbmVhcjNESW50ZXJuYWwoXG4gICAgICB4OiBBcnJheTNELCBuZXdTaGFwZTJEOiBbbnVtYmVyLCBudW1iZXJdLFxuICAgICAgYWxpZ25Db3JuZXJzOiBib29sZWFuKTogQXJyYXkzRCB7XG4gICAgY29uc3QgcHJvZ3JhbUtleSA9XG4gICAgICAgIFtSRVNJWkVfQklMSU5FQVJfUFJPRywgeC5zaGFwZSwgbmV3U2hhcGUyRCwgYWxpZ25Db3JuZXJzXS5qb2luKCdfJyk7XG5cbiAgICBjb25zdCBuZXdTaGFwZVJDRDogW251bWJlciwgbnVtYmVyLCBudW1iZXJdID1cbiAgICAgICAgW25ld1NoYXBlMkRbMF0sIG5ld1NoYXBlMkRbMV0sIHguc2hhcGVbMl1dO1xuICAgIGNvbnN0IHJlc3VsdFRleFNoYXBlID0gY29udl91dGlsLmNvbXB1dGVUZXhTaGFwZUZyb20zRChuZXdTaGFwZVJDRCk7XG5cbiAgICBjb25zdCBwcm9ncmFtID0gdGhpcy5nZXRBbmRTYXZlUHJvZ3JhbShcbiAgICAgICAgcHJvZ3JhbUtleSxcbiAgICAgICAgKCkgPT4gcmVzaXplX2JpbGluZWFyX2dwdS5nZXRGcmFnbWVudFNoYWRlclNvdXJjZShcbiAgICAgICAgICAgIHguc2hhcGUsIG5ld1NoYXBlMkQsIGFsaWduQ29ybmVycykpO1xuXG4gICAgY29uc3QgcmVzdWx0VGV4dHVyZSA9IHRoaXMudGV4dHVyZU1hbmFnZXIuYWNxdWlyZVRleHR1cmUocmVzdWx0VGV4U2hhcGUpO1xuXG4gICAgcmVzaXplX2JpbGluZWFyX2dwdS5yZXNpemVCaWxpbmVhcihcbiAgICAgICAgdGhpcy5ncGdwdSwgcHJvZ3JhbSwgeC5nZXRUZXh0dXJlKCksIHJlc3VsdFRleHR1cmUsIHJlc3VsdFRleFNoYXBlKTtcblxuICAgIHJldHVybiBOREFycmF5Lm1ha2U8QXJyYXkzRD4oXG4gICAgICAgIG5ld1NoYXBlUkNELCB7dGV4dHVyZTogcmVzdWx0VGV4dHVyZSwgdGV4dHVyZVNoYXBlUkM6IHJlc3VsdFRleFNoYXBlfSk7XG4gIH1cblxuICBwcml2YXRlIGdldEFuZFNhdmVQcm9ncmFtKHByb2dyYW1LZXk6IHN0cmluZywgZ2V0U2hhZGVyU291cmNlOiAoKSA9PiBzdHJpbmcpOlxuICAgICAgV2ViR0xQcm9ncmFtIHtcbiAgICBpZiAoIShwcm9ncmFtS2V5IGluIHRoaXMucHJvZ3JhbUNhY2hlKSkge1xuICAgICAgdGhpcy5wcm9ncmFtQ2FjaGVbcHJvZ3JhbUtleV0gPVxuICAgICAgICAgIHRoaXMuZ3BncHUuY3JlYXRlUHJvZ3JhbShnZXRTaGFkZXJTb3VyY2UoKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnByb2dyYW1DYWNoZVtwcm9ncmFtS2V5XTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkU3ViTXVsRGl2KFxuICAgICAgYTogTkRBcnJheSwgYjogTkRBcnJheSwgcmVzdWx0U2hhcGU6IG51bWJlcltdLFxuICAgICAgb3BlcmFuZEE6IGFkZHN1Ym11bGRpdl9ncHUuT3BlcmFuZFR5cGUsXG4gICAgICBvcFR5cGU6IGFkZHN1Ym11bGRpdl9ncHUuT3BlcmF0aW9uLFxuICAgICAgb3BlcmFuZEI6IGFkZHN1Ym11bGRpdl9ncHUuT3BlcmFuZFR5cGUpOiBOREFycmF5IHtcbiAgICBsZXQgY2xlYW51cEIgPSBmYWxzZTtcblxuICAgIGNvbnN0IGFPcmllbnRhdGlvbiA9IE1hdHJpeE9yaWVudGF0aW9uLlJFR1VMQVI7XG4gICAgbGV0IGJPcmllbnRhdGlvbiA9IE1hdHJpeE9yaWVudGF0aW9uLlJFR1VMQVI7XG5cbiAgICBsZXQgbG9naWNhbEJUZXhTaGFwZTogW251bWJlciwgbnVtYmVyXTtcblxuICAgIGlmIChvcGVyYW5kQSA9PT0gT3BlcmFuZFR5cGUuTUFUUklYICYmIG9wZXJhbmRCID09PSBPcGVyYW5kVHlwZS5NQVRSSVgpIHtcbiAgICAgIHV0aWwuYXNzZXJ0U2hhcGVzTWF0Y2goYS5zaGFwZSwgYi5zaGFwZSk7XG5cbiAgICAgIGlmIChhLmluR1BVKCkpIHtcbiAgICAgICAgLy8gUHJlZmVyIEIgdG8gaGF2ZSB0aGUgc2hhcGUgb2YgQS5cbiAgICAgICAgYi5nZXRUZXh0dXJlU2hhcGVSQyhhLmdldFRleHR1cmVTaGFwZVJDKCkpO1xuICAgICAgfSBlbHNlIGlmIChiLmluR1BVKCkpIHtcbiAgICAgICAgLy8gUHJlZmVyIEEgdG8gaGF2ZSB0aGUgc2hhcGUgb2YgQi5cbiAgICAgICAgYS5nZXRUZXh0dXJlU2hhcGVSQyhiLmdldFRleHR1cmVTaGFwZVJDKCkpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBhVGV4U2hhcGUgPSBhLmdldFRleHR1cmVTaGFwZVJDKCk7XG4gICAgICBjb25zdCBiVGV4U2hhcGUgPSBiLmdldFRleHR1cmVTaGFwZVJDKCk7XG4gICAgICBsb2dpY2FsQlRleFNoYXBlID0gYlRleFNoYXBlO1xuXG4gICAgICBpZiAoYS5yYW5rID09PSAxKSB7XG4gICAgICAgIC8vIFdoZW4gZGVhbGluZyB3aXRoIHZlY3RvcnMsIHdlIGNhbiBzYW1wbGUgaW4gdHJhbnNwb3NlZCB3YXkgd2l0aG91dFxuICAgICAgICAvLyB0aGUgbmVlZCB0byBkbyBwaHlzaWNhbCByZXNoYXBlLlxuICAgICAgICBpZiAoIXV0aWwuYXJyYXlzRXF1YWwoYlRleFNoYXBlLCBhVGV4U2hhcGUpKSB7XG4gICAgICAgICAgYk9yaWVudGF0aW9uID0gTWF0cml4T3JpZW50YXRpb24uVFJBTlNQT1NFRDtcbiAgICAgICAgICBsb2dpY2FsQlRleFNoYXBlID0gW2JUZXhTaGFwZVsxXSwgYlRleFNoYXBlWzBdXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXV0aWwuYXJyYXlzRXF1YWwoYVRleFNoYXBlLCBsb2dpY2FsQlRleFNoYXBlKSkge1xuICAgICAgICBiID0gdGhpcy5yZXNoYXBlVGV4dHVyZShiLCBhVGV4U2hhcGUpO1xuICAgICAgICBiT3JpZW50YXRpb24gPSBNYXRyaXhPcmllbnRhdGlvbi5SRUdVTEFSO1xuICAgICAgICBsb2dpY2FsQlRleFNoYXBlID0gYi5nZXRUZXh0dXJlU2hhcGVSQygpO1xuICAgICAgICBjbGVhbnVwQiA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ2ljYWxCVGV4U2hhcGUgPSBiLmdldFRleHR1cmVTaGFwZVJDKCk7XG4gICAgfVxuXG4gICAgY29uc3QgYVRleFNoYXBlID0gYS5nZXRUZXh0dXJlU2hhcGVSQygpO1xuICAgIGNvbnN0IGJUZXhTaGFwZSA9IGIuZ2V0VGV4dHVyZVNoYXBlUkMoKTtcblxuICAgIGNvbnN0IHByb2dyYW1LZXkgPSBbXG4gICAgICBBRERfU1VNX01VTF9ESVZfUFJPRywgb3BlcmFuZEEsIGFPcmllbnRhdGlvbiwgb3BUeXBlLCBvcGVyYW5kQixcbiAgICAgIGJPcmllbnRhdGlvblxuICAgIF0uam9pbignXycpO1xuICAgIGNvbnN0IHByb2dyYW0gPSB0aGlzLmdldEFuZFNhdmVQcm9ncmFtKFxuICAgICAgICBwcm9ncmFtS2V5LFxuICAgICAgICAoKSA9PiBhZGRzdWJtdWxkaXZfZ3B1LmdldEZyYWdtZW50U2hhZGVyU291cmNlKFxuICAgICAgICAgICAgb3BlcmFuZEEsIGFPcmllbnRhdGlvbiwgb3BUeXBlLCBvcGVyYW5kQiwgYk9yaWVudGF0aW9uKSk7XG5cbiAgICBjb25zdCByZXN1bHRUZXh0dXJlU2hhcGU6IFtudW1iZXIsIG51bWJlcl0gPSBbXG4gICAgICBNYXRoLm1heChhVGV4U2hhcGVbMF0sIGxvZ2ljYWxCVGV4U2hhcGVbMF0pLFxuICAgICAgTWF0aC5tYXgoYVRleFNoYXBlWzFdLCBsb2dpY2FsQlRleFNoYXBlWzFdKVxuICAgIF07XG5cbiAgICBjb25zdCByZXN1bHRUZXh0dXJlID1cbiAgICAgICAgdGhpcy50ZXh0dXJlTWFuYWdlci5hY3F1aXJlVGV4dHVyZShyZXN1bHRUZXh0dXJlU2hhcGUpO1xuXG4gICAgYWRkc3VibXVsZGl2X2dwdS5hZGRTdWJNdWxEaXYoXG4gICAgICAgIHRoaXMuZ3BncHUsIHByb2dyYW0sIGEuZ2V0VGV4dHVyZSgpLCBhVGV4U2hhcGUsIGIuZ2V0VGV4dHVyZSgpLFxuICAgICAgICBiVGV4U2hhcGUsIHJlc3VsdFRleHR1cmUsIHJlc3VsdFRleHR1cmVTaGFwZSk7XG5cbiAgICBpZiAoY2xlYW51cEIpIHtcbiAgICAgIGIuZGlzcG9zZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBOREFycmF5Lm1ha2UoXG4gICAgICAgIHJlc3VsdFNoYXBlLFxuICAgICAgICB7dGV4dHVyZTogcmVzdWx0VGV4dHVyZSwgdGV4dHVyZVNoYXBlUkM6IHJlc3VsdFRleHR1cmVTaGFwZX0pO1xuICB9XG5cbiAgcHJpdmF0ZSBkb0dQVVNoYXBlc01hdGNoKGE6IE5EQXJyYXksIGI6IE5EQXJyYXkpOiBib29sZWFuIHtcbiAgICB1dGlsLmFzc2VydFNoYXBlc01hdGNoKGEuc2hhcGUsIGIuc2hhcGUpO1xuICAgIGlmIChhLmluR1BVKCkpIHtcbiAgICAgIC8vIFByZWZlciBCIHRvIGhhdmUgdGhlIHNoYXBlIG9mIEEuXG4gICAgICBiLmdldFRleHR1cmVTaGFwZVJDKGEuZ2V0VGV4dHVyZVNoYXBlUkMoKSk7XG4gICAgfSBlbHNlIGlmIChiLmluR1BVKCkpIHtcbiAgICAgIC8vIFByZWZlciBBIHRvIGhhdmUgdGhlIHNoYXBlIG9mIEIuXG4gICAgICBhLmdldFRleHR1cmVTaGFwZVJDKGIuZ2V0VGV4dHVyZVNoYXBlUkMoKSk7XG4gICAgfVxuICAgIHJldHVybiB1dGlsLmFycmF5c0VxdWFsKGEuZ2V0VGV4dHVyZVNoYXBlUkMoKSwgYi5nZXRUZXh0dXJlU2hhcGVSQygpKTtcbiAgfVxuXG4gIGdldFRleHR1cmVNYW5hZ2VyKCk6IFRleHR1cmVNYW5hZ2VyIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0dXJlTWFuYWdlcjtcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgZm9yIChjb25zdCBwcm9ncmFtS2V5IGluIHRoaXMucHJvZ3JhbUNhY2hlKSB7XG4gICAgICBpZiAodGhpcy5wcm9ncmFtQ2FjaGUuaGFzT3duUHJvcGVydHkocHJvZ3JhbUtleSkpIHtcbiAgICAgICAgdGhpcy5ncGdwdS5kZWxldGVQcm9ncmFtKHRoaXMucHJvZ3JhbUNhY2hlW3Byb2dyYW1LZXldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy50ZXh0dXJlTWFuYWdlci5kaXNwb3NlKCk7XG5cbiAgICBpZiAodGhpcy5ncGdwdUNyZWF0ZWRMb2NhbGx5KSB7XG4gICAgICB0aGlzLmdwZ3B1LmRpc3Bvc2UoKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuLi91dGlsJztcblxuaW1wb3J0IHtHUEdQVUNvbnRleHR9IGZyb20gJy4vd2ViZ2wvZ3BncHVfY29udGV4dCc7XG5pbXBvcnQge1RleHR1cmVNYW5hZ2VyfSBmcm9tICcuL3dlYmdsL3RleHR1cmVfbWFuYWdlcic7XG5pbXBvcnQgKiBhcyB3ZWJnbF91dGlsIGZyb20gJy4vd2ViZ2wvd2ViZ2xfdXRpbCc7XG5cbi8vIFRoZXNlIGdsb2JhbCB2YXJpYWJsZXMgbmVlZCB0byBiZSBpbml0aWFsaXplZCB0byBudWxsIHNvIHRoYXQgY2xvc3VyZSBrbm93c1xuLy8gbm90IHRvIHNlYWwgdGhlbS5cbi8qKiBAaGlkZGVuICovXG5leHBvcnQgbGV0IEdQR1BVOiBHUEdQVUNvbnRleHQgPSBudWxsITtcbi8qKiBAaGlkZGVuICovXG5leHBvcnQgbGV0IFRFWFRVUkVfTUFOQUdFUjogVGV4dHVyZU1hbmFnZXIgPSBudWxsITtcblxuLyoqIEBoaWRkZW4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTkRBcnJheURhdGEge1xuICB2YWx1ZXM/OiBGbG9hdDMyQXJyYXk7XG4gIHRleHR1cmU/OiBXZWJHTFRleHR1cmU7XG4gIC8qKiBbcm93cywgY29sdW1uc10gc2hhcGUgb2YgdGhlIHRleHR1cmUuICovXG4gIHRleHR1cmVTaGFwZVJDPzogW251bWJlciwgbnVtYmVyXTtcbn1cblxuLyoqIEBoaWRkZW4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplR1BVKFxuICAgIGdwZ3B1OiBHUEdQVUNvbnRleHQsIHRleHR1cmVNYW5hZ2VyOiBUZXh0dXJlTWFuYWdlcikge1xuICBHUEdQVSA9IGdwZ3B1O1xuICBURVhUVVJFX01BTkFHRVIgPSB0ZXh0dXJlTWFuYWdlcjtcbn1cblxuZnVuY3Rpb24gdGhyb3dJZkdQVU5vdEluaXRpYWxpemVkKCkge1xuICBpZiAoR1BHUFUgPT0gbnVsbCB8fCBURVhUVVJFX01BTkFHRVIgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignR1BVIG5vdCBpbnRpYWxpemVkLicpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBOREFycmF5IHtcbiAgLyoqIFRoZSBzaGFwZSBvZiB0aGUgbmRhcnJheS4gKi9cbiAgc2hhcGU6IG51bWJlcltdO1xuICAvKiogTnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSBuZGFycmF5LiAqL1xuICBzaXplOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiBlbGVtZW50cyB0byBza2lwIGluIGVhY2ggZGltZW5zaW9uIHdoZW4gaW5kZXhpbmcuIFNlZVxuICAgKiBodHRwczovL2RvY3Muc2NpcHkub3JnL2RvYy9udW1weS9yZWZlcmVuY2UvZ2VuZXJhdGVkL251bXB5Lm5kYXJyYXkuc3RyaWRlcy5odG1sXG4gICAqL1xuICBwcm90ZWN0ZWQgc3RyaWRlczogbnVtYmVyW107XG5cbiAgcHJpdmF0ZSBkYXRhOiBOREFycmF5RGF0YTtcblxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3Ioc2hhcGU6IG51bWJlcltdLCBkYXRhOiBOREFycmF5RGF0YSkge1xuICAgIC8vIFNhbml0eSBjaGVja3MuXG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIGRhdGEudmFsdWVzICE9IG51bGwgfHwgZGF0YS50ZXh0dXJlICE9IG51bGwsXG4gICAgICAgICdFaXRoZXIgYHZhbHVlc2Agb3IgYHRleHR1cmVgIG11c3QgYmUgZGVmaW5lZCcpO1xuXG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIGRhdGEudGV4dHVyZSA9PSBudWxsIHx8IChkYXRhLnRleHR1cmVTaGFwZVJDICE9IG51bGwpLFxuICAgICAgICAnYHRleHR1cmVTaGFwZWAgbXVzdCBiZSBkZWZpbmVkIHdoZW4gYHRleHR1cmVgIGlzIGRlZmluZWQnKTtcblxuICAgIHRoaXMuc2l6ZSA9IHV0aWwuc2l6ZUZyb21TaGFwZShzaGFwZSk7XG5cbiAgICBpZiAoZGF0YS52YWx1ZXMgIT0gbnVsbCkge1xuICAgICAgdXRpbC5hc3NlcnQoXG4gICAgICAgICAgdGhpcy5zaXplID09PSBkYXRhLnZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgJ0NvbnN0cnVjdGluZyBuZGFycmF5IG9mIHNoYXBlICgnICsgdGhpcy5zaXplICsgJykgc2hvdWxkIG1hdGNoIHRoZScgK1xuICAgICAgICAgICAgICAnIGxlbmd0aCBvZiB2YWx1ZXMgKCcgKyBkYXRhLnZhbHVlcy5sZW5ndGggKyAnKScpO1xuICAgIH1cblxuICAgIHRoaXMuc2hhcGUgPSBzaGFwZTtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIGNvbnN0IGRpbSA9IHRoaXMuc2hhcGUubGVuZ3RoO1xuXG4gICAgaWYgKGRpbSA8IDIpIHtcbiAgICAgIHRoaXMuc3RyaWRlcyA9IFtdO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMYXN0IGRpbWVuc2lvbiBoYXMgaW1wbGljaXQgc3RyaWRlIG9mIDEsIHRodXMgaGF2aW5nIEQtMSAoaW5zdGVhZCBvZiBEKVxuICAgICAgLy8gc3RyaWRlcy5cbiAgICAgIHRoaXMuc3RyaWRlcyA9IG5ldyBBcnJheShkaW0gLSAxKTtcbiAgICAgIHRoaXMuc3RyaWRlc1tkaW0gLSAyXSA9IHRoaXMuc2hhcGVbZGltIC0gMV07XG4gICAgICBmb3IgKGxldCBpID0gZGltIC0gMzsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdGhpcy5zdHJpZGVzW2ldID0gdGhpcy5zdHJpZGVzW2kgKyAxXSAqIHRoaXMuc2hhcGVbaSArIDFdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKiBDcmVhdGVzIGEgbmRhcnJheSBvZiB6ZXJvcyB3aXRoIHRoZSBzcGVjaWZpZWQgc2hhcGUuICovXG4gIHN0YXRpYyB6ZXJvczxUIGV4dGVuZHMgTkRBcnJheT4oc2hhcGU6IG51bWJlcltdKTogVCB7XG4gICAgY29uc3QgdmFsdWVzID0gbmV3IEZsb2F0MzJBcnJheSh1dGlsLnNpemVGcm9tU2hhcGUoc2hhcGUpKTtcbiAgICByZXR1cm4gTkRBcnJheS5tYWtlPFQ+KHNoYXBlLCB7dmFsdWVzfSk7XG4gIH1cblxuICAvKiogQ3JlYXRlcyBhIG5kYXJyYXkgb2YgemVyb3Mgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyB0aGUgc3BlY2lmaWVkIG5kYXJyYXkuXG4gICAqL1xuICBzdGF0aWMgemVyb3NMaWtlPFQgZXh0ZW5kcyBOREFycmF5Pihhbm90aGVyOiBUKTogVCB7XG4gICAgcmV0dXJuIE5EQXJyYXkuemVyb3MoYW5vdGhlci5zaGFwZSkgYXMgVDtcbiAgfVxuXG4gIC8qKiBDcmVhdGVzIGEgbmRhcnJheSB3aXRoIHRoZSBzYW1lIHZhbHVlcy9zaGFwZSBhcyB0aGUgc3BlY2lmaWVkIG5kYXJyYXkuICovXG4gIHN0YXRpYyBsaWtlPFQgZXh0ZW5kcyBOREFycmF5Pihhbm90aGVyOiBUKTogVCB7XG4gICAgY29uc3QgdmFsdWVzID0gYW5vdGhlci5nZXRWYWx1ZXMoKTtcbiAgICByZXR1cm4gTkRBcnJheS5tYWtlPFQ+KGFub3RoZXIuc2hhcGUsIHt2YWx1ZXM6IG5ldyBGbG9hdDMyQXJyYXkodmFsdWVzKX0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ha2VzIGEgbmV3IG5kYXJyYXkgd2l0aCB0aGUgcHJvdmlkZWQgc2hhcGUgYW5kIHZhbHVlcy4gVmFsdWVzIHNob3VsZCBiZSBpblxuICAgKiBhIGZsYXQgYXJyYXkuXG4gICAqL1xuICBzdGF0aWMgbWFrZTxUIGV4dGVuZHMgTkRBcnJheT4oc2hhcGU6IG51bWJlcltdLCBkYXRhOiBOREFycmF5RGF0YSk6IFQge1xuICAgIHN3aXRjaCAoc2hhcGUubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiBuZXcgU2NhbGFyKGRhdGEpIGFzIFQ7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICAgICAgcmV0dXJuIG5ldyBBcnJheTFEKGRhdGEpIGFzIGFueTtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgICAgICByZXR1cm4gbmV3IEFycmF5MkQoc2hhcGUgYXMgW251bWJlciwgbnVtYmVyXSwgZGF0YSkgYXMgYW55O1xuICAgICAgY2FzZSAzOlxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gICAgICAgIHJldHVybiBuZXcgQXJyYXkzRChzaGFwZSBhcyBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0sIGRhdGEpIGFzIGFueTtcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgcmV0dXJuIG5ldyBBcnJheTREKFxuICAgICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICAgICAgICAgICAgICAgICBzaGFwZSBhcyBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXSwgZGF0YSkgYXMgYW55O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgICAgICByZXR1cm4gbmV3IE5EQXJyYXkoc2hhcGUsIGRhdGEpIGFzIGFueTtcbiAgICB9XG4gIH1cblxuICAvKiogUmVzaGFwZXMgdGhlIGN1cnJlbnQgbmRhcnJheSBpbnRvIHRoZSBwcm92aWRlZCBzaGFwZS4gKi9cbiAgcmVzaGFwZTxUIGV4dGVuZHMgTkRBcnJheT4obmV3U2hhcGU6IG51bWJlcltdKTogVCB7XG4gICAgaWYgKHV0aWwuYXJyYXlzRXF1YWwodGhpcy5zaGFwZSwgbmV3U2hhcGUpKSB7XG4gICAgICAvLyBOby1vcC5cbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICAgIHJldHVybiB0aGlzIGFzIGFueTtcbiAgICB9XG5cbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgdGhpcy5zaXplID09PSB1dGlsLnNpemVGcm9tU2hhcGUobmV3U2hhcGUpLFxuICAgICAgICAnbmV3IHNoYXBlIGFuZCBvbGQgc2hhcGUgbXVzdCBoYXZlIHRoZSBzYW1lIG51bWJlciBvZiBlbGVtZW50cy4nKTtcblxuICAgIHJldHVybiBOREFycmF5Lm1ha2U8VD4obmV3U2hhcGUsIHRoaXMuZGF0YSk7XG4gIH1cblxuICBhc1NjYWxhcigpOiBTY2FsYXIge1xuICAgIHV0aWwuYXNzZXJ0KHRoaXMuc2l6ZSA9PT0gMSwgJ1RoZSBhcnJheSBtdXN0IGhhdmUgb25seSAxIGVsZW1lbnQuJyk7XG4gICAgcmV0dXJuIHRoaXMucmVzaGFwZTxTY2FsYXI+KFtdKTtcbiAgfVxuXG4gIGFzMUQoKTogQXJyYXkxRCB7XG4gICAgcmV0dXJuIHRoaXMucmVzaGFwZTxBcnJheTFEPihbdGhpcy5zaXplXSk7XG4gIH1cblxuICBhczJEKHJvd3M6IG51bWJlciwgY29sdW1uczogbnVtYmVyKTogQXJyYXkyRCB7XG4gICAgcmV0dXJuIHRoaXMucmVzaGFwZTxBcnJheTJEPihbcm93cywgY29sdW1uc10pO1xuICB9XG5cbiAgYXMzRChyb3dzOiBudW1iZXIsIGNvbHVtbnM6IG51bWJlciwgZGVwdGg6IG51bWJlcik6IEFycmF5M0Qge1xuICAgIHJldHVybiB0aGlzLnJlc2hhcGU8QXJyYXkzRD4oW3Jvd3MsIGNvbHVtbnMsIGRlcHRoXSk7XG4gIH1cblxuICBhczREKHJvd3M6IG51bWJlciwgY29sdW1uczogbnVtYmVyLCBkZXB0aDogbnVtYmVyLCBkZXB0aDI6IG51bWJlcik6IEFycmF5NEQge1xuICAgIHJldHVybiB0aGlzLnJlc2hhcGU8QXJyYXk0RD4oW3Jvd3MsIGNvbHVtbnMsIGRlcHRoLCBkZXB0aDJdKTtcbiAgfVxuXG4gIGdldCByYW5rKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuc2hhcGUubGVuZ3RoO1xuICB9XG5cbiAgZ2V0KC4uLmxvY3M6IG51bWJlcltdKSB7XG4gICAgbGV0IGluZGV4ID0gbG9jc1tsb2NzLmxlbmd0aCAtIDFdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9jcy5sZW5ndGggLSAxOyArK2kpIHtcbiAgICAgIGluZGV4ICs9IHRoaXMuc3RyaWRlc1tpXSAqIGxvY3NbaV07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldFZhbHVlcygpW2luZGV4XTtcbiAgfVxuXG4gIGFkZCh2YWx1ZTogbnVtYmVyLCAuLi5sb2NzOiBudW1iZXJbXSkge1xuICAgIHRoaXMuc2V0KHRoaXMuZ2V0KC4uLmxvY3MpICsgdmFsdWUsIC4uLmxvY3MpO1xuICB9XG5cbiAgc2V0KHZhbHVlOiBudW1iZXIsIC4uLmxvY3M6IG51bWJlcltdKSB7XG4gICAgbGV0IGluZGV4ID0gbG9jc1tsb2NzLmxlbmd0aCAtIDFdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9jcy5sZW5ndGggLSAxOyArK2kpIHtcbiAgICAgIGluZGV4ICs9IHRoaXMuc3RyaWRlc1tpXSAqIGxvY3NbaV07XG4gICAgfVxuICAgIHRoaXMuZ2V0VmFsdWVzKClbaW5kZXhdID0gdmFsdWU7XG4gIH1cblxuICBsb2NUb0luZGV4KGxvY3M6IG51bWJlcltdKTogbnVtYmVyIHtcbiAgICBsZXQgaW5kZXggPSBsb2NzW2xvY3MubGVuZ3RoIC0gMV07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb2NzLmxlbmd0aCAtIDE7ICsraSkge1xuICAgICAgaW5kZXggKz0gdGhpcy5zdHJpZGVzW2ldICogbG9jc1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgaW5kZXhUb0xvYyhpbmRleDogbnVtYmVyKTogbnVtYmVyW10ge1xuICAgIGNvbnN0IGxvY3M6IG51bWJlcltdID0gbmV3IEFycmF5KHRoaXMuc2hhcGUubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxvY3MubGVuZ3RoIC0gMTsgKytpKSB7XG4gICAgICBsb2NzW2ldID0gTWF0aC5mbG9vcihpbmRleCAvIHRoaXMuc3RyaWRlc1tpXSk7XG4gICAgICBpbmRleCAtPSBsb2NzW2ldICogdGhpcy5zdHJpZGVzW2ldO1xuICAgIH1cbiAgICBsb2NzW2xvY3MubGVuZ3RoIC0gMV0gPSBpbmRleDtcbiAgICByZXR1cm4gbG9jcztcbiAgfVxuXG4gIGZpbGwodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuZ2V0VmFsdWVzKCkuZmlsbCh2YWx1ZSk7XG4gIH1cblxuICBnZXREYXRhKCk6IE5EQXJyYXlEYXRhIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhO1xuICB9XG5cbiAgZ2V0VmFsdWVzKCk6IEZsb2F0MzJBcnJheSB7XG4gICAgaWYgKHRoaXMuZGF0YS52YWx1ZXMgPT0gbnVsbCkge1xuICAgICAgdGhyb3dJZkdQVU5vdEluaXRpYWxpemVkKCk7XG4gICAgICB0aGlzLmRhdGEudmFsdWVzID0gR1BHUFUuZG93bmxvYWRNYXRyaXhGcm9tVGV4dHVyZShcbiAgICAgICAgICB0aGlzLmRhdGEudGV4dHVyZSEsIHRoaXMuZGF0YS50ZXh0dXJlU2hhcGVSQyFbMF0sXG4gICAgICAgICAgdGhpcy5kYXRhLnRleHR1cmVTaGFwZVJDIVsxXSk7XG4gICAgICB0aGlzLmRpc3Bvc2VUZXh0dXJlKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmRhdGEudmFsdWVzO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGxvYWRUb0dQVShwcmVmZXJyZWRUZXhTaGFwZT86IFtudW1iZXIsIG51bWJlcl0pIHtcbiAgICB0aHJvd0lmR1BVTm90SW5pdGlhbGl6ZWQoKTtcbiAgICB0aGlzLmRhdGEudGV4dHVyZVNoYXBlUkMgPSB3ZWJnbF91dGlsLmdldFRleHR1cmVTaGFwZUZyb21Mb2dpY2FsU2hhcGUoXG4gICAgICAgIEdQR1BVLmdsLCB0aGlzLnNoYXBlLCBwcmVmZXJyZWRUZXhTaGFwZSk7XG4gICAgdGhpcy5kYXRhLnRleHR1cmUgPVxuICAgICAgICBURVhUVVJFX01BTkFHRVIuYWNxdWlyZVRleHR1cmUodGhpcy5kYXRhLnRleHR1cmVTaGFwZVJDKTtcblxuICAgIEdQR1BVLnVwbG9hZE1hdHJpeFRvVGV4dHVyZShcbiAgICAgICAgdGhpcy5kYXRhLnRleHR1cmUsIHRoaXMuZGF0YS50ZXh0dXJlU2hhcGVSQ1swXSxcbiAgICAgICAgdGhpcy5kYXRhLnRleHR1cmVTaGFwZVJDWzFdLCB0aGlzLmRhdGEudmFsdWVzISk7XG5cbiAgICB0aGlzLmRhdGEudmFsdWVzID0gbnVsbCE7XG4gIH1cblxuICBnZXRUZXh0dXJlKHByZWZlcnJlZFNoYXBlUkM/OiBbbnVtYmVyLCBudW1iZXJdKTogV2ViR0xUZXh0dXJlIHtcbiAgICBpZiAodGhpcy5kYXRhLnRleHR1cmUgPT0gbnVsbCkge1xuICAgICAgdGhpcy51cGxvYWRUb0dQVShwcmVmZXJyZWRTaGFwZVJDKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZGF0YS50ZXh0dXJlITtcbiAgfVxuXG4gIGdldFRleHR1cmVTaGFwZVJDKHByZWZlcnJlZFNoYXBlUkM/OiBbbnVtYmVyLCBudW1iZXJdKTogW251bWJlciwgbnVtYmVyXSB7XG4gICAgaWYgKHRoaXMuZGF0YS50ZXh0dXJlU2hhcGVSQyA9PSBudWxsKSB7XG4gICAgICB0aGlzLnVwbG9hZFRvR1BVKHByZWZlcnJlZFNoYXBlUkMpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5kYXRhLnRleHR1cmVTaGFwZVJDITtcbiAgfVxuXG4gIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgdGhpcy5kYXRhLnZhbHVlcyA9IG51bGwhO1xuICAgIHRoaXMuc2hhcGUgPSBudWxsITtcbiAgICBpZiAodGhpcy5kYXRhLnRleHR1cmUgIT0gbnVsbCkge1xuICAgICAgdGhpcy5kaXNwb3NlVGV4dHVyZSgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZGlzcG9zZVRleHR1cmUoKSB7XG4gICAgdGhyb3dJZkdQVU5vdEluaXRpYWxpemVkKCk7XG4gICAgVEVYVFVSRV9NQU5BR0VSLnJlbGVhc2VUZXh0dXJlKFxuICAgICAgICB0aGlzLmRhdGEudGV4dHVyZSEsIHRoaXMuZGF0YS50ZXh0dXJlU2hhcGVSQyEpO1xuICAgIHRoaXMuZGF0YS50ZXh0dXJlID0gbnVsbCE7XG4gICAgdGhpcy5kYXRhLnRleHR1cmVTaGFwZVJDID0gbnVsbCE7XG4gIH1cblxuICBpbkdQVSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLnRleHR1cmUgIT0gbnVsbDtcbiAgfVxuXG4gIGVxdWFscyh0OiBOREFycmF5KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHV0aWwuYXJyYXlzRXF1YWwodGhpcy5zaGFwZSwgdC5zaGFwZSkgJiZcbiAgICAgICAgdXRpbC5hcnJheXNFcXVhbCh0aGlzLmdldFZhbHVlcygpLCB0LmdldFZhbHVlcygpKTtcbiAgfVxuXG4gIHN0YXRpYyByYW5kPFQgZXh0ZW5kcyBOREFycmF5PihzaGFwZTogbnVtYmVyW10sIHJhbmRGdW5jdGlvbjogKCkgPT4gbnVtYmVyKTpcbiAgICAgIFQge1xuICAgIGNvbnN0IHNpemUgPSB1dGlsLnNpemVGcm9tU2hhcGUoc2hhcGUpO1xuICAgIGNvbnN0IHZhbHVlcyA9IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgIHZhbHVlc1tpXSA9IHJhbmRGdW5jdGlvbigpO1xuICAgIH1cblxuICAgIHJldHVybiBOREFycmF5Lm1ha2U8VD4oc2hhcGUsIHt2YWx1ZXN9KTtcbiAgfVxuXG4gIHN0YXRpYyByYW5kTm9ybWFsPFQgZXh0ZW5kcyBOREFycmF5PihzaGFwZTogbnVtYmVyW10sIG1lYW4gPSAwLCBzdGREZXYgPSAxKSB7XG4gICAgcmV0dXJuIE5EQXJyYXkucmFuZDxUPihzaGFwZSwgKCkgPT4gdXRpbC5yYW5kR2F1c3MobWVhbiwgc3RkRGV2KSk7XG4gIH1cblxuICBzdGF0aWMgcmFuZFRydW5jYXRlZE5vcm1hbDxUIGV4dGVuZHMgTkRBcnJheT4oXG4gICAgICBzaGFwZTogbnVtYmVyW10sIG1lYW4gPSAwLCBzdGREZXYgPSAxKSB7XG4gICAgcmV0dXJuIE5EQXJyYXkucmFuZDxUPihzaGFwZSwgKCkgPT4gdXRpbC5yYW5kR2F1c3MobWVhbiwgc3RkRGV2LCB0cnVlKSk7XG4gIH1cblxuICBzdGF0aWMgcmFuZFVuaWZvcm08VCBleHRlbmRzIE5EQXJyYXk+KHNoYXBlOiBudW1iZXJbXSwgYTogbnVtYmVyLCBiOiBudW1iZXIpIHtcbiAgICByZXR1cm4gTkRBcnJheS5yYW5kPFQ+KHNoYXBlLCAoKSA9PiB1dGlsLnJhbmRVbmlmb3JtKGEsIGIpKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU2NhbGFyIGV4dGVuZHMgTkRBcnJheSB7XG4gIGNvbnN0cnVjdG9yKGRhdGE6IE5EQXJyYXlEYXRhKSB7XG4gICAgaWYgKGRhdGEudGV4dHVyZSAhPSBudWxsKSB7XG4gICAgICBkYXRhLnRleHR1cmVTaGFwZVJDID0gWzEsIDFdO1xuICAgIH1cbiAgICBzdXBlcihbXSwgZGF0YSk7XG4gIH1cblxuICBzdGF0aWMgbmV3KHZhbHVlOiBudW1iZXIpIHtcbiAgICByZXR1cm4gbmV3IFNjYWxhcih7dmFsdWVzOiBuZXcgRmxvYXQzMkFycmF5KFt2YWx1ZV0pfSk7XG4gIH1cblxuICBzdGF0aWMgWkVSTyA9IFNjYWxhci5uZXcoMCk7XG4gIHN0YXRpYyBPTkUgPSBTY2FsYXIubmV3KDEpO1xuICBzdGF0aWMgVFdPID0gU2NhbGFyLm5ldygyKTtcbiAgc3RhdGljIE5FR19PTkUgPSBTY2FsYXIubmV3KC0xKTtcblxuICBnZXQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZXMoKVswXTtcbiAgfVxuXG4gIHNldCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5nZXRWYWx1ZXMoKVswXSA9IHZhbHVlO1xuICB9XG5cbiAgYWRkKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLmdldFZhbHVlcygpWzBdICs9IHZhbHVlO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBcnJheTFEIGV4dGVuZHMgTkRBcnJheSB7XG4gIHNoYXBlOiBbbnVtYmVyXTtcblxuICBjb25zdHJ1Y3RvcihkYXRhOiBOREFycmF5RGF0YSkge1xuICAgIGNvbnN0IHNoYXBlID0gKGRhdGEudmFsdWVzICE9IG51bGwpID9cbiAgICAgICAgW2RhdGEudmFsdWVzLmxlbmd0aF0gOlxuICAgICAgICBbdXRpbC5zaXplRnJvbVNoYXBlKGRhdGEudGV4dHVyZVNoYXBlUkMhKV07XG4gICAgc3VwZXIoc2hhcGUsIGRhdGEpO1xuICB9XG5cbiAgc3RhdGljIG5ldyh2YWx1ZXM6IEZsb2F0MzJBcnJheXxudW1iZXJbXSkge1xuICAgIGlmICghKHZhbHVlcyBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSkpIHtcbiAgICAgIGNvbnN0IGluZmVycmVkU2hhcGUgPSB1dGlsLmluZmVyU2hhcGUodmFsdWVzKTtcbiAgICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICAgIGluZmVycmVkU2hhcGUubGVuZ3RoID09PSAxLFxuICAgICAgICAgIGBFcnJvciBjb25zdHJ1Y3RpbmcgQXJyYXkxRC4gU2hhcGUgb2YgdmFsdWVzICR7aW5mZXJyZWRTaGFwZX0gaXMgYCArXG4gICAgICAgICAgICAgIGBub3QgMSBkaW1lbnNpb25hbC5gKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBBcnJheTFEKHt2YWx1ZXM6IHRvVHlwZWRBcnJheSh2YWx1ZXMpfSk7XG4gIH1cblxuICBnZXQoaTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZXMoKVtpXTtcbiAgfVxuXG4gIHNldCh2YWx1ZTogbnVtYmVyLCBpOiBudW1iZXIpIHtcbiAgICB0aGlzLmdldFZhbHVlcygpW2ldID0gdmFsdWU7XG4gIH1cblxuICBhZGQodmFsdWU6IG51bWJlciwgaTogbnVtYmVyKSB7XG4gICAgdGhpcy5nZXRWYWx1ZXMoKVtpXSArPSB2YWx1ZTtcbiAgfVxuXG4gIGxvY1RvSW5kZXgobG9jOiBbbnVtYmVyXSk6IG51bWJlciB7XG4gICAgcmV0dXJuIGxvY1swXTtcbiAgfVxuXG4gIGluZGV4VG9Mb2MoaW5kZXg6IG51bWJlcik6IFtudW1iZXJdIHtcbiAgICByZXR1cm4gW2luZGV4XTtcbiAgfVxuXG4gIHN0YXRpYyB6ZXJvcyhzaGFwZTogW251bWJlcl0pOiBBcnJheTFEIHtcbiAgICByZXR1cm4gTkRBcnJheS56ZXJvczxBcnJheTFEPihzaGFwZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFycmF5MkQgZXh0ZW5kcyBOREFycmF5IHtcbiAgc2hhcGU6IFtudW1iZXIsIG51bWJlcl07XG5cbiAgcHJpdmF0ZSBzdHJpZGUwOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3Ioc2hhcGU6IFtudW1iZXIsIG51bWJlcl0sIGRhdGE6IE5EQXJyYXlEYXRhKSB7XG4gICAgdXRpbC5hc3NlcnQoc2hhcGUubGVuZ3RoID09PSAyLCAnU2hhcGUgc2hvdWxkIGJlIG9mIGxlbmd0aCAyJyk7XG4gICAgc3VwZXIoc2hhcGUsIGRhdGEpO1xuICAgIHRoaXMuc3RyaWRlMCA9IHRoaXMuc3RyaWRlc1swXTtcbiAgfVxuXG4gIHN0YXRpYyBuZXcoXG4gICAgICBzaGFwZTogW251bWJlciwgbnVtYmVyXSwgdmFsdWVzOiBGbG9hdDMyQXJyYXl8bnVtYmVyW118bnVtYmVyW11bXSkge1xuICAgIGlmICghKHZhbHVlcyBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSkpIHtcbiAgICAgIGNvbnN0IGluZmVycmVkU2hhcGUgPSB1dGlsLmluZmVyU2hhcGUodmFsdWVzKTtcbiAgICAgIGlmIChpbmZlcnJlZFNoYXBlLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdXRpbC5hc3NlcnRTaGFwZXNNYXRjaChcbiAgICAgICAgICAgIHNoYXBlLCBpbmZlcnJlZFNoYXBlLFxuICAgICAgICAgICAgYEVycm9yIHdoZW4gY29uc3RydWN0aW5nIEFycmF5MkQuIFNoYXBlIG9mIHZhbHVlcyBgICtcbiAgICAgICAgICAgICAgICBgJHtpbmZlcnJlZFNoYXBlfSBkb2VzIG5vdCBtYXRjaCB0aGUgcHJvdmlkZWQgc2hhcGUgYCArXG4gICAgICAgICAgICAgICAgYCR7c2hhcGV9LiBgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBBcnJheTJEKHNoYXBlLCB7dmFsdWVzOiB0b1R5cGVkQXJyYXkodmFsdWVzKX0pO1xuICB9XG5cbiAgZ2V0KGk6IG51bWJlciwgajogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWVzKClbdGhpcy5zdHJpZGUwICogaSArIGpdO1xuICB9XG5cbiAgc2V0KHZhbHVlOiBudW1iZXIsIGk6IG51bWJlciwgajogbnVtYmVyKSB7XG4gICAgdGhpcy5nZXRWYWx1ZXMoKVt0aGlzLnN0cmlkZTAgKiBpICsgal0gPSB2YWx1ZTtcbiAgfVxuXG4gIGFkZCh2YWx1ZTogbnVtYmVyLCBpOiBudW1iZXIsIGo6IG51bWJlcikge1xuICAgIHRoaXMuZ2V0VmFsdWVzKClbdGhpcy5zdHJpZGUwICogaSArIGpdICs9IHZhbHVlO1xuICB9XG5cbiAgbG9jVG9JbmRleChsb2NzOiBbbnVtYmVyLCBudW1iZXJdKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5zdHJpZGUwICogbG9jc1swXSArIGxvY3NbMV07XG4gIH1cblxuICBpbmRleFRvTG9jKGluZGV4OiBudW1iZXIpOiBbbnVtYmVyLCBudW1iZXJdIHtcbiAgICByZXR1cm4gW01hdGguZmxvb3IoaW5kZXggLyB0aGlzLnN0cmlkZTApLCBpbmRleCAlIHRoaXMuc3RyaWRlMF07XG4gIH1cblxuICBzdGF0aWMgemVyb3Moc2hhcGU6IFtudW1iZXIsIG51bWJlcl0pOiBBcnJheTJEIHtcbiAgICByZXR1cm4gTkRBcnJheS56ZXJvczxBcnJheTJEPihzaGFwZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFycmF5M0QgZXh0ZW5kcyBOREFycmF5IHtcbiAgc2hhcGU6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcbiAgcHJpdmF0ZSBzdHJpZGUwOiBudW1iZXI7XG4gIHByaXZhdGUgc3RyaWRlMTogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHNoYXBlOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0sIGRhdGE6IE5EQXJyYXlEYXRhKSB7XG4gICAgdXRpbC5hc3NlcnQoc2hhcGUubGVuZ3RoID09PSAzLCAnU2hhcGUgc2hvdWxkIGJlIG9mIGxlbmd0aCAzJyk7XG4gICAgc3VwZXIoc2hhcGUsIGRhdGEpO1xuICAgIHRoaXMuc3RyaWRlMCA9IHRoaXMuc3RyaWRlc1swXTtcbiAgICB0aGlzLnN0cmlkZTEgPSB0aGlzLnN0cmlkZXNbMV07XG4gIH1cblxuICBzdGF0aWMgbmV3KFxuICAgICAgc2hhcGU6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXSxcbiAgICAgIHZhbHVlczogRmxvYXQzMkFycmF5fG51bWJlcltdfG51bWJlcltdW11bXSkge1xuICAgIGlmICghKHZhbHVlcyBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSkpIHtcbiAgICAgIGNvbnN0IGluZmVycmVkU2hhcGUgPSB1dGlsLmluZmVyU2hhcGUodmFsdWVzKTtcbiAgICAgIGlmIChpbmZlcnJlZFNoYXBlLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdXRpbC5hc3NlcnRTaGFwZXNNYXRjaChcbiAgICAgICAgICAgIHNoYXBlLCBpbmZlcnJlZFNoYXBlLFxuICAgICAgICAgICAgYEVycm9yIHdoZW4gY29uc3RydWN0aW5nIEFycmF5M0QuIFNoYXBlIG9mIHZhbHVlcyBgICtcbiAgICAgICAgICAgICAgICBgJHtpbmZlcnJlZFNoYXBlfSBkb2VzIG5vdCBtYXRjaCB0aGUgcHJvdmlkZWQgc2hhcGUgYCArXG4gICAgICAgICAgICAgICAgYCR7c2hhcGV9LiBgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBBcnJheTNEKHNoYXBlLCB7dmFsdWVzOiB0b1R5cGVkQXJyYXkodmFsdWVzKX0pO1xuICB9XG5cbiAgZ2V0KGk6IG51bWJlciwgajogbnVtYmVyLCBrOiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZXMoKVt0aGlzLnN0cmlkZTAgKiBpICsgdGhpcy5zdHJpZGUxICogaiArIGtdO1xuICB9XG5cbiAgc2V0KHZhbHVlOiBudW1iZXIsIGk6IG51bWJlciwgajogbnVtYmVyLCBrOiBudW1iZXIpIHtcbiAgICB0aGlzLmdldFZhbHVlcygpW3RoaXMuc3RyaWRlMCAqIGkgKyB0aGlzLnN0cmlkZTEgKiBqICsga10gPSB2YWx1ZTtcbiAgfVxuXG4gIGFkZCh2YWx1ZTogbnVtYmVyLCBpOiBudW1iZXIsIGo6IG51bWJlciwgazogbnVtYmVyKSB7XG4gICAgdGhpcy5nZXRWYWx1ZXMoKVt0aGlzLnN0cmlkZTAgKiBpICsgdGhpcy5zdHJpZGUxICogaiArIGtdICs9IHZhbHVlO1xuICB9XG5cbiAgbG9jVG9JbmRleChsb2NzOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0pOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnN0cmlkZTAgKiBsb2NzWzBdICsgdGhpcy5zdHJpZGUxICogbG9jc1sxXSArIGxvY3NbMl07XG4gIH1cblxuICBpbmRleFRvTG9jKGluZGV4OiBudW1iZXIpOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0ge1xuICAgIGNvbnN0IGkgPSBNYXRoLmZsb29yKGluZGV4IC8gdGhpcy5zdHJpZGUwKTtcbiAgICBpbmRleCAtPSBpICogdGhpcy5zdHJpZGUwO1xuICAgIHJldHVybiBbaSwgTWF0aC5mbG9vcihpbmRleCAvIHRoaXMuc3RyaWRlMSksIGluZGV4ICUgdGhpcy5zdHJpZGUxXTtcbiAgfVxuXG4gIHN0YXRpYyB6ZXJvcyhzaGFwZTogW251bWJlciwgbnVtYmVyLCBudW1iZXJdKTogQXJyYXkzRCB7XG4gICAgcmV0dXJuIE5EQXJyYXkuemVyb3M8QXJyYXkzRD4oc2hhcGUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBcnJheTREIGV4dGVuZHMgTkRBcnJheSB7XG4gIHNoYXBlOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcbiAgcHJpdmF0ZSBzdHJpZGUwOiBudW1iZXI7XG4gIHByaXZhdGUgc3RyaWRlMTogbnVtYmVyO1xuICBwcml2YXRlIHN0cmlkZTI6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihzaGFwZTogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl0sIGRhdGE6IE5EQXJyYXlEYXRhKSB7XG4gICAgdXRpbC5hc3NlcnQoc2hhcGUubGVuZ3RoID09PSA0LCAnU2hhcGUgc2hvdWxkIGJlIG9mIGxlbmd0aCA0Jyk7XG4gICAgc3VwZXIoc2hhcGUsIGRhdGEpO1xuICAgIHRoaXMuc3RyaWRlMCA9IHRoaXMuc3RyaWRlc1swXTtcbiAgICB0aGlzLnN0cmlkZTEgPSB0aGlzLnN0cmlkZXNbMV07XG4gICAgdGhpcy5zdHJpZGUyID0gdGhpcy5zdHJpZGVzWzJdO1xuICB9XG5cbiAgc3RhdGljIG5ldyhcbiAgICAgIHNoYXBlOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXSxcbiAgICAgIHZhbHVlczogRmxvYXQzMkFycmF5fG51bWJlcltdfG51bWJlcltdW11bXVtdKSB7XG4gICAgaWYgKCEodmFsdWVzIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5KSkge1xuICAgICAgY29uc3QgaW5mZXJyZWRTaGFwZSA9IHV0aWwuaW5mZXJTaGFwZSh2YWx1ZXMpO1xuICAgICAgaWYgKGluZmVycmVkU2hhcGUubGVuZ3RoID4gMSkge1xuICAgICAgICB1dGlsLmFzc2VydFNoYXBlc01hdGNoKFxuICAgICAgICAgICAgc2hhcGUsIGluZmVycmVkU2hhcGUsXG4gICAgICAgICAgICBgRXJyb3Igd2hlbiBjb25zdHJ1Y3RpbmcgQXJyYXk0RC4gU2hhcGUgb2YgdmFsdWVzIGAgK1xuICAgICAgICAgICAgICAgIGAke2luZmVycmVkU2hhcGV9IGRvZXMgbm90IG1hdGNoIHRoZSBwcm92aWRlZCBzaGFwZSBgICtcbiAgICAgICAgICAgICAgICBgJHtzaGFwZX0uIGApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IEFycmF5NEQoc2hhcGUsIHt2YWx1ZXM6IHRvVHlwZWRBcnJheSh2YWx1ZXMpfSk7XG4gIH1cblxuICBnZXQoaTogbnVtYmVyLCBqOiBudW1iZXIsIGs6IG51bWJlciwgbDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWVzKClcbiAgICAgICAgW3RoaXMuc3RyaWRlMCAqIGkgKyB0aGlzLnN0cmlkZTEgKiBqICsgdGhpcy5zdHJpZGUyICogayArIGxdO1xuICB9XG5cbiAgc2V0KHZhbHVlOiBudW1iZXIsIGk6IG51bWJlciwgajogbnVtYmVyLCBrOiBudW1iZXIsIGw6IG51bWJlcikge1xuICAgIHRoaXMuZ2V0VmFsdWVzKClcbiAgICAgICAgW3RoaXMuc3RyaWRlMCAqIGkgKyB0aGlzLnN0cmlkZTEgKiBqICsgdGhpcy5zdHJpZGUyICogayArIGxdID0gdmFsdWU7XG4gIH1cblxuICBhZGQodmFsdWU6IG51bWJlciwgaTogbnVtYmVyLCBqOiBudW1iZXIsIGs6IG51bWJlciwgbDogbnVtYmVyKSB7XG4gICAgdGhpcy5nZXRWYWx1ZXMoKVxuICAgICAgICBbdGhpcy5zdHJpZGUwICogaSArIHRoaXMuc3RyaWRlMSAqIGogKyB0aGlzLnN0cmlkZTIgKiBrICsgbF0gKz0gdmFsdWU7XG4gIH1cblxuICBsb2NUb0luZGV4KGxvY3M6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5zdHJpZGUwICogbG9jc1swXSArIHRoaXMuc3RyaWRlMSAqIGxvY3NbMV0gK1xuICAgICAgICB0aGlzLnN0cmlkZTIgKiBsb2NzWzJdICsgbG9jc1szXTtcbiAgfVxuXG4gIGluZGV4VG9Mb2MoaW5kZXg6IG51bWJlcik6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdIHtcbiAgICBjb25zdCBpID0gTWF0aC5mbG9vcihpbmRleCAvIHRoaXMuc3RyaWRlMCk7XG4gICAgaW5kZXggLT0gaSAqIHRoaXMuc3RyaWRlMDtcbiAgICBjb25zdCBqID0gTWF0aC5mbG9vcihpbmRleCAvIHRoaXMuc3RyaWRlMSk7XG4gICAgaW5kZXggLT0gaiAqIHRoaXMuc3RyaWRlMTtcbiAgICByZXR1cm4gW2ksIGosIE1hdGguZmxvb3IoaW5kZXggLyB0aGlzLnN0cmlkZTIpLCBpbmRleCAlIHRoaXMuc3RyaWRlMl07XG4gIH1cblxuICBzdGF0aWMgemVyb3Moc2hhcGU6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdKTogQXJyYXk0RCB7XG4gICAgcmV0dXJuIE5EQXJyYXkuemVyb3M8QXJyYXk0RD4oc2hhcGUpO1xuICB9XG59XG5cbnR5cGUgQXJyYXlEYXRhID0gRmxvYXQzMkFycmF5fG51bWJlcltdfG51bWJlcltdW118bnVtYmVyW11bXVtdfG51bWJlcltdW11bXVtdO1xuXG5mdW5jdGlvbiB0b1R5cGVkQXJyYXkoYTogQXJyYXlEYXRhKTogRmxvYXQzMkFycmF5IHtcbiAgcmV0dXJuIChhIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5KSA/IGEgOiBuZXcgRmxvYXQzMkFycmF5KHV0aWwuZmxhdHRlbihhKSk7XG59XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCB7R1BHUFVDb250ZXh0fSBmcm9tICcuL2dwZ3B1X2NvbnRleHQnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RnJhZ21lbnRTaGFkZXJTb3VyY2UoKTogc3RyaW5nIHtcbiAgcmV0dXJuIGBcbiAgICBwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG4gICAgdW5pZm9ybSBzYW1wbGVyMkQgbWF0cml4QTtcbiAgICB1bmlmb3JtIHNhbXBsZXIyRCBtYXRyaXhCO1xuICAgIHVuaWZvcm0gc2FtcGxlcjJEIG1hdHJpeEFTY2FsYXI7XG4gICAgdW5pZm9ybSBzYW1wbGVyMkQgbWF0cml4QlNjYWxhcjtcbiAgICB2YXJ5aW5nIHZlYzIgcmVzdWx0VVY7XG5cbiAgICBjb25zdCB2ZWMyIGhhbGZUZXhlbCA9IHZlYzIoMC41LCAwLjUpO1xuXG4gICAgdm9pZCBtYWluKCkge1xuICAgICAgZmxvYXQgYSA9IHRleHR1cmUyRChtYXRyaXhBLCByZXN1bHRVVikucjtcbiAgICAgIGZsb2F0IGIgPSB0ZXh0dXJlMkQobWF0cml4QiwgcmVzdWx0VVYpLnI7XG4gICAgICBmbG9hdCBhU2NhbGFyID0gdGV4dHVyZTJEKG1hdHJpeEFTY2FsYXIsIGhhbGZUZXhlbCkucjtcbiAgICAgIGZsb2F0IGJTY2FsYXIgPSB0ZXh0dXJlMkQobWF0cml4QlNjYWxhciwgaGFsZlRleGVsKS5yO1xuICAgICAgdmVjMiBhYlNjYWxlZCA9IHZlYzIoYSwgYikgKiB2ZWMyKGFTY2FsYXIsIGJTY2FsYXIpO1xuICAgICAgZ2xfRnJhZ0NvbG9yID0gdmVjNChhYlNjYWxlZC54ICsgYWJTY2FsZWQueSwgMCwgMCwgMCk7XG4gICAgfWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRTY2FsZWRNYXRyaWNlcyhcbiAgICBncGdwdTogR1BHUFVDb250ZXh0LCBhZGRTY2FsZWRNYXRyaWNlc1Byb2dyYW06IFdlYkdMUHJvZ3JhbSxcbiAgICBhOiBXZWJHTFRleHR1cmUsIGI6IFdlYkdMVGV4dHVyZSwgcm93czogbnVtYmVyLCBjb2x1bW5zOiBudW1iZXIsXG4gICAgYVNjYWxhcjogV2ViR0xUZXh0dXJlLCBiU2NhbGFyOiBXZWJHTFRleHR1cmUsIHJlc3VsdDogV2ViR0xUZXh0dXJlKSB7XG4gIGdwZ3B1LnNldE91dHB1dE1hdHJpeFRleHR1cmUocmVzdWx0LCByb3dzLCBjb2x1bW5zKTtcbiAgZ3BncHUuc2V0UHJvZ3JhbShhZGRTY2FsZWRNYXRyaWNlc1Byb2dyYW0pO1xuICBncGdwdS5zZXRJbnB1dE1hdHJpeFRleHR1cmUoYSwgJ21hdHJpeEEnLCAwKTtcbiAgZ3BncHUuc2V0SW5wdXRNYXRyaXhUZXh0dXJlKGIsICdtYXRyaXhCJywgMSk7XG4gIGdwZ3B1LnNldElucHV0TWF0cml4VGV4dHVyZShhU2NhbGFyLCAnbWF0cml4QVNjYWxhcicsIDIpO1xuICBncGdwdS5zZXRJbnB1dE1hdHJpeFRleHR1cmUoYlNjYWxhciwgJ21hdHJpeEJTY2FsYXInLCAzKTtcbiAgZ3BncHUuZXhlY3V0ZVByb2dyYW0oKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwbG9hZEFkZFNjYWxlZE1hdHJpY2VzRG93bmxvYWQoXG4gICAgYTogRmxvYXQzMkFycmF5LCBiOiBGbG9hdDMyQXJyYXksIHJvd3M6IG51bWJlciwgY29sdW1uczogbnVtYmVyLFxuICAgIGFTY2FsYXI6IG51bWJlciwgYlNjYWxhcjogbnVtYmVyKTogRmxvYXQzMkFycmF5IHtcbiAgY29uc3QgZ3BncHUgPSBuZXcgR1BHUFVDb250ZXh0KCk7XG4gIGNvbnN0IHByb2dyYW06IFdlYkdMUHJvZ3JhbSA9IGdwZ3B1LmNyZWF0ZVByb2dyYW0oZ2V0RnJhZ21lbnRTaGFkZXJTb3VyY2UoKSk7XG5cbiAgY29uc3QgYVRleCA9IGdwZ3B1LmNyZWF0ZU1hdHJpeFRleHR1cmUocm93cywgY29sdW1ucyk7XG4gIGNvbnN0IGJUZXggPSBncGdwdS5jcmVhdGVNYXRyaXhUZXh0dXJlKHJvd3MsIGNvbHVtbnMpO1xuICBjb25zdCBhU2NhbGFyVGV4ID0gZ3BncHUuY3JlYXRlTWF0cml4VGV4dHVyZSgxLCAxKTtcbiAgY29uc3QgYlNjYWxhclRleCA9IGdwZ3B1LmNyZWF0ZU1hdHJpeFRleHR1cmUoMSwgMSk7XG4gIGNvbnN0IHJlc3VsdFRleCA9IGdwZ3B1LmNyZWF0ZU1hdHJpeFRleHR1cmUocm93cywgY29sdW1ucyk7XG5cbiAgZ3BncHUudXBsb2FkTWF0cml4VG9UZXh0dXJlKGFUZXgsIHJvd3MsIGNvbHVtbnMsIGEpO1xuICBncGdwdS51cGxvYWRNYXRyaXhUb1RleHR1cmUoYlRleCwgcm93cywgY29sdW1ucywgYik7XG4gIGdwZ3B1LnVwbG9hZE1hdHJpeFRvVGV4dHVyZShhU2NhbGFyVGV4LCAxLCAxLCBuZXcgRmxvYXQzMkFycmF5KFthU2NhbGFyXSkpO1xuICBncGdwdS51cGxvYWRNYXRyaXhUb1RleHR1cmUoYlNjYWxhclRleCwgMSwgMSwgbmV3IEZsb2F0MzJBcnJheShbYlNjYWxhcl0pKTtcblxuICBhZGRTY2FsZWRNYXRyaWNlcyhcbiAgICAgIGdwZ3B1LCBwcm9ncmFtLCBhVGV4LCBiVGV4LCByb3dzLCBjb2x1bW5zLCBhU2NhbGFyVGV4LCBiU2NhbGFyVGV4LFxuICAgICAgcmVzdWx0VGV4KTtcblxuICBjb25zdCByZXN1bHQgPSBncGdwdS5kb3dubG9hZE1hdHJpeEZyb21UZXh0dXJlKHJlc3VsdFRleCwgcm93cywgY29sdW1ucyk7XG5cbiAgZ3BncHUuZGVsZXRlTWF0cml4VGV4dHVyZShhVGV4KTtcbiAgZ3BncHUuZGVsZXRlTWF0cml4VGV4dHVyZShiVGV4KTtcbiAgZ3BncHUuZGVsZXRlTWF0cml4VGV4dHVyZShyZXN1bHRUZXgpO1xuICBncGdwdS5kZWxldGVNYXRyaXhUZXh0dXJlKGFTY2FsYXJUZXgpO1xuICBncGdwdS5kZWxldGVNYXRyaXhUZXh0dXJlKGJTY2FsYXJUZXgpO1xuICBncGdwdS5kZWxldGVQcm9ncmFtKHByb2dyYW0pO1xuICBncGdwdS5kaXNwb3NlKCk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0IHtNYXRyaXhPcmllbnRhdGlvbn0gZnJvbSAnLi4vbWF0aCc7XG5cbmltcG9ydCAqIGFzIGJpbmFyeW9wX2dwdSBmcm9tICcuL2JpbmFyeW9wX2dwdSc7XG5pbXBvcnQge0dQR1BVQ29udGV4dH0gZnJvbSAnLi9ncGdwdV9jb250ZXh0JztcblxuZXhwb3J0IHR5cGUgT3BlcmF0aW9uID0gJysnIHwgJy0nIHwgJyonIHwgJy8nO1xuXG5leHBvcnQgZW51bSBPcGVyYW5kVHlwZSB7XG4gIE1BVFJJWCxcbiAgU0NBTEFSXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGcmFnbWVudFNoYWRlclNvdXJjZShcbiAgICBhVHlwZTogT3BlcmFuZFR5cGUsIGFPcmllbnRhdGlvbjogTWF0cml4T3JpZW50YXRpb24sIG9wOiBPcGVyYXRpb24sXG4gICAgYlR5cGU6IE9wZXJhbmRUeXBlLCBiT3JpZW50YXRpb246IE1hdHJpeE9yaWVudGF0aW9uKTogc3RyaW5nIHtcbiAgY29uc3QgYVVWID0gb3BlcmFuZFRvU2hhZGVyU25pcHBldChhVHlwZSwgYU9yaWVudGF0aW9uKTtcbiAgY29uc3QgYlVWID0gb3BlcmFuZFRvU2hhZGVyU25pcHBldChiVHlwZSwgYk9yaWVudGF0aW9uKTtcbiAgY29uc3QgcmVzdWx0T3AgPSBgZ2xfRnJhZ0NvbG9yID0gdmVjNChhICR7b3B9IGIsIDAsIDAsIDApO2A7XG4gIHJldHVybiBiaW5hcnlvcF9ncHUuZ2V0RnJhZ21lbnRTaGFkZXJTb3VyY2UoYVVWLCBiVVYsIHJlc3VsdE9wKTtcbn1cblxuZnVuY3Rpb24gb3BlcmFuZFRvU2hhZGVyU25pcHBldChcbiAgICBvcGVyYW5kOiBPcGVyYW5kVHlwZSwgb3JpZW50YXRpb246IE1hdHJpeE9yaWVudGF0aW9uKTogc3RyaW5nIHtcbiAgc3dpdGNoIChvcGVyYW5kKSB7XG4gICAgY2FzZSBPcGVyYW5kVHlwZS5NQVRSSVg6XG4gICAgICByZXR1cm4gJ3Jlc3VsdFVWJyArXG4gICAgICAgICAgKG9yaWVudGF0aW9uID09PSBNYXRyaXhPcmllbnRhdGlvbi5SRUdVTEFSID8gJy5zdCcgOiAnLnRzJyk7XG4gICAgY2FzZSBPcGVyYW5kVHlwZS5TQ0FMQVI6XG4gICAgICByZXR1cm4gJ3ZlYzIoMC41LCAwLjUpJztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG9wZXJhbmQgdHlwZScpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRTdWJNdWxEaXYoXG4gICAgZ3BncHU6IEdQR1BVQ29udGV4dCwgcHJvZ3JhbTogV2ViR0xQcm9ncmFtLCBhOiBXZWJHTFRleHR1cmUsXG4gICAgYVNoYXBlUm93Q29sOiBbbnVtYmVyLCBudW1iZXJdLCBiOiBXZWJHTFRleHR1cmUsXG4gICAgYlNoYXBlUm93Q29sOiBbbnVtYmVyLCBudW1iZXJdLCByZXN1bHQ6IFdlYkdMVGV4dHVyZSxcbiAgICByZXN1bHRTaGFwZVJvd0NvbDogW251bWJlciwgbnVtYmVyXSkge1xuICByZXR1cm4gYmluYXJ5b3BfZ3B1LmJpbmFyeU9wKFxuICAgICAgZ3BncHUsIHByb2dyYW0sIGEsIGFTaGFwZVJvd0NvbCwgYiwgYlNoYXBlUm93Q29sLCByZXN1bHQsXG4gICAgICByZXN1bHRTaGFwZVJvd0NvbCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGxvYWRTY2FsYXJQbHVzTWF0cml4RG93bmxvYWQoXG4gICAgYTogbnVtYmVyLCBiOiBGbG9hdDMyQXJyYXksIGJTaGFwZTogW251bWJlciwgbnVtYmVyXSxcbiAgICBiT3JpZW50YXRpb24gPSBNYXRyaXhPcmllbnRhdGlvbi5SRUdVTEFSKTogRmxvYXQzMkFycmF5IHtcbiAgY29uc3Qgc3JjID0gZ2V0RnJhZ21lbnRTaGFkZXJTb3VyY2UoXG4gICAgICBPcGVyYW5kVHlwZS5TQ0FMQVIsIE1hdHJpeE9yaWVudGF0aW9uLlJFR1VMQVIsICcrJywgT3BlcmFuZFR5cGUuTUFUUklYLFxuICAgICAgYk9yaWVudGF0aW9uKTtcbiAgcmV0dXJuIGJpbmFyeW9wX2dwdS51cGxvYWRCaW5hcnlPcERvd25sb2FkKFxuICAgICAgbmV3IEZsb2F0MzJBcnJheShbYV0pLCBbMSwgMV0sIGIsIGJTaGFwZSwgc3JjKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwbG9hZE1hdHJpeE1pbnVzU2NhbGFyRG93bmxvYWQoXG4gICAgYTogRmxvYXQzMkFycmF5LCBhU2hhcGU6IFtudW1iZXIsIG51bWJlcl0sIGI6IG51bWJlcixcbiAgICBhT3JpZW50YXRpb24gPSBNYXRyaXhPcmllbnRhdGlvbi5SRUdVTEFSKTogRmxvYXQzMkFycmF5IHtcbiAgY29uc3Qgc3JjID0gZ2V0RnJhZ21lbnRTaGFkZXJTb3VyY2UoXG4gICAgICBPcGVyYW5kVHlwZS5NQVRSSVgsIGFPcmllbnRhdGlvbiwgJy0nLCBPcGVyYW5kVHlwZS5TQ0FMQVIsXG4gICAgICBNYXRyaXhPcmllbnRhdGlvbi5SRUdVTEFSKTtcbiAgcmV0dXJuIGJpbmFyeW9wX2dwdS51cGxvYWRCaW5hcnlPcERvd25sb2FkKFxuICAgICAgYSwgYVNoYXBlLCBuZXcgRmxvYXQzMkFycmF5KFtiXSksIFsxLCAxXSwgc3JjKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwbG9hZFNjYWxhck1pbnVzTWF0cml4RG93bmxvYWQoXG4gICAgYTogbnVtYmVyLCBiOiBGbG9hdDMyQXJyYXksIGJTaGFwZTogW251bWJlciwgbnVtYmVyXSxcbiAgICBiT3JpZW50YXRpb24gPSBNYXRyaXhPcmllbnRhdGlvbi5SRUdVTEFSKTogRmxvYXQzMkFycmF5IHtcbiAgY29uc3Qgc3JjID0gZ2V0RnJhZ21lbnRTaGFkZXJTb3VyY2UoXG4gICAgICBPcGVyYW5kVHlwZS5TQ0FMQVIsIE1hdHJpeE9yaWVudGF0aW9uLlJFR1VMQVIsICctJywgT3BlcmFuZFR5cGUuTUFUUklYLFxuICAgICAgYk9yaWVudGF0aW9uKTtcbiAgcmV0dXJuIGJpbmFyeW9wX2dwdS51cGxvYWRCaW5hcnlPcERvd25sb2FkKFxuICAgICAgbmV3IEZsb2F0MzJBcnJheShbYV0pLCBbMSwgMV0sIGIsIGJTaGFwZSwgc3JjKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwbG9hZFNjYWxhclRpbWVzTWF0cml4RG93bmxvYWQoXG4gICAgYTogbnVtYmVyLCBiOiBGbG9hdDMyQXJyYXksIGJTaGFwZTogW251bWJlciwgbnVtYmVyXSxcbiAgICBiT3JpZW50YXRpb24gPSBNYXRyaXhPcmllbnRhdGlvbi5SRUdVTEFSKTogRmxvYXQzMkFycmF5IHtcbiAgY29uc3Qgc3JjID0gZ2V0RnJhZ21lbnRTaGFkZXJTb3VyY2UoXG4gICAgICBPcGVyYW5kVHlwZS5TQ0FMQVIsIE1hdHJpeE9yaWVudGF0aW9uLlJFR1VMQVIsICcqJywgT3BlcmFuZFR5cGUuTUFUUklYLFxuICAgICAgYk9yaWVudGF0aW9uKTtcbiAgcmV0dXJuIGJpbmFyeW9wX2dwdS51cGxvYWRCaW5hcnlPcERvd25sb2FkKFxuICAgICAgbmV3IEZsb2F0MzJBcnJheShbYV0pLCBbMSwgMV0sIGIsIGJTaGFwZSwgc3JjKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwbG9hZE1hdHJpeFRpbWVzTWF0cml4RG93bmxvYWQoXG4gICAgYTogRmxvYXQzMkFycmF5LCBiOiBGbG9hdDMyQXJyYXksIHNoYXBlOiBbbnVtYmVyLCBudW1iZXJdLFxuICAgIGFPcmllbnRhdGlvbiA9IE1hdHJpeE9yaWVudGF0aW9uLlJFR1VMQVIsXG4gICAgYk9yaWVudGF0aW9uID0gTWF0cml4T3JpZW50YXRpb24uUkVHVUxBUik6IEZsb2F0MzJBcnJheSB7XG4gIGNvbnN0IHNyYyA9IGdldEZyYWdtZW50U2hhZGVyU291cmNlKFxuICAgICAgT3BlcmFuZFR5cGUuTUFUUklYLCBhT3JpZW50YXRpb24sICcqJywgT3BlcmFuZFR5cGUuTUFUUklYLCBiT3JpZW50YXRpb24pO1xuICByZXR1cm4gYmluYXJ5b3BfZ3B1LnVwbG9hZEJpbmFyeU9wRG93bmxvYWQoYSwgc2hhcGUsIGIsIHNoYXBlLCBzcmMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBsb2FkTWF0cml4UGx1c01hdHJpeERvd25sb2FkKFxuICAgIGE6IEZsb2F0MzJBcnJheSwgYjogRmxvYXQzMkFycmF5LCBzaGFwZTogW251bWJlciwgbnVtYmVyXSxcbiAgICBhT3JpZW50YXRpb24gPSBNYXRyaXhPcmllbnRhdGlvbi5SRUdVTEFSLFxuICAgIGJPcmllbnRhdGlvbiA9IE1hdHJpeE9yaWVudGF0aW9uLlJFR1VMQVIpOiBGbG9hdDMyQXJyYXkge1xuICBjb25zdCBzcmMgPSBnZXRGcmFnbWVudFNoYWRlclNvdXJjZShcbiAgICAgIE9wZXJhbmRUeXBlLk1BVFJJWCwgYU9yaWVudGF0aW9uLCAnKycsIE9wZXJhbmRUeXBlLk1BVFJJWCwgYk9yaWVudGF0aW9uKTtcbiAgcmV0dXJuIGJpbmFyeW9wX2dwdS51cGxvYWRCaW5hcnlPcERvd25sb2FkKGEsIHNoYXBlLCBiLCBzaGFwZSwgc3JjKTtcbn1cbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0ICogYXMgYXJnbWlubWF4X2dwdSBmcm9tICcuL2FyZ21pbm1heF9ncHUnO1xuaW1wb3J0IHtHUEdQVUNvbnRleHR9IGZyb20gJy4vZ3BncHVfY29udGV4dCc7XG5pbXBvcnQge0lTX05BTl9TSEFERVJfRlVOQ30gZnJvbSAnLi93ZWJnbF91dGlsJztcblxuZnVuY3Rpb24gZ2V0RnJhZ21lbnRTaGFkZXJQcm9sb2d1ZVNvdXJjZSgpOiBzdHJpbmcge1xuICByZXR1cm4gYFxuICAgIHByZWNpc2lvbiBoaWdocCBmbG9hdDtcbiAgICB1bmlmb3JtIHNhbXBsZXIyRCBtYXRyaXhBO1xuICAgIHVuaWZvcm0gc2FtcGxlcjJEIG1hdHJpeEI7XG4gICAgdmFyeWluZyB2ZWMyIHJlc3VsdFVWO2A7XG59XG5cbmZ1bmN0aW9uIGdldEZyYWdtZW50U2hhZGVyTWFpblNvdXJjZSgpOiBzdHJpbmcge1xuICByZXR1cm4gYFxuICAgIHZvaWQgbWFpbigpIHtcbiAgICAgIGZsb2F0IGFyZ01heEEgPSBnZXRBcmdNaW5NYXgobWF0cml4QSk7XG4gICAgICBmbG9hdCBhcmdNYXhCID0gZ2V0QXJnTWluTWF4KG1hdHJpeEIpO1xuICAgICAgZmxvYXQgdmFsdWU7XG4gICAgICBpZiAoaXNOYU4oYXJnTWF4QSkpIHtcbiAgICAgICAgdmFsdWUgPSBhcmdNYXhBO1xuICAgICAgfSBlbHNlIGlmIChpc05hTihhcmdNYXhCKSkge1xuICAgICAgICB2YWx1ZSA9IGFyZ01heEI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IGZsb2F0KGFyZ01heEEgPT0gYXJnTWF4Qik7XG4gICAgICB9XG4gICAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KHZhbHVlLCAwLCAwLCAwKTtcbiAgICB9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFyZ01heEVxdWFsc0ZyYWdtZW50U2hhZGVyU291cmNlKFxuICAgIHJvd3M6IG51bWJlciwgY29sdW1uczogbnVtYmVyKTogc3RyaW5nIHtcbiAgcmV0dXJuIFtcbiAgICBnZXRGcmFnbWVudFNoYWRlclByb2xvZ3VlU291cmNlKCksXG4gICAgYXJnbWlubWF4X2dwdS5nZXRGcmFnbWVudFNoYWRlckdldEFyZ01pbk1heFNvdXJjZSgnPicsIHJvd3MsIGNvbHVtbnMpLFxuICAgIGdldEZyYWdtZW50U2hhZGVyTWFpblNvdXJjZSgpXG4gIF0uam9pbignXFxuJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcmdNYXhFcXVhbHMoXG4gICAgZ3BncHU6IEdQR1BVQ29udGV4dCwgbWF4RXF1YWxzUHJvZ3JhbTogV2ViR0xQcm9ncmFtLCBhOiBXZWJHTFRleHR1cmUsXG4gICAgYjogV2ViR0xUZXh0dXJlLCBudW1Sb3dzOiBudW1iZXIsIG51bUNvbHM6IG51bWJlciwgcmVzdWx0OiBXZWJHTFRleHR1cmUpIHtcbiAgZ3BncHUuc2V0T3V0cHV0TWF0cml4VGV4dHVyZShyZXN1bHQsIDEsIDEpO1xuICBncGdwdS5zZXRQcm9ncmFtKG1heEVxdWFsc1Byb2dyYW0pO1xuICBncGdwdS5zZXRJbnB1dE1hdHJpeFRleHR1cmUoYSwgJ21hdHJpeEEnLCAwKTtcbiAgZ3BncHUuc2V0SW5wdXRNYXRyaXhUZXh0dXJlKGIsICdtYXRyaXhCJywgMSk7XG4gIGdwZ3B1LmV4ZWN1dGVQcm9ncmFtKCk7XG59XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCB7R1BHUFVDb250ZXh0fSBmcm9tICcuL2dwZ3B1X2NvbnRleHQnO1xuaW1wb3J0IHtJU19OQU5fU0hBREVSX0ZVTkN9IGZyb20gJy4vd2ViZ2xfdXRpbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGcmFnbWVudFNoYWRlclByb2xvZ3VlU291cmNlKCk6IHN0cmluZyB7XG4gIHJldHVybiBgXG4gICAgcHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xuICAgIHVuaWZvcm0gc2FtcGxlcjJEIG1hdHJpeEE7XG4gICAgdmFyeWluZyB2ZWMyIHJlc3VsdFVWO2A7XG59XG5cbmZ1bmN0aW9uIGdldEZyYWdtZW50U2hhZGVyTWFpblNvdXJjZSgpOiBzdHJpbmcge1xuICByZXR1cm4gYFxuICAgIHZvaWQgbWFpbigpIHtcbiAgICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoZ2V0QXJnTWluTWF4KG1hdHJpeEEpLCAwLCAwLCAwKTtcbiAgICB9YDtcbn1cblxuZnVuY3Rpb24gZ2V0QXJnTWluTWF4RnJhZ21lbnRTaGFkZXJTb3VyY2UoXG4gICAgcm93czogbnVtYmVyLCBjb2x1bW5zOiBudW1iZXIsIGNvbXBPcDogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIFtcbiAgICBnZXRGcmFnbWVudFNoYWRlclByb2xvZ3VlU291cmNlKCksXG4gICAgZ2V0RnJhZ21lbnRTaGFkZXJHZXRBcmdNaW5NYXhTb3VyY2UoY29tcE9wLCByb3dzLCBjb2x1bW5zKSxcbiAgICBnZXRGcmFnbWVudFNoYWRlck1haW5Tb3VyY2UoKVxuICBdLmpvaW4oJ1xcbicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXJnTWluRnJhZ21lbnRTaGFkZXJTb3VyY2UoXG4gICAgcm93czogbnVtYmVyLCBjb2x1bW5zOiBudW1iZXIpOiBzdHJpbmcge1xuICByZXR1cm4gZ2V0QXJnTWluTWF4RnJhZ21lbnRTaGFkZXJTb3VyY2Uocm93cywgY29sdW1ucywgJzwnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFyZ01heEZyYWdtZW50U2hhZGVyU291cmNlKFxuICAgIHJvd3M6IG51bWJlciwgY29sdW1uczogbnVtYmVyKTogc3RyaW5nIHtcbiAgcmV0dXJuIGdldEFyZ01pbk1heEZyYWdtZW50U2hhZGVyU291cmNlKHJvd3MsIGNvbHVtbnMsICc+Jyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGcmFnbWVudFNoYWRlckdldEFyZ01pbk1heFNvdXJjZShcbiAgICBjb21wT3A6IHN0cmluZywgcm93czogbnVtYmVyLCBjb2x1bW5zOiBudW1iZXIpIHtcbiAgcmV0dXJuIGBcbiAgICBjb25zdCB2ZWMyIGRpbUNSID0gdmVjMigke2NvbHVtbnN9LjAsICR7cm93c30uMCk7XG4gICAgY29uc3QgdmVjMiBoYWxmQ1IgPSB2ZWMyKDAuNSwgMC41KTtcblxuICAgICR7SVNfTkFOX1NIQURFUl9GVU5DfVxuXG4gICAgZmxvYXQgZ2V0QXJnTWluTWF4KGluIHNhbXBsZXIyRCBtYXRyaXgpIHtcbiAgICAgIHZlYzIgYmVzdENSID0gdmVjMigwLCAwKTtcbiAgICAgIGZsb2F0IGJlc3RWYWx1ZSA9IHRleHR1cmUyRChtYXRyaXgsIGJlc3RDUikucjtcblxuICAgICAgZm9yIChmbG9hdCBjID0gMC4wOyBjIDwgZGltQ1IueDsgYyArPSAxLjApIHtcbiAgICAgICAgZm9yIChmbG9hdCByID0gMC4wOyByIDwgZGltQ1IueTsgciArPSAxLjApIHtcbiAgICAgICAgICB2ZWMyIGNyID0gdmVjMihjLCByKTtcbiAgICAgICAgICB2ZWMyIHV2ID0gKGNyICsgaGFsZkNSKSAvIGRpbUNSO1xuICAgICAgICAgIGZsb2F0IHZhbHVlID0gdGV4dHVyZTJEKG1hdHJpeCwgdXYpLnI7XG4gICAgICAgICAgaWYgKGlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodmFsdWUgJHtjb21wT3B9IGJlc3RWYWx1ZSkge1xuICAgICAgICAgICAgYmVzdFZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICBiZXN0Q1IgPSBjcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBiZXN0Q1IueCArIChiZXN0Q1IueSAqIGRpbUNSLngpO1xuICAgIH1cbiAgYDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFyZ01pbk1heChcbiAgICBncGdwdTogR1BHUFVDb250ZXh0LCBtaW5NYXhQcm9ncmFtOiBXZWJHTFByb2dyYW0sIGE6IFdlYkdMVGV4dHVyZSxcbiAgICBhTnVtUm93czogbnVtYmVyLCBhTnVtQ29sczogbnVtYmVyLCByZXN1bHQ6IFdlYkdMVGV4dHVyZSkge1xuICBncGdwdS5zZXRPdXRwdXRNYXRyaXhUZXh0dXJlKHJlc3VsdCwgMSwgMSk7XG4gIGdwZ3B1LnNldFByb2dyYW0obWluTWF4UHJvZ3JhbSk7XG4gIGdwZ3B1LnNldElucHV0TWF0cml4VGV4dHVyZShhLCAnbWF0cml4QScsIDApO1xuICBncGdwdS5leGVjdXRlUHJvZ3JhbSgpO1xufVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQge0dQR1BVQ29udGV4dH0gZnJvbSAnLi9ncGdwdV9jb250ZXh0JztcbmltcG9ydCAqIGFzIHBvb2xfZ3B1IGZyb20gJy4vcG9vbF9ncHUnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RnJhZ21lbnRTaGFkZXJBdmdQb29sU291cmNlKFxuICAgIHhTaGFwZVJDRDogW251bWJlciwgbnVtYmVyLCBudW1iZXJdLCBmU2l6ZTogbnVtYmVyLCBzdHJpZGU6IG51bWJlcixcbiAgICBwYWQ6IG51bWJlcikge1xuICByZXR1cm4gcG9vbF9ncHUuZ2V0RnJhZ21lbnRTaGFkZXJQb29sQ29tbW9uU291cmNlKFxuICAgICAgeFNoYXBlUkNELCBmU2l6ZSwgc3RyaWRlLCBwYWQsICdhdmcnLCBmYWxzZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhdmdQb29sKFxuICAgIGdwZ3B1OiBHUEdQVUNvbnRleHQsIHByb2dyYW06IFdlYkdMUHJvZ3JhbSwgeDogV2ViR0xUZXh0dXJlLFxuICAgIHJlc3VsdDogV2ViR0xUZXh0dXJlLCByZXN1bHRTaGFwZVJvd0NvbDogW251bWJlciwgbnVtYmVyXSkge1xuICBwb29sX2dwdS5wb29sQ29tbW9uKGdwZ3B1LCBwcm9ncmFtLCB4LCByZXN1bHQsIHJlc3VsdFNoYXBlUm93Q29sKTtcbn0iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCB7R1BHUFVDb250ZXh0fSBmcm9tICcuL2dwZ3B1X2NvbnRleHQnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RnJhZ21lbnRTaGFkZXJTb3VyY2UoXG4gICAgeFRleFNoYXBlUkM6IFtudW1iZXIsIG51bWJlcl0sIG1lYW5UZXhTaGFwZVJDOiBbbnVtYmVyLCBudW1iZXJdLFxuICAgIHZhcmlhbmNlVGV4U2hhcGVSQzogW251bWJlciwgbnVtYmVyXSxcbiAgICBvZmZzZXRUZXhTaGFwZVJDOiBbbnVtYmVyLCBudW1iZXJdfG51bGwsXG4gICAgc2NhbGVUZXhTaGFwZVJDPzogW251bWJlciwgbnVtYmVyXXxudWxsLCB2YXJpYW5jZUVwc2lsb24gPSAwLjAwMSk6IHN0cmluZyB7XG4gIGxldCBvZmZzZXRTYW1wbGVyU25pcHBldCA9ICcnO1xuICBsZXQgb2Zmc2V0U2hhcGVJbml0aWFsaXphdGlvblNuaXBwZXQgPSAnJztcbiAgbGV0IG9mZnNldENvb3Jkc1NuaXBwZXQgPSAnJztcbiAgbGV0IG9mZnNldFVWU25pcHBldCA9ICcnO1xuICBsZXQgb2Zmc2V0VmFsdWVTbmlwcGV0ID0gJyc7XG4gIGxldCBvZmZzZXRPcGVyYXRpb25TbmlwcGV0ID0gJzAuMCc7XG5cbiAgbGV0IHNjYWxlU2FtcGxlclNuaXBwZXQgPSAnJztcbiAgbGV0IHNjYWxlU2hhcGVJbml0aWFsaXphdGlvblNuaXBwZXQgPSAnJztcbiAgbGV0IHNjYWxlQ29vcmRzU25pcHBldCA9ICcnO1xuICBsZXQgc2NhbGVVVlNuaXBwZXQgPSAnJztcbiAgbGV0IHNjYWxlVmFsdWVTbmlwcGV0ID0gJyc7XG4gIGxldCBzY2FsZU9wZXJhdGlvblNuaXBwZXQgPSAnJztcblxuICBpZiAob2Zmc2V0VGV4U2hhcGVSQyAhPSBudWxsKSB7XG4gICAgb2Zmc2V0U2FtcGxlclNuaXBwZXQgPSAndW5pZm9ybSBzYW1wbGVyMkQgb2Zmc2V0Oyc7XG4gICAgb2Zmc2V0U2hhcGVJbml0aWFsaXphdGlvblNuaXBwZXQgPSBgY29uc3QgdmVjMiBvZmZzZXRTaGFwZUNSID0gdmVjMihcbiAgICAgICAgICAgICR7b2Zmc2V0VGV4U2hhcGVSQ1sxXX0sICR7b2Zmc2V0VGV4U2hhcGVSQ1swXX0pO2A7XG4gICAgb2Zmc2V0Q29vcmRzU25pcHBldCA9ICd2ZWMyIG9mZnNldENvb3Jkc0NSID0gbW9kKHlUZXhDUiwgb2Zmc2V0U2hhcGVDUik7JztcbiAgICBvZmZzZXRVVlNuaXBwZXQgPVxuICAgICAgICAndmVjMiBvZmZzZXRVViA9IChvZmZzZXRDb29yZHNDUiArIGhhbGZDUikgLyBvZmZzZXRTaGFwZUNSOyc7XG4gICAgb2Zmc2V0VmFsdWVTbmlwcGV0ID0gJ2Zsb2F0IG9mZnNldFZhbHVlID0gdGV4dHVyZTJEKG9mZnNldCwgb2Zmc2V0VVYpLnI7JztcbiAgICBvZmZzZXRPcGVyYXRpb25TbmlwcGV0ID0gJ29mZnNldFZhbHVlJztcbiAgfVxuXG4gIGlmIChzY2FsZVRleFNoYXBlUkMgIT0gbnVsbCkge1xuICAgIHNjYWxlU2FtcGxlclNuaXBwZXQgPSAndW5pZm9ybSBzYW1wbGVyMkQgc2NhbGU7JztcbiAgICBzY2FsZVNoYXBlSW5pdGlhbGl6YXRpb25TbmlwcGV0ID0gYGNvbnN0IHZlYzIgc2NhbGVTaGFwZUNSID0gdmVjMihcbiAgICAgICAgICAgICR7c2NhbGVUZXhTaGFwZVJDWzFdfSwgJHtzY2FsZVRleFNoYXBlUkNbMF19KTtgO1xuICAgIHNjYWxlQ29vcmRzU25pcHBldCA9ICd2ZWMyIHNjYWxlQ29vcmRzQ1IgPSBtb2QoeVRleENSLCBzY2FsZVNoYXBlQ1IpOyc7XG4gICAgc2NhbGVVVlNuaXBwZXQgPSAndmVjMiBzY2FsZVVWID0gKHNjYWxlQ29vcmRzQ1IgKyBoYWxmQ1IpIC8gc2NhbGVTaGFwZUNSOyc7XG4gICAgc2NhbGVWYWx1ZVNuaXBwZXQgPSAnZmxvYXQgc2NhbGVWYWx1ZSA9IHRleHR1cmUyRChzY2FsZSwgc2NhbGVVVikucjsnO1xuICAgIHNjYWxlT3BlcmF0aW9uU25pcHBldCA9ICdpbnYgKj0gc2NhbGVWYWx1ZTsnO1xuICB9XG5cbiAgcmV0dXJuIGBcbiAgICBwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG4gICAgdW5pZm9ybSBzYW1wbGVyMkQgeDtcbiAgICB1bmlmb3JtIHNhbXBsZXIyRCBtZWFuO1xuICAgIHVuaWZvcm0gc2FtcGxlcjJEIHZhcmlhbmNlO1xuICAgICR7b2Zmc2V0U2FtcGxlclNuaXBwZXR9XG4gICAgJHtzY2FsZVNhbXBsZXJTbmlwcGV0fVxuXG4gICAgdmFyeWluZyB2ZWMyIHJlc3VsdFVWO1xuXG4gICAgY29uc3QgdmVjMiB4U2hhcGVDUiA9IHZlYzIoJHt4VGV4U2hhcGVSQ1sxXX0sICR7eFRleFNoYXBlUkNbMF19KTtcbiAgICBjb25zdCB2ZWMyIG1lYW5TaGFwZUNSID0gdmVjMigke21lYW5UZXhTaGFwZVJDWzFdfSwgJHttZWFuVGV4U2hhcGVSQ1swXX0pO1xuICAgIGNvbnN0IHZlYzIgdmFyaWFuY2VTaGFwZUNSID0gdmVjMihcbiAgICAgICAgJHt2YXJpYW5jZVRleFNoYXBlUkNbMV19LCAke3ZhcmlhbmNlVGV4U2hhcGVSQ1swXX0pO1xuXG4gICAgJHtvZmZzZXRTaGFwZUluaXRpYWxpemF0aW9uU25pcHBldH1cbiAgICAke3NjYWxlU2hhcGVJbml0aWFsaXphdGlvblNuaXBwZXR9XG5cbiAgICBjb25zdCB2ZWMyIGhhbGZDUiA9IHZlYzIoMC41LCAwLjUpO1xuICAgIGNvbnN0IGZsb2F0IHZhcmlhbmNlRXBzaWxvbiA9ICR7dmFyaWFuY2VFcHNpbG9ufTtcblxuICAgIHZvaWQgbWFpbigpIHtcbiAgICAgIHZlYzIgeVRleENSID0gZmxvb3IoZ2xfRnJhZ0Nvb3JkLnh5KTtcblxuICAgICAgdmVjMiBtZWFuQ29vcmRzQ1IgPSBtb2QoeVRleENSLCBtZWFuU2hhcGVDUik7XG4gICAgICB2ZWMyIHZhcmlhbmNlQ29vcmRzQ1IgPSBtb2QoeVRleENSLCB2YXJpYW5jZVNoYXBlQ1IpO1xuICAgICAgJHtvZmZzZXRDb29yZHNTbmlwcGV0fVxuICAgICAgJHtzY2FsZUNvb3Jkc1NuaXBwZXR9XG5cbiAgICAgIHZlYzIgbWVhblVWID0gKG1lYW5Db29yZHNDUiArIGhhbGZDUikgLyBtZWFuU2hhcGVDUjtcbiAgICAgIHZlYzIgdmFyaWFuY2VVViA9ICh2YXJpYW5jZUNvb3Jkc0NSICsgaGFsZkNSKSAvIHZhcmlhbmNlU2hhcGVDUjtcbiAgICAgICR7b2Zmc2V0VVZTbmlwcGV0fVxuICAgICAgJHtzY2FsZVVWU25pcHBldH1cblxuICAgICAgZmxvYXQgeFZhbHVlID0gdGV4dHVyZTJEKHgsIHJlc3VsdFVWKS5yO1xuICAgICAgZmxvYXQgbWVhblZhbHVlID0gdGV4dHVyZTJEKG1lYW4sIG1lYW5VVikucjtcbiAgICAgIGZsb2F0IHZhcmlhbmNlVmFsdWUgPSB0ZXh0dXJlMkQodmFyaWFuY2UsIHZhcmlhbmNlVVYpLnI7XG4gICAgICAke29mZnNldFZhbHVlU25pcHBldH1cbiAgICAgICR7c2NhbGVWYWx1ZVNuaXBwZXR9XG5cbiAgICAgIGZsb2F0IGludiA9IDEuMCAvIHNxcnQodmFyaWFuY2VWYWx1ZSArIHZhcmlhbmNlRXBzaWxvbik7XG4gICAgICAke3NjYWxlT3BlcmF0aW9uU25pcHBldH1cbiAgICAgIGZsb2F0IHhUaW1lc0ludiA9IHhWYWx1ZSAqIGludjtcbiAgICAgIGZsb2F0IG1lYW5UaW1lc0ludldpdGhPZmZzZXQgPSAke29mZnNldE9wZXJhdGlvblNuaXBwZXR9XG4gICAgICAgICAgLSBtZWFuVmFsdWUgKiBpbnY7XG5cbiAgICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoeFRpbWVzSW52ICsgbWVhblRpbWVzSW52V2l0aE9mZnNldCwgMCwgMCwgMCk7XG4gICAgfWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBiYXRjaE5vcm1hbGl6YXRpb24oXG4gICAgZ3BncHU6IEdQR1BVQ29udGV4dCwgcHJvZ3JhbTogV2ViR0xQcm9ncmFtLCB4OiBXZWJHTFRleHR1cmUsXG4gICAgeFNoYXBlUm93Q29sOiBbbnVtYmVyLCBudW1iZXJdLCBtZWFuOiBXZWJHTFRleHR1cmUsXG4gICAgbWVhblNoYXBlUm93Q29sOiBbbnVtYmVyLCBudW1iZXJdLCB2YXJpYW5jZTogV2ViR0xUZXh0dXJlLFxuICAgIHZhcmlhbmNlU2hhcGVSb3dDb2w6IFtudW1iZXIsIG51bWJlcl0sIG9mZnNldDogV2ViR0xUZXh0dXJlfG51bGwsXG4gICAgb2Zmc2V0U2hhcGVSb3dDb2w6IFtudW1iZXIsIG51bWJlcl18bnVsbCwgc2NhbGU6IFdlYkdMVGV4dHVyZXxudWxsLFxuICAgIHNjYWxlU2hhcGVSb3dDb2w6IFtudW1iZXIsIG51bWJlcl18bnVsbCwgcmVzdWx0OiBXZWJHTFRleHR1cmUsXG4gICAgcmVzdWx0U2hhcGVSb3dDb2w6IFtudW1iZXIsIG51bWJlcl0pIHtcbiAgZ3BncHUuc2V0T3V0cHV0TWF0cml4VGV4dHVyZShcbiAgICAgIHJlc3VsdCwgcmVzdWx0U2hhcGVSb3dDb2xbMF0sIHJlc3VsdFNoYXBlUm93Q29sWzFdKTtcbiAgZ3BncHUuc2V0UHJvZ3JhbShwcm9ncmFtKTtcbiAgZ3BncHUuc2V0SW5wdXRNYXRyaXhUZXh0dXJlKHgsICd4JywgMCk7XG4gIGdwZ3B1LnNldElucHV0TWF0cml4VGV4dHVyZShtZWFuLCAnbWVhbicsIDEpO1xuICBncGdwdS5zZXRJbnB1dE1hdHJpeFRleHR1cmUodmFyaWFuY2UsICd2YXJpYW5jZScsIDIpO1xuICBsZXQgbmV4dEluZGV4ID0gMztcbiAgaWYgKG9mZnNldCAhPSBudWxsKSB7XG4gICAgZ3BncHUuc2V0SW5wdXRNYXRyaXhUZXh0dXJlKG9mZnNldCwgJ29mZnNldCcsIG5leHRJbmRleCk7XG4gICAgbmV4dEluZGV4Kys7XG4gIH1cbiAgaWYgKHNjYWxlICE9IG51bGwpIHtcbiAgICBncGdwdS5zZXRJbnB1dE1hdHJpeFRleHR1cmUoc2NhbGUsICdzY2FsZScsIG5leHRJbmRleCk7XG4gIH1cbiAgZ3BncHUuZXhlY3V0ZVByb2dyYW0oKTtcbn0iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCB7R1BHUFVDb250ZXh0fSBmcm9tICcuL2dwZ3B1X2NvbnRleHQnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RnJhZ21lbnRTaGFkZXJTb3VyY2UoXG4gICAgYVJlc3VsdFVWOiBzdHJpbmcsIGJSZXN1bHRVVjogc3RyaW5nLCBvcDogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGBcbiAgICBwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG4gICAgdW5pZm9ybSBzYW1wbGVyMkQgbWF0cml4QTtcbiAgICB1bmlmb3JtIHNhbXBsZXIyRCBtYXRyaXhCO1xuICAgIHZhcnlpbmcgdmVjMiByZXN1bHRVVjtcblxuICAgIHZvaWQgbWFpbigpIHtcbiAgICAgIGZsb2F0IGEgPSB0ZXh0dXJlMkQobWF0cml4QSwgJHthUmVzdWx0VVZ9KS5yO1xuICAgICAgZmxvYXQgYiA9IHRleHR1cmUyRChtYXRyaXhCLCAke2JSZXN1bHRVVn0pLnI7XG4gICAgICAke29wfVxuICAgIH1gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmluYXJ5T3AoXG4gICAgZ3BncHU6IEdQR1BVQ29udGV4dCwgcHJvZ3JhbTogV2ViR0xQcm9ncmFtLCBhOiBXZWJHTFRleHR1cmUsXG4gICAgYVNoYXBlUm93Q29sOiBbbnVtYmVyLCBudW1iZXJdLCBiOiBXZWJHTFRleHR1cmUsXG4gICAgYlNoYXBlUm93Q29sOiBbbnVtYmVyLCBudW1iZXJdLCByZXN1bHQ6IFdlYkdMVGV4dHVyZSxcbiAgICByZXN1bHRTaGFwZVJvd0NvbDogW251bWJlciwgbnVtYmVyXSkge1xuICBncGdwdS5zZXRPdXRwdXRNYXRyaXhUZXh0dXJlKFxuICAgICAgcmVzdWx0LCByZXN1bHRTaGFwZVJvd0NvbFswXSwgcmVzdWx0U2hhcGVSb3dDb2xbMV0pO1xuICBncGdwdS5zZXRQcm9ncmFtKHByb2dyYW0pO1xuICBncGdwdS5zZXRJbnB1dE1hdHJpeFRleHR1cmUoYSwgJ21hdHJpeEEnLCAwKTtcbiAgZ3BncHUuc2V0SW5wdXRNYXRyaXhUZXh0dXJlKGIsICdtYXRyaXhCJywgMSk7XG4gIGdwZ3B1LmV4ZWN1dGVQcm9ncmFtKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGxvYWRCaW5hcnlPcERvd25sb2FkKFxuICAgIGE6IEZsb2F0MzJBcnJheSwgYVNoYXBlOiBbbnVtYmVyLCBudW1iZXJdLCBiOiBGbG9hdDMyQXJyYXksXG4gICAgYlNoYXBlOiBbbnVtYmVyLCBudW1iZXJdLCBmcmFnbWVudFNoYWRlclNvdXJjZTogc3RyaW5nKTogRmxvYXQzMkFycmF5IHtcbiAgY29uc3QgZ3BncHUgPSBuZXcgR1BHUFVDb250ZXh0KCk7XG4gIGNvbnN0IHByb2dyYW0gPSBncGdwdS5jcmVhdGVQcm9ncmFtKGZyYWdtZW50U2hhZGVyU291cmNlKTtcblxuICBjb25zdCBhVGV4dHVyZTogV2ViR0xUZXh0dXJlID1cbiAgICAgIGdwZ3B1LmNyZWF0ZU1hdHJpeFRleHR1cmUoYVNoYXBlWzBdLCBhU2hhcGVbMV0pO1xuICBjb25zdCBiVGV4dHVyZTogV2ViR0xUZXh0dXJlID1cbiAgICAgIGdwZ3B1LmNyZWF0ZU1hdHJpeFRleHR1cmUoYlNoYXBlWzBdLCBiU2hhcGVbMV0pO1xuXG4gIGNvbnN0IHJlc3VsdFNoYXBlOiBbbnVtYmVyLCBudW1iZXJdID1cbiAgICAgIFtNYXRoLm1heChhU2hhcGVbMF0sIGJTaGFwZVswXSksIE1hdGgubWF4KGFTaGFwZVsxXSwgYlNoYXBlWzFdKV07XG5cbiAgY29uc3QgcmVzdWx0VGV4dHVyZTogV2ViR0xUZXh0dXJlID1cbiAgICAgIGdwZ3B1LmNyZWF0ZU1hdHJpeFRleHR1cmUocmVzdWx0U2hhcGVbMF0sIHJlc3VsdFNoYXBlWzFdKTtcblxuICBncGdwdS51cGxvYWRNYXRyaXhUb1RleHR1cmUoYVRleHR1cmUsIGFTaGFwZVswXSwgYVNoYXBlWzFdLCBhKTtcbiAgZ3BncHUudXBsb2FkTWF0cml4VG9UZXh0dXJlKGJUZXh0dXJlLCBiU2hhcGVbMF0sIGJTaGFwZVsxXSwgYik7XG5cbiAgYmluYXJ5T3AoXG4gICAgICBncGdwdSwgcHJvZ3JhbSwgYVRleHR1cmUsIGFTaGFwZSwgYlRleHR1cmUsIGJTaGFwZSwgcmVzdWx0VGV4dHVyZSxcbiAgICAgIHJlc3VsdFNoYXBlKTtcbiAgY29uc3QgcmVzdWx0ID0gZ3BncHUuZG93bmxvYWRNYXRyaXhGcm9tVGV4dHVyZShcbiAgICAgIHJlc3VsdFRleHR1cmUsIHJlc3VsdFNoYXBlWzBdLCByZXN1bHRTaGFwZVsxXSk7XG5cbiAgZ3BncHUuZGVsZXRlTWF0cml4VGV4dHVyZShhVGV4dHVyZSk7XG4gIGdwZ3B1LmRlbGV0ZU1hdHJpeFRleHR1cmUoYlRleHR1cmUpO1xuICBncGdwdS5kZWxldGVNYXRyaXhUZXh0dXJlKHJlc3VsdFRleHR1cmUpO1xuICBncGdwdS5kZWxldGVQcm9ncmFtKHByb2dyYW0pO1xuICBncGdwdS5kaXNwb3NlKCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCAqIGFzIGNvbnZfdXRpbCBmcm9tICcuLi9jb252X3V0aWwnO1xuaW1wb3J0IHtHUEdQVUNvbnRleHR9IGZyb20gJy4vZ3BncHVfY29udGV4dCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGcmFnbWVudFNoYWRlclNvdXJjZShcbiAgICB4MVNoYXBlUkNEOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0sIHgyU2hhcGVSQ0Q6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXSxcbiAgICByZXN1bHRTaGFwZVJDRDogW251bWJlciwgbnVtYmVyLCBudW1iZXJdLCBheGlzOiBudW1iZXIpOiBzdHJpbmcge1xuICBjb25zdCB4MVRleFNoYXBlUkMgPSBjb252X3V0aWwuY29tcHV0ZVRleFNoYXBlRnJvbTNEKHgxU2hhcGVSQ0QpO1xuICBjb25zdCB4MlRleFNoYXBlUkMgPSBjb252X3V0aWwuY29tcHV0ZVRleFNoYXBlRnJvbTNEKHgyU2hhcGVSQ0QpO1xuXG4gIGNvbnN0IHlBeGVzID0gWyd5UicsICd5QycsICd5RCddO1xuICBjb25zdCBjb25jYXRBeGlzID0geUF4ZXNbYXhpc107XG5cbiAgcmV0dXJuIGBcbiAgICBwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG4gICAgdW5pZm9ybSBzYW1wbGVyMkQgeDE7XG4gICAgdW5pZm9ybSBzYW1wbGVyMkQgeDI7XG5cbiAgICBjb25zdCB2ZWMyIHgxU2hhcGVDUiA9IHZlYzIoJHt4MVRleFNoYXBlUkNbMV19LCAke3gxVGV4U2hhcGVSQ1swXX0pO1xuICAgIGNvbnN0IHZlYzIgeDJTaGFwZUNSID0gdmVjMigke3gyVGV4U2hhcGVSQ1sxXX0uMCwgJHt4MlRleFNoYXBlUkNbMF19LjApO1xuXG4gICAgY29uc3QgdmVjMiBoYWxmQ1IgPSB2ZWMyKDAuNSwgMC41KTtcblxuICAgIHZvaWQgbWFpbigpIHtcbiAgICAgIHZlYzIgeVRleENSID0gZmxvb3IoZ2xfRnJhZ0Nvb3JkLnh5KTtcblxuICAgICAgLy8gTWFwIGZyb20gMkQgKHlUZXhSLCB5VGV4QykgdG8gM0QgKHlSLCB5QywgeUQpLlxuICAgICAgZmxvYXQgeVIgPSB5VGV4Q1IueTtcbiAgICAgIGZsb2F0IHlDID0gZmxvb3IoeVRleENSLnggLyAke3Jlc3VsdFNoYXBlUkNEWzJdfS4wKTtcbiAgICAgIGZsb2F0IHlEID0gbW9kKHlUZXhDUi54LCAke3Jlc3VsdFNoYXBlUkNEWzJdfS4wKTtcblxuICAgICAgZmxvYXQgdmFsdWUgPSAwLjA7XG5cbiAgICAgIGlmICgke2NvbmNhdEF4aXN9IDwgJHt4MVNoYXBlUkNEW2F4aXNdfS4wKSB7XG4gICAgICAgIC8vIE1hcCB5UiwgeUMsIHlEIGJhY2sgdG8geDEgY29vcmRpbmF0ZXMuXG4gICAgICAgIHZlYzIgeDFDUiA9IHZlYzIoeUMgKiAke3gxU2hhcGVSQ0RbMl19LjAgKyB5RCwgeVIpO1xuICAgICAgICB2ZWMyIHgxVVYgPSAoeDFDUiArIGhhbGZDUikgLyB4MVNoYXBlQ1I7XG4gICAgICAgIHZhbHVlID0gdGV4dHVyZTJEKHgxLCB4MVVWKS5yO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHtjb25jYXRBeGlzfSA9ICR7Y29uY2F0QXhpc30gLSAke3gxU2hhcGVSQ0RbYXhpc119LjA7XG5cbiAgICAgICAgLy8gTWFwIHlSLCB5QywgeUQgYmFjayB0byB4MiBjb29yZGluYXRlcy5cbiAgICAgICAgdmVjMiB4MkNSID0gdmVjMih5QyAqICR7eDJTaGFwZVJDRFsyXX0uMCArIHlELCB5Uik7XG4gICAgICAgIHZlYzIgeDJVViA9ICh4MkNSICsgaGFsZkNSKSAvIHgyU2hhcGVDUjtcbiAgICAgICAgdmFsdWUgPSB0ZXh0dXJlMkQoeDIsIHgyVVYpLnI7XG4gICAgICB9XG5cbiAgICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQodmFsdWUsIDAuMCwgMC4wLCAwLjApO1xuICAgIH1gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29uY2F0M0QoXG4gICAgZ3BncHU6IEdQR1BVQ29udGV4dCwgcHJvZ3JhbTogV2ViR0xQcm9ncmFtLCB4MTogV2ViR0xUZXh0dXJlLFxuICAgIHgyOiBXZWJHTFRleHR1cmUsIHJlc3VsdDogV2ViR0xUZXh0dXJlLCByZXN1bHRTaGFwZVJDOiBbbnVtYmVyLCBudW1iZXJdKSB7XG4gIGdwZ3B1LnNldE91dHB1dE1hdHJpeFRleHR1cmUocmVzdWx0LCByZXN1bHRTaGFwZVJDWzBdLCByZXN1bHRTaGFwZVJDWzFdKTtcbiAgZ3BncHUuc2V0UHJvZ3JhbShwcm9ncmFtKTtcbiAgZ3BncHUuc2V0SW5wdXRNYXRyaXhUZXh0dXJlKHgxLCAneDEnLCAwKTtcbiAgZ3BncHUuc2V0SW5wdXRNYXRyaXhUZXh0dXJlKHgyLCAneDInLCAxKTtcbiAgZ3BncHUuZXhlY3V0ZVByb2dyYW0oKTtcbn1cbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0ICogYXMgY29udl91dGlsIGZyb20gJy4uL2NvbnZfdXRpbCc7XG5cbmltcG9ydCAqIGFzIGNvbnZfZ3B1IGZyb20gJy4vY29udl9ncHUnO1xuaW1wb3J0IHtHUEdQVUNvbnRleHR9IGZyb20gJy4vZ3BncHVfY29udGV4dCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGcmFnbWVudFNoYWRlckRlcldlaWdodHNTb3VyY2UoXG4gICAgeFNoYXBlUm93Q29sRGVwdGg6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXSwgZlNpemU6IG51bWJlcixcbiAgICBvdXRwdXREZXB0aDogbnVtYmVyLCBzdHJpZGU6IG51bWJlciwgemVyb1BhZDogbnVtYmVyKSB7XG4gIGNvbnN0IGdldE1hdHJpeFZhbHVlT3JaZXJvUGFkID1cbiAgICAgIGNvbnZfZ3B1LmdldEZyYWdtZW50U2hhZGVyR2V0TWF0cml4VmFsdWVPclplcm9QYWRTb3VyY2UoKTtcbiAgY29uc3QgaW5wdXREZXB0aCA9IHhTaGFwZVJvd0NvbERlcHRoWzJdO1xuXG4gIGNvbnN0IHhUZXhTaGFwZVJDID0gY29udl91dGlsLmNvbXB1dGVUZXhTaGFwZUZyb20zRCh4U2hhcGVSb3dDb2xEZXB0aCk7XG5cbiAgY29uc3QgeVNoYXBlID0gY29udl91dGlsLmNvbXB1dGVPdXRwdXRTaGFwZTNEKFxuICAgICAgeFNoYXBlUm93Q29sRGVwdGgsIGZTaXplLCBvdXRwdXREZXB0aCwgc3RyaWRlLCB6ZXJvUGFkKTtcbiAgY29uc3QgeU51bVJvd3MgPSB5U2hhcGVbMF07XG4gIGNvbnN0IHlOdW1Db2xzID0geVNoYXBlWzFdO1xuICBjb25zdCB5VGV4U2hhcGVSQyA9IGNvbnZfdXRpbC5jb21wdXRlVGV4U2hhcGVGcm9tM0QoeVNoYXBlKTtcblxuICBjb25zdCBmU2l6ZVRpbWVzSW5wdXREZXB0aCA9IGZTaXplICogaW5wdXREZXB0aDtcblxuICBjb25zdCBwcm9sb2d1ZSA9IGBcbiAgICBwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG4gICAgdW5pZm9ybSBzYW1wbGVyMkQgeDtcbiAgICB1bmlmb3JtIHNhbXBsZXIyRCBkeTtcbiAgYDtcblxuICByZXR1cm4gcHJvbG9ndWUgKyAnXFxuJyArIGdldE1hdHJpeFZhbHVlT3JaZXJvUGFkICsgJ1xcbicgK1xuICAgICAgYFxuICAgIGNvbnN0IHZlYzIgaGFsZkNSID0gdmVjMigwLjUsIDAuNSk7XG4gICAgY29uc3QgdmVjMiB4U2hhcGVDUiA9IHZlYzIoJHt4VGV4U2hhcGVSQ1sxXX0sICR7eFRleFNoYXBlUkNbMF19KTtcbiAgICBjb25zdCB2ZWMyIGR5U2hhcGVDUiA9IHZlYzIoJHt5VGV4U2hhcGVSQ1sxXX0sICR7eVRleFNoYXBlUkNbMF19KTtcblxuICAgIHZvaWQgbWFpbigpIHtcbiAgICAgIHZlYzIgd1RleENSID0gZmxvb3IoZ2xfRnJhZ0Nvb3JkLnh5KTtcblxuICAgICAgLy8gTWFwIGZyb20gMkQgKHdUZXhSLCB3VGV4QykgdG8gNEQgKHdSLCB3QywgZDEsIGQyKS5cbiAgICAgIGZsb2F0IHdSID0gZmxvb3Iod1RleENSLnkgLyAke2ZTaXplVGltZXNJbnB1dERlcHRofS4wKTtcbiAgICAgIGZsb2F0IHdUZXhSTGVmdG92ZXIgPSB3VGV4Q1IueSAtIHdSICogJHtmU2l6ZVRpbWVzSW5wdXREZXB0aH0uMDtcbiAgICAgIGZsb2F0IHdDID0gZmxvb3Iod1RleFJMZWZ0b3ZlciAvICR7aW5wdXREZXB0aH0uMCk7XG4gICAgICBmbG9hdCBkMSA9IG1vZCh3VGV4UkxlZnRvdmVyLCAke2lucHV0RGVwdGh9LjApO1xuICAgICAgZmxvYXQgZDIgPSB3VGV4Q1IueDtcblxuICAgICAgLy8gQ29udm9sdmUgeCg/LCA/LCBkMSkgd2l0aCBkeSg6LCA6LCBkMikgdG8gZ2V0IGR3KHdSLCB3QywgZDEsIGQyKS5cbiAgICAgIC8vID8gPSB0byBiZSBkZXRlcm1pbmVkLiA6ID0gYWNyb3NzIGFsbCB2YWx1ZXMgaW4gdGhhdCBheGlzLlxuICAgICAgZmxvYXQgZG90UHJvZCA9IDAuMDtcbiAgICAgIGZvciAoZmxvYXQgeVIgPSAwLjA7IHlSIDwgJHt5TnVtUm93c30uMDsgeVIgKz0gMS4wKSB7XG4gICAgICAgIGZsb2F0IHhSID0gd1IgKyB5UiAqICR7c3RyaWRlfS4wIC0gJHt6ZXJvUGFkfS4wO1xuICAgICAgICBmbG9hdCB4VGV4UiA9IHhSO1xuICAgICAgICBmbG9hdCB5VGV4UiA9IHlSO1xuICAgICAgICBmb3IgKGZsb2F0IHlDID0gMC4wOyB5QyA8ICR7eU51bUNvbHN9LjA7IHlDICs9IDEuMCkge1xuICAgICAgICAgIGZsb2F0IHhDID0gd0MgKyB5QyAqICR7c3RyaWRlfS4wIC0gJHt6ZXJvUGFkfS4wO1xuXG4gICAgICAgICAgLy8gTWFwIGZyb20gM0QgKHhSLCB4QywgZDEpIHRvIDJEICh4VGV4UiwgeFRleEMpLlxuICAgICAgICAgIC8vIE1hcCBmcm9tIDNEICh5UiwgeUMsIGQyKSB0byAyRCAoeVRleFIsIHlUZXhDKS5cbiAgICAgICAgICB2ZWMyIHh5VGV4QyA9IHZlYzIoeEMsIHlDKSAqIHZlYzIoJHtpbnB1dERlcHRofS4wLCAke291dHB1dERlcHRofS4wKSArXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZWMyKGQxLCBkMik7XG4gICAgICAgICAgZmxvYXQgeFRleEMgPSB4eVRleEMueDtcbiAgICAgICAgICBmbG9hdCB5VGV4QyA9IHh5VGV4Qy55O1xuXG4gICAgICAgICAgLy8gUmVhZCBkeSh5UiwgeUMsIGQyKS5cbiAgICAgICAgICB2ZWMyIGR5VVYgPSAodmVjMih5VGV4QywgeVRleFIpICsgaGFsZkNSKSAvIGR5U2hhcGVDUjtcbiAgICAgICAgICBmbG9hdCBkeVZhbHVlID0gdGV4dHVyZTJEKGR5LCBkeVVWKS5yO1xuXG4gICAgICAgICAgLy8gUmVhZCB4KHhSLCB4QywgZDEpIChwb3RlbnRpYWxseSB6ZXJvLXBhZGRlZCkuXG4gICAgICAgICAgZmxvYXQgeFZhbHVlID1cbiAgICAgICAgICAgIGdldE1hdHJpeFZhbHVlT3JaZXJvUGFkKHgsIHhTaGFwZUNSLCB2ZWMyKHhUZXhDLCB4VGV4UikpO1xuXG4gICAgICAgICAgZG90UHJvZCArPSAoeFZhbHVlICogZHlWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoZG90UHJvZCwgMCwgMCwgMCk7XG4gICAgfWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGcmFnbWVudFNoYWRlckNvbnZUcmFuc3Bvc2VTb3VyY2UoXG4gICAgeFNoYXBlUkNEOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0sIGZTaXplOiBudW1iZXIsIG9yaWdJbnB1dERlcHRoOiBudW1iZXIsXG4gICAgb3JpZ1N0cmlkZTogbnVtYmVyLCBvcmlnUGFkOiBudW1iZXIsIGhhc0JpYXM6IGJvb2xlYW4pIHtcbiAgY29uc3QgcGFkID0gZlNpemUgLSAxIC0gb3JpZ1BhZDtcbiAgY29uc3QgW3hSb3dzLCB4Q29scywgb3JpZ091dHB1dERlcHRoXSA9IHhTaGFwZVJDRDtcblxuICBjb25zdCB4VGV4U2hhcGVSQyA9IGNvbnZfdXRpbC5jb21wdXRlVGV4U2hhcGVGcm9tM0QoeFNoYXBlUkNEKTtcbiAgY29uc3Qgd1RleFNoYXBlUkMgPVxuICAgICAgY29udl91dGlsLmNvbXB1dGVXZWlnaHRzVGV4U2hhcGUob3JpZ0lucHV0RGVwdGgsIG9yaWdPdXRwdXREZXB0aCwgZlNpemUpO1xuXG4gIGNvbnN0IGdldEJpYXNWYWx1ZSA9IGhhc0JpYXMgP1xuICAgICAgY29udl9ncHUuZ2V0RnJhZ21lbnRTaGFkZXJHZXRCaWFzVmFsdWVTb3VyY2Uob3JpZ0lucHV0RGVwdGgpIDpcbiAgICAgICcnO1xuICBjb25zdCBiaWFzUHJvbG9ndWUgPSBoYXNCaWFzID8gJ3VuaWZvcm0gc2FtcGxlcjJEIGJpYXNlczsnIDogJyc7XG4gIGNvbnN0IGJpYXNPcGVyYXRpb24gPSBoYXNCaWFzID8gJ2RvdFByb2QgKz0gZ2V0Qmlhc1ZhbHVlKGJpYXNlcywgZDIpOycgOiAnJztcblxuICBjb25zdCBwcm9sb2d1ZSA9IGBcbiAgICBwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG4gICAgdW5pZm9ybSBzYW1wbGVyMkQgeDtcbiAgICB1bmlmb3JtIHNhbXBsZXIyRCB3ZWlnaHRzO1xuICAgICR7Ymlhc1Byb2xvZ3VlfVxuICAgIGA7XG5cbiAgcmV0dXJuIHByb2xvZ3VlICsgJ1xcbicgKyBnZXRCaWFzVmFsdWUgKyAnXFxuJyArXG4gICAgICBgXG4gICAgY29uc3QgdmVjMiBoYWxmQ1IgPSB2ZWMyKDAuNSwgMC41KTtcbiAgICBjb25zdCB2ZWMyIHhTaGFwZUNSID0gdmVjMigke3hUZXhTaGFwZVJDWzFdfSwgJHt4VGV4U2hhcGVSQ1swXX0pO1xuICAgIGNvbnN0IHZlYzIgd1NoYXBlQ1IgPSB2ZWMyKCR7d1RleFNoYXBlUkNbMV19LCAke3dUZXhTaGFwZVJDWzBdfSk7XG5cbiAgICB2b2lkIG1haW4oKSB7XG4gICAgICB2ZWMyIHlUZXhDUiA9IGZsb29yKGdsX0ZyYWdDb29yZC54eSk7XG5cbiAgICAgIC8vIE1hcCBmcm9tIDJEICh5VGV4UiwgeVRleEMpIHRvIDNEICh5UiwgeUMsIGQyKS5cbiAgICAgIGZsb2F0IHlSID0geVRleENSLnk7XG4gICAgICBmbG9hdCB5QyA9IGZsb29yKHlUZXhDUi54IC8gJHtvcmlnSW5wdXREZXB0aH0uMCk7XG4gICAgICBmbG9hdCBkMiA9IG1vZCh5VGV4Q1IueCwgJHtvcmlnSW5wdXREZXB0aH0uMCk7XG5cbiAgICAgIHZlYzIgeFJDQ29ybmVyID0gdmVjMih5UiwgeUMpIC0gdmVjMigke3BhZH0uMCwgJHtwYWR9LjApO1xuICAgICAgZmxvYXQgeFJDb3JuZXIgPSB4UkNDb3JuZXIueDtcbiAgICAgIGZsb2F0IHhDQ29ybmVyID0geFJDQ29ybmVyLnk7XG5cbiAgICAgIC8vIENvbnZvbHZlIHgoPywgPywgZDEpIHdpdGggdyg6LCA6LCBkMiwgZDEpIHRvIGdldCB5KHlSLCB5QywgZDIpLlxuICAgICAgLy8gPyA9IHRvIGJlIGRldGVybWluZWQuIDogPSBhY3Jvc3MgYWxsIHZhbHVlcyBpbiB0aGF0IGF4aXMuXG4gICAgICBmbG9hdCBkb3RQcm9kID0gMC4wO1xuICAgICAgZm9yIChmbG9hdCB3UiA9IDAuMDsgd1IgPCAke2ZTaXplfS4wOyB3UiArPSAxLjApIHtcblxuICAgICAgICBmbG9hdCB4UiA9ICh4UkNvcm5lciArIHdSKSAvICR7b3JpZ1N0cmlkZX0uMDtcbiAgICAgICAgLy8gVE9ETyhzbWlsa292KTogU3BsaWNlIHRoaXMgd2l0aCBhbm90aGVyIHZlcnNpb24gd2hlcmUgeW91IGNhbGxcbiAgICAgICAgLy8gZ2V0TWF0cml4VmFsdWVPclplcm9QYWQoKS4gSGVyZSBhbmQgYmVsb3cuXG4gICAgICAgIGlmICh4UiA8IDAuMCB8fCB4UiA+PSAke3hSb3dzfS4wIHx8IGZyYWN0KHhSKSA+IDAuMCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZmxvYXQgd1JQZXJtID0gJHtmU2l6ZX0uMCAtIDEuMCAtIHdSO1xuICAgICAgICBmbG9hdCB4VGV4UiA9IHhSO1xuXG4gICAgICAgIGZvciAoZmxvYXQgd0MgPSAwLjA7IHdDIDwgJHtmU2l6ZX0uMDsgd0MgKz0gMS4wKSB7XG5cbiAgICAgICAgICBmbG9hdCB4QyA9ICh4Q0Nvcm5lciArIHdDKSAvICR7b3JpZ1N0cmlkZX0uMDtcbiAgICAgICAgICBpZiAoeEMgPCAwLjAgfHwgeEMgPj0gJHt4Q29sc30uMCB8fCBmcmFjdCh4QykgPiAwLjApIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZsb2F0IHdDUGVybSA9ICR7ZlNpemV9LjAgLSAxLjAgLSB3QztcbiAgICAgICAgICBmbG9hdCB3VGV4UiA9IHdSUGVybSAqICR7ZlNpemV9LjAgKiAke29yaWdJbnB1dERlcHRofS4wICtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdDUGVybSAqICR7b3JpZ0lucHV0RGVwdGh9LjAgKyBkMjtcblxuICAgICAgICAgIGZvciAoZmxvYXQgZDEgPSAwLjA7IGQxIDwgJHtvcmlnT3V0cHV0RGVwdGh9LjA7IGQxICs9IDEuMCkge1xuICAgICAgICAgICAgZmxvYXQgeFRleEMgPSB4QyAqICR7b3JpZ091dHB1dERlcHRofS4wICsgZDE7XG4gICAgICAgICAgICBmbG9hdCB3VGV4QyA9IGQxO1xuXG4gICAgICAgICAgICAvLyBSZWFkIHgoeFIsIHhDLCBkMSkuXG4gICAgICAgICAgICB2ZWMyIHhVViA9ICh2ZWMyKHhUZXhDLCB4VGV4UikgKyBoYWxmQ1IpIC8geFNoYXBlQ1I7XG4gICAgICAgICAgICBmbG9hdCB4VmFsdWUgPSB0ZXh0dXJlMkQoeCwgeFVWKS5yO1xuXG4gICAgICAgICAgICAvLyBSZWFkIHcod1JQZXJtLCB3Q1Blcm0sIGQyLCBkMSkuXG4gICAgICAgICAgICB2ZWMyIHdVViA9ICh2ZWMyKHdUZXhDLCB3VGV4UikgKyBoYWxmQ1IpIC8gd1NoYXBlQ1I7XG4gICAgICAgICAgICBmbG9hdCB3VmFsdWUgPSB0ZXh0dXJlMkQod2VpZ2h0cywgd1VWKS5yO1xuXG4gICAgICAgICAgICBkb3RQcm9kICs9IHhWYWx1ZSAqIHdWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgICR7Ymlhc09wZXJhdGlvbn1cbiAgICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoZG90UHJvZCwgMCwgMCwgMCk7XG4gICAgfWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGcmFnbWVudFNoYWRlckRlckJpYXNTb3VyY2UoXG4gICAgZHlTaGFwZVJDRDogW251bWJlciwgbnVtYmVyLCBudW1iZXJdKSB7XG4gIGNvbnN0IGR5VGV4U2hhcGVSQyA9IGNvbnZfdXRpbC5jb21wdXRlVGV4U2hhcGVGcm9tM0QoZHlTaGFwZVJDRCk7XG4gIGNvbnN0IFt5TnVtUm93cywgeU51bUNvbHMsIG91dHB1dERlcHRoXSA9IGR5U2hhcGVSQ0Q7XG5cbiAgcmV0dXJuIGBcbiAgICBwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG4gICAgdW5pZm9ybSBzYW1wbGVyMkQgZHk7XG5cbiAgICBjb25zdCB2ZWMyIGhhbGZDUiA9IHZlYzIoMC41LCAwLjUpO1xuICAgIGNvbnN0IHZlYzIgZHlTaGFwZUNSID0gdmVjMigke2R5VGV4U2hhcGVSQ1sxXX0sICR7ZHlUZXhTaGFwZVJDWzBdfSk7XG5cbiAgICB2b2lkIG1haW4oKSB7XG4gICAgICB2ZWMyIGJpYXNUZXhDUiA9IGZsb29yKGdsX0ZyYWdDb29yZC54eSk7XG5cbiAgICAgIC8vIFRoZSBiaWFzIHRleHR1cmUgUkMgc2hhcGUgaXMgWzEsIGQyXS5cbiAgICAgIGZsb2F0IGQyID0gYmlhc1RleENSLng7XG5cbiAgICAgIGZsb2F0IGRlckJpYXMgPSAwLjA7XG4gICAgICBmb3IgKGZsb2F0IHlSID0gMC4wOyB5UiA8ICR7eU51bVJvd3N9LjA7IHlSICs9IDEuMCkge1xuICAgICAgICBmbG9hdCB5VGV4UiA9IHlSO1xuXG4gICAgICAgIGZvciAoZmxvYXQgeUMgPSAwLjA7IHlDIDwgJHt5TnVtQ29sc30uMDsgeUMgKz0gMS4wKSB7XG4gICAgICAgICAgLy8gTWFwIGZyb20gM0QgKHlSLCB5QywgZDIpIHRvIDJEICh5VGV4UiwgeVRleEMpLlxuICAgICAgICAgIGZsb2F0IHlUZXhDID0geUMgKiAke291dHB1dERlcHRofS4wICsgZDI7XG5cbiAgICAgICAgICAvLyBSZWFkIGR5KHlSLCB5QywgZDIpLlxuICAgICAgICAgIHZlYzIgZHlVViA9ICh2ZWMyKHlUZXhDLCB5VGV4UikgKyBoYWxmQ1IpIC8gZHlTaGFwZUNSO1xuICAgICAgICAgIGZsb2F0IGR5VmFsdWUgPSB0ZXh0dXJlMkQoZHksIGR5VVYpLnI7XG5cbiAgICAgICAgICBkZXJCaWFzICs9IGR5VmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoZGVyQmlhcywgMCwgMCwgMCk7XG4gICAgfWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXJCaWFzKFxuICAgIGdwZ3B1OiBHUEdQVUNvbnRleHQsIHByb2dyYW06IFdlYkdMUHJvZ3JhbSwgZHlUZXg6IFdlYkdMVGV4dHVyZSxcbiAgICByZXN1bHQ6IFdlYkdMVGV4dHVyZSwgcmVzdWx0VGV4U2hhcGVSQzogW251bWJlciwgbnVtYmVyXSkge1xuICBncGdwdS5zZXRPdXRwdXRNYXRyaXhUZXh0dXJlKFxuICAgICAgcmVzdWx0LCByZXN1bHRUZXhTaGFwZVJDWzBdLCByZXN1bHRUZXhTaGFwZVJDWzFdKTtcbiAgZ3BncHUuc2V0UHJvZ3JhbShwcm9ncmFtKTtcbiAgZ3BncHUuc2V0SW5wdXRNYXRyaXhUZXh0dXJlKGR5VGV4LCAnZHknLCAwKTtcbiAgZ3BncHUuZXhlY3V0ZVByb2dyYW0oKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlcldlaWdodHMoXG4gICAgZ3BncHU6IEdQR1BVQ29udGV4dCwgcHJvZ3JhbTogV2ViR0xQcm9ncmFtLCB4VGV4OiBXZWJHTFRleHR1cmUsXG4gICAgZHlUZXg6IFdlYkdMVGV4dHVyZSwgcmVzdWx0OiBXZWJHTFRleHR1cmUsXG4gICAgcmVzdWx0VGV4U2hhcGVSQzogW251bWJlciwgbnVtYmVyXSkge1xuICBncGdwdS5zZXRPdXRwdXRNYXRyaXhUZXh0dXJlKFxuICAgICAgcmVzdWx0LCByZXN1bHRUZXhTaGFwZVJDWzBdLCByZXN1bHRUZXhTaGFwZVJDWzFdKTtcbiAgZ3BncHUuc2V0UHJvZ3JhbShwcm9ncmFtKTtcbiAgZ3BncHUuc2V0SW5wdXRNYXRyaXhUZXh0dXJlKHhUZXgsICd4JywgMCk7XG4gIGdwZ3B1LnNldElucHV0TWF0cml4VGV4dHVyZShkeVRleCwgJ2R5JywgMSk7XG4gIGdwZ3B1LmV4ZWN1dGVQcm9ncmFtKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb252VHJhbnNwb3NlKFxuICAgIGdwZ3B1OiBHUEdQVUNvbnRleHQsIHByb2dyYW06IFdlYkdMUHJvZ3JhbSwgeFRleDogV2ViR0xUZXh0dXJlLFxuICAgIHdlaWdodHNUZXg6IFdlYkdMVGV4dHVyZSwgYmlhc2VzVGV4OiBXZWJHTFRleHR1cmV8bnVsbCxcbiAgICByZXN1bHRUZXg6IFdlYkdMVGV4dHVyZSwgcmVzdWx0VGV4U2hhcGVSQzogW251bWJlciwgbnVtYmVyXSkge1xuICBncGdwdS5zZXRPdXRwdXRNYXRyaXhUZXh0dXJlKFxuICAgICAgcmVzdWx0VGV4LCByZXN1bHRUZXhTaGFwZVJDWzBdLCByZXN1bHRUZXhTaGFwZVJDWzFdKTtcbiAgZ3BncHUuc2V0UHJvZ3JhbShwcm9ncmFtKTtcbiAgZ3BncHUuc2V0SW5wdXRNYXRyaXhUZXh0dXJlKHhUZXgsICd4JywgMCk7XG4gIGdwZ3B1LnNldElucHV0TWF0cml4VGV4dHVyZSh3ZWlnaHRzVGV4LCAnd2VpZ2h0cycsIDEpO1xuICBpZiAoYmlhc2VzVGV4ICE9IG51bGwpIHtcbiAgICBncGdwdS5zZXRJbnB1dE1hdHJpeFRleHR1cmUoYmlhc2VzVGV4LCAnYmlhc2VzJywgMik7XG4gIH1cbiAgZ3BncHUuZXhlY3V0ZVByb2dyYW0oKTtcbn1cbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0ICogYXMgY29udl91dGlsIGZyb20gJy4uL2NvbnZfdXRpbCc7XG5pbXBvcnQge0dQR1BVQ29udGV4dH0gZnJvbSAnLi9ncGdwdV9jb250ZXh0JztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZyYWdtZW50U2hhZGVyUHJvbG9ndWVTb3VyY2UoKTogc3RyaW5nIHtcbiAgcmV0dXJuIGBcbiAgICBwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG4gICAgdW5pZm9ybSBzYW1wbGVyMkQgeDtcbiAgICB1bmlmb3JtIHNhbXBsZXIyRCB3ZWlnaHRzO1xuICAgIHVuaWZvcm0gc2FtcGxlcjJEIGJpYXNlcztcbiAgICB2YXJ5aW5nIHZlYzIgcmVzdWx0VVY7YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZyYWdtZW50U2hhZGVyR2V0TWF0cml4VmFsdWVPclplcm9QYWRTb3VyY2UoKTogc3RyaW5nIHtcbiAgcmV0dXJuIGBcbiAgICBmbG9hdCBnZXRNYXRyaXhWYWx1ZU9yWmVyb1BhZChpbiBzYW1wbGVyMkQgbWF0cml4LCB2ZWMyIG1hdHJpeFNoYXBlQ1IsXG4gICAgICAgIHZlYzIgcmVxdWVzdGVkQ1IpIHtcbiAgICAgIHZlYzIgdXYgPSAocmVxdWVzdGVkQ1IgKyB2ZWMyKDAuNSwgMC41KSkgLyBtYXRyaXhTaGFwZUNSO1xuICAgICAgZmxvYXQgdmFsdWUgPSB0ZXh0dXJlMkQobWF0cml4LCB1dikucjtcbiAgICAgIGJvb2wgbGVzc1RoYW5aZXJvID0gYW55KGxlc3NUaGFuKHV2LCB2ZWMyKDAsIDApKSk7XG4gICAgICBib29sIGdyZWF0ZXJUaGFuT25lID0gYW55KGdyZWF0ZXJUaGFuKHV2LCB2ZWMyKDEsIDEpKSk7XG4gICAgICBib29sIG91dHNpZGUgPSBsZXNzVGhhblplcm8gfHwgZ3JlYXRlclRoYW5PbmU7XG4gICAgICByZXR1cm4gbWl4KHZhbHVlLCAwLjAsIGZsb2F0KG91dHNpZGUpKTtcbiAgICB9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZyYWdtZW50U2hhZGVyQ29udm9sdmVTb3VyY2UoXG4gICAgeFNoYXBlUkNEOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0sIGZTaXplOiBudW1iZXIsIG91dHB1dERlcHRoOiBudW1iZXIsXG4gICAgc3RyaWRlOiBudW1iZXIsIHBhZDogbnVtYmVyLCBoYXNCaWFzOiBib29sZWFuKSB7XG4gIGNvbnN0IFt4Um93cywgeENvbHMsIGlucHV0RGVwdGhdID0geFNoYXBlUkNEO1xuXG4gIGNvbnN0IHhUZXhTaGFwZVJDID0gY29udl91dGlsLmNvbXB1dGVUZXhTaGFwZUZyb20zRCh4U2hhcGVSQ0QpO1xuICBjb25zdCB3VGV4U2hhcGVSQyA9XG4gICAgICBjb252X3V0aWwuY29tcHV0ZVdlaWdodHNUZXhTaGFwZShpbnB1dERlcHRoLCBvdXRwdXREZXB0aCwgZlNpemUpO1xuXG4gIHJldHVybiBgXG4gICAgY29uc3QgdmVjMiBoYWxmQ1IgPSB2ZWMyKDAuNSwgMC41KTtcbiAgICBjb25zdCB2ZWMyIHhTaGFwZUNSID0gdmVjMigke3hUZXhTaGFwZVJDWzFdfSwgJHt4VGV4U2hhcGVSQ1swXX0pO1xuICAgIGNvbnN0IHZlYzIgd1NoYXBlQ1IgPSB2ZWMyKCR7d1RleFNoYXBlUkNbMV19LCAke3dUZXhTaGFwZVJDWzBdfSk7XG5cbiAgICB2b2lkIG1haW4oKSB7XG4gICAgICB2ZWMyIHlUZXhDUiA9IGZsb29yKGdsX0ZyYWdDb29yZC54eSk7XG5cbiAgICAgIC8vIE1hcCBmcm9tIDJEICh5VGV4UiwgeVRleEMpIHRvIDNEICh5UiwgeUMsIGQyKS5cbiAgICAgIGZsb2F0IHlSID0geVRleENSLnk7XG4gICAgICBmbG9hdCB5QyA9IGZsb29yKHlUZXhDUi54IC8gJHtvdXRwdXREZXB0aH0uMCk7XG4gICAgICBmbG9hdCBkMiA9IG1vZCh5VGV4Q1IueCwgJHtvdXRwdXREZXB0aH0uMCk7XG4gICAgICBmbG9hdCB3VGV4QyA9IGQyO1xuXG4gICAgICB2ZWMyIHhSQ0Nvcm5lciA9IHZlYzIoeVIsIHlDKSAqIHZlYzIoJHtzdHJpZGV9LCAke3N0cmlkZX0pIC1cbiAgICAgICAgICB2ZWMyKCR7cGFkfS4wLCAke3BhZH0uMCk7XG4gICAgICBmbG9hdCB4UkNvcm5lciA9IHhSQ0Nvcm5lci54O1xuICAgICAgZmxvYXQgeENDb3JuZXIgPSB4UkNDb3JuZXIueTtcblxuICAgICAgLy8gQ29udm9sdmUgeCg/LCA/LCBkMSkgd2l0aCB3KDosIDosIGQxLCBkMikgdG8gZ2V0IHkoeVIsIHlDLCBkMikuXG4gICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZC4gOiA9IGFjcm9zcyBhbGwgdmFsdWVzIGluIHRoYXQgYXhpcy5cbiAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XG4gICAgICBmb3IgKGZsb2F0IHdSID0gMC4wOyB3UiA8ICR7ZlNpemV9LjA7IHdSICs9IDEuMCkge1xuICAgICAgICBmbG9hdCB4UiA9IHhSQ29ybmVyICsgd1I7XG4gICAgICAgIGZsb2F0IHhUZXhSID0geFI7XG5cbiAgICAgICAgZm9yIChmbG9hdCB3QyA9IDAuMDsgd0MgPCAke2ZTaXplfS4wOyB3QyArPSAxLjApIHtcbiAgICAgICAgICBmbG9hdCB4QyA9IHhDQ29ybmVyICsgd0M7XG5cbiAgICAgICAgICBmb3IgKGZsb2F0IGQxID0gMC4wOyBkMSA8ICR7aW5wdXREZXB0aH0uMDsgZDEgKz0gMS4wKSB7XG4gICAgICAgICAgICBmbG9hdCB4VGV4QyA9IHhDICogJHtpbnB1dERlcHRofS4wICsgZDE7XG4gICAgICAgICAgICBmbG9hdCB3VGV4UiA9IHdSICogJHtmU2l6ZSAqIGlucHV0RGVwdGh9LjAgK1xuICAgICAgICAgICAgICAgIHdDICogJHtpbnB1dERlcHRofS4wICsgZDE7XG5cbiAgICAgICAgICAgIGZsb2F0IHhWYWx1ZSA9XG4gICAgICAgICAgICAgICAgZ2V0TWF0cml4VmFsdWVPclplcm9QYWQoeCwgeFNoYXBlQ1IsIHZlYzIoeFRleEMsIHhUZXhSKSk7XG5cbiAgICAgICAgICAgIC8vIFJlYWQgdyh3Uiwgd0MsIGQxLCBkMikuXG4gICAgICAgICAgICB2ZWMyIHdVViA9ICh2ZWMyKHdUZXhDLCB3VGV4UikgKyBoYWxmQ1IpIC8gd1NoYXBlQ1I7XG4gICAgICAgICAgICBmbG9hdCB3VmFsdWUgPSB0ZXh0dXJlMkQod2VpZ2h0cywgd1VWKS5yO1xuXG4gICAgICAgICAgICBkb3RQcm9kICs9IHhWYWx1ZSAqIHdWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICgke2hhc0JpYXN9KSB7XG4gICAgICAgIGRvdFByb2QgKz0gZ2V0Qmlhc1ZhbHVlKGJpYXNlcywgZDIpO1xuICAgICAgfVxuICAgICAgZ2xfRnJhZ0NvbG9yID0gdmVjNChkb3RQcm9kLCAwLCAwLCAwKTtcbiAgICB9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZyYWdtZW50U2hhZGVyR2V0Qmlhc1ZhbHVlU291cmNlKG91dHB1dERlcHRoOiBudW1iZXIpOlxuICAgIHN0cmluZyB7XG4gIHJldHVybiBgXG4gICAgZmxvYXQgZ2V0Qmlhc1ZhbHVlKGluIHNhbXBsZXIyRCBiaWFzLCBmbG9hdCBiaWFzQykge1xuICAgICAgY29uc3QgdmVjMiBiaWFzU2hhcGVDUiA9IHZlYzIoJHtvdXRwdXREZXB0aH0sIDEpO1xuICAgICAgdmVjMiBiaWFzQ1IgPSB2ZWMyKG1vZChiaWFzQywgJHtvdXRwdXREZXB0aH0uMCksIDApO1xuICAgICAgdmVjMiBiaWFzVVYgPSAoYmlhc0NSICsgdmVjMigwLjUsIDAuNSkpIC8gYmlhc1NoYXBlQ1I7XG4gICAgICByZXR1cm4gdGV4dHVyZTJEKGJpYXMsIGJpYXNVVikucjtcbiAgICB9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZyYWdtZW50U2hhZGVyU291cmNlKFxuICAgIGFTaGFwZVJvd0NvbERlcHRoOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0sIHJlc3VsdERlcHRoOiBudW1iZXIsXG4gICAgZmllbGRTaXplOiBudW1iZXIsIHN0cmlkZTogbnVtYmVyLCB6ZXJvUGFkOiBudW1iZXIsXG4gICAgaGFzQmlhczogYm9vbGVhbik6IHN0cmluZyB7XG4gIGNvbnN0IGFTaGFwZVJDOiBbbnVtYmVyLCBudW1iZXJdID1cbiAgICAgIGNvbnZfdXRpbC5jb21wdXRlVGV4U2hhcGVGcm9tM0QoYVNoYXBlUm93Q29sRGVwdGgpO1xuXG4gIGNvbnN0IHdlaWdodFNoYXBlUkM6IFtudW1iZXIsIG51bWJlcl0gPSBjb252X3V0aWwuY29tcHV0ZVdlaWdodHNUZXhTaGFwZShcbiAgICAgIGFTaGFwZVJvd0NvbERlcHRoWzJdLCByZXN1bHREZXB0aCwgZmllbGRTaXplKTtcblxuICBjb25zdCBwcm9sb2d1ZSA9IGdldEZyYWdtZW50U2hhZGVyUHJvbG9ndWVTb3VyY2UoKTtcbiAgY29uc3QgZ2V0TWF0cml4VmFsdWVPclplcm9QYWQgPVxuICAgICAgZ2V0RnJhZ21lbnRTaGFkZXJHZXRNYXRyaXhWYWx1ZU9yWmVyb1BhZFNvdXJjZSgpO1xuICBjb25zdCBjb252b2x2ZSA9IGdldEZyYWdtZW50U2hhZGVyQ29udm9sdmVTb3VyY2UoXG4gICAgICBhU2hhcGVSb3dDb2xEZXB0aCwgZmllbGRTaXplLCByZXN1bHREZXB0aCwgc3RyaWRlLCB6ZXJvUGFkLCBoYXNCaWFzKTtcbiAgY29uc3QgZ2V0Qmlhc1ZhbHVlID0gZ2V0RnJhZ21lbnRTaGFkZXJHZXRCaWFzVmFsdWVTb3VyY2UocmVzdWx0RGVwdGgpO1xuXG4gIHJldHVybiBbXG4gICAgcHJvbG9ndWUsXG4gICAgZ2V0TWF0cml4VmFsdWVPclplcm9QYWQsXG4gICAgZ2V0Qmlhc1ZhbHVlLFxuICAgIGNvbnZvbHZlLFxuICBdLmpvaW4oJ1xcbicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udm9sdmUoXG4gICAgZ3BncHU6IEdQR1BVQ29udGV4dCwgcHJvZ3JhbTogV2ViR0xQcm9ncmFtLCBhOiBXZWJHTFRleHR1cmUsXG4gICAgd2VpZ2h0czogV2ViR0xUZXh0dXJlLCBiaWFzZXM6IFdlYkdMVGV4dHVyZXxudWxsLCByZXN1bHQ6IFdlYkdMVGV4dHVyZSxcbiAgICByZXN1bHRTaGFwZVJvd0NvbDogW251bWJlciwgbnVtYmVyXSkge1xuICBncGdwdS5zZXRPdXRwdXRNYXRyaXhUZXh0dXJlKFxuICAgICAgcmVzdWx0LCByZXN1bHRTaGFwZVJvd0NvbFswXSwgcmVzdWx0U2hhcGVSb3dDb2xbMV0pO1xuICBncGdwdS5zZXRQcm9ncmFtKHByb2dyYW0pO1xuICBncGdwdS5zZXRJbnB1dE1hdHJpeFRleHR1cmUoYSwgJ3gnLCAwKTtcbiAgZ3BncHUuc2V0SW5wdXRNYXRyaXhUZXh0dXJlKHdlaWdodHMsICd3ZWlnaHRzJywgMSk7XG4gIGlmIChiaWFzZXMgIT0gbnVsbCkge1xuICAgIGdwZ3B1LnNldElucHV0TWF0cml4VGV4dHVyZShiaWFzZXMsICdiaWFzZXMnLCAyKTtcbiAgfVxuICBncGdwdS5leGVjdXRlUHJvZ3JhbSgpO1xufSIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0IHtHUEdQVUNvbnRleHR9IGZyb20gJy4vZ3BncHVfY29udGV4dCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGcmFnbWVudFNoYWRlclNvdXJjZShcbiAgICBzb3VyY2VTaGFwZVJvd0NvbDogW251bWJlciwgbnVtYmVyXSwgc291cmNlU2l6ZVJvd0NvbDogW251bWJlciwgbnVtYmVyXSxcbiAgICBkZXN0U2l6ZVJvd0NvbDogW251bWJlciwgbnVtYmVyXSk6IHN0cmluZyB7XG4gIHJldHVybiBgXG4gICAgcHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xuICAgIHVuaWZvcm0gc2FtcGxlcjJEIHNvdXJjZTtcbiAgICB1bmlmb3JtIHZlYzIgc291cmNlU3RhcnRDUjtcbiAgICB1bmlmb3JtIHZlYzIgZGVzdFN0YXJ0Q1I7XG5cbiAgICBjb25zdCB2ZWMyIHNvdXJjZVNoYXBlQ1IgPVxuICAgICAgdmVjMigke3NvdXJjZVNoYXBlUm93Q29sWzFdfSwgJHtzb3VyY2VTaGFwZVJvd0NvbFswXX0pO1xuICAgIGNvbnN0IHZlYzIgc291cmNlU2l6ZUNSID1cbiAgICAgIHZlYzIoJHtzb3VyY2VTaXplUm93Q29sWzFdfSwgJHtzb3VyY2VTaXplUm93Q29sWzBdfSk7XG4gICAgY29uc3QgdmVjMiBkZXN0U2l6ZUNSID1cbiAgICAgIHZlYzIoJHtkZXN0U2l6ZVJvd0NvbFsxXX0sICR7ZGVzdFNpemVSb3dDb2xbMF19KTtcblxuICAgIHZvaWQgbWFpbigpIHtcbiAgICAgIHZlYzIgZGVzdE9mZnNldENSID0gZmxvb3IoZ2xfRnJhZ0Nvb3JkLnh5KSAtIGRlc3RTdGFydENSO1xuICAgICAgZmxvYXQgZGVzdE9mZnNldEZsYXQgPSAoZGVzdE9mZnNldENSLnkgKiBkZXN0U2l6ZUNSLngpICsgZGVzdE9mZnNldENSLng7XG4gICAgICB2ZWMyIHNvdXJjZU9mZnNldENSID0gdmVjMihtb2QoZGVzdE9mZnNldEZsYXQsIHNvdXJjZVNpemVDUi54KSxcbiAgICAgICAgZmxvb3IoZGVzdE9mZnNldEZsYXQgLyBzb3VyY2VTaXplQ1IueCkpO1xuICAgICAgdmVjMiBzb3VyY2VDUiA9IHNvdXJjZVN0YXJ0Q1IgKyBzb3VyY2VPZmZzZXRDUjtcbiAgICAgIHZlYzIgc291cmNlVVYgPSAoc291cmNlQ1IgKyB2ZWMyKDAuNSwgMC41KSkgLyBzb3VyY2VTaGFwZUNSO1xuICAgICAgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHNvdXJjZSwgc291cmNlVVYpO1xuICAgIH1gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29weShcbiAgICBncGdwdTogR1BHUFVDb250ZXh0LCBwcm9ncmFtOiBXZWJHTFByb2dyYW0sIHNvdXJjZTogV2ViR0xUZXh0dXJlLFxuICAgIHNvdXJjZVNoYXBlUm93Q29sOiBbbnVtYmVyLCBudW1iZXJdLCBzb3VyY2VTdGFydFJvd0NvbDogW251bWJlciwgbnVtYmVyXSxcbiAgICBzb3VyY2VTaXplUm93Q29sOiBbbnVtYmVyLCBudW1iZXJdLCBkZXN0OiBXZWJHTFRleHR1cmUsXG4gICAgZGVzdFNoYXBlUm93Q29sOiBbbnVtYmVyLCBudW1iZXJdLCBkZXN0U3RhcnRSb3dDb2w6IFtudW1iZXIsIG51bWJlcl0sXG4gICAgZGVzdFNpemVSb3dDb2w6IFtudW1iZXIsIG51bWJlcl0pIHtcbiAgZ3BncHUuc2V0T3V0cHV0TWF0cml4VGV4dHVyZShkZXN0LCBkZXN0U2hhcGVSb3dDb2xbMF0sIGRlc3RTaGFwZVJvd0NvbFsxXSk7XG4gIGdwZ3B1LnNldE91dHB1dE1hdHJpeFdyaXRlUmVnaW9uKFxuICAgICAgZGVzdFN0YXJ0Um93Q29sWzBdLCBkZXN0U2l6ZVJvd0NvbFswXSwgZGVzdFN0YXJ0Um93Q29sWzFdLFxuICAgICAgZGVzdFNpemVSb3dDb2xbMV0pO1xuICBncGdwdS5zZXRQcm9ncmFtKHByb2dyYW0pO1xuICBncGdwdS5zZXRJbnB1dE1hdHJpeFRleHR1cmUoc291cmNlLCAnc291cmNlJywgMCk7XG4gIGNvbnN0IHNvdXJjZVN0YXJ0Q1JMb2MgPSBncGdwdS5nZXRVbmlmb3JtTG9jYXRpb24oJ3NvdXJjZVN0YXJ0Q1InKTtcbiAgZ3BncHUuZ2wudW5pZm9ybTJmKFxuICAgICAgc291cmNlU3RhcnRDUkxvYywgc291cmNlU3RhcnRSb3dDb2xbMV0sIHNvdXJjZVN0YXJ0Um93Q29sWzBdKTtcbiAgY29uc3QgZGVzdFN0YXJ0Q1JMb2MgPSBncGdwdS5nZXRVbmlmb3JtTG9jYXRpb24oJ2Rlc3RTdGFydENSJyk7XG4gIGdwZ3B1LmdsLnVuaWZvcm0yZihkZXN0U3RhcnRDUkxvYywgZGVzdFN0YXJ0Um93Q29sWzFdLCBkZXN0U3RhcnRSb3dDb2xbMF0pO1xuICBncGdwdS5leGVjdXRlUHJvZ3JhbSgpO1xufVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQge0dQR1BVQ29udGV4dH0gZnJvbSAnLi9ncGdwdV9jb250ZXh0JztcbmltcG9ydCAqIGFzIHVuYXJ5b3BfZ3B1IGZyb20gJy4vdW5hcnlvcF9ncHUnO1xuXG5mdW5jdGlvbiBnZXRFeHBVbmFyeU9wKCk6IHN0cmluZyB7XG4gIHJldHVybiAnZ2xfRnJhZ0NvbG9yID0gdmVjNChleHAodmFsdWUpLCAwLCAwLCAwKTsnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RnJhZ21lbnRTaGFkZXJTb3VyY2UoKTogc3RyaW5nIHtcbiAgcmV0dXJuIHVuYXJ5b3BfZ3B1LmdldEZyYWdtZW50U2hhZGVyU291cmNlKGdldEV4cFVuYXJ5T3AoKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHAoXG4gICAgZ3BncHU6IEdQR1BVQ29udGV4dCwgZXhwUHJvZ3JhbTogV2ViR0xQcm9ncmFtLCBhOiBXZWJHTFRleHR1cmUsXG4gICAgcm93czogbnVtYmVyLCBjb2x1bW5zOiBudW1iZXIsIHJlc3VsdDogV2ViR0xUZXh0dXJlKSB7XG4gIHVuYXJ5b3BfZ3B1LnVuYXJ5T3AoZ3BncHUsIGV4cFByb2dyYW0sIGEsIHJvd3MsIGNvbHVtbnMsIHJlc3VsdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGxvYWRFeHBEb3dubG9hZChcbiAgICBhOiBGbG9hdDMyQXJyYXksIHJvd3M6IG51bWJlciwgY29sdW1uczogbnVtYmVyKTogRmxvYXQzMkFycmF5IHtcbiAgcmV0dXJuIHVuYXJ5b3BfZ3B1LnVwbG9hZFVuYXJ5T3BEb3dubG9hZChhLCByb3dzLCBjb2x1bW5zLCBnZXRFeHBVbmFyeU9wKCkpO1xufVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQgKiBhcyBncGdwdV91dGlsIGZyb20gJy4vZ3BncHVfdXRpbCc7XG5pbXBvcnQgKiBhcyB0ZXhfdXRpbCBmcm9tICcuL3RleF91dGlsJztcbmltcG9ydCAqIGFzIHdlYmdsX3V0aWwgZnJvbSAnLi93ZWJnbF91dGlsJztcblxuaW1wb3J0IHtXZWJHTExvc2VDb250ZXh0RXh0ZW5zaW9ufSBmcm9tICcuL3dlYmdsX3V0aWwnO1xuXG5leHBvcnQgY2xhc3MgR1BHUFVDb250ZXh0IHtcbiAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDtcbiAgdGV4dHVyZUZsb2F0RXh0ZW5zaW9uOiB7fTtcbiAgY29sb3JCdWZmZXJGbG9hdEV4dGVuc2lvbjoge307XG4gIGxvc2VDb250ZXh0RXh0ZW5zaW9uOiBXZWJHTExvc2VDb250ZXh0RXh0ZW5zaW9uO1xuICB2ZXJ0ZXhCdWZmZXI6IFdlYkdMQnVmZmVyO1xuICBpbmRleEJ1ZmZlcjogV2ViR0xCdWZmZXI7XG4gIGZyYW1lYnVmZmVyOiBXZWJHTEZyYW1lYnVmZmVyO1xuICBvdXRwdXRUZXh0dXJlOiBXZWJHTFRleHR1cmV8bnVsbCA9IG51bGw7XG4gIHByb2dyYW06IFdlYkdMUHJvZ3JhbXxudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBkaXNwb3NlZCA9IGZhbHNlO1xuICBwcml2YXRlIGF1dG9EZWJ1Z1ZhbGlkYXRlID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoZ2w/OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcbiAgICBpZiAoZ2wgIT0gbnVsbCkge1xuICAgICAgdGhpcy5nbCA9IGdsO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmdsID0gZ3BncHVfdXRpbC5jcmVhdGVXZWJHTENvbnRleHQoKTtcbiAgICB9XG5cbiAgICAvLyBXZWJHTCAyLjAgZW5hYmxlcyB0ZXh0dXJlIGZsb2F0cyB3aXRob3V0IGFuIGV4dGVuc2lvbi5cbiAgICBpZiAoIXdlYmdsX3V0aWwuaXNXZWJHTDJFbmFibGVkKCkpIHtcbiAgICAgIHRoaXMudGV4dHVyZUZsb2F0RXh0ZW5zaW9uID1cbiAgICAgICAgICB3ZWJnbF91dGlsLmdldEV4dGVuc2lvbk9yVGhyb3codGhpcy5nbCwgJ09FU190ZXh0dXJlX2Zsb2F0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29sb3JCdWZmZXJGbG9hdEV4dGVuc2lvbiA9XG4gICAgICAgICAgd2ViZ2xfdXRpbC5nZXRFeHRlbnNpb25PclRocm93KHRoaXMuZ2wsICdFWFRfY29sb3JfYnVmZmVyX2Zsb2F0Jyk7XG4gICAgfVxuXG4gICAgdGhpcy5sb3NlQ29udGV4dEV4dGVuc2lvbiA9XG4gICAgICAgIHdlYmdsX3V0aWwuZ2V0RXh0ZW5zaW9uT3JUaHJvdyh0aGlzLmdsLCAnV0VCR0xfbG9zZV9jb250ZXh0JykgYXNcbiAgICAgICAgV2ViR0xMb3NlQ29udGV4dEV4dGVuc2lvbjtcbiAgICB0aGlzLnZlcnRleEJ1ZmZlciA9IGdwZ3B1X3V0aWwuY3JlYXRlVmVydGV4QnVmZmVyKHRoaXMuZ2wpO1xuICAgIHRoaXMuaW5kZXhCdWZmZXIgPSBncGdwdV91dGlsLmNyZWF0ZUluZGV4QnVmZmVyKHRoaXMuZ2wpO1xuICAgIHRoaXMuZnJhbWVidWZmZXIgPSB3ZWJnbF91dGlsLmNyZWF0ZUZyYW1lYnVmZmVyKHRoaXMuZ2wpO1xuICB9XG5cbiAgcHVibGljIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICBpZiAodGhpcy5wcm9ncmFtICE9IG51bGwpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAnRGlzcG9zaW5nIGEgR1BHUFVDb250ZXh0IHRoYXQgc3RpbGwgaGFzIGEgYm91bmQgV2ViR0xQcm9ncmFtLicgK1xuICAgICAgICAgICcgVGhpcyBpcyBwcm9iYWJseSBhIHJlc291cmNlIGxlYWssIGRlbGV0ZSB0aGUgcHJvZ3JhbSB3aXRoICcgK1xuICAgICAgICAgICdHUEdQVUNvbnRleHQuZGVsZXRlUHJvZ3JhbSBiZWZvcmUgZGlzcG9zaW5nLicpO1xuICAgIH1cbiAgICBpZiAodGhpcy5vdXRwdXRUZXh0dXJlICE9IG51bGwpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAnRGlzcG9zaW5nIGEgR1BHUFVDb250ZXh0IHRoYXQgc3RpbGwgaGFzIGEgYm91bmQgb3V0cHV0IG1hdHJpeCAnICtcbiAgICAgICAgICAndGV4dHVyZS4gIFRoaXMgaXMgcHJvYmFibHkgYSByZXNvdXJjZSBsZWFrLCBkZWxldGUgdGhlIG91dHB1dCAnICtcbiAgICAgICAgICAnbWF0cml4IHRleHR1cmUgd2l0aCBHUEdQVUNvbnRleHQuZGVsZXRlTWF0cml4VGV4dHVyZSBiZWZvcmUgJyArXG4gICAgICAgICAgJ2Rpc3Bvc2luZy4nKTtcbiAgICB9XG4gICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuICAgIHdlYmdsX3V0aWwuY2FsbEFuZENoZWNrKGdsLCAoKSA9PiBnbC5maW5pc2goKSk7XG4gICAgd2ViZ2xfdXRpbC5jYWxsQW5kQ2hlY2soZ2wsICgpID0+IGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgbnVsbCkpO1xuICAgIHdlYmdsX3V0aWwuY2FsbEFuZENoZWNrKGdsLCAoKSA9PiBnbC5kZWxldGVGcmFtZWJ1ZmZlcih0aGlzLmZyYW1lYnVmZmVyKSk7XG4gICAgd2ViZ2xfdXRpbC5jYWxsQW5kQ2hlY2soZ2wsICgpID0+IGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBudWxsKSk7XG4gICAgd2ViZ2xfdXRpbC5jYWxsQW5kQ2hlY2soZ2wsICgpID0+IGdsLmRlbGV0ZUJ1ZmZlcih0aGlzLnZlcnRleEJ1ZmZlcikpO1xuICAgIHdlYmdsX3V0aWwuY2FsbEFuZENoZWNrKFxuICAgICAgICBnbCwgKCkgPT4gZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbnVsbCkpO1xuICAgIHdlYmdsX3V0aWwuY2FsbEFuZENoZWNrKGdsLCAoKSA9PiBnbC5kZWxldGVCdWZmZXIodGhpcy5pbmRleEJ1ZmZlcikpO1xuICAgIHRoaXMubG9zZUNvbnRleHRFeHRlbnNpb24ubG9zZUNvbnRleHQoKTtcbiAgICB0aGlzLmRpc3Bvc2VkID0gdHJ1ZTtcbiAgfVxuXG4gIHB1YmxpYyBlbmFibGVBdXRvbWF0aWNEZWJ1Z1ZhbGlkYXRpb24oZW5hYmxlZDogYm9vbGVhbikge1xuICAgIHRoaXMuYXV0b0RlYnVnVmFsaWRhdGUgPSBlbmFibGVkO1xuICAgIHdlYmdsX3V0aWwuZW5hYmxlRGVidWdXZWJHTEVycm9yQ2hlY2tpbmcoZW5hYmxlZCk7XG4gIH1cblxuICBwdWJsaWMgY3JlYXRlTWF0cml4VGV4dHVyZShyb3dzOiBudW1iZXIsIGNvbHVtbnM6IG51bWJlcik6IFdlYkdMVGV4dHVyZSB7XG4gICAgdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICByZXR1cm4gZ3BncHVfdXRpbC5jcmVhdGVNYXRyaXhUZXh0dXJlKHRoaXMuZ2wsIHJvd3MsIGNvbHVtbnMpO1xuICB9XG5cbiAgcHVibGljIHVwbG9hZFBpeGVsRGF0YVRvVGV4dHVyZShcbiAgICAgIHRleHR1cmU6IFdlYkdMVGV4dHVyZSxcbiAgICAgIHBpeGVsczogSW1hZ2VEYXRhfEhUTUxJbWFnZUVsZW1lbnR8SFRNTENhbnZhc0VsZW1lbnR8SFRNTFZpZGVvRWxlbWVudCkge1xuICAgIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgZ3BncHVfdXRpbC51cGxvYWRQaXhlbERhdGFUb1RleHR1cmUodGhpcy5nbCwgdGV4dHVyZSwgcGl4ZWxzKTtcbiAgfVxuXG4gIHB1YmxpYyBjcmVhdGVQYWNrZWRNYXRyaXhUZXh0dXJlKHJvd3M6IG51bWJlciwgY29sdW1uczogbnVtYmVyKTpcbiAgICAgIFdlYkdMVGV4dHVyZSB7XG4gICAgdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICByZXR1cm4gZ3BncHVfdXRpbC5jcmVhdGVQYWNrZWRNYXRyaXhUZXh0dXJlKHRoaXMuZ2wsIHJvd3MsIGNvbHVtbnMpO1xuICB9XG5cbiAgcHVibGljIGRlbGV0ZU1hdHJpeFRleHR1cmUodGV4dHVyZTogV2ViR0xUZXh0dXJlKSB7XG4gICAgdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICBpZiAodGhpcy5vdXRwdXRUZXh0dXJlID09PSB0ZXh0dXJlKSB7XG4gICAgICB3ZWJnbF91dGlsLnVuYmluZENvbG9yVGV4dHVyZUZyb21GcmFtZWJ1ZmZlcih0aGlzLmdsLCB0aGlzLmZyYW1lYnVmZmVyKTtcbiAgICAgIHRoaXMub3V0cHV0VGV4dHVyZSA9IG51bGw7XG4gICAgfVxuICAgIHdlYmdsX3V0aWwuY2FsbEFuZENoZWNrKHRoaXMuZ2wsICgpID0+IHRoaXMuZ2wuZGVsZXRlVGV4dHVyZSh0ZXh0dXJlKSk7XG4gIH1cblxuICBwdWJsaWMgdXBsb2FkTWF0cml4VG9UZXh0dXJlKFxuICAgICAgdGV4dHVyZTogV2ViR0xUZXh0dXJlLCByb3dzOiBudW1iZXIsIGNvbHVtbnM6IG51bWJlcixcbiAgICAgIG1hdHJpeDogRmxvYXQzMkFycmF5KSB7XG4gICAgdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICBjb25zdCBudW1DaGFubmVscyA9IDE7XG4gICAgcmV0dXJuIGdwZ3B1X3V0aWwudXBsb2FkTWF0cml4VG9UZXh0dXJlKFxuICAgICAgICB0aGlzLmdsLCB0ZXh0dXJlLCByb3dzLCBjb2x1bW5zLCBtYXRyaXgsIG51bUNoYW5uZWxzKTtcbiAgfVxuXG4gIHB1YmxpYyB1cGxvYWRNYXRyaXhUb1BhY2tlZFRleHR1cmUoXG4gICAgICB0ZXh0dXJlOiBXZWJHTFRleHR1cmUsIHJvd3M6IG51bWJlciwgY29sdW1uczogbnVtYmVyLFxuICAgICAgbWF0cml4OiBGbG9hdDMyQXJyYXkpIHtcbiAgICB0aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgIHJldHVybiBncGdwdV91dGlsLnVwbG9hZE1hdHJpeFRvUGFja2VkVGV4dHVyZShcbiAgICAgICAgdGhpcy5nbCwgdGV4dHVyZSwgcm93cywgY29sdW1ucywgbWF0cml4KTtcbiAgfVxuXG4gIHB1YmxpYyBkb3dubG9hZE1hdHJpeEZyb21UZXh0dXJlKFxuICAgICAgdGV4dHVyZTogV2ViR0xUZXh0dXJlLCByb3dzOiBudW1iZXIsIGNvbHVtbnM6IG51bWJlcik6IEZsb2F0MzJBcnJheSB7XG4gICAgcmV0dXJuIHRoaXMuZG93bmxvYWRNYXRyaXhEcml2ZXIoXG4gICAgICAgIHRleHR1cmUsXG4gICAgICAgICgpID0+XG4gICAgICAgICAgICBncGdwdV91dGlsLmRvd25sb2FkTWF0cml4RnJvbU91dHB1dFRleHR1cmUodGhpcy5nbCwgcm93cywgY29sdW1ucykpO1xuICB9XG5cbiAgcHVibGljIGRvd25sb2FkTWF0cml4RnJvbVBhY2tlZFRleHR1cmUoXG4gICAgICB0ZXh0dXJlOiBXZWJHTFRleHR1cmUsIHJvd3M6IG51bWJlciwgY29sdW1uczogbnVtYmVyKTogRmxvYXQzMkFycmF5IHtcbiAgICByZXR1cm4gdGhpcy5kb3dubG9hZE1hdHJpeERyaXZlcihcbiAgICAgICAgdGV4dHVyZSxcbiAgICAgICAgKCkgPT4gZ3BncHVfdXRpbC5kb3dubG9hZE1hdHJpeEZyb21QYWNrZWRPdXRwdXRUZXh0dXJlKFxuICAgICAgICAgICAgdGhpcy5nbCwgcm93cywgY29sdW1ucykpO1xuICB9XG5cbiAgcHVibGljIGNyZWF0ZVByb2dyYW0oZnJhZ21lbnRTaGFkZXJTb3VyY2U6IHN0cmluZyk6IFdlYkdMUHJvZ3JhbSB7XG4gICAgdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgY29uc3QgZnJhZ21lbnRTaGFkZXI6IFdlYkdMU2hhZGVyID1cbiAgICAgICAgd2ViZ2xfdXRpbC5jcmVhdGVGcmFnbWVudFNoYWRlcihnbCwgZnJhZ21lbnRTaGFkZXJTb3VyY2UpO1xuICAgIGNvbnN0IHZlcnRleFNoYWRlcjogV2ViR0xTaGFkZXIgPSBncGdwdV91dGlsLmNyZWF0ZVZlcnRleFNoYWRlcihnbCk7XG4gICAgY29uc3QgcHJvZ3JhbTogV2ViR0xQcm9ncmFtID0gd2ViZ2xfdXRpbC5jcmVhdGVQcm9ncmFtKGdsKTtcbiAgICB3ZWJnbF91dGlsLmNhbGxBbmRDaGVjayhnbCwgKCkgPT4gZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIHZlcnRleFNoYWRlcikpO1xuICAgIHdlYmdsX3V0aWwuY2FsbEFuZENoZWNrKGdsLCAoKSA9PiBnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgZnJhZ21lbnRTaGFkZXIpKTtcbiAgICB3ZWJnbF91dGlsLmxpbmtQcm9ncmFtKGdsLCBwcm9ncmFtKTtcbiAgICBpZiAodGhpcy5hdXRvRGVidWdWYWxpZGF0ZSkge1xuICAgICAgd2ViZ2xfdXRpbC52YWxpZGF0ZVByb2dyYW0oZ2wsIHByb2dyYW0pO1xuICAgIH1cbiAgICB3ZWJnbF91dGlsLmNhbGxBbmRDaGVjayhnbCwgKCkgPT4gZ2wuZGV0YWNoU2hhZGVyKHByb2dyYW0sIHZlcnRleFNoYWRlcikpO1xuICAgIHdlYmdsX3V0aWwuY2FsbEFuZENoZWNrKGdsLCAoKSA9PiBnbC5kZWxldGVTaGFkZXIodmVydGV4U2hhZGVyKSk7XG4gICAgd2ViZ2xfdXRpbC5jYWxsQW5kQ2hlY2soZ2wsICgpID0+IGdsLmRldGFjaFNoYWRlcihwcm9ncmFtLCBmcmFnbWVudFNoYWRlcikpO1xuICAgIHdlYmdsX3V0aWwuY2FsbEFuZENoZWNrKGdsLCAoKSA9PiBnbC5kZWxldGVTaGFkZXIoZnJhZ21lbnRTaGFkZXIpKTtcbiAgICByZXR1cm4gcHJvZ3JhbTtcbiAgfVxuXG4gIHB1YmxpYyBkZWxldGVQcm9ncmFtKHByb2dyYW06IFdlYkdMUHJvZ3JhbSkge1xuICAgIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgaWYgKHByb2dyYW0gPT09IHRoaXMucHJvZ3JhbSkge1xuICAgICAgdGhpcy5wcm9ncmFtID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHByb2dyYW0gIT0gbnVsbCkge1xuICAgICAgd2ViZ2xfdXRpbC5jYWxsQW5kQ2hlY2sodGhpcy5nbCwgKCkgPT4gdGhpcy5nbC5kZWxldGVQcm9ncmFtKHByb2dyYW0pKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc2V0UHJvZ3JhbShwcm9ncmFtOiBXZWJHTFByb2dyYW18bnVsbCkge1xuICAgIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgdGhpcy5wcm9ncmFtID0gcHJvZ3JhbTtcbiAgICBpZiAoKHRoaXMucHJvZ3JhbSAhPSBudWxsKSAmJiB0aGlzLmF1dG9EZWJ1Z1ZhbGlkYXRlKSB7XG4gICAgICB3ZWJnbF91dGlsLnZhbGlkYXRlUHJvZ3JhbSh0aGlzLmdsLCB0aGlzLnByb2dyYW0pO1xuICAgIH1cbiAgICB3ZWJnbF91dGlsLmNhbGxBbmRDaGVjayh0aGlzLmdsLCAoKSA9PiB0aGlzLmdsLnVzZVByb2dyYW0ocHJvZ3JhbSkpO1xuICB9XG5cbiAgcHVibGljIGdldFVuaWZvcm1Mb2NhdGlvbih1bmlmb3JtTmFtZTogc3RyaW5nKTogV2ViR0xVbmlmb3JtTG9jYXRpb24ge1xuICAgIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgdGhpcy50aHJvd0lmTm9Qcm9ncmFtKCk7XG4gICAgcmV0dXJuIHdlYmdsX3V0aWwuZ2V0UHJvZ3JhbVVuaWZvcm1Mb2NhdGlvbk9yVGhyb3coXG4gICAgICAgIHRoaXMuZ2wsIHRoaXMucHJvZ3JhbSEsIHVuaWZvcm1OYW1lKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRJbnB1dE1hdHJpeFRleHR1cmUoXG4gICAgICBpbnB1dE1hdHJpeFRleHR1cmU6IFdlYkdMVGV4dHVyZSwgdW5pZm9ybU5hbWU6IHN0cmluZyxcbiAgICAgIHRleHR1cmVVbml0OiBudW1iZXIpIHtcbiAgICB0aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgIHRoaXMudGhyb3dJZk5vUHJvZ3JhbSgpO1xuICAgIHdlYmdsX3V0aWwuYmluZFRleHR1cmVUb1Byb2dyYW1Vbmlmb3JtU2FtcGxlcihcbiAgICAgICAgdGhpcy5nbCwgdGhpcy5wcm9ncmFtISwgaW5wdXRNYXRyaXhUZXh0dXJlLCB1bmlmb3JtTmFtZSwgdGV4dHVyZVVuaXQpO1xuICB9XG5cbiAgcHVibGljIHNldE91dHB1dE1hdHJpeFRleHR1cmUoXG4gICAgICBvdXRwdXRNYXRyaXhUZXh0dXJlOiBXZWJHTFRleHR1cmUsIHJvd3M6IG51bWJlciwgY29sdW1uczogbnVtYmVyKSB7XG4gICAgdGhpcy5zZXRPdXRwdXRNYXRyaXhUZXh0dXJlRHJpdmVyKG91dHB1dE1hdHJpeFRleHR1cmUsIGNvbHVtbnMsIHJvd3MpO1xuICB9XG5cbiAgcHVibGljIHNldE91dHB1dFBhY2tlZE1hdHJpeFRleHR1cmUoXG4gICAgICBvdXRwdXRQYWNrZWRNYXRyaXhUZXh0dXJlOiBXZWJHTFRleHR1cmUsIHJvd3M6IG51bWJlciwgY29sdW1uczogbnVtYmVyKSB7XG4gICAgdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICBjb25zdCBbd2lkdGgsIGhlaWdodF0gPVxuICAgICAgICB0ZXhfdXRpbC5nZXRQYWNrZWRNYXRyaXhUZXh0dXJlU2hhcGVXaWR0aEhlaWdodChyb3dzLCBjb2x1bW5zKTtcbiAgICB0aGlzLnNldE91dHB1dE1hdHJpeFRleHR1cmVEcml2ZXIob3V0cHV0UGFja2VkTWF0cml4VGV4dHVyZSwgd2lkdGgsIGhlaWdodCk7XG4gIH1cblxuICBwdWJsaWMgc2V0T3V0cHV0TWF0cml4V3JpdGVSZWdpb24oXG4gICAgICBzdGFydFJvdzogbnVtYmVyLCBudW1Sb3dzOiBudW1iZXIsIHN0YXJ0Q29sdW1uOiBudW1iZXIsXG4gICAgICBudW1Db2x1bW5zOiBudW1iZXIpIHtcbiAgICB0aGlzLnNldE91dHB1dE1hdHJpeFdyaXRlUmVnaW9uRHJpdmVyKFxuICAgICAgICBzdGFydENvbHVtbiwgc3RhcnRSb3csIG51bUNvbHVtbnMsIG51bVJvd3MpO1xuICB9XG5cbiAgcHVibGljIHNldE91dHB1dFBhY2tlZE1hdHJpeFdyaXRlUmVnaW9uKFxuICAgICAgc3RhcnRSb3c6IG51bWJlciwgbnVtUm93czogbnVtYmVyLCBzdGFydENvbHVtbjogbnVtYmVyLFxuICAgICAgbnVtQ29sdW1uczogbnVtYmVyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRPdXRwdXRQYWNrZWRNYXRyaXhXcml0ZVJlZ2lvbiBub3QgaW1wbGVtZW50ZWQuJyk7XG4gIH1cblxuICBwdWJsaWMgZGVidWdWYWxpZGF0ZSgpIHtcbiAgICBpZiAodGhpcy5wcm9ncmFtICE9IG51bGwpIHtcbiAgICAgIHdlYmdsX3V0aWwudmFsaWRhdGVQcm9ncmFtKHRoaXMuZ2wsIHRoaXMucHJvZ3JhbSk7XG4gICAgfVxuICAgIHdlYmdsX3V0aWwudmFsaWRhdGVGcmFtZWJ1ZmZlcih0aGlzLmdsKTtcbiAgfVxuXG4gIHB1YmxpYyBleGVjdXRlUHJvZ3JhbSgpIHtcbiAgICB0aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgIHRoaXMudGhyb3dJZk5vUHJvZ3JhbSgpO1xuICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcbiAgICBncGdwdV91dGlsLmJpbmRWZXJ0ZXhQcm9ncmFtQXR0cmlidXRlU3RyZWFtcyhcbiAgICAgICAgZ2wsIHRoaXMucHJvZ3JhbSEsIHRoaXMudmVydGV4QnVmZmVyKTtcbiAgICBpZiAodGhpcy5hdXRvRGVidWdWYWxpZGF0ZSkge1xuICAgICAgdGhpcy5kZWJ1Z1ZhbGlkYXRlKCk7XG4gICAgfVxuICAgIHdlYmdsX3V0aWwuY2FsbEFuZENoZWNrKFxuICAgICAgICBnbCwgKCkgPT4gZ2wuZHJhd0VsZW1lbnRzKGdsLlRSSUFOR0xFUywgNiwgZ2wuVU5TSUdORURfU0hPUlQsIDApKTtcbiAgfVxuXG4gIHB1YmxpYyBibG9ja1VudGlsQWxsUHJvZ3JhbXNDb21wbGV0ZWQoKSB7XG4gICAgdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICB3ZWJnbF91dGlsLmNhbGxBbmRDaGVjayh0aGlzLmdsLCAoKSA9PiB0aGlzLmdsLmZpbmlzaCgpKTtcbiAgfVxuXG4gIHByaXZhdGUgZG93bmxvYWRNYXRyaXhEcml2ZXIoXG4gICAgICB0ZXh0dXJlOiBXZWJHTFRleHR1cmUsXG4gICAgICBkb3dubG9hZEFuZERlY29kZTogKCkgPT4gRmxvYXQzMkFycmF5KTogRmxvYXQzMkFycmF5IHtcbiAgICB0aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgIHdlYmdsX3V0aWwuYmluZENvbG9yVGV4dHVyZVRvRnJhbWVidWZmZXIoXG4gICAgICAgIHRoaXMuZ2wsIHRleHR1cmUsIHRoaXMuZnJhbWVidWZmZXIpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGRvd25sb2FkQW5kRGVjb2RlKCk7XG4gICAgaWYgKHRoaXMub3V0cHV0VGV4dHVyZSAhPSBudWxsKSB7XG4gICAgICB3ZWJnbF91dGlsLmJpbmRDb2xvclRleHR1cmVUb0ZyYW1lYnVmZmVyKFxuICAgICAgICAgIHRoaXMuZ2wsIHRoaXMub3V0cHV0VGV4dHVyZSwgdGhpcy5mcmFtZWJ1ZmZlcik7XG4gICAgICBpZiAodGhpcy5hdXRvRGVidWdWYWxpZGF0ZSkge1xuICAgICAgICB3ZWJnbF91dGlsLnZhbGlkYXRlRnJhbWVidWZmZXIodGhpcy5nbCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdlYmdsX3V0aWwudW5iaW5kQ29sb3JUZXh0dXJlRnJvbUZyYW1lYnVmZmVyKHRoaXMuZ2wsIHRoaXMuZnJhbWVidWZmZXIpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRPdXRwdXRNYXRyaXhUZXh0dXJlRHJpdmVyKFxuICAgICAgb3V0cHV0TWF0cml4VGV4dHVyZU1heWJlUGFja2VkOiBXZWJHTFRleHR1cmUsIHdpZHRoOiBudW1iZXIsXG4gICAgICBoZWlnaHQ6IG51bWJlcikge1xuICAgIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuICAgIHdlYmdsX3V0aWwuYmluZENvbG9yVGV4dHVyZVRvRnJhbWVidWZmZXIoXG4gICAgICAgIGdsLCBvdXRwdXRNYXRyaXhUZXh0dXJlTWF5YmVQYWNrZWQsIHRoaXMuZnJhbWVidWZmZXIpO1xuICAgIGlmICh0aGlzLmF1dG9EZWJ1Z1ZhbGlkYXRlKSB7XG4gICAgICB3ZWJnbF91dGlsLnZhbGlkYXRlRnJhbWVidWZmZXIoZ2wpO1xuICAgIH1cbiAgICB0aGlzLm91dHB1dFRleHR1cmUgPSBvdXRwdXRNYXRyaXhUZXh0dXJlTWF5YmVQYWNrZWQ7XG4gICAgd2ViZ2xfdXRpbC5jYWxsQW5kQ2hlY2soZ2wsICgpID0+IGdsLnZpZXdwb3J0KDAsIDAsIHdpZHRoLCBoZWlnaHQpKTtcbiAgICB3ZWJnbF91dGlsLmNhbGxBbmRDaGVjayhnbCwgKCkgPT4gZ2wuc2Npc3NvcigwLCAwLCB3aWR0aCwgaGVpZ2h0KSk7XG4gIH1cblxuICBwcml2YXRlIHNldE91dHB1dE1hdHJpeFdyaXRlUmVnaW9uRHJpdmVyKFxuICAgICAgeDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICB3ZWJnbF91dGlsLmNhbGxBbmRDaGVjayhcbiAgICAgICAgdGhpcy5nbCwgKCkgPT4gdGhpcy5nbC5zY2lzc29yKHgsIHksIHdpZHRoLCBoZWlnaHQpKTtcbiAgfVxuXG4gIHByaXZhdGUgdGhyb3dJZkRpc3Bvc2VkKCkge1xuICAgIGlmICh0aGlzLmRpc3Bvc2VkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRlZCB0byB1c2UgZGlzcG9zZWQgR1BHUFVDb250ZXh0LicpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdGhyb3dJZk5vUHJvZ3JhbSgpIHtcbiAgICBpZiAodGhpcy5wcm9ncmFtID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gR1BVIHByb2dyYW0gaXMgY3VycmVudGx5IHNldC4nKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0ICogYXMgdGV4X3V0aWwgZnJvbSAnLi90ZXhfdXRpbCc7XG5pbXBvcnQgKiBhcyB3ZWJnbF91dGlsIGZyb20gJy4vd2ViZ2xfdXRpbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRXZWJHTENvbnRleHRBdHRyaWJ1dGVzKCk6IFdlYkdMQ29udGV4dEF0dHJpYnV0ZXMge1xuICByZXR1cm4ge1xuICAgIGFscGhhOiBmYWxzZSxcbiAgICBhbnRpYWxpYXM6IGZhbHNlLFxuICAgIHByZW11bHRpcGxpZWRBbHBoYTogZmFsc2UsXG4gICAgcHJlc2VydmVEcmF3aW5nQnVmZmVyOiBmYWxzZSxcbiAgICBkZXB0aDogZmFsc2UsXG4gICAgc3RlbmNpbDogZmFsc2UsXG4gICAgZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdDogdHJ1ZVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlV2ViR0xDb250ZXh0KGNhbnZhcz86IEhUTUxDYW52YXNFbGVtZW50KSB7XG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSBnZXRXZWJHTENvbnRleHRBdHRyaWJ1dGVzKCk7XG4gIGxldCBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xuICBpZiAoY2FudmFzICE9IG51bGwpIHtcbiAgICBnbCA9IHdlYmdsX3V0aWwuY3JlYXRlV2ViR0xSZW5kZXJpbmdDb250ZXh0RnJvbUNhbnZhcyhjYW52YXMsIGF0dHJpYnV0ZXMpO1xuICB9IGVsc2Uge1xuICAgIGdsID0gd2ViZ2xfdXRpbC5jcmVhdGVXZWJHTFJlbmRlcmluZ0NvbnRleHQoYXR0cmlidXRlcyk7XG4gIH1cbiAgd2ViZ2xfdXRpbC5jYWxsQW5kQ2hlY2soZ2wsICgpID0+IGdsLmRpc2FibGUoZ2wuREVQVEhfVEVTVCkpO1xuICB3ZWJnbF91dGlsLmNhbGxBbmRDaGVjayhnbCwgKCkgPT4gZ2wuZGlzYWJsZShnbC5TVEVOQ0lMX1RFU1QpKTtcbiAgd2ViZ2xfdXRpbC5jYWxsQW5kQ2hlY2soZ2wsICgpID0+IGdsLmRpc2FibGUoZ2wuQkxFTkQpKTtcbiAgd2ViZ2xfdXRpbC5jYWxsQW5kQ2hlY2soZ2wsICgpID0+IGdsLmRpc2FibGUoZ2wuRElUSEVSKSk7XG4gIHdlYmdsX3V0aWwuY2FsbEFuZENoZWNrKGdsLCAoKSA9PiBnbC5kaXNhYmxlKGdsLlBPTFlHT05fT0ZGU0VUX0ZJTEwpKTtcbiAgd2ViZ2xfdXRpbC5jYWxsQW5kQ2hlY2soZ2wsICgpID0+IGdsLmRpc2FibGUoZ2wuU0FNUExFX0NPVkVSQUdFKSk7XG4gIHdlYmdsX3V0aWwuY2FsbEFuZENoZWNrKGdsLCAoKSA9PiBnbC5lbmFibGUoZ2wuU0NJU1NPUl9URVNUKSk7XG4gIHdlYmdsX3V0aWwuY2FsbEFuZENoZWNrKGdsLCAoKSA9PiBnbC5lbmFibGUoZ2wuQ1VMTF9GQUNFKSk7XG4gIHdlYmdsX3V0aWwuY2FsbEFuZENoZWNrKGdsLCAoKSA9PiBnbC5jdWxsRmFjZShnbC5CQUNLKSk7XG4gIHJldHVybiBnbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVZlcnRleFNoYWRlcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KTogV2ViR0xTaGFkZXIge1xuICBjb25zdCB2ZXJ0ZXhTaGFkZXJTb3VyY2UgPSBgXG4gICAgcHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xuICAgIGF0dHJpYnV0ZSB2ZWMzIGNsaXBTcGFjZVBvcztcbiAgICBhdHRyaWJ1dGUgdmVjMiB1djtcbiAgICB2YXJ5aW5nIHZlYzIgcmVzdWx0VVY7XG5cbiAgICB2b2lkIG1haW4oKSB7XG4gICAgICBnbF9Qb3NpdGlvbiA9IHZlYzQoY2xpcFNwYWNlUG9zLCAxKTtcbiAgICAgIHJlc3VsdFVWID0gdXY7XG4gICAgfWA7XG4gIHJldHVybiB3ZWJnbF91dGlsLmNyZWF0ZVZlcnRleFNoYWRlcihnbCwgdmVydGV4U2hhZGVyU291cmNlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVZlcnRleEJ1ZmZlcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KTogV2ViR0xCdWZmZXIge1xuICAvLyBbeCB5IHogdSB2XSAqIFt1cHBlci1sZWZ0LCBsb3dlci1sZWZ0LCB1cHBlci1yaWdodCwgbG93ZXItcmlnaHRdXG4gIGNvbnN0IHZlcnRleEFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShcbiAgICAgIFstMSwgMSwgMCwgMCwgMSwgLTEsIC0xLCAwLCAwLCAwLCAxLCAxLCAwLCAxLCAxLCAxLCAtMSwgMCwgMSwgMF0pO1xuICByZXR1cm4gd2ViZ2xfdXRpbC5jcmVhdGVTdGF0aWNWZXJ0ZXhCdWZmZXIoZ2wsIHZlcnRleEFycmF5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUluZGV4QnVmZmVyKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpOiBXZWJHTEJ1ZmZlciB7XG4gIC8vIE9wZW5HTCAoYW5kIFdlYkdMKSBoYXZlIFwiQ0NXID09IGZyb250XCIgd2luZGluZ1xuICBjb25zdCB0cmlhbmdsZVZlcnRleEluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoWzAsIDEsIDIsIDIsIDEsIDNdKTtcbiAgcmV0dXJuIHdlYmdsX3V0aWwuY3JlYXRlU3RhdGljSW5kZXhCdWZmZXIoZ2wsIHRyaWFuZ2xlVmVydGV4SW5kaWNlcyk7XG59XG5cbmZ1bmN0aW9uIGdldFRleHR1cmVJbnRlcm5hbEZvcm1hdChcbiAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBudW1DaGFubmVsczogbnVtYmVyKTogbnVtYmVyIHtcbiAgaWYgKHdlYmdsX3V0aWwuaXNXZWJHTDJFbmFibGVkKCkpIHtcbiAgICBpZiAobnVtQ2hhbm5lbHMgPT09IDQpIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICAgIHJldHVybiAoZ2wgYXMgYW55KS5SR0JBMzJGO1xuICAgIH1cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gICAgcmV0dXJuIChnbCBhcyBhbnkpLlIzMkY7XG4gIH1cbiAgcmV0dXJuIGdsLlJHQkE7XG59XG5cbmZ1bmN0aW9uIGdldFRleHR1cmVGb3JtYXQoXG4gICAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgbnVtQ2hhbm5lbHM6IG51bWJlcik6IG51bWJlciB7XG4gIGlmICh3ZWJnbF91dGlsLmlzV2ViR0wyRW5hYmxlZCgpICYmIG51bUNoYW5uZWxzID09PSAxKSB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgIHJldHVybiAoZ2wgYXMgYW55KS5SRUQ7XG4gIH1cbiAgcmV0dXJuIGdsLlJHQkE7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFuZENvbmZpZ3VyZVRleHR1cmUoXG4gICAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsXG4gICAgbnVtQ2hhbm5lbHM6IG51bWJlcik6IFdlYkdMVGV4dHVyZSB7XG4gIHdlYmdsX3V0aWwudmFsaWRhdGVUZXh0dXJlU2l6ZShnbCwgd2lkdGgsIGhlaWdodCk7XG4gIGNvbnN0IHRleHR1cmUgPSB3ZWJnbF91dGlsLmNyZWF0ZVRleHR1cmUoZ2wpO1xuXG4gIGNvbnN0IHRleDJkID0gZ2wuVEVYVFVSRV8yRDtcbiAgY29uc3QgaW50ZXJuYWxGb3JtYXQgPSBnZXRUZXh0dXJlSW50ZXJuYWxGb3JtYXQoZ2wsIG51bUNoYW5uZWxzKTtcbiAgY29uc3QgZm9ybWF0ID0gZ2V0VGV4dHVyZUZvcm1hdChnbCwgbnVtQ2hhbm5lbHMpO1xuICB3ZWJnbF91dGlsLmNhbGxBbmRDaGVjayhnbCwgKCkgPT4gZ2wuYmluZFRleHR1cmUodGV4MmQsIHRleHR1cmUpKTtcbiAgd2ViZ2xfdXRpbC5jYWxsQW5kQ2hlY2soXG4gICAgICBnbCwgKCkgPT4gZ2wudGV4UGFyYW1ldGVyaSh0ZXgyZCwgZ2wuVEVYVFVSRV9XUkFQX1MsIGdsLkNMQU1QX1RPX0VER0UpKTtcbiAgd2ViZ2xfdXRpbC5jYWxsQW5kQ2hlY2soXG4gICAgICBnbCwgKCkgPT4gZ2wudGV4UGFyYW1ldGVyaSh0ZXgyZCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLkNMQU1QX1RPX0VER0UpKTtcbiAgd2ViZ2xfdXRpbC5jYWxsQW5kQ2hlY2soXG4gICAgICBnbCwgKCkgPT4gZ2wudGV4UGFyYW1ldGVyaSh0ZXgyZCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5ORUFSRVNUKSk7XG4gIHdlYmdsX3V0aWwuY2FsbEFuZENoZWNrKFxuICAgICAgZ2wsICgpID0+IGdsLnRleFBhcmFtZXRlcmkodGV4MmQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTkVBUkVTVCkpO1xuICB3ZWJnbF91dGlsLmNhbGxBbmRDaGVjayhcbiAgICAgIGdsLFxuICAgICAgKCkgPT4gZ2wudGV4SW1hZ2UyRChcbiAgICAgICAgICB0ZXgyZCwgMCwgaW50ZXJuYWxGb3JtYXQsIHdpZHRoLCBoZWlnaHQsIDAsIGZvcm1hdCwgZ2wuRkxPQVQsIG51bGwpKTtcbiAgd2ViZ2xfdXRpbC5jYWxsQW5kQ2hlY2soZ2wsICgpID0+IGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpKTtcbiAgcmV0dXJuIHRleHR1cmU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNYXRyaXhUZXh0dXJlKFxuICAgIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIHJvd3M6IG51bWJlciwgY29sdW1uczogbnVtYmVyKTogV2ViR0xUZXh0dXJlIHtcbiAgY29uc3QgW3dpZHRoLCBoZWlnaHRdID1cbiAgICAgIHRleF91dGlsLmdldFVucGFja2VkTWF0cml4VGV4dHVyZVNoYXBlV2lkdGhIZWlnaHQocm93cywgY29sdW1ucyk7XG4gIGNvbnN0IG51bUNoYW5uZWxzID0gMTtcbiAgcmV0dXJuIGNyZWF0ZUFuZENvbmZpZ3VyZVRleHR1cmUoZ2wsIHdpZHRoLCBoZWlnaHQsIG51bUNoYW5uZWxzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbG9yTWF0cml4VGV4dHVyZShcbiAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCByb3dzOiBudW1iZXIsIGNvbHVtbnM6IG51bWJlcik6IFdlYkdMVGV4dHVyZSB7XG4gIGNvbnN0IFt3aWR0aCwgaGVpZ2h0XSA9XG4gICAgICB0ZXhfdXRpbC5nZXRDb2xvck1hdHJpeFRleHR1cmVTaGFwZVdpZHRoSGVpZ2h0KHJvd3MsIGNvbHVtbnMpO1xuICBjb25zdCBudW1DaGFubmVscyA9IDQ7XG4gIHJldHVybiBjcmVhdGVBbmRDb25maWd1cmVUZXh0dXJlKGdsLCB3aWR0aCwgaGVpZ2h0LCBudW1DaGFubmVscyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQYWNrZWRNYXRyaXhUZXh0dXJlKFxuICAgIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIHJvd3M6IG51bWJlciwgY29sdW1uczogbnVtYmVyKTogV2ViR0xUZXh0dXJlIHtcbiAgY29uc3QgW3dpZHRoLCBoZWlnaHRdID1cbiAgICAgIHRleF91dGlsLmdldFBhY2tlZE1hdHJpeFRleHR1cmVTaGFwZVdpZHRoSGVpZ2h0KHJvd3MsIGNvbHVtbnMpO1xuICBjb25zdCBudW1DaGFubmVscyA9IDQ7XG4gIHJldHVybiBjcmVhdGVBbmRDb25maWd1cmVUZXh0dXJlKGdsLCB3aWR0aCwgaGVpZ2h0LCBudW1DaGFubmVscyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBiaW5kVmVydGV4UHJvZ3JhbUF0dHJpYnV0ZVN0cmVhbXMoXG4gICAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgcHJvZ3JhbTogV2ViR0xQcm9ncmFtLFxuICAgIHZlcnRleEJ1ZmZlcjogV2ViR0xCdWZmZXIpIHtcbiAgY29uc3QgcG9zT2Zmc2V0ID0gMDsgICAgICAgICAgICAgICAvLyB4IGlzIHRoZSBmaXJzdCBidWZmZXIgZWxlbWVudFxuICBjb25zdCB1dk9mZnNldCA9IDMgKiA0OyAgICAgICAgICAgIC8vIHV2IGNvbWVzIGFmdGVyIFt4IHkgel1cbiAgY29uc3Qgc3RyaWRlID0gKDMgKiA0KSArICgyICogNCk7ICAvLyB4eXogKyB1diwgZWFjaCBlbnRyeSBpcyA0LWJ5dGUgZmxvYXQuXG4gIHdlYmdsX3V0aWwuY2FsbEFuZENoZWNrKFxuICAgICAgZ2wsICgpID0+IGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB2ZXJ0ZXhCdWZmZXIpKTtcbiAgd2ViZ2xfdXRpbC5iaW5kVmVydGV4QnVmZmVyVG9Qcm9ncmFtQXR0cmlidXRlKFxuICAgICAgZ2wsIHByb2dyYW0sICdjbGlwU3BhY2VQb3MnLCB2ZXJ0ZXhCdWZmZXIsIDMsIHN0cmlkZSwgcG9zT2Zmc2V0KTtcbiAgdHJ5IHtcbiAgICB3ZWJnbF91dGlsLmJpbmRWZXJ0ZXhCdWZmZXJUb1Byb2dyYW1BdHRyaWJ1dGUoXG4gICAgICAgIGdsLCBwcm9ncmFtLCAndXYnLCB2ZXJ0ZXhCdWZmZXIsIDIsIHN0cmlkZSwgdXZPZmZzZXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gUHJvZ3JhbXMgd2l0aCAxeDEgb3V0cHV0IHRleHR1cmVzIGRvbid0IHVzZSB0aGUgdXYgYXR0cmlidXRlLlxuICAgIC8vIFRoaXMgY2FuIGNhdXNlIHRoZSBzaGFkZXIgbGlua2VyIHRvIGRlYWQtc3RyaXAgaXQsIHNvIHdlIHNob3VsZG4ndFxuICAgIC8vIGNvbXBsYWluIG9yIGZhaWwgaWYgaXQncyBub3QgcHJlc2VudC5cbiAgICBpZiAoIWUuaGFzT3duUHJvcGVydHkoJ25hbWVkVmVydGV4QXR0cmlidXRlTm90Rm91bmQnKSkge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwbG9hZFBpeGVsRGF0YVRvVGV4dHVyZShcbiAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCB0ZXh0dXJlOiBXZWJHTFRleHR1cmUsXG4gICAgcGl4ZWxzOiBJbWFnZURhdGF8SFRNTEltYWdlRWxlbWVudHxIVE1MQ2FudmFzRWxlbWVudHxIVE1MVmlkZW9FbGVtZW50KSB7XG4gIGNvbnN0IG51bUNoYW5uZWxzID0gNDtcbiAgY29uc3QgaW50ZXJuYWxGb3JtYXQgPSBnZXRUZXh0dXJlSW50ZXJuYWxGb3JtYXQoZ2wsIG51bUNoYW5uZWxzKTtcbiAgd2ViZ2xfdXRpbC5jYWxsQW5kQ2hlY2soZ2wsICgpID0+IGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUpKTtcbiAgd2ViZ2xfdXRpbC5jYWxsQW5kQ2hlY2soXG4gICAgICBnbCxcbiAgICAgICgpID0+IGdsLnRleEltYWdlMkQoXG4gICAgICAgICAgZ2wuVEVYVFVSRV8yRCwgMCwgaW50ZXJuYWxGb3JtYXQsIGdsLlJHQkEsIGdsLkZMT0FULCBwaXhlbHMpKTtcbiAgd2ViZ2xfdXRpbC5jYWxsQW5kQ2hlY2soZ2wsICgpID0+IGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpKTtcbn1cblxuZnVuY3Rpb24gdXBsb2FkRGF0YVRvVGV4dHVyZShcbiAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCB0ZXh0dXJlOiBXZWJHTFRleHR1cmUsIHdpZHRoOiBudW1iZXIsXG4gICAgaGVpZ2h0OiBudW1iZXIsIGRhdGE6IEZsb2F0MzJBcnJheSwgbnVtQ2hhbm5lbHM6IG51bWJlcikge1xuICBjb25zdCB0ZXh0dXJlRm9ybWF0ID0gZ2V0VGV4dHVyZUZvcm1hdChnbCwgbnVtQ2hhbm5lbHMpO1xuXG4gIHdlYmdsX3V0aWwudmFsaWRhdGVUZXh0dXJlU2l6ZShnbCwgd2lkdGgsIGhlaWdodCk7XG4gIHdlYmdsX3V0aWwuY2FsbEFuZENoZWNrKGdsLCAoKSA9PiBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXh0dXJlKSk7XG4gIHdlYmdsX3V0aWwuY2FsbEFuZENoZWNrKFxuICAgICAgZ2wsXG4gICAgICAoKSA9PiBnbC50ZXhTdWJJbWFnZTJEKFxuICAgICAgICAgIGdsLlRFWFRVUkVfMkQsIDAsIDAsIDAsIHdpZHRoLCBoZWlnaHQsIHRleHR1cmVGb3JtYXQsIGdsLkZMT0FULFxuICAgICAgICAgIGRhdGEpKTtcbiAgd2ViZ2xfdXRpbC5jYWxsQW5kQ2hlY2soZ2wsICgpID0+IGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwbG9hZE1hdHJpeFRvVGV4dHVyZShcbiAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCB0ZXh0dXJlOiBXZWJHTFRleHR1cmUsIHJvd3M6IG51bWJlcixcbiAgICBjb2x1bW5zOiBudW1iZXIsIG1hdHJpeDogRmxvYXQzMkFycmF5LCBudW1DaGFubmVsczogbnVtYmVyKSB7XG4gIGNvbnN0IFt3LCBoXSA9XG4gICAgICB0ZXhfdXRpbC5nZXRVbnBhY2tlZE1hdHJpeFRleHR1cmVTaGFwZVdpZHRoSGVpZ2h0KHJvd3MsIGNvbHVtbnMpO1xuXG4gIGNvbnN0IGNoYW5uZWxzUGVyVGV4dHVyZSA9XG4gICAgICBudW1DaGFubmVscyA9PT0gMSA/IHdlYmdsX3V0aWwuZ2V0Q2hhbm5lbHNQZXJUZXh0dXJlKCkgOiBudW1DaGFubmVscztcbiAgY29uc3QgdW5wYWNrZWRBcnJheSA9XG4gICAgICBuZXcgRmxvYXQzMkFycmF5KHRleF91dGlsLmdldFVucGFja2VkQXJyYXlTaXplRnJvbU1hdHJpeFNpemUoXG4gICAgICAgICAgbWF0cml4Lmxlbmd0aCwgY2hhbm5lbHNQZXJUZXh0dXJlKSk7XG4gIHRleF91dGlsLmVuY29kZU1hdHJpeFRvVW5wYWNrZWRBcnJheShcbiAgICAgIG1hdHJpeCwgdW5wYWNrZWRBcnJheSwgY2hhbm5lbHNQZXJUZXh0dXJlKTtcblxuICB1cGxvYWREYXRhVG9UZXh0dXJlKGdsLCB0ZXh0dXJlLCB3LCBoLCB1bnBhY2tlZEFycmF5LCBudW1DaGFubmVscyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGxvYWRNYXRyaXhUb1BhY2tlZFRleHR1cmUoXG4gICAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgdGV4dHVyZTogV2ViR0xUZXh0dXJlLCByb3dzOiBudW1iZXIsXG4gICAgY29sdW1uczogbnVtYmVyLCBtYXRyaXg6IEZsb2F0MzJBcnJheSkge1xuICBjb25zdCBbdywgaF0gPSB0ZXhfdXRpbC5nZXRQYWNrZWRNYXRyaXhUZXh0dXJlU2hhcGVXaWR0aEhlaWdodChyb3dzLCBjb2x1bW5zKTtcbiAgY29uc3QgcGFja2VkUkdCQSA9IG5ldyBGbG9hdDMyQXJyYXkoXG4gICAgICB0ZXhfdXRpbC5nZXRQYWNrZWRSR0JBQXJyYXlTaXplRnJvbU1hdHJpeFNoYXBlKHJvd3MsIGNvbHVtbnMpKTtcbiAgdGV4X3V0aWwuZW5jb2RlTWF0cml4VG9QYWNrZWRSR0JBKG1hdHJpeCwgcm93cywgY29sdW1ucywgcGFja2VkUkdCQSk7XG4gIGNvbnN0IG51bUNoYW5uZWxzID0gNDtcbiAgdXBsb2FkRGF0YVRvVGV4dHVyZShnbCwgdGV4dHVyZSwgdywgaCwgcGFja2VkUkdCQSwgbnVtQ2hhbm5lbHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZG93bmxvYWRNYXRyaXhGcm9tT3V0cHV0VGV4dHVyZShcbiAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCByb3dzOiBudW1iZXIsIGNvbHVtbnM6IG51bWJlcik6IEZsb2F0MzJBcnJheSB7XG4gIGNvbnN0IFt3LCBoXSA9XG4gICAgICB0ZXhfdXRpbC5nZXRVbnBhY2tlZE1hdHJpeFRleHR1cmVTaGFwZVdpZHRoSGVpZ2h0KHJvd3MsIGNvbHVtbnMpO1xuXG4gIGNvbnN0IGNoYW5uZWxzUGVyVGV4dHVyZSA9IDQ7XG4gIGNvbnN0IHVucGFja2VkQXJyYXkgPVxuICAgICAgbmV3IEZsb2F0MzJBcnJheSh0ZXhfdXRpbC5nZXRVbnBhY2tlZEFycmF5U2l6ZUZyb21NYXRyaXhTaXplKFxuICAgICAgICAgIHJvd3MgKiBjb2x1bW5zLCBjaGFubmVsc1BlclRleHR1cmUpKTtcbiAgY29uc3QgdGV4dHVyZUZvcm1hdCA9IGdldFRleHR1cmVGb3JtYXQoZ2wsIGNoYW5uZWxzUGVyVGV4dHVyZSk7XG5cbiAgd2ViZ2xfdXRpbC5jYWxsQW5kQ2hlY2soXG4gICAgICBnbCwgKCkgPT4gZ2wucmVhZFBpeGVscygwLCAwLCB3LCBoLCBnbC5SR0JBLCBnbC5GTE9BVCwgdW5wYWNrZWRBcnJheSkpO1xuXG4gIGNvbnN0IG1hdHJpeCA9IG5ldyBGbG9hdDMyQXJyYXkocm93cyAqIGNvbHVtbnMpO1xuICB0ZXhfdXRpbC5kZWNvZGVNYXRyaXhGcm9tVW5wYWNrZWRBcnJheShcbiAgICAgIHVucGFja2VkQXJyYXksIG1hdHJpeCwgY2hhbm5lbHNQZXJUZXh0dXJlKTtcbiAgcmV0dXJuIG1hdHJpeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRvd25sb2FkTWF0cml4RnJvbVBhY2tlZE91dHB1dFRleHR1cmUoXG4gICAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgcm93czogbnVtYmVyLCBjb2x1bW5zOiBudW1iZXIpOiBGbG9hdDMyQXJyYXkge1xuICBjb25zdCBbdywgaF0gPSB0ZXhfdXRpbC5nZXRQYWNrZWRNYXRyaXhUZXh0dXJlU2hhcGVXaWR0aEhlaWdodChyb3dzLCBjb2x1bW5zKTtcbiAgY29uc3QgcGFja2VkUkdCQSA9IG5ldyBGbG9hdDMyQXJyYXkoXG4gICAgICB0ZXhfdXRpbC5nZXRQYWNrZWRSR0JBQXJyYXlTaXplRnJvbU1hdHJpeFNoYXBlKHJvd3MsIGNvbHVtbnMpKTtcbiAgd2ViZ2xfdXRpbC5jYWxsQW5kQ2hlY2soXG4gICAgICBnbCwgKCkgPT4gZ2wucmVhZFBpeGVscygwLCAwLCB3LCBoLCBnbC5SR0JBLCBnbC5GTE9BVCwgcGFja2VkUkdCQSkpO1xuICBjb25zdCBtYXRyaXggPSBuZXcgRmxvYXQzMkFycmF5KHJvd3MgKiBjb2x1bW5zKTtcbiAgcmV0dXJuIHRleF91dGlsLmRlY29kZU1hdHJpeEZyb21QYWNrZWRSR0JBKHBhY2tlZFJHQkEsIHJvd3MsIGNvbHVtbnMsIG1hdHJpeCk7XG59XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCB7R1BHUFVDb250ZXh0fSBmcm9tICcuL2dwZ3B1X2NvbnRleHQnO1xuaW1wb3J0ICogYXMgdW5hcnlvcF9ncHUgZnJvbSAnLi91bmFyeW9wX2dwdSc7XG5cbmZ1bmN0aW9uIGdldExvZ1VuYXJ5T3AoKTogc3RyaW5nIHtcbiAgcmV0dXJuICdnbF9GcmFnQ29sb3IgPSB2ZWM0KGxvZyh2YWx1ZSksIDAsIDAsIDApOyc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGcmFnbWVudFNoYWRlclNvdXJjZSgpOiBzdHJpbmcge1xuICByZXR1cm4gdW5hcnlvcF9ncHUuZ2V0RnJhZ21lbnRTaGFkZXJTb3VyY2UoZ2V0TG9nVW5hcnlPcCgpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvZyhcbiAgICBncGdwdTogR1BHUFVDb250ZXh0LCBsb2dQcm9ncmFtOiBXZWJHTFByb2dyYW0sIGE6IFdlYkdMVGV4dHVyZSxcbiAgICByb3dzOiBudW1iZXIsIGNvbHVtbnM6IG51bWJlciwgcmVzdWx0OiBXZWJHTFRleHR1cmUpIHtcbiAgdW5hcnlvcF9ncHUudW5hcnlPcChncGdwdSwgbG9nUHJvZ3JhbSwgYSwgcm93cywgY29sdW1ucywgcmVzdWx0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwbG9hZExvZ0Rvd25sb2FkKFxuICAgIGE6IEZsb2F0MzJBcnJheSwgcm93czogbnVtYmVyLCBjb2x1bW5zOiBudW1iZXIpOiBGbG9hdDMyQXJyYXkge1xuICByZXR1cm4gdW5hcnlvcF9ncHUudXBsb2FkVW5hcnlPcERvd25sb2FkKGEsIHJvd3MsIGNvbHVtbnMsIGdldExvZ1VuYXJ5T3AoKSk7XG59XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCB7R1BHUFVDb250ZXh0fSBmcm9tICcuL2dwZ3B1X2NvbnRleHQnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RnJhZ21lbnRTaGFkZXJTb3VyY2Uocm93czogbnVtYmVyLCBjb2x1bW5zOiBudW1iZXIpOiBzdHJpbmcge1xuICByZXR1cm4gYFxuICAgIHByZWNpc2lvbiBoaWdocCBmbG9hdDtcbiAgICB1bmlmb3JtIHNhbXBsZXIyRCBtYXRyaXhBO1xuICAgIHZhcnlpbmcgdmVjMiByZXN1bHRVVjtcblxuICAgIGNvbnN0IHZlYzIgYURpbUNSID0gdmVjMigke2NvbHVtbnN9LjAsICR7cm93c30uMCk7XG4gICAgY29uc3QgdmVjMiBoYWxmQ1IgPSB2ZWMyKDAuNSwgMC41KTtcblxuICAgIHZvaWQgbWFpbigpIHtcbiAgICAgIGZsb2F0IGFNYXggPSB0ZXh0dXJlMkQobWF0cml4QSwgaGFsZkNSIC8gYURpbUNSKS5yO1xuICAgICAgZm9yIChmbG9hdCByID0gMC4wOyByIDwgYURpbUNSLnk7IHIgKz0gMS4wKSB7XG4gICAgICAgIGZvciAoZmxvYXQgYyA9IDAuMDsgYyA8IGFEaW1DUi54OyBjICs9IDEuMCkge1xuICAgICAgICAgIHZlYzIgdXYgPSAodmVjMihjLCByKSArIGhhbGZDUikgLyBhRGltQ1I7XG4gICAgICAgICAgZmxvYXQgYUN1ciA9IHRleHR1cmUyRChtYXRyaXhBLCB1dikucjtcbiAgICAgICAgICBhTWF4ID0gbWF4KGFNYXgsIGFDdXIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZsb2F0IGV4cFN1bSA9IDAuMDtcbiAgICAgIGZvciAoZmxvYXQgciA9IDAuMDsgciA8IGFEaW1DUi55OyByICs9IDEuMCkge1xuICAgICAgICBmb3IgKGZsb2F0IGMgPSAwLjA7IGMgPCBhRGltQ1IueDsgYyArPSAxLjApIHtcbiAgICAgICAgICB2ZWMyIHV2ID0gKHZlYzIoYywgcikgKyBoYWxmQ1IpIC8gYURpbUNSO1xuICAgICAgICAgIGZsb2F0IGFDdXIgPSB0ZXh0dXJlMkQobWF0cml4QSwgdXYpLnI7XG4gICAgICAgICAgZXhwU3VtICs9IGV4cChhQ3VyIC0gYU1heCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZ2xfRnJhZ0NvbG9yID0gdmVjNChhTWF4ICsgbG9nKGV4cFN1bSksIDAsIDAsIDApO1xuICAgIH1gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9nU3VtRXhwKFxuICAgIGdwZ3B1OiBHUEdQVUNvbnRleHQsIGxvZ1N1bUV4cFByb2dyYW06IFdlYkdMUHJvZ3JhbSwgYTogV2ViR0xUZXh0dXJlLFxuICAgIHJvd3M6IG51bWJlciwgY29sdW1uczogbnVtYmVyLCByZXN1bHQ6IFdlYkdMVGV4dHVyZSkge1xuICBncGdwdS5zZXRPdXRwdXRNYXRyaXhUZXh0dXJlKHJlc3VsdCwgMSwgMSk7XG4gIGdwZ3B1LnNldFByb2dyYW0obG9nU3VtRXhwUHJvZ3JhbSk7XG4gIGdwZ3B1LnNldElucHV0TWF0cml4VGV4dHVyZShhLCAnbWF0cml4QScsIDApO1xuICBncGdwdS5leGVjdXRlUHJvZ3JhbSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBsb2FkTG9nU3VtRXhwRG93bmxvYWQoXG4gICAgYTogRmxvYXQzMkFycmF5LCByb3dzOiBudW1iZXIsIGNvbHVtbnM6IG51bWJlcik6IG51bWJlciB7XG4gIGNvbnN0IGdwZ3B1ID0gbmV3IEdQR1BVQ29udGV4dCgpO1xuICBjb25zdCBwcm9ncmFtID0gZ3BncHUuY3JlYXRlUHJvZ3JhbShnZXRGcmFnbWVudFNoYWRlclNvdXJjZShyb3dzLCBjb2x1bW5zKSk7XG4gIGNvbnN0IGFUZXh0dXJlID0gZ3BncHUuY3JlYXRlTWF0cml4VGV4dHVyZShyb3dzLCBjb2x1bW5zKTtcbiAgY29uc3QgcmVzdWx0VGV4dHVyZSA9IGdwZ3B1LmNyZWF0ZU1hdHJpeFRleHR1cmUoMSwgMSk7XG4gIGdwZ3B1LnVwbG9hZE1hdHJpeFRvVGV4dHVyZShhVGV4dHVyZSwgcm93cywgY29sdW1ucywgYSk7XG4gIGxvZ1N1bUV4cChncGdwdSwgcHJvZ3JhbSwgYVRleHR1cmUsIHJvd3MsIGNvbHVtbnMsIHJlc3VsdFRleHR1cmUpO1xuICBjb25zdCByZXN1bHQgPSBncGdwdS5kb3dubG9hZE1hdHJpeEZyb21UZXh0dXJlKHJlc3VsdFRleHR1cmUsIDEsIDEpO1xuICBncGdwdS5kZWxldGVNYXRyaXhUZXh0dXJlKGFUZXh0dXJlKTtcbiAgZ3BncHUuZGVsZXRlTWF0cml4VGV4dHVyZShyZXN1bHRUZXh0dXJlKTtcbiAgZ3BncHUuZGVsZXRlUHJvZ3JhbShwcm9ncmFtKTtcbiAgZ3BncHUuZGlzcG9zZSgpO1xuICByZXR1cm4gcmVzdWx0WzBdO1xufVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQgKiBhcyBjb252X3V0aWwgZnJvbSAnLi4vY29udl91dGlsJztcbmltcG9ydCB7R1BHUFVDb250ZXh0fSBmcm9tICcuL2dwZ3B1X2NvbnRleHQnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RnJhZ21lbnRTaGFkZXJNYXhQb29sQmFja3Byb3AoXG4gICAgZHlTaGFwZVJDRDogW251bWJlciwgbnVtYmVyLCBudW1iZXJdLCBmU2l6ZTogbnVtYmVyLCBvcmlnU3RyaWRlOiBudW1iZXIsXG4gICAgb3JpZ1BhZDogbnVtYmVyKSB7XG4gIGNvbnN0IG9yaWdJbnB1dERlcHRoID0gZHlTaGFwZVJDRFsyXTtcbiAgY29uc3QgcGFkID0gZlNpemUgLSAxIC0gb3JpZ1BhZDtcbiAgY29uc3QgW2R5Um93cywgZHlDb2xzLCBkZXB0aF0gPSBkeVNoYXBlUkNEO1xuXG4gIGNvbnN0IGR5VGV4U2hhcGVSQyA9IGNvbnZfdXRpbC5jb21wdXRlVGV4U2hhcGVGcm9tM0QoZHlTaGFwZVJDRCk7XG5cbiAgcmV0dXJuIGBcbiAgICBwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG4gICAgdW5pZm9ybSBzYW1wbGVyMkQgZHk7XG4gICAgdW5pZm9ybSBzYW1wbGVyMkQgbWF4UG9zO1xuXG4gICAgY29uc3QgdmVjMiBoYWxmQ1IgPSB2ZWMyKDAuNSwgMC41KTtcbiAgICBjb25zdCB2ZWMyIGR5U2hhcGVDUiA9IHZlYzIoJHtkeVRleFNoYXBlUkNbMV19LCAke2R5VGV4U2hhcGVSQ1swXX0pO1xuXG4gICAgdm9pZCBtYWluKCkge1xuICAgICAgdmVjMiBkeFRleENSID0gZmxvb3IoZ2xfRnJhZ0Nvb3JkLnh5KTtcblxuICAgICAgLy8gTWFwIGZyb20gMkQgKGR4VGV4UiwgZHhUZXhDKSB0byAzRCAoZHhSLCBkeEMsIGQpLlxuICAgICAgZmxvYXQgZHhSID0gZHhUZXhDUi55O1xuICAgICAgZmxvYXQgZHhDID0gZmxvb3IoZHhUZXhDUi54IC8gJHtvcmlnSW5wdXREZXB0aH0uMCk7XG4gICAgICBmbG9hdCBkID0gbW9kKGR4VGV4Q1IueCwgJHtvcmlnSW5wdXREZXB0aH0uMCk7XG5cbiAgICAgIHZlYzIgZHlSQ0Nvcm5lciA9IHZlYzIoZHhSLCBkeEMpIC0gdmVjMigke3BhZH0uMCwgJHtwYWR9LjApO1xuICAgICAgZmxvYXQgZHlSQ29ybmVyID0gZHlSQ0Nvcm5lci54O1xuICAgICAgZmxvYXQgZHlDQ29ybmVyID0gZHlSQ0Nvcm5lci55O1xuXG4gICAgICAvLyBDb252b2x2ZSBkeSg/LCA/LCBkKSB3aXRoIHBvcyBtYXNrKDosIDosIGQpIHRvIGdldCBkeCh5UiwgZHhDLCBkKS5cbiAgICAgIC8vID8gPSB0byBiZSBkZXRlcm1pbmVkLiA6ID0gYWNyb3NzIGFsbCB2YWx1ZXMgaW4gdGhhdCBheGlzLlxuICAgICAgZmxvYXQgZG90UHJvZCA9IDAuMDtcbiAgICAgIGZvciAoZmxvYXQgd1IgPSAwLjA7IHdSIDwgJHtmU2l6ZX0uMDsgd1IgKz0gMS4wKSB7XG5cbiAgICAgICAgZmxvYXQgZHlSID0gKGR5UkNvcm5lciArIHdSKSAvICR7b3JpZ1N0cmlkZX0uMDtcbiAgICAgICAgLy8gVE9ETyhuc3Rob3JhdCk6IFNwbGljZSB0aGlzIHdpdGggYW5vdGhlciB2ZXJzaW9uIHdoZXJlIHlvdSBjYWxsXG4gICAgICAgIC8vIGdldE1hdHJpeFZhbHVlT3JaZXJvUGFkKCkuIEhlcmUgYW5kIGJlbG93LlxuICAgICAgICBpZiAoZHlSIDwgMC4wIHx8IGR5UiA+PSAke2R5Um93c30uMCB8fCBmcmFjdChkeVIpID4gMC4wKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBmbG9hdCBkeVRleFIgPSBkeVI7XG5cbiAgICAgICAgZm9yIChmbG9hdCB3QyA9IDAuMDsgd0MgPCAke2ZTaXplfS4wOyB3QyArPSAxLjApIHtcblxuICAgICAgICAgIGZsb2F0IGR5QyA9IChkeUNDb3JuZXIgKyB3QykgLyAke29yaWdTdHJpZGV9LjA7XG4gICAgICAgICAgaWYgKGR5QyA8IDAuMCB8fCBkeUMgPj0gJHtkeUNvbHN9LjAgfHwgZnJhY3QoZHlDKSA+IDAuMCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmxvYXQgZHlUZXhDID0gZHlDICogJHtkZXB0aH0uMCArIGQ7XG5cbiAgICAgICAgICAvLyBSZWFkIGR5KGR5UiwgZHlDLCBkKS5cbiAgICAgICAgICB2ZWMyIGR5VVYgPSAodmVjMihkeVRleEMsIGR5VGV4UikgKyBoYWxmQ1IpIC8gZHlTaGFwZUNSO1xuICAgICAgICAgIGZsb2F0IGR5VmFsdWUgPSB0ZXh0dXJlMkQoZHksIGR5VVYpLnI7XG5cbiAgICAgICAgICAvLyBSZWFkIG1heFBvcyhkeVIsIGR5QywgZCkuXG4gICAgICAgICAgZmxvYXQgbWF4UG9zVmFsdWUgPVxuICAgICAgICAgICAgICAke2ZTaXplICogZlNpemUgLSAxfS4wIC0gdGV4dHVyZTJEKG1heFBvcywgZHlVVikucjtcblxuICAgICAgICAgIC8vIEdldCB0aGUgY3VycmVudCB2YWx1ZSwgY2hlY2sgaXQgYWdhaW5zdCB0aGUgdmFsdWUgZnJvbSB0aGVcbiAgICAgICAgICAvLyBwb3NpdGlvbiBtYXRyaXguXG4gICAgICAgICAgZmxvYXQgY3VyUG9zVmFsdWUgPSB3UiAqICR7ZlNpemV9LjAgKyB3QztcbiAgICAgICAgICBmbG9hdCBtYXNrID0gZmxvYXQobWF4UG9zVmFsdWUgPT0gY3VyUG9zVmFsdWUgPyAxLjAgOiAwLjApO1xuXG4gICAgICAgICAgZG90UHJvZCArPSBkeVZhbHVlICogbWFzaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZ2xfRnJhZ0NvbG9yID0gdmVjNChkb3RQcm9kLCAwLCAwLCAwKTtcbiAgICB9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1heFBvb2xCYWNrcHJvcChcbiAgICBncGdwdTogR1BHUFVDb250ZXh0LCBwcm9ncmFtOiBXZWJHTFByb2dyYW0sIGR5VGV4OiBXZWJHTFRleHR1cmUsXG4gICAgbWF4UG9zaXRpb25zVGV4OiBXZWJHTFRleHR1cmUsIHJlc3VsdFRleDogV2ViR0xUZXh0dXJlLFxuICAgIHJlc3VsdFRleFNoYXBlUkM6IFtudW1iZXIsIG51bWJlcl0pIHtcbiAgZ3BncHUuc2V0T3V0cHV0TWF0cml4VGV4dHVyZShcbiAgICAgIHJlc3VsdFRleCwgcmVzdWx0VGV4U2hhcGVSQ1swXSwgcmVzdWx0VGV4U2hhcGVSQ1sxXSk7XG4gIGdwZ3B1LnNldFByb2dyYW0ocHJvZ3JhbSk7XG4gIGdwZ3B1LnNldElucHV0TWF0cml4VGV4dHVyZShkeVRleCwgJ2R5JywgMCk7XG4gIGdwZ3B1LnNldElucHV0TWF0cml4VGV4dHVyZShtYXhQb3NpdGlvbnNUZXgsICdtYXhQb3MnLCAxKTtcbiAgZ3BncHUuZXhlY3V0ZVByb2dyYW0oKTtcbn1cbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0IHtHUEdQVUNvbnRleHR9IGZyb20gJy4vZ3BncHVfY29udGV4dCc7XG5pbXBvcnQgKiBhcyBwb29sX2dwdSBmcm9tICcuL3Bvb2xfZ3B1JztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZyYWdtZW50U2hhZGVyTWF4UG9vbFBvc2l0aW9uc1NvdXJjZShcbiAgICB4U2hhcGVSQ0Q6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXSwgZlNpemU6IG51bWJlciwgc3RyaWRlOiBudW1iZXIsXG4gICAgcGFkOiBudW1iZXIpIHtcbiAgcmV0dXJuIGdldEZyYWdtZW50U2hhZGVyTWF4UG9vbENvbW1vblNvdXJjZShcbiAgICAgIHhTaGFwZVJDRCwgZlNpemUsIHN0cmlkZSwgcGFkLCB0cnVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZyYWdtZW50U2hhZGVyTWF4UG9vbFNvdXJjZShcbiAgICB4U2hhcGVSQ0Q6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXSwgZlNpemU6IG51bWJlciwgc3RyaWRlOiBudW1iZXIsXG4gICAgcGFkOiBudW1iZXIpIHtcbiAgcmV0dXJuIGdldEZyYWdtZW50U2hhZGVyTWF4UG9vbENvbW1vblNvdXJjZShcbiAgICAgIHhTaGFwZVJDRCwgZlNpemUsIHN0cmlkZSwgcGFkLCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIGdldEZyYWdtZW50U2hhZGVyTWF4UG9vbENvbW1vblNvdXJjZShcbiAgICB4U2hhcGVSQ0Q6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXSwgZlNpemU6IG51bWJlciwgc3RyaWRlOiBudW1iZXIsXG4gICAgcGFkOiBudW1iZXIsIGNvbXB1dGVNYXhQb3NpdGlvbnM6IGJvb2xlYW4pIHtcbiAgcmV0dXJuIHBvb2xfZ3B1LmdldEZyYWdtZW50U2hhZGVyUG9vbENvbW1vblNvdXJjZShcbiAgICAgIHhTaGFwZVJDRCwgZlNpemUsIHN0cmlkZSwgcGFkLCAnbWF4JywgY29tcHV0ZU1heFBvc2l0aW9ucyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXhQb29sQ29tbW9uKFxuICAgIGdwZ3B1OiBHUEdQVUNvbnRleHQsIHByb2dyYW06IFdlYkdMUHJvZ3JhbSwgeDogV2ViR0xUZXh0dXJlLFxuICAgIHJlc3VsdDogV2ViR0xUZXh0dXJlLCByZXN1bHRTaGFwZVJvd0NvbDogW251bWJlciwgbnVtYmVyXSkge1xuICBwb29sX2dwdS5wb29sQ29tbW9uKGdwZ3B1LCBwcm9ncmFtLCB4LCByZXN1bHQsIHJlc3VsdFNoYXBlUm93Q29sKTtcbn0iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCB7R1BHUFVDb250ZXh0fSBmcm9tICcuL2dwZ3B1X2NvbnRleHQnO1xuaW1wb3J0ICogYXMgcG9vbF9ncHUgZnJvbSAnLi9wb29sX2dwdSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGcmFnbWVudFNoYWRlck1pblBvb2xTb3VyY2UoXG4gICAgeFNoYXBlUkNEOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0sIGZTaXplOiBudW1iZXIsIHN0cmlkZTogbnVtYmVyLFxuICAgIHBhZDogbnVtYmVyKSB7XG4gIHJldHVybiBwb29sX2dwdS5nZXRGcmFnbWVudFNoYWRlclBvb2xDb21tb25Tb3VyY2UoXG4gICAgICB4U2hhcGVSQ0QsIGZTaXplLCBzdHJpZGUsIHBhZCwgJ21pbicsIGZhbHNlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1pblBvb2woXG4gICAgZ3BncHU6IEdQR1BVQ29udGV4dCwgcHJvZ3JhbTogV2ViR0xQcm9ncmFtLCB4OiBXZWJHTFRleHR1cmUsXG4gICAgcmVzdWx0OiBXZWJHTFRleHR1cmUsIHJlc3VsdFNoYXBlUm93Q29sOiBbbnVtYmVyLCBudW1iZXJdKSB7XG4gIHBvb2xfZ3B1LnBvb2xDb21tb24oZ3BncHUsIHByb2dyYW0sIHgsIHJlc3VsdCwgcmVzdWx0U2hhcGVSb3dDb2wpO1xufSIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0IHtHUEdQVUNvbnRleHR9IGZyb20gJy4vZ3BncHVfY29udGV4dCc7XG5pbXBvcnQge0lTX05BTl9TSEFERVJfRlVOQ30gZnJvbSAnLi93ZWJnbF91dGlsJztcblxuZnVuY3Rpb24gZ2V0RnJhZ21lbnRTaGFkZXJTb3VyY2UoXG4gICAgcm93czogbnVtYmVyLCBjb2x1bW5zOiBudW1iZXIsIGNvbXBPcDogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGBcbiAgICBwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG4gICAgdW5pZm9ybSBzYW1wbGVyMkQgbWF0cml4QTtcbiAgICB2YXJ5aW5nIHZlYzIgb3V0cHV0Q29sdW1uUm93O1xuXG4gICAgY29uc3QgdmVjMiBhRGltQ1IgPSB2ZWMyKCR7Y29sdW1uc30uMCwgJHtyb3dzfS4wKTtcbiAgICBjb25zdCB2ZWMyIGhhbGZDUiA9IHZlYzIoMC41LCAwLjUpO1xuXG4gICAgJHtJU19OQU5fU0hBREVSX0ZVTkN9XG5cbiAgICB2b2lkIG1haW4oKSB7XG4gICAgICBmbG9hdCB2YWx1ZSA9IHRleHR1cmUyRChtYXRyaXhBLCBoYWxmQ1IgLyBhRGltQ1IpLnI7XG4gICAgICBmb3IgKGZsb2F0IHIgPSAwLjA7IHIgPCBhRGltQ1IueTsgciArPSAxLjApIHtcbiAgICAgICAgZm9yIChmbG9hdCBjID0gMC4wOyBjIDwgYURpbUNSLng7IGMgKz0gMS4wKSB7XG4gICAgICAgICAgdmVjMiBjciA9IHZlYzIoYywgcik7XG4gICAgICAgICAgdmVjMiB1diA9IChjciArIGhhbGZDUikgLyBhRGltQ1I7XG4gICAgICAgICAgZmxvYXQgY2FuZGlkYXRlID0gdGV4dHVyZTJEKG1hdHJpeEEsIHV2KS5yO1xuICAgICAgICAgIGlmIChpc05hTihjYW5kaWRhdGUpKSB7XG4gICAgICAgICAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KGNhbmRpZGF0ZSwgMCwgMCwgMCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhbHVlID0gJHtjb21wT3B9KHZhbHVlLCBjYW5kaWRhdGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KHZhbHVlLCAwLCAwLCAwKTtcbiAgICB9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1pbkZyYWdtZW50U2hhZGVyU291cmNlKFxuICAgIHJvd3M6IG51bWJlciwgY29sdW1uczogbnVtYmVyKTogc3RyaW5nIHtcbiAgcmV0dXJuIGdldEZyYWdtZW50U2hhZGVyU291cmNlKHJvd3MsIGNvbHVtbnMsICdtaW4nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1heEZyYWdtZW50U2hhZGVyU291cmNlKFxuICAgIHJvd3M6IG51bWJlciwgY29sdW1uczogbnVtYmVyKTogc3RyaW5nIHtcbiAgcmV0dXJuIGdldEZyYWdtZW50U2hhZGVyU291cmNlKHJvd3MsIGNvbHVtbnMsICdtYXgnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1pbk1heChcbiAgICBncGdwdTogR1BHUFVDb250ZXh0LCBtaW5NYXhQcm9ncmFtOiBXZWJHTFByb2dyYW0sIGE6IFdlYkdMVGV4dHVyZSxcbiAgICByb3dzOiBudW1iZXIsIGNvbHVtbnM6IG51bWJlciwgcmVzdWx0OiBXZWJHTFRleHR1cmUpIHtcbiAgZ3BncHUuc2V0T3V0cHV0TWF0cml4VGV4dHVyZShyZXN1bHQsIDEsIDEpO1xuICBncGdwdS5zZXRQcm9ncmFtKG1pbk1heFByb2dyYW0pO1xuICBncGdwdS5zZXRJbnB1dE1hdHJpeFRleHR1cmUoYSwgJ21hdHJpeEEnLCAwKTtcbiAgZ3BncHUuZXhlY3V0ZVByb2dyYW0oKTtcbn1cbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0IHtNYXRyaXhPcmllbnRhdGlvbn0gZnJvbSAnLi4vbWF0aCc7XG5pbXBvcnQge0FycmF5MkR9IGZyb20gJy4uL25kYXJyYXknO1xuXG5pbXBvcnQge0dQR1BVQ29udGV4dH0gZnJvbSAnLi9ncGdwdV9jb250ZXh0JztcbmltcG9ydCAqIGFzIHNoYWRlcl9jb21waWxlciBmcm9tICcuL3NoYWRlcl9jb21waWxlcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGcmFnbWVudFNoYWRlcihcbiAgICBhOiBBcnJheTJELCBiOiBBcnJheTJELCBvdXQ6IEFycmF5MkQsIGFPcmllbnRhdGlvbjogTWF0cml4T3JpZW50YXRpb24sXG4gICAgYk9yaWVudGF0aW9uOiBNYXRyaXhPcmllbnRhdGlvbik6IHN0cmluZyB7XG4gIGNvbnN0IHNoYXJlZERpbSA9XG4gICAgICAoYU9yaWVudGF0aW9uID09PSBNYXRyaXhPcmllbnRhdGlvbi5SRUdVTEFSID8gYS5zaGFwZVsxXSA6IGEuc2hhcGVbMF0pO1xuICBjb25zdCBhU25pcHBldCA9XG4gICAgICAoYU9yaWVudGF0aW9uID09PSBNYXRyaXhPcmllbnRhdGlvbi5SRUdVTEFSKSA/ICdhUm93LCBpJyA6ICdpLCBhUm93JztcbiAgY29uc3QgYlNuaXBwZXQgPVxuICAgICAgKGJPcmllbnRhdGlvbiA9PT0gTWF0cml4T3JpZW50YXRpb24uUkVHVUxBUikgPyAnaSwgYkNvbCcgOiAnYkNvbCwgaSc7XG5cbiAgY29uc3QgaW5wdXRzID0gW3tuYW1lOiAnbWF0cml4QScsIGFycmF5OiBhfSwge25hbWU6ICdtYXRyaXhCJywgYXJyYXk6IGJ9XTtcbiAgY29uc3QgdXNlckNvZGUgPSBgXG4gICAgY29uc3QgZmxvYXQgc2hhcmVkRGltID0gJHtzaGFyZWREaW19LjA7XG5cbiAgICBmbG9hdCBkb3RBUm93QkNvbChmbG9hdCBhUm93LCBmbG9hdCBiQ29sKSB7XG4gICAgICBmbG9hdCByZXN1bHQgPSAwLjA7XG4gICAgICBmb3IgKGZsb2F0IGkgPSAwLjA7IGkgPCBzaGFyZWREaW07IGkgKz0gMS4wKSB7XG4gICAgICAgIGZsb2F0IGEgPSBnZXRNYXRyaXhBKCR7YVNuaXBwZXR9KTtcbiAgICAgICAgZmxvYXQgYiA9IGdldE1hdHJpeEIoJHtiU25pcHBldH0pO1xuICAgICAgICByZXN1bHQgKz0gKGEgKiBiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdm9pZCBtYWluKCkge1xuICAgICAgdmVjMiByZXNSQyA9IGdldE91dHB1dENvb3JkcygpO1xuICAgICAgc2V0T3V0cHV0KGRvdEFSb3dCQ29sKHJlc1JDLngsIHJlc1JDLnkpKTtcbiAgICB9XG4gIGA7XG4gIHJldHVybiBzaGFkZXJfY29tcGlsZXIubWFrZVNoYWRlcihpbnB1dHMsIG91dCwgdXNlckNvZGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlNYXRyaXgoXG4gICAgZ3BncHU6IEdQR1BVQ29udGV4dCwgbXVsdGlwbHlQcm9ncmFtOiBXZWJHTFByb2dyYW0sIGE6IFdlYkdMVGV4dHVyZSxcbiAgICBiOiBXZWJHTFRleHR1cmUsIHJlc3VsdDogV2ViR0xUZXh0dXJlLCBvdXRUZXhTaGFwZTogW251bWJlciwgbnVtYmVyXSkge1xuICBncGdwdS5zZXRPdXRwdXRNYXRyaXhUZXh0dXJlKHJlc3VsdCwgb3V0VGV4U2hhcGVbMF0sIG91dFRleFNoYXBlWzFdKTtcbiAgZ3BncHUuc2V0UHJvZ3JhbShtdWx0aXBseVByb2dyYW0pO1xuICBncGdwdS5zZXRJbnB1dE1hdHJpeFRleHR1cmUoYSwgJ21hdHJpeEEnLCAwKTtcbiAgZ3BncHUuc2V0SW5wdXRNYXRyaXhUZXh0dXJlKGIsICdtYXRyaXhCJywgMSk7XG4gIGdwZ3B1LmV4ZWN1dGVQcm9ncmFtKCk7XG59XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCB7R1BHUFVDb250ZXh0fSBmcm9tICcuL2dwZ3B1X2NvbnRleHQnO1xuaW1wb3J0ICogYXMgdW5hcnlvcF9ncHUgZnJvbSAnLi91bmFyeW9wX2dwdSc7XG5cbmZ1bmN0aW9uIGdldE5lZ1VuYXJ5T3AoKTogc3RyaW5nIHtcbiAgcmV0dXJuICdnbF9GcmFnQ29sb3IgPSB2ZWM0KC12YWx1ZSwgMCwgMCwgMCk7Jztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZyYWdtZW50U2hhZGVyU291cmNlKCk6IHN0cmluZyB7XG4gIHJldHVybiB1bmFyeW9wX2dwdS5nZXRGcmFnbWVudFNoYWRlclNvdXJjZShnZXROZWdVbmFyeU9wKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmVnKFxuICAgIGdwZ3B1OiBHUEdQVUNvbnRleHQsIHByb2dyYW06IFdlYkdMUHJvZ3JhbSwgYTogV2ViR0xUZXh0dXJlLCByb3dzOiBudW1iZXIsXG4gICAgY29sdW1uczogbnVtYmVyLCByZXN1bHQ6IFdlYkdMVGV4dHVyZSkge1xuICB1bmFyeW9wX2dwdS51bmFyeU9wKGdwZ3B1LCBwcm9ncmFtLCBhLCByb3dzLCBjb2x1bW5zLCByZXN1bHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBsb2FkTmVnRG93bmxvYWQoXG4gICAgYTogRmxvYXQzMkFycmF5LCByb3dzOiBudW1iZXIsIGNvbHVtbnM6IG51bWJlcik6IEZsb2F0MzJBcnJheSB7XG4gIHJldHVybiB1bmFyeW9wX2dwdS51cGxvYWRVbmFyeU9wRG93bmxvYWQoYSwgcm93cywgY29sdW1ucywgZ2V0TmVnVW5hcnlPcCgpKTtcbn1cbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0ICogYXMgY29udl91dGlsIGZyb20gJy4uL2NvbnZfdXRpbCc7XG5pbXBvcnQge0dQR1BVQ29udGV4dH0gZnJvbSAnLi9ncGdwdV9jb250ZXh0JztcbmltcG9ydCB7SVNfTkFOX1NIQURFUl9GVU5DfSBmcm9tICcuL3dlYmdsX3V0aWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RnJhZ21lbnRTaGFkZXJQb29sQ29tbW9uU291cmNlKFxuICAgIHhTaGFwZVJDRDogW251bWJlciwgbnVtYmVyLCBudW1iZXJdLCBmU2l6ZTogbnVtYmVyLCBzdHJpZGU6IG51bWJlcixcbiAgICBwYWQ6IG51bWJlciwgcG9vbFR5cGU6ICdtYXgnfCdtaW4nfCdhdmcnLCBjb21wdXRlUG9zaXRpb25zOiBib29sZWFuKSB7XG4gIGlmIChwb29sVHlwZSA9PT0gJ2F2ZycgJiYgY29tcHV0ZVBvc2l0aW9ucykge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGNvbXB1dGUgcG9zaXRpb25zIGZvciBhdmVyYWdlIHBvb2wuJyk7XG4gIH1cblxuICBjb25zdCBkZXB0aCA9IHhTaGFwZVJDRFsyXTtcblxuICBjb25zdCB4VGV4U2hhcGVSQyA9IGNvbnZfdXRpbC5jb21wdXRlVGV4U2hhcGVGcm9tM0QoeFNoYXBlUkNEKTtcblxuICBsZXQgcmV0dXJuVmFsdWUgPSAnbWluTWF4VmFsdWUnO1xuICBpZiAoY29tcHV0ZVBvc2l0aW9ucykge1xuICAgIHJldHVyblZhbHVlID0gJ21pbk1heFBvc2l0aW9uJztcbiAgfSBlbHNlIGlmIChwb29sVHlwZSA9PT0gJ2F2ZycpIHtcbiAgICByZXR1cm5WYWx1ZSA9ICdhdmdWYWx1ZSc7XG4gIH1cblxuICByZXR1cm4gYFxuICAgIHByZWNpc2lvbiBoaWdocCBmbG9hdDtcbiAgICB1bmlmb3JtIHNhbXBsZXIyRCB4O1xuICAgIHZhcnlpbmcgdmVjMiByZXN1bHRVVjtcblxuICAgIGNvbnN0IHZlYzIgaGFsZkNSID0gdmVjMigwLjUsIDAuNSk7XG4gICAgY29uc3QgdmVjMiB4U2hhcGVDUiA9IHZlYzIoJHt4VGV4U2hhcGVSQ1sxXX0sICR7eFRleFNoYXBlUkNbMF19KTtcblxuICAgICR7SVNfTkFOX1NIQURFUl9GVU5DfVxuXG4gICAgdm9pZCBtYWluKCkge1xuICAgICAgdmVjMiB5VGV4Q1IgPSBmbG9vcihnbF9GcmFnQ29vcmQueHkpO1xuXG4gICAgICAvLyBNYXAgZnJvbSAyRCAoeVRleFIsIHlUZXhDKSB0byAzRCAoeVIsIHlDLCBkMikuXG4gICAgICBmbG9hdCB5UiA9IHlUZXhDUi55O1xuICAgICAgZmxvYXQgeUMgPSBmbG9vcih5VGV4Q1IueCAvICR7ZGVwdGh9LjApO1xuICAgICAgZmxvYXQgZCA9IG1vZCh5VGV4Q1IueCwgJHtkZXB0aH0uMCk7XG5cbiAgICAgIHZlYzIgeFJDQ29ybmVyID0gdmVjMih5UiwgeUMpICogdmVjMigke3N0cmlkZX0sICR7c3RyaWRlfSkgLVxuICAgICAgICAgIHZlYzIoJHtwYWR9LjAsICR7cGFkfS4wKTtcbiAgICAgIGZsb2F0IHhSQ29ybmVyID0geFJDQ29ybmVyLng7XG4gICAgICBmbG9hdCB4Q0Nvcm5lciA9IHhSQ0Nvcm5lci55O1xuXG4gICAgICAvLyBtYXgvbWluIHgoPywgPywgZCkgdG8gZ2V0IHkoeVIsIHlDLCBkKS5cbiAgICAgIC8vID8gPSB0byBiZSBkZXRlcm1pbmVkXG4gICAgICBmbG9hdCBtaW5NYXhWYWx1ZSA9IDAuMDtcbiAgICAgIGZsb2F0IG1pbk1heFZhbHVlRm91bmQgPSAwLjA7XG4gICAgICBmbG9hdCBtaW5NYXhQb3NpdGlvbiA9IDAuMDtcbiAgICAgIGZsb2F0IGF2Z1ZhbHVlID0gMC4wO1xuXG4gICAgICBmb3IgKGZsb2F0IHdSID0gMC4wOyB3UiA8ICR7ZlNpemV9LjA7IHdSICs9IDEuMCkge1xuICAgICAgICBmbG9hdCB4UiA9IHhSQ29ybmVyICsgd1I7XG4gICAgICAgIGZsb2F0IHhUZXhSID0geFI7XG5cbiAgICAgICAgZm9yIChmbG9hdCB3QyA9IDAuMDsgd0MgPCAke2ZTaXplfS4wOyB3QyArPSAxLjApIHtcbiAgICAgICAgICBmbG9hdCB4QyA9IHhDQ29ybmVyICsgd0M7XG4gICAgICAgICAgZmxvYXQgeFRleEMgPSB4QyAqICR7ZGVwdGh9LjAgKyBkO1xuXG4gICAgICAgICAgdmVjMiB0ZXhDUiA9IHZlYzIoeFRleEMsIHhUZXhSKTtcblxuICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSByZXF1ZXN0ZWQgVVYgaXMgaW52YWxpZC5cbiAgICAgICAgICB2ZWMyIHV2ID0gKHRleENSICsgaGFsZkNSKSAvIHhTaGFwZUNSO1xuICAgICAgICAgIGJvb2wgbGVzc1RoYW5aZXJvID0gYW55KGxlc3NUaGFuKHV2LCB2ZWMyKDAsIDApKSk7XG4gICAgICAgICAgYm9vbCBncmVhdGVyVGhhbk9uZSA9IGFueShncmVhdGVyVGhhbih1diwgdmVjMigxLCAxKSkpO1xuICAgICAgICAgIGJvb2wgb3V0c2lkZSA9IGxlc3NUaGFuWmVybyB8fCBncmVhdGVyVGhhbk9uZTtcbiAgICAgICAgICBpZiAob3V0c2lkZSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmxvYXQgdmFsdWUgPSB0ZXh0dXJlMkQoeCwgdXYpLnI7XG4gICAgICAgICAgaWYgKGlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgICAgZ2xfRnJhZ0NvbG9yID0gdmVjNCh2YWx1ZSwgMCwgMCwgMCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgke3Bvb2xUeXBlID09PSAnYXZnJ30pIHtcbiAgICAgICAgICAgIGF2Z1ZhbHVlICs9IHZhbHVlIC8gJHtmU2l6ZSAqIGZTaXplfS4wO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJZiBhIG1pbiAvIG1heCB2YWx1ZSBoYXMgYWxyZWFkeSBiZWVuIGZvdW5kLCB1c2UgaXQuIElmIG5vdCwgdXNlXG4gICAgICAgICAgICAvLyB0aGUgY3VycmVudCB2YWx1ZS5cbiAgICAgICAgICAgIGZsb2F0IGN1cnJlbnRNaW5NYXhWYWx1ZSA9IG1peChcbiAgICAgICAgICAgICAgICB2YWx1ZSwgbWluTWF4VmFsdWUsIG1pbk1heFZhbHVlRm91bmQpO1xuICAgICAgICAgICAgaWYgKHZhbHVlICR7cG9vbFR5cGUgPT09ICdtaW4nID8gJzw9JyA6ICc+PSd9IGN1cnJlbnRNaW5NYXhWYWx1ZSkge1xuICAgICAgICAgICAgICBtaW5NYXhWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICBtaW5NYXhWYWx1ZUZvdW5kID0gMS4wO1xuICAgICAgICAgICAgICBpZiAoJHtjb21wdXRlUG9zaXRpb25zfSkge1xuICAgICAgICAgICAgICAgIG1pbk1heFBvc2l0aW9uID0gd1IgKiAke2ZTaXplfS4wICsgd0M7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoJHtyZXR1cm5WYWx1ZX0sIDAsIDAsIDApO1xuICAgIH1gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9vbENvbW1vbihcbiAgICBncGdwdTogR1BHUFVDb250ZXh0LCBwcm9ncmFtOiBXZWJHTFByb2dyYW0sIHg6IFdlYkdMVGV4dHVyZSxcbiAgICByZXN1bHQ6IFdlYkdMVGV4dHVyZSwgcmVzdWx0U2hhcGVSb3dDb2w6IFtudW1iZXIsIG51bWJlcl0pIHtcbiAgZ3BncHUuc2V0T3V0cHV0TWF0cml4VGV4dHVyZShcbiAgICAgIHJlc3VsdCwgcmVzdWx0U2hhcGVSb3dDb2xbMF0sIHJlc3VsdFNoYXBlUm93Q29sWzFdKTtcbiAgZ3BncHUuc2V0UHJvZ3JhbShwcm9ncmFtKTtcbiAgZ3BncHUuc2V0SW5wdXRNYXRyaXhUZXh0dXJlKHgsICd4JywgMCk7XG4gIGdwZ3B1LmV4ZWN1dGVQcm9ncmFtKCk7XG59XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCB7R1BHUFVDb250ZXh0fSBmcm9tICcuL2dwZ3B1X2NvbnRleHQnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RnJhZ21lbnRTaGFkZXJTb3VyY2Uocm93czogbnVtYmVyLCBjb2x1bW5zOiBudW1iZXIpOiBzdHJpbmcge1xuICByZXR1cm4gYFxuICAgIHByZWNpc2lvbiBoaWdocCBmbG9hdDtcbiAgICB1bmlmb3JtIHNhbXBsZXIyRCBtYXRyaXhBO1xuICAgIHZhcnlpbmcgdmVjMiByZXN1bHRVVjtcblxuICAgIGNvbnN0IHZlYzIgYURpbUNSID0gdmVjMigke2NvbHVtbnN9LjAsICR7cm93c30uMCk7XG4gICAgY29uc3QgdmVjMiBoYWxmQ1IgPSB2ZWMyKDAuNSwgMC41KTtcblxuICAgIHZvaWQgbWFpbigpIHtcbiAgICAgIGZsb2F0IHN1bSA9IDAuMDtcbiAgICAgIGZvciAoZmxvYXQgciA9IDAuMDsgciA8IGFEaW1DUi55OyByICs9IDEuMCkge1xuICAgICAgICBmb3IgKGZsb2F0IGMgPSAwLjA7IGMgPCBhRGltQ1IueDsgYyArPSAxLjApIHtcbiAgICAgICAgICB2ZWMyIHV2ID0gKHZlYzIoYywgcikgKyBoYWxmQ1IpIC8gYURpbUNSO1xuICAgICAgICAgIHN1bSArPSB0ZXh0dXJlMkQobWF0cml4QSwgdXYpLnI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoc3VtLCAwLCAwLCAwKTtcbiAgICB9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZHVjZVN1bShcbiAgICBncGdwdTogR1BHUFVDb250ZXh0LCByZWR1Y2VTdW1Qcm9ncmFtOiBXZWJHTFByb2dyYW0sIGE6IFdlYkdMVGV4dHVyZSxcbiAgICBhTnVtUm93czogbnVtYmVyLCBhTnVtQ29sczogbnVtYmVyLCByZXN1bHQ6IFdlYkdMVGV4dHVyZSkge1xuICBncGdwdS5zZXRPdXRwdXRNYXRyaXhUZXh0dXJlKHJlc3VsdCwgMSwgMSk7XG4gIGdwZ3B1LnNldFByb2dyYW0ocmVkdWNlU3VtUHJvZ3JhbSk7XG4gIGdwZ3B1LnNldElucHV0TWF0cml4VGV4dHVyZShhLCAnbWF0cml4QScsIDApO1xuICBncGdwdS5leGVjdXRlUHJvZ3JhbSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBsb2FkUmVkdWNlU3VtRG93bmxvYWQoXG4gICAgYTogRmxvYXQzMkFycmF5LCByb3dzOiBudW1iZXIsIGNvbHVtbnM6IG51bWJlcik6IG51bWJlciB7XG4gIGNvbnN0IGdwZ3B1ID0gbmV3IEdQR1BVQ29udGV4dCgpO1xuICBjb25zdCBwcm9ncmFtOiBXZWJHTFByb2dyYW0gPVxuICAgICAgZ3BncHUuY3JlYXRlUHJvZ3JhbShnZXRGcmFnbWVudFNoYWRlclNvdXJjZShyb3dzLCBjb2x1bW5zKSk7XG4gIGNvbnN0IGFUZXh0dXJlOiBXZWJHTFRleHR1cmUgPSBncGdwdS5jcmVhdGVNYXRyaXhUZXh0dXJlKHJvd3MsIGNvbHVtbnMpO1xuICBjb25zdCByZXN1bHRUZXh0dXJlOiBXZWJHTFRleHR1cmUgPSBncGdwdS5jcmVhdGVNYXRyaXhUZXh0dXJlKDEsIDEpO1xuICBncGdwdS51cGxvYWRNYXRyaXhUb1RleHR1cmUoYVRleHR1cmUsIHJvd3MsIGNvbHVtbnMsIGEpO1xuICByZWR1Y2VTdW0oZ3BncHUsIHByb2dyYW0sIGFUZXh0dXJlLCByb3dzLCBjb2x1bW5zLCByZXN1bHRUZXh0dXJlKTtcbiAgY29uc3QgcmVzdWx0ID0gZ3BncHUuZG93bmxvYWRNYXRyaXhGcm9tVGV4dHVyZShyZXN1bHRUZXh0dXJlLCAxLCAxKVswXTtcbiAgZ3BncHUuZGVsZXRlTWF0cml4VGV4dHVyZShhVGV4dHVyZSk7XG4gIGdwZ3B1LmRlbGV0ZU1hdHJpeFRleHR1cmUocmVzdWx0VGV4dHVyZSk7XG4gIGdwZ3B1LmRlbGV0ZVByb2dyYW0ocHJvZ3JhbSk7XG4gIGdwZ3B1LmRpc3Bvc2UoKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0IHtHUEdQVUNvbnRleHR9IGZyb20gJy4vZ3BncHVfY29udGV4dCc7XG5pbXBvcnQgKiBhcyB1bmFyeW9wX2dwdSBmcm9tICcuL3VuYXJ5b3BfZ3B1JztcblxuZnVuY3Rpb24gZ2V0UmVsdVVuYXJ5T3AoKTogc3RyaW5nIHtcbiAgcmV0dXJuIGBcbiAgICBmbG9hdCByZXN1bHQgPSAodmFsdWUgPCAwLjAgPyAwLjAgOiB2YWx1ZSk7XG4gICAgZ2xfRnJhZ0NvbG9yID0gdmVjNChyZXN1bHQsIDAsIDAsIDApO1xuICBgO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RnJhZ21lbnRTaGFkZXJTb3VyY2UoKTogc3RyaW5nIHtcbiAgcmV0dXJuIHVuYXJ5b3BfZ3B1LmdldEZyYWdtZW50U2hhZGVyU291cmNlKGdldFJlbHVVbmFyeU9wKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVsdShcbiAgICBncGdwdTogR1BHUFVDb250ZXh0LCByZWx1UHJvZ3JhbTogV2ViR0xQcm9ncmFtLCBhOiBXZWJHTFRleHR1cmUsXG4gICAgcm93czogbnVtYmVyLCBjb2x1bW5zOiBudW1iZXIsIHJlc3VsdDogV2ViR0xUZXh0dXJlKSB7XG4gIHVuYXJ5b3BfZ3B1LnVuYXJ5T3AoZ3BncHUsIHJlbHVQcm9ncmFtLCBhLCByb3dzLCBjb2x1bW5zLCByZXN1bHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBsb2FkUmVsdURvd25sb2FkKFxuICAgIGE6IEZsb2F0MzJBcnJheSwgcm93czogbnVtYmVyLCBjb2x1bW5zOiBudW1iZXIpOiBGbG9hdDMyQXJyYXkge1xuICByZXR1cm4gdW5hcnlvcF9ncHUudXBsb2FkVW5hcnlPcERvd25sb2FkKGEsIHJvd3MsIGNvbHVtbnMsIGdldFJlbHVVbmFyeU9wKCkpO1xufVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQge0dQR1BVQ29udGV4dH0gZnJvbSAnLi9ncGdwdV9jb250ZXh0JztcblxuaW1wb3J0ICogYXMgd2ViZ2xfdXRpbCBmcm9tICcuL3dlYmdsX3V0aWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVuZGVyUkdCU2hhZGVyKFxuICAgIGdwZ3B1OiBHUEdQVUNvbnRleHQsIGRlc3RpbmF0aW9uV2lkdGg6IG51bWJlcik6IFdlYkdMUHJvZ3JhbSB7XG4gIGNvbnN0IGZyYWdtZW50U2hhZGVyU291cmNlID0gYFxuICAgIHByZWNpc2lvbiBoaWdocCBmbG9hdDtcbiAgICB1bmlmb3JtIHNhbXBsZXIyRCBzb3VyY2U7XG4gICAgdmFyeWluZyB2ZWMyIHJlc3VsdFVWO1xuXG4gICAgY29uc3QgZmxvYXQgZGVzdGluYXRpb25XaWR0aCA9ICR7ZGVzdGluYXRpb25XaWR0aH0uMDtcbiAgICBjb25zdCBmbG9hdCBhID0gMS4wO1xuXG4gICAgdm9pZCBtYWluKCkge1xuICAgICAgZmxvYXQgeHIgPSBmbG9vcihyZXN1bHRVVi5zICogZGVzdGluYXRpb25XaWR0aCkgKiAzLjA7XG4gICAgICB2ZWMzIHggPSB4ciArIHZlYzMoMCwgMSwgMik7XG5cbiAgICAgIGZsb2F0IHNvdXJjZVdpZHRoID0gZGVzdGluYXRpb25XaWR0aCAqIDMuMDtcbiAgICAgIHZlYzMgdSA9ICh4ICsgMC41KSAvIHNvdXJjZVdpZHRoO1xuICAgICAgZmxvYXQgdiA9IDEuMCAtIHJlc3VsdFVWLnQ7XG5cbiAgICAgIGZsb2F0IHIgPSB0ZXh0dXJlMkQoc291cmNlLCB2ZWMyKHVbMF0sIHYpKS5yO1xuICAgICAgZmxvYXQgZyA9IHRleHR1cmUyRChzb3VyY2UsIHZlYzIodVsxXSwgdikpLnI7XG4gICAgICBmbG9hdCBiID0gdGV4dHVyZTJEKHNvdXJjZSwgdmVjMih1WzJdLCB2KSkucjtcblxuICAgICAgZ2xfRnJhZ0NvbG9yID0gdmVjNChyLCBnLCBiLCBhKTtcbiAgICB9YDtcblxuICByZXR1cm4gZ3BncHUuY3JlYXRlUHJvZ3JhbShmcmFnbWVudFNoYWRlclNvdXJjZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJUb0NhbnZhcyhcbiAgICBncGdwdTogR1BHUFVDb250ZXh0LCByZW5kZXJTaGFkZXI6IFdlYkdMUHJvZ3JhbSwgc291cmNlVGV4OiBXZWJHTFRleHR1cmUpIHtcbiAgd2ViZ2xfdXRpbC5iaW5kQ2FudmFzVG9GcmFtZWJ1ZmZlcihncGdwdS5nbCk7XG4gIHJlbmRlclRvRnJhbWVidWZmZXIoZ3BncHUsIHJlbmRlclNoYWRlciwgc291cmNlVGV4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlclRvRnJhbWVidWZmZXIoXG4gICAgZ3BncHU6IEdQR1BVQ29udGV4dCwgcmVuZGVyU2hhZGVyOiBXZWJHTFByb2dyYW0sIHNvdXJjZVRleDogV2ViR0xUZXh0dXJlKSB7XG4gIGdwZ3B1LnNldFByb2dyYW0ocmVuZGVyU2hhZGVyKTtcbiAgZ3BncHUuc2V0SW5wdXRNYXRyaXhUZXh0dXJlKHNvdXJjZVRleCwgJ3NvdXJjZScsIDApO1xuICBncGdwdS5leGVjdXRlUHJvZ3JhbSgpO1xufVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtHUEdQVUNvbnRleHR9IGZyb20gJy4vZ3BncHVfY29udGV4dCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGcmFnbWVudFNoYWRlclNvdXJjZSgpOiBzdHJpbmcge1xuICByZXR1cm4gYFxuICAgIHByZWNpc2lvbiBoaWdocCBmbG9hdDtcbiAgICB1bmlmb3JtIHNhbXBsZXIyRCBtYXRyaXhBO1xuICAgIHVuaWZvcm0gdmVjMiBpbnB1dERpbUNSO1xuICAgIHVuaWZvcm0gdmVjMiByZXN1bHREaW1DUjtcbiAgICB2YXJ5aW5nIHZlYzIgcmVzdWx0VVY7XG4gICAgY29uc3QgdmVjMiBoYWxmQ1IgPSB2ZWMyKDAuNSwgMC41KTtcblxuICAgIHZvaWQgbWFpbigpIHtcbiAgICAgIHZlYzIgcmVzdWx0Q1IgPSBmbG9vcihyZXN1bHRVViAqIHJlc3VsdERpbUNSKTtcbiAgICAgIC8vIGluZGV4SW5GbGF0ID0gcm93ICogc3RyaWRlICsgY29sdW1uLCB3aGVyZSBzdHJpZGUgPT0gbnVtT3V0cHV0Q29sdW1uc1xuICAgICAgZmxvYXQgaW5kZXhJbkZsYXQgPSByZXN1bHRDUi55ICogcmVzdWx0RGltQ1IueCArIHJlc3VsdENSLng7XG5cbiAgICAgIHZlYzIgaW5wdXRDUiA9IHZlYzIoXG4gICAgICAgIG1vZChpbmRleEluRmxhdCwgaW5wdXREaW1DUi54KSwgLy8gY29sID0gaW5kZXhJbkZsYXQgJSBudW1JbnB1dENvbHVtbnNcbiAgICAgICAgZmxvb3IoaW5kZXhJbkZsYXQgLyBpbnB1dERpbUNSLngpIC8vIHJvdyA9IGluZGV4SW5GbGF0IC8gbnVtSW5wdXRDb2x1bW5zXG4gICAgICApICsgaGFsZkNSO1xuXG4gICAgICB2ZWMyIGlucHV0VVYgPSBpbnB1dENSIC8gaW5wdXREaW1DUjtcbiAgICAgIGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRChtYXRyaXhBLCBpbnB1dFVWKTtcbiAgICB9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2hhcGUoXG4gICAgZ3BncHU6IEdQR1BVQ29udGV4dCwgcmVzaGFwZVByb2dyYW06IFdlYkdMUHJvZ3JhbSwgYTogV2ViR0xUZXh0dXJlLFxuICAgIGFOdW1Sb3dzOiBudW1iZXIsIGFOdW1Db2xzOiBudW1iZXIsIHJlc3VsdDogV2ViR0xUZXh0dXJlLFxuICAgIHJlc3VsdE51bVJvd3M6IG51bWJlciwgcmVzdWx0TnVtQ29sczogbnVtYmVyKSB7XG4gIGNvbnN0IGlucHV0U2l6ZSA9IGFOdW1Sb3dzICogYU51bUNvbHM7XG4gIGNvbnN0IG91dHB1dFNpemUgPSByZXN1bHROdW1Db2xzICogcmVzdWx0TnVtUm93cztcbiAgdXRpbC5hc3NlcnQoXG4gICAgICBpbnB1dFNpemUgPT09IG91dHB1dFNpemUsXG4gICAgICBgVGhlIGlucHV0IHNpemUgKCR7aW5wdXRTaXplfSkgYW5kIG91dHB1dCBzaXplICgke291dHB1dFNpemV9KSBgICtcbiAgICAgICAgICBgbXVzdCBtYXRjaGApO1xuXG4gIGdwZ3B1LnNldE91dHB1dE1hdHJpeFRleHR1cmUocmVzdWx0LCByZXN1bHROdW1Sb3dzLCByZXN1bHROdW1Db2xzKTtcbiAgZ3BncHUuc2V0UHJvZ3JhbShyZXNoYXBlUHJvZ3JhbSk7XG4gIGdwZ3B1LnNldElucHV0TWF0cml4VGV4dHVyZShhLCAnbWF0cml4QScsIDApO1xuXG4gIGNvbnN0IGlucHV0RGltQ1JMb2NhdGlvbiA9IGdwZ3B1LmdldFVuaWZvcm1Mb2NhdGlvbignaW5wdXREaW1DUicpO1xuICBncGdwdS5nbC51bmlmb3JtMmYoaW5wdXREaW1DUkxvY2F0aW9uLCBhTnVtQ29scywgYU51bVJvd3MpO1xuXG4gIGNvbnN0IHJlc3VsdERpbUNSTG9jYXRpb24gPSBncGdwdS5nZXRVbmlmb3JtTG9jYXRpb24oJ3Jlc3VsdERpbUNSJyk7XG4gIGdwZ3B1LmdsLnVuaWZvcm0yZihyZXN1bHREaW1DUkxvY2F0aW9uLCByZXN1bHROdW1Db2xzLCByZXN1bHROdW1Sb3dzKTtcblxuICBncGdwdS5leGVjdXRlUHJvZ3JhbSgpO1xufVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQgKiBhcyBjb252X3V0aWwgZnJvbSAnLi4vY29udl91dGlsJztcblxuaW1wb3J0IHtHUEdQVUNvbnRleHR9IGZyb20gJy4vZ3BncHVfY29udGV4dCc7XG5pbXBvcnQgKiBhcyB3ZWJnbF91dGlsIGZyb20gJy4vd2ViZ2xfdXRpbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGcmFnbWVudFNoYWRlclNvdXJjZShcbiAgICBpbnB1dFNoYXBlUkNEOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0sXG4gICAgb3V0cHV0RGltZW5zaW9uc1Jvd0NvbDogW251bWJlciwgbnVtYmVyXSwgYWxpZ25Db3JuZXJzOiBib29sZWFuKTogc3RyaW5nIHtcbiAgY29uc3QgZGVwdGggPSBpbnB1dFNoYXBlUkNEWzJdO1xuXG4gIGNvbnN0IGlucHV0VGV4U2hhcGVSQyA9IGNvbnZfdXRpbC5jb21wdXRlVGV4U2hhcGVGcm9tM0QoaW5wdXRTaGFwZVJDRCk7XG5cbiAgY29uc3QgZWZmZWN0aXZlSW5wdXRTaGFwZVJDRCA9IGFsaWduQ29ybmVycyA/XG4gICAgICBbaW5wdXRTaGFwZVJDRFswXSAtIDEsIGlucHV0U2hhcGVSQ0RbMV0gLSAxLCBkZXB0aF0gOlxuICAgICAgaW5wdXRTaGFwZVJDRDtcblxuICBjb25zdCBlZmZlY3RpdmVPdXRwdXRTaGFwZVJDRCA9IGFsaWduQ29ybmVycyA/XG4gICAgICBbb3V0cHV0RGltZW5zaW9uc1Jvd0NvbFswXSAtIDEsIG91dHB1dERpbWVuc2lvbnNSb3dDb2xbMV0gLSAxLCBkZXB0aF0gOlxuICAgICAgW291dHB1dERpbWVuc2lvbnNSb3dDb2xbMF0sIG91dHB1dERpbWVuc2lvbnNSb3dDb2xbMV0sIGRlcHRoXTtcblxuICByZXR1cm4gYFxuICAgIHByZWNpc2lvbiBoaWdocCBmbG9hdDtcbiAgICB1bmlmb3JtIHNhbXBsZXIyRCBtYXRyaXhBO1xuICAgIHZhcnlpbmcgdmVjMiByZXN1bHRVVjtcbiAgICBjb25zdCB2ZWMyIGhhbGZDUiA9IHZlYzIoMC41LCAwLjUpO1xuXG4gICAgY29uc3QgdmVjMiBpbnB1dFNoYXBlQ1IgPSB2ZWMyKCR7aW5wdXRTaGFwZVJDRFsxXX0sICR7aW5wdXRTaGFwZVJDRFswXX0pO1xuICAgIGNvbnN0IHZlYzIgaW5wdXRTaGFwZVRleENSID0gdmVjMihcbiAgICAgICAgJHtpbnB1dFRleFNoYXBlUkNbMV19LCAke2lucHV0VGV4U2hhcGVSQ1swXX0pO1xuXG4gICAgY29uc3QgdmVjMiBlZmZlY3RpdmVJbnB1dE92ZXJPdXRwdXRSYXRpb0NSID0gdmVjMihcbiAgICAgICAgJHtlZmZlY3RpdmVJbnB1dFNoYXBlUkNEWzFdIC8gZWZmZWN0aXZlT3V0cHV0U2hhcGVSQ0RbMV19LFxuICAgICAgICAke2VmZmVjdGl2ZUlucHV0U2hhcGVSQ0RbMF0gLyBlZmZlY3RpdmVPdXRwdXRTaGFwZVJDRFswXX0pO1xuXG4gICAgZmxvYXQgc2FtcGxlSW5wdXQoZmxvYXQgY29sLCBmbG9hdCByb3csIGZsb2F0IGQpIHtcbiAgICAgIHZlYzIgdXYgPSAodmVjMihjb2wgKiAke2RlcHRofS4wICsgZCwgcm93KSArIGhhbGZDUikgLyBpbnB1dFNoYXBlVGV4Q1I7XG4gICAgICByZXR1cm4gdGV4dHVyZTJEKG1hdHJpeEEsIHV2KS5yO1xuICAgIH1cblxuICAgIHZvaWQgbWFpbigpIHtcbiAgICAgIHZlYzIgeVRleENSID0gZmxvb3IoZ2xfRnJhZ0Nvb3JkLnh5KTtcblxuICAgICAgLy8gTWFwIGZyb20gMkQgKHlUZXhSLCB5VGV4QykgdG8gM0QgKHlSLCB5QywgZCkuXG4gICAgICB2ZWMyIHlDUiA9IHZlYzIoZmxvb3IoeVRleENSLnggLyAke2RlcHRofS4wKSwgeVRleENSLnkpO1xuICAgICAgZmxvYXQgZCA9IG1vZCh5VGV4Q1IueCwgJHtkZXB0aH0uMCk7XG5cbiAgICAgIC8vIEZyYWN0aW9uYWwgc291cmNlIGluZGV4LlxuICAgICAgdmVjMiBzb3VyY2VGcmFjSW5kZXhDUiA9IHlDUiAqIGVmZmVjdGl2ZUlucHV0T3Zlck91dHB1dFJhdGlvQ1I7XG5cbiAgICAgIC8vIENvbXB1dGUgdGhlIGZvdXIgaW50ZWdlciBpbmRpY2VzLlxuICAgICAgdmVjMiBzb3VyY2VGbG9vckNSID0gZmxvb3Ioc291cmNlRnJhY0luZGV4Q1IpO1xuICAgICAgdmVjMiBzb3VyY2VDZWlsQ1IgPSBtaW4oaW5wdXRTaGFwZUNSIC0gMS4wLCBjZWlsKHNvdXJjZUZyYWNJbmRleENSKSk7XG5cbiAgICAgIGZsb2F0IHRvcExlZnQgPSBzYW1wbGVJbnB1dChzb3VyY2VGbG9vckNSWzBdLCBzb3VyY2VGbG9vckNSWzFdLCBkKTtcbiAgICAgIGZsb2F0IGJvdHRvbUxlZnQgPSBzYW1wbGVJbnB1dChzb3VyY2VGbG9vckNSWzBdLCBzb3VyY2VDZWlsQ1JbMV0sIGQpO1xuICAgICAgZmxvYXQgdG9wUmlnaHQgPSBzYW1wbGVJbnB1dChzb3VyY2VDZWlsQ1JbMF0sIHNvdXJjZUZsb29yQ1JbMV0sIGQpO1xuICAgICAgZmxvYXQgYm90dG9tUmlnaHQgPSBzYW1wbGVJbnB1dChzb3VyY2VDZWlsQ1JbMF0sIHNvdXJjZUNlaWxDUlsxXSwgZCk7XG5cbiAgICAgIHZlYzIgZnJhY0NSID0gc291cmNlRnJhY0luZGV4Q1IgLSBzb3VyY2VGbG9vckNSO1xuXG4gICAgICBmbG9hdCB0b3AgPSB0b3BMZWZ0ICsgKHRvcFJpZ2h0IC0gdG9wTGVmdCkgKiBmcmFjQ1JbMF07XG4gICAgICBmbG9hdCBib3R0b20gPSBib3R0b21MZWZ0ICsgKGJvdHRvbVJpZ2h0IC0gYm90dG9tTGVmdCkgKiBmcmFjQ1JbMF07XG4gICAgICBmbG9hdCBuZXdWYWx1ZSA9IHRvcCArIChib3R0b20gLSB0b3ApICogZnJhY0NSWzFdO1xuXG4gICAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KG5ld1ZhbHVlLCAwLjAsIDAuMCwgMC4wKTtcbiAgICB9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2l6ZUJpbGluZWFyKFxuICAgIGdwZ3B1OiBHUEdQVUNvbnRleHQsIHJlc2l6ZUJpbGluZWFyUHJvZ3JhbTogV2ViR0xQcm9ncmFtLCBhOiBXZWJHTFRleHR1cmUsXG4gICAgcmVzdWx0OiBXZWJHTFRleHR1cmUsIHJlc3VsdFNoYXBlUm93Q29sOiBbbnVtYmVyLCBudW1iZXJdKSB7XG4gIGdwZ3B1LnNldE91dHB1dE1hdHJpeFRleHR1cmUoXG4gICAgICByZXN1bHQsIHJlc3VsdFNoYXBlUm93Q29sWzBdLCByZXN1bHRTaGFwZVJvd0NvbFsxXSk7XG4gIGdwZ3B1LnNldFByb2dyYW0ocmVzaXplQmlsaW5lYXJQcm9ncmFtKTtcbiAgZ3BncHUuc2V0SW5wdXRNYXRyaXhUZXh0dXJlKGEsICdtYXRyaXhBJywgMCk7XG4gIGdwZ3B1LmV4ZWN1dGVQcm9ncmFtKCk7XG59IiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtOREFycmF5fSBmcm9tICcuLi9uZGFycmF5JztcblxuZXhwb3J0IHR5cGUgSW5wdXQgPSB7XG4gIG5hbWU6IHN0cmluZzsgYXJyYXk6IE5EQXJyYXk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gbWFrZVNoYWRlcktleShpbnB1dHM6IE5EQXJyYXlbXSwgb3V0cHV0OiBOREFycmF5KTogc3RyaW5nIHtcbiAgY29uc3QgaW5zID0gaW5wdXRzLm1hcCh4ID0+IHguc2hhcGUgKyAnXycgKyB4LmdldFRleHR1cmVTaGFwZVJDKCkpO1xuICByZXR1cm4gaW5zLmpvaW4oJ18nKSArICdfJyArIG91dHB1dC5zaGFwZSArICdfJyArIG91dHB1dC5nZXRUZXh0dXJlU2hhcGVSQygpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFrZVNoYWRlcihcbiAgICBpbnB1dHM6IElucHV0W10sIG91dHB1dDogTkRBcnJheSwgdXNlckNvZGU6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IGlucHV0UHJlZml4U25pcHBldCA9XG4gICAgICBpbnB1dHMubWFwKHggPT4gYHVuaWZvcm0gc2FtcGxlcjJEICR7eC5uYW1lfTtgKS5qb2luKCdcXG4nKTtcbiAgY29uc3QgaW5wdXRTYW1wbGluZ1NuaXBwZXQgPVxuICAgICAgaW5wdXRzLm1hcCh4ID0+IGdldElucHV0U2FtcGxpbmdTbmlwcGV0KHgpKS5qb2luKCdcXG4nKTtcbiAgY29uc3Qgb3V0VGV4U2hhcGUgPSBvdXRwdXQuZ2V0VGV4dHVyZVNoYXBlUkMoKTtcbiAgY29uc3Qgb3V0cHV0U2FtcGxpbmdTbmlwcGV0ID1cbiAgICAgIGdldE91dHB1dFNhbXBsaW5nU25pcHBldChvdXRwdXQuc2hhcGUsIG91dFRleFNoYXBlKTtcbiAgY29uc3Qgc291cmNlID0gW1xuICAgIFNIQURFUl9QUkVGSVgsIGlucHV0UHJlZml4U25pcHBldCwgU0FNUExFXzJEX1NOSVBQRVQsIGlucHV0U2FtcGxpbmdTbmlwcGV0LFxuICAgIG91dHB1dFNhbXBsaW5nU25pcHBldCwgdXNlckNvZGVcbiAgXS5qb2luKCdcXG4nKTtcbiAgcmV0dXJuIHNvdXJjZTtcbn1cblxuZnVuY3Rpb24gZ2V0SW5wdXRTYW1wbGluZ1NuaXBwZXQoaW5wdXQ6IElucHV0KSB7XG4gIGNvbnN0IGFyciA9IGlucHV0LmFycmF5O1xuICBjb25zdCBzaGFwZSA9IGFyci5zaGFwZTtcbiAgY29uc3QgdGV4U2hhcGUgPSBhcnIuZ2V0VGV4dHVyZVNoYXBlUkMoc2hhcGUgYXMgW251bWJlciwgbnVtYmVyXSk7XG4gIHN3aXRjaCAoc2hhcGUubGVuZ3RoKSB7XG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIGdldFNhbXBsZXIyRChpbnB1dC5uYW1lLCBzaGFwZSBhcyBbbnVtYmVyLCBudW1iZXJdLCB0ZXhTaGFwZSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHthcnIucmFua30tRCBpbnB1dCBzYW1wbGluZyBpcyBub3QgeWV0IHN1cHBvcnRlZGApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldE91dHB1dFNhbXBsaW5nU25pcHBldChcbiAgICBvdXRTaGFwZTogbnVtYmVyW10sIG91dFRleFNoYXBlOiBbbnVtYmVyLCBudW1iZXJdKTogc3RyaW5nIHtcbiAgc3dpdGNoIChvdXRTaGFwZS5sZW5ndGgpIHtcbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gZ2V0T3V0cHV0MkRDb29yZHMob3V0U2hhcGUgYXMgW251bWJlciwgbnVtYmVyXSwgb3V0VGV4U2hhcGUpO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYCR7b3V0U2hhcGUubGVuZ3RofS1EIG91dHB1dCBzYW1wbGluZyBpcyBub3QgeWV0IHN1cHBvcnRlZGApO1xuICB9XG59XG5cbmNvbnN0IFNIQURFUl9QUkVGSVggPSBgXG4gIHByZWNpc2lvbiBoaWdocCBmbG9hdDtcbiAgdmFyeWluZyB2ZWMyIHJlc3VsdFVWO1xuICBjb25zdCB2ZWMyIGhhbGZDUiA9IHZlYzIoMC41LCAwLjUpO1xuXG4gIHZvaWQgc2V0T3V0cHV0KGZsb2F0IHZhbCkge1xuICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQodmFsLCAwLCAwLCAwKTtcbiAgfVxuYDtcblxuY29uc3QgU0FNUExFXzJEX1NOSVBQRVQgPSBgXG4gIGZsb2F0IHNhbXBsZTJEKHNhbXBsZXIyRCB0ZXh0dXJlLCBmbG9hdCB0ZXhOdW1SLCBmbG9hdCB0ZXhOdW1DLCBmbG9hdCBudW1DLFxuICAgICAgZmxvYXQgcm93LCBmbG9hdCBjb2wpIHtcbiAgICBmbG9hdCBpbmRleCA9IGRvdCh2ZWMyKHJvdywgY29sKSwgdmVjMihudW1DLCAxLjApKTtcbiAgICBmbG9hdCB0ZXhSID0gZmxvb3IoaW5kZXggLyB0ZXhOdW1DKTtcbiAgICBmbG9hdCB0ZXhDID0gbW9kKGluZGV4LCB0ZXhOdW1DKTtcbiAgICB2ZWMyIHV2ID0gKHZlYzIodGV4QywgdGV4UikgKyBoYWxmQ1IpIC8gdmVjMih0ZXhOdW1DLCB0ZXhOdW1SKTtcbiAgICByZXR1cm4gdGV4dHVyZTJEKHRleHR1cmUsIHV2KS5yO1xuICB9XG5gO1xuXG5mdW5jdGlvbiBnZXRPdXRwdXQyRENvb3JkcyhcbiAgICBzaGFwZTogW251bWJlciwgbnVtYmVyXSwgdGV4U2hhcGU6IFtudW1iZXIsIG51bWJlcl0pIHtcbiAgaWYgKHV0aWwuYXJyYXlzRXF1YWwoc2hhcGUsIHRleFNoYXBlKSkge1xuICAgIHJldHVybiBgXG4gICAgICB2ZWMyIGdldE91dHB1dENvb3JkcygpIHtcbiAgICAgICAgcmV0dXJuIGZsb29yKGdsX0ZyYWdDb29yZC55eCk7XG4gICAgICB9XG4gICAgYDtcbiAgfVxuICByZXR1cm4gYFxuICAgIHZlYzIgZ2V0T3V0cHV0Q29vcmRzKCkge1xuICAgICAgdmVjMiByZXNUZXhSQyA9IGZsb29yKGdsX0ZyYWdDb29yZC55eCk7XG4gICAgICBmbG9hdCBpbmRleCA9IGRvdChyZXNUZXhSQywgdmVjMigke3RleFNoYXBlWzFdfS4wLCAxLjApKTtcbiAgICAgIGZsb2F0IHIgPSBmbG9vcihpbmRleCAvICR7c2hhcGVbMV19LjApO1xuICAgICAgZmxvYXQgYyA9IG1vZChpbmRleCwgJHtzaGFwZVsxXX0uMCk7XG4gICAgICByZXR1cm4gdmVjMihyLCBjKTtcbiAgICB9XG4gIGA7XG59XG5cbmZ1bmN0aW9uIGdldFNhbXBsZXIyRChcbiAgICB0ZXhOYW1lOiBzdHJpbmcsIHNoYXBlOiBbbnVtYmVyLCBudW1iZXJdLCB0ZXhTaGFwZTogW251bWJlciwgbnVtYmVyXSkge1xuICBjb25zdCBmdW5jTmFtZSA9ICdnZXQnICsgdGV4TmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHRleE5hbWUuc2xpY2UoMSk7XG4gIGNvbnN0IHRSID0gdGV4U2hhcGVbMF07XG4gIGNvbnN0IHRDID0gdGV4U2hhcGVbMV07XG4gIGlmICh1dGlsLmFycmF5c0VxdWFsKHNoYXBlLCB0ZXhTaGFwZSkpIHtcbiAgICByZXR1cm4gYFxuICAgICAgZmxvYXQgJHtmdW5jTmFtZX0oZmxvYXQgcm93LCBmbG9hdCBjb2wpIHtcbiAgICAgICAgdmVjMiB1diA9ICh2ZWMyKGNvbCwgcm93KSArIGhhbGZDUikgLyB2ZWMyKCR7dEN9LjAsICR7dFJ9LjApO1xuICAgICAgICByZXR1cm4gdGV4dHVyZTJEKCR7dGV4TmFtZX0sIHV2KS5yO1xuICAgICAgfVxuICAgIGA7XG4gIH1cbiAgcmV0dXJuIGBcbiAgICBmbG9hdCAke2Z1bmNOYW1lfShmbG9hdCByb3csIGZsb2F0IGNvbCkge1xuICAgICAgcmV0dXJuIHNhbXBsZTJEKCR7dGV4TmFtZX0sICR7dFJ9LjAsICR7dEN9LjAsICR7c2hhcGVbMV19LjAsIHJvdywgY29sKTtcbiAgICB9XG4gIGA7XG59XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCB7R1BHUFVDb250ZXh0fSBmcm9tICcuL2dwZ3B1X2NvbnRleHQnO1xuaW1wb3J0ICogYXMgdW5hcnlvcF9ncHUgZnJvbSAnLi91bmFyeW9wX2dwdSc7XG5cbmZ1bmN0aW9uIGdldFNpZ21vaWRVbmFyeU9wKCk6IHN0cmluZyB7XG4gIHJldHVybiAnZ2xfRnJhZ0NvbG9yID0gdmVjNCgxLjAgLyAoMS4wICsgZXhwKC0xLjAgKiB2YWx1ZSkpLCAwLCAwLCAwKTsnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2lnbW9pZEZyYWdtZW50U2hhZGVyU291cmNlKCk6IHN0cmluZyB7XG4gIHJldHVybiB1bmFyeW9wX2dwdS5nZXRGcmFnbWVudFNoYWRlclNvdXJjZShnZXRTaWdtb2lkVW5hcnlPcCgpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNpZ21vaWQoXG4gICAgZ3BncHU6IEdQR1BVQ29udGV4dCwgc2lnbW9pZFByb2dyYW06IFdlYkdMUHJvZ3JhbSwgYTogV2ViR0xUZXh0dXJlLFxuICAgIHJvd3M6IG51bWJlciwgY29sdW1uczogbnVtYmVyLCByZXN1bHQ6IFdlYkdMVGV4dHVyZSkge1xuICB1bmFyeW9wX2dwdS51bmFyeU9wKGdwZ3B1LCBzaWdtb2lkUHJvZ3JhbSwgYSwgcm93cywgY29sdW1ucywgcmVzdWx0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwbG9hZFNpZ21vaWREb3dubG9hZChcbiAgICBhOiBGbG9hdDMyQXJyYXksIHJvd3M6IG51bWJlciwgY29sdW1uczogbnVtYmVyKTogRmxvYXQzMkFycmF5IHtcbiAgcmV0dXJuIHVuYXJ5b3BfZ3B1LnVwbG9hZFVuYXJ5T3BEb3dubG9hZChcbiAgICAgIGEsIHJvd3MsIGNvbHVtbnMsIGdldFNpZ21vaWRVbmFyeU9wKCkpO1xufSIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0IHtHUEdQVUNvbnRleHR9IGZyb20gJy4vZ3BncHVfY29udGV4dCc7XG5pbXBvcnQgKiBhcyB1bmFyeW9wX2dwdSBmcm9tICcuL3VuYXJ5b3BfZ3B1JztcblxuZnVuY3Rpb24gZ2V0U3RlcFVuYXJ5T3AoKTogc3RyaW5nIHtcbiAgcmV0dXJuIGBcbiAgICBmbG9hdCByZXMgPSB2YWx1ZSA9PSB2YWx1ZSA/ICh2YWx1ZSA+IDAuMCA/IDEuMCA6IDAuMCkgOiB2YWx1ZTtcbiAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KHJlcywgMCwgMCwgMCk7XG4gIGA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGcmFnbWVudFNoYWRlclNvdXJjZSgpOiBzdHJpbmcge1xuICByZXR1cm4gdW5hcnlvcF9ncHUuZ2V0RnJhZ21lbnRTaGFkZXJTb3VyY2UoZ2V0U3RlcFVuYXJ5T3AoKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGVwKFxuICAgIGdwZ3B1OiBHUEdQVUNvbnRleHQsIHN0ZXBQcm9ncmFtOiBXZWJHTFByb2dyYW0sIGE6IFdlYkdMVGV4dHVyZSxcbiAgICByb3dzOiBudW1iZXIsIGNvbHVtbnM6IG51bWJlciwgcmVzdWx0OiBXZWJHTFRleHR1cmUpIHtcbiAgdW5hcnlvcF9ncHUudW5hcnlPcChncGdwdSwgc3RlcFByb2dyYW0sIGEsIHJvd3MsIGNvbHVtbnMsIHJlc3VsdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGxvYWRTdGVwRG93bmxvYWQoXG4gICAgYTogRmxvYXQzMkFycmF5LCByb3dzOiBudW1iZXIsIGNvbHVtbnM6IG51bWJlcik6IEZsb2F0MzJBcnJheSB7XG4gIHJldHVybiB1bmFyeW9wX2dwdS51cGxvYWRVbmFyeU9wRG93bmxvYWQoYSwgcm93cywgY29sdW1ucywgZ2V0U3RlcFVuYXJ5T3AoKSk7XG59XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRVbnBhY2tlZE1hdHJpeFRleHR1cmVTaGFwZVdpZHRoSGVpZ2h0KFxuICAgIHJvd3M6IG51bWJlciwgY29sdW1uczogbnVtYmVyKTogW251bWJlciwgbnVtYmVyXSB7XG4gIHJldHVybiBbY29sdW1ucywgcm93c107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRVbnBhY2tlZEFycmF5U2l6ZUZyb21NYXRyaXhTaXplKFxuICAgIG1hdHJpeFNpemU6IG51bWJlciwgY2hhbm5lbHNQZXJUZXh0dXJlOiBudW1iZXIpOiBudW1iZXIge1xuICByZXR1cm4gbWF0cml4U2l6ZSAqIGNoYW5uZWxzUGVyVGV4dHVyZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbG9yTWF0cml4VGV4dHVyZVNoYXBlV2lkdGhIZWlnaHQoXG4gICAgcm93czogbnVtYmVyLCBjb2x1bW5zOiBudW1iZXIpOiBbbnVtYmVyLCBudW1iZXJdIHtcbiAgcmV0dXJuIFtjb2x1bW5zICogNCwgcm93c107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNYXRyaXhTaXplRnJvbVVucGFja2VkQXJyYXlTaXplKFxuICAgIHVucGFja2VkU2l6ZTogbnVtYmVyLCBjaGFubmVsc1BlclRleHR1cmU6IG51bWJlcik6IG51bWJlciB7XG4gIGlmICh1bnBhY2tlZFNpemUgJSBjaGFubmVsc1BlclRleHR1cmUgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICd1bnBhY2tlZFNpemUgKCcgKyB1bnBhY2tlZFNpemUgKyAnKSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgJyArXG4gICAgICAgIGNoYW5uZWxzUGVyVGV4dHVyZSk7XG4gIH1cbiAgcmV0dXJuIHVucGFja2VkU2l6ZSAvIGNoYW5uZWxzUGVyVGV4dHVyZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZU1hdHJpeFRvVW5wYWNrZWRBcnJheShcbiAgICBtYXRyaXg6IEZsb2F0MzJBcnJheSwgdW5wYWNrZWRBcnJheTogRmxvYXQzMkFycmF5LFxuICAgIGNoYW5uZWxzUGVyVGV4dHVyZTogbnVtYmVyKSB7XG4gIGNvbnN0IHJlcXVpcmVkU2l6ZSA9XG4gICAgICBnZXRVbnBhY2tlZEFycmF5U2l6ZUZyb21NYXRyaXhTaXplKG1hdHJpeC5sZW5ndGgsIGNoYW5uZWxzUGVyVGV4dHVyZSk7XG4gIGlmICh1bnBhY2tlZEFycmF5Lmxlbmd0aCA8IHJlcXVpcmVkU2l6ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ3VucGFja2VkQXJyYXkgbGVuZ3RoICgnICsgdW5wYWNrZWRBcnJheS5sZW5ndGggK1xuICAgICAgICAnKSBtdXN0IGJlID49ICcgKyByZXF1aXJlZFNpemUpO1xuICB9XG4gIGxldCBkc3QgPSAwO1xuICBmb3IgKGxldCBzcmMgPSAwOyBzcmMgPCBtYXRyaXgubGVuZ3RoOyArK3NyYykge1xuICAgIHVucGFja2VkQXJyYXlbZHN0XSA9IG1hdHJpeFtzcmNdO1xuICAgIGRzdCArPSBjaGFubmVsc1BlclRleHR1cmU7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZU1hdHJpeEZyb21VbnBhY2tlZEFycmF5KFxuICAgIHVucGFja2VkQXJyYXk6IEZsb2F0MzJBcnJheSwgbWF0cml4OiBGbG9hdDMyQXJyYXksXG4gICAgY2hhbm5lbHNQZXJUZXh0dXJlOiBudW1iZXIpIHtcbiAgY29uc3QgcmVxdWlyZWRTaXplID0gZ2V0TWF0cml4U2l6ZUZyb21VbnBhY2tlZEFycmF5U2l6ZShcbiAgICAgIHVucGFja2VkQXJyYXkubGVuZ3RoLCBjaGFubmVsc1BlclRleHR1cmUpO1xuICBpZiAobWF0cml4Lmxlbmd0aCA8IHJlcXVpcmVkU2l6ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ21hdHJpeCBsZW5ndGggKCcgKyBtYXRyaXgubGVuZ3RoICsgJykgbXVzdCBiZSA+PSAnICsgcmVxdWlyZWRTaXplKTtcbiAgfVxuICBsZXQgZHN0ID0gMDtcbiAgZm9yIChsZXQgc3JjID0gMDsgc3JjIDwgdW5wYWNrZWRBcnJheS5sZW5ndGg7IHNyYyArPSBjaGFubmVsc1BlclRleHR1cmUpIHtcbiAgICBtYXRyaXhbZHN0KytdID0gdW5wYWNrZWRBcnJheVtzcmNdO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYWNrZWRNYXRyaXhUZXh0dXJlU2hhcGVXaWR0aEhlaWdodChcbiAgICByb3dzOiBudW1iZXIsIGNvbHVtbnM6IG51bWJlcik6IFtudW1iZXIsIG51bWJlcl0ge1xuICByZXR1cm4gW01hdGguY2VpbChjb2x1bW5zIC8gMiksIE1hdGguY2VpbChyb3dzIC8gMildO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFja2VkUkdCQUFycmF5U2l6ZUZyb21NYXRyaXhTaGFwZShcbiAgICByb3dzOiBudW1iZXIsIGNvbHVtbnM6IG51bWJlcik6IG51bWJlciB7XG4gIGNvbnN0IFt3LCBoXSA9IGdldFBhY2tlZE1hdHJpeFRleHR1cmVTaGFwZVdpZHRoSGVpZ2h0KHJvd3MsIGNvbHVtbnMpO1xuICByZXR1cm4gdyAqIGggKiA0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlTWF0cml4VG9QYWNrZWRSR0JBKFxuICAgIG1hdHJpeDogRmxvYXQzMkFycmF5LCByb3dzOiBudW1iZXIsIGNvbHVtbnM6IG51bWJlcixcbiAgICBwYWNrZWRSR0JBOiBGbG9hdDMyQXJyYXkpIHtcbiAgY29uc3QgcmVxdWlyZWRTaXplID0gZ2V0UGFja2VkUkdCQUFycmF5U2l6ZUZyb21NYXRyaXhTaGFwZShyb3dzLCBjb2x1bW5zKTtcbiAgaWYgKHBhY2tlZFJHQkEubGVuZ3RoIDwgcmVxdWlyZWRTaXplKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAncGFja2VkUkdCQSBsZW5ndGggKCcgKyBwYWNrZWRSR0JBLmxlbmd0aCArXG4gICAgICAgICcpIG11c3QgYmUgPj0gJyArIHJlcXVpcmVkU2l6ZSk7XG4gIH1cbiAgLypcbiAgICBVbnBhY2tlZCBtYXRyaXgsIHJvdy1tYWpvciBvcmRlciBpbiBGbG9hdDMyQXJyYXlbMTZdOiAgQSBCIEMgRFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFIEYgRyBIXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkgSiBLIExcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTSBOIE8gUFxuXG4gICAgUGFja2VkIG1hdHJpeCwgMngyIFJHQkEzMiB0ZXh0dXJlIChtZW1vcnkgdmlldyk6ICAgICAgIEFCRUYgQ0RHSCBJSk1OIEtMT1BcblxuICAgIFBhY2tlZCBtYXRyaXgsIDJ4MiBSR0JBMzIgdGV4dHVyZSAobWF0cml4IHZpZXcpOiAgICAgICBBQnxDRFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFRnxHSFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSstLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJSnxLTFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNTnxPUFxuICAgKi9cbiAgY29uc3QgW3RleHR1cmVXaWR0aCwgdGV4dHVyZUhlaWdodF0gPVxuICAgICAgZ2V0UGFja2VkTWF0cml4VGV4dHVyZVNoYXBlV2lkdGhIZWlnaHQocm93cywgY29sdW1ucyk7XG4gIGNvbnN0IG9kZFdpZHRoID0gKGNvbHVtbnMgJSAyKSA9PT0gMTtcbiAgY29uc3Qgb2RkSGVpZ2h0ID0gKHJvd3MgJSAyKSA9PT0gMTtcbiAgY29uc3Qgd2lkdGhJbkZ1bGxCbG9ja3MgPSBNYXRoLmZsb29yKGNvbHVtbnMgLyAyKTtcbiAgY29uc3QgaGVpZ2h0SW5GdWxsQmxvY2tzID0gTWF0aC5mbG9vcihyb3dzIC8gMik7XG5cbiAgLy8gbG9vcCBvdmVyIGZ1bGwgMngyIGJsb2Nrc1xuICB7XG4gICAgY29uc3QgZHN0U3RyaWRlID0gKG9kZFdpZHRoID8gNCA6IDApO1xuICAgIGNvbnN0IG9uZVJvdyA9IGNvbHVtbnM7XG4gICAgbGV0IGRzdCA9IDA7XG4gICAgZm9yIChsZXQgYmxvY2tZID0gMDsgYmxvY2tZIDwgaGVpZ2h0SW5GdWxsQmxvY2tzOyArK2Jsb2NrWSkge1xuICAgICAgY29uc3QgbWF0cml4U3JjUm93ID0gKGJsb2NrWSAqIDIgKiBjb2x1bW5zKTtcbiAgICAgIGZvciAobGV0IGJsb2NrWCA9IDA7IGJsb2NrWCA8IHdpZHRoSW5GdWxsQmxvY2tzOyArK2Jsb2NrWCkge1xuICAgICAgICBjb25zdCBtYXRyaXhTcmNDb2wgPSBibG9ja1ggKiAyO1xuICAgICAgICBjb25zdCBzcmMgPSBtYXRyaXhTcmNSb3cgKyBtYXRyaXhTcmNDb2w7XG4gICAgICAgIHBhY2tlZFJHQkFbZHN0XSA9IG1hdHJpeFtzcmNdO1xuICAgICAgICBwYWNrZWRSR0JBW2RzdCArIDFdID0gbWF0cml4W3NyYyArIDFdO1xuICAgICAgICBwYWNrZWRSR0JBW2RzdCArIDJdID0gbWF0cml4W3NyYyArIG9uZVJvd107XG4gICAgICAgIHBhY2tlZFJHQkFbZHN0ICsgM10gPSBtYXRyaXhbc3JjICsgb25lUm93ICsgMV07XG4gICAgICAgIGRzdCArPSA0O1xuICAgICAgfVxuICAgICAgZHN0ICs9IGRzdFN0cmlkZTtcbiAgICB9XG4gIH1cblxuICAvLyBsb29wIGRvd24gZmluYWwgb2RkIGNvbHVtblxuICBpZiAob2RkV2lkdGgpIHtcbiAgICBsZXQgc3JjID0gY29sdW1ucyAtIDE7XG4gICAgbGV0IGRzdCA9ICh0ZXh0dXJlV2lkdGggLSAxKSAqIDQ7XG4gICAgY29uc3Qgc3JjU3RyaWRlID0gMiAqIGNvbHVtbnM7XG4gICAgY29uc3QgZHN0U3RyaWRlID0gdGV4dHVyZVdpZHRoICogNDtcbiAgICBmb3IgKGxldCBibG9ja1kgPSAwOyBibG9ja1kgPCBoZWlnaHRJbkZ1bGxCbG9ja3M7ICsrYmxvY2tZKSB7XG4gICAgICBwYWNrZWRSR0JBW2RzdF0gPSBtYXRyaXhbc3JjXTtcbiAgICAgIHBhY2tlZFJHQkFbZHN0ICsgMl0gPSBtYXRyaXhbc3JjICsgY29sdW1uc107XG4gICAgICBzcmMgKz0gc3JjU3RyaWRlO1xuICAgICAgZHN0ICs9IGRzdFN0cmlkZTtcbiAgICB9XG4gIH1cblxuICAvLyBsb29wIGFjcm9zcyBmaW5hbCByb3dcbiAgaWYgKG9kZEhlaWdodCkge1xuICAgIGxldCBzcmMgPSAocm93cyAtIDEpICogY29sdW1ucztcbiAgICBsZXQgZHN0ID0gKHRleHR1cmVIZWlnaHQgLSAxKSAqIHRleHR1cmVXaWR0aCAqIDQ7XG4gICAgZm9yIChsZXQgYmxvY2tYID0gMDsgYmxvY2tYIDwgd2lkdGhJbkZ1bGxCbG9ja3M7ICsrYmxvY2tYKSB7XG4gICAgICBwYWNrZWRSR0JBW2RzdCsrXSA9IG1hdHJpeFtzcmMrK107XG4gICAgICBwYWNrZWRSR0JBW2RzdCsrXSA9IG1hdHJpeFtzcmMrK107XG4gICAgICBkc3QgKz0gMjtcbiAgICB9XG4gIH1cblxuICAvLyBmaWxsIGluIGJvdHRvbS1yaWdodCB0ZXhlbFxuICBpZiAob2RkV2lkdGggJiYgb2RkSGVpZ2h0KSB7XG4gICAgcGFja2VkUkdCQVtwYWNrZWRSR0JBLmxlbmd0aCAtIDRdID0gbWF0cml4W21hdHJpeC5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIHJldHVybiBwYWNrZWRSR0JBO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlTWF0cml4RnJvbVBhY2tlZFJHQkEoXG4gICAgcGFja2VkUkdCQTogRmxvYXQzMkFycmF5LCByb3dzOiBudW1iZXIsIGNvbHVtbnM6IG51bWJlcixcbiAgICBtYXRyaXg6IEZsb2F0MzJBcnJheSk6IEZsb2F0MzJBcnJheSB7XG4gIGNvbnN0IHJlcXVpcmVkU2l6ZSA9IHJvd3MgKiBjb2x1bW5zO1xuICBpZiAocmVxdWlyZWRTaXplIDwgbWF0cml4Lmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ21hdHJpeCBsZW5ndGggKCcgKyBtYXRyaXgubGVuZ3RoICsgJykgbXVzdCBiZSA+PSAnICsgcmVxdWlyZWRTaXplKTtcbiAgfVxuICBjb25zdCBvZGRXaWR0aCA9IChjb2x1bW5zICUgMikgPT09IDE7XG4gIGNvbnN0IG9kZEhlaWdodCA9IChyb3dzICUgMikgPT09IDE7XG4gIGNvbnN0IHdpZHRoSW5GdWxsQmxvY2tzID0gTWF0aC5mbG9vcihjb2x1bW5zIC8gMik7XG4gIGNvbnN0IGhlaWdodEluRnVsbEJsb2NrcyA9IE1hdGguZmxvb3Iocm93cyAvIDIpO1xuICBjb25zdCBbdGV4dHVyZVdpZHRoLCB0ZXh0dXJlSGVpZ2h0XSA9XG4gICAgICBnZXRQYWNrZWRNYXRyaXhUZXh0dXJlU2hhcGVXaWR0aEhlaWdodChyb3dzLCBjb2x1bW5zKTtcblxuICAvLyBsb29wIG92ZXIgZnVsbCAyeDIgYmxvY2tzXG4gIHtcbiAgICBjb25zdCBzcmNTdHJpZGUgPSBvZGRXaWR0aCA/IDQgOiAwO1xuICAgIGNvbnN0IGRzdFN0cmlkZSA9IGNvbHVtbnMgKyAob2RkV2lkdGggPyAxIDogMCk7XG4gICAgbGV0IHNyYyA9IDA7XG4gICAgbGV0IGRzdFJvdzEgPSAwO1xuICAgIGxldCBkc3RSb3cyID0gY29sdW1ucztcbiAgICBmb3IgKGxldCBibG9ja1kgPSAwOyBibG9ja1kgPCBoZWlnaHRJbkZ1bGxCbG9ja3M7ICsrYmxvY2tZKSB7XG4gICAgICBmb3IgKGxldCBibG9ja1ggPSAwOyBibG9ja1ggPCB3aWR0aEluRnVsbEJsb2NrczsgKytibG9ja1gpIHtcbiAgICAgICAgbWF0cml4W2RzdFJvdzErK10gPSBwYWNrZWRSR0JBW3NyYysrXTtcbiAgICAgICAgbWF0cml4W2RzdFJvdzErK10gPSBwYWNrZWRSR0JBW3NyYysrXTtcbiAgICAgICAgbWF0cml4W2RzdFJvdzIrK10gPSBwYWNrZWRSR0JBW3NyYysrXTtcbiAgICAgICAgbWF0cml4W2RzdFJvdzIrK10gPSBwYWNrZWRSR0JBW3NyYysrXTtcbiAgICAgIH1cbiAgICAgIHNyYyArPSBzcmNTdHJpZGU7XG4gICAgICBkc3RSb3cxICs9IGRzdFN0cmlkZTtcbiAgICAgIGRzdFJvdzIgKz0gZHN0U3RyaWRlO1xuICAgIH1cbiAgfVxuXG4gIC8vIGxvb3AgZG93biBmaW5hbCBjb2x1bW5cbiAgaWYgKG9kZFdpZHRoKSB7XG4gICAgbGV0IHNyYyA9ICh0ZXh0dXJlV2lkdGggLSAxKSAqIDQ7XG4gICAgbGV0IGRzdCA9IGNvbHVtbnMgLSAxO1xuICAgIGNvbnN0IHNyY1N0cmlkZSA9IHRleHR1cmVXaWR0aCAqIDQ7XG4gICAgY29uc3QgZHN0U3RyaWRlID0gMiAqIGNvbHVtbnM7XG4gICAgZm9yIChsZXQgYmxvY2tZID0gMDsgYmxvY2tZIDwgaGVpZ2h0SW5GdWxsQmxvY2tzOyArK2Jsb2NrWSkge1xuICAgICAgbWF0cml4W2RzdF0gPSBwYWNrZWRSR0JBW3NyY107XG4gICAgICBtYXRyaXhbZHN0ICsgY29sdW1uc10gPSBwYWNrZWRSR0JBW3NyYyArIDJdO1xuICAgICAgc3JjICs9IHNyY1N0cmlkZTtcbiAgICAgIGRzdCArPSBkc3RTdHJpZGU7XG4gICAgfVxuICB9XG5cbiAgLy8gbG9vcCBhY3Jvc3MgZmluYWwgcm93XG4gIGlmIChvZGRIZWlnaHQpIHtcbiAgICBsZXQgc3JjID0gKHRleHR1cmVIZWlnaHQgLSAxKSAqIHRleHR1cmVXaWR0aCAqIDQ7XG4gICAgbGV0IGRzdCA9IChyb3dzIC0gMSkgKiBjb2x1bW5zO1xuICAgIGZvciAobGV0IGJsb2NrWCA9IDA7IGJsb2NrWCA8IHdpZHRoSW5GdWxsQmxvY2tzOyArK2Jsb2NrWCkge1xuICAgICAgbWF0cml4W2RzdCsrXSA9IHBhY2tlZFJHQkFbc3JjKytdO1xuICAgICAgbWF0cml4W2RzdCsrXSA9IHBhY2tlZFJHQkFbc3JjKytdO1xuICAgICAgc3JjICs9IDI7XG4gICAgfVxuICB9XG5cbiAgLy8gZmlsbCBpbiBib3R0b20tcmlnaHQgY2VsbFxuICBpZiAob2RkV2lkdGggJiYgb2RkSGVpZ2h0KSB7XG4gICAgbWF0cml4W21hdHJpeC5sZW5ndGggLSAxXSA9IHBhY2tlZFJHQkFbcGFja2VkUkdCQS5sZW5ndGggLSA0XTtcbiAgfVxuXG4gIHJldHVybiBtYXRyaXg7XG59XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCB7R1BHUFVDb250ZXh0fSBmcm9tICcuL2dwZ3B1X2NvbnRleHQnO1xuXG5leHBvcnQgY2xhc3MgVGV4dHVyZU1hbmFnZXIge1xuICBwcml2YXRlIG51bVVzZWRUZXh0dXJlcyA9IDA7XG4gIHByaXZhdGUgbnVtRnJlZVRleHR1cmVzID0gMDtcbiAgcHJpdmF0ZSBmcmVlVGV4dHVyZXM6IHtbc2hhcGU6IHN0cmluZ106IFdlYkdMVGV4dHVyZVtdfSA9IHt9O1xuICBwcml2YXRlIGxvZ0VuYWJsZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSB1c2VkVGV4dHVyZUNvdW50OiB7W3NoYXBlOiBzdHJpbmddOiBudW1iZXJ9ID0ge307XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBncGdwdTogR1BHUFVDb250ZXh0KSB7fVxuXG4gIGFjcXVpcmVUZXh0dXJlKHNoYXBlUkM6IFtudW1iZXIsIG51bWJlcl0pOiBXZWJHTFRleHR1cmUge1xuICAgIGNvbnN0IHNoYXBlS2V5ID0gZ2V0S2V5RnJvbVRleHR1cmVTaGFwZShzaGFwZVJDKTtcbiAgICBpZiAoIShzaGFwZUtleSBpbiB0aGlzLmZyZWVUZXh0dXJlcykpIHtcbiAgICAgIHRoaXMuZnJlZVRleHR1cmVzW3NoYXBlS2V5XSA9IFtdO1xuICAgIH1cbiAgICBpZiAoIShzaGFwZUtleSBpbiB0aGlzLnVzZWRUZXh0dXJlQ291bnQpKSB7XG4gICAgICB0aGlzLnVzZWRUZXh0dXJlQ291bnRbc2hhcGVLZXldID0gMDtcbiAgICB9XG4gICAgdGhpcy51c2VkVGV4dHVyZUNvdW50W3NoYXBlS2V5XSsrO1xuXG4gICAgaWYgKHRoaXMuZnJlZVRleHR1cmVzW3NoYXBlS2V5XS5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLm51bUZyZWVUZXh0dXJlcy0tO1xuICAgICAgdGhpcy5udW1Vc2VkVGV4dHVyZXMrKztcbiAgICAgIHRoaXMubG9nKCk7XG4gICAgICByZXR1cm4gdGhpcy5mcmVlVGV4dHVyZXNbc2hhcGVLZXldLnNoaWZ0KCkhO1xuICAgIH1cbiAgICB0aGlzLm51bVVzZWRUZXh0dXJlcysrO1xuICAgIHRoaXMubG9nKCk7XG5cbiAgICByZXR1cm4gdGhpcy5ncGdwdS5jcmVhdGVNYXRyaXhUZXh0dXJlKHNoYXBlUkNbMF0sIHNoYXBlUkNbMV0pO1xuICB9XG5cbiAgcmVsZWFzZVRleHR1cmUodGV4dHVyZTogV2ViR0xUZXh0dXJlLCBzaGFwZTogW251bWJlciwgbnVtYmVyXSk6IHZvaWQge1xuICAgIGNvbnN0IHNoYXBlS2V5ID0gZ2V0S2V5RnJvbVRleHR1cmVTaGFwZShzaGFwZSk7XG4gICAgaWYgKCEoc2hhcGVLZXkgaW4gdGhpcy5mcmVlVGV4dHVyZXMpKSB7XG4gICAgICB0aGlzLmZyZWVUZXh0dXJlc1tzaGFwZUtleV0gPSBbXTtcbiAgICB9XG4gICAgdGhpcy5mcmVlVGV4dHVyZXNbc2hhcGVLZXldLnB1c2godGV4dHVyZSk7XG4gICAgdGhpcy5udW1GcmVlVGV4dHVyZXMrKztcbiAgICB0aGlzLm51bVVzZWRUZXh0dXJlcy0tO1xuICAgIHRoaXMudXNlZFRleHR1cmVDb3VudFtzaGFwZUtleV0tLTtcbiAgICB0aGlzLmxvZygpO1xuICB9XG5cbiAgcHJpdmF0ZSBsb2coKSB7XG4gICAgaWYgKCF0aGlzLmxvZ0VuYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdG90YWwgPSB0aGlzLm51bUZyZWVUZXh0dXJlcyArIHRoaXMubnVtVXNlZFRleHR1cmVzO1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAnRnJlZS9Vc2VkJywgdGhpcy5udW1GcmVlVGV4dHVyZXMgKyAnIC8gJyArIHRoaXMubnVtVXNlZFRleHR1cmVzLFxuICAgICAgICBgKCR7dG90YWx9KWApO1xuICB9XG5cbiAgZ2V0TnVtVXNlZFRleHR1cmVzKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMubnVtVXNlZFRleHR1cmVzO1xuICB9XG5cbiAgZ2V0TnVtRnJlZVRleHR1cmVzKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMubnVtRnJlZVRleHR1cmVzO1xuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICBmb3IgKGNvbnN0IHNoYXBlIGluIHRoaXMuZnJlZVRleHR1cmVzKSB7XG4gICAgICBpZiAodGhpcy5mcmVlVGV4dHVyZXMuaGFzT3duUHJvcGVydHkoc2hhcGUpKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5mcmVlVGV4dHVyZXNbc2hhcGVdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5ncGdwdS5kZWxldGVNYXRyaXhUZXh0dXJlKHRoaXMuZnJlZVRleHR1cmVzW3NoYXBlXVtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0S2V5RnJvbVRleHR1cmVTaGFwZShzaGFwZVJvd3NDb2w6IFtudW1iZXIsIG51bWJlcl0pOiBzdHJpbmcge1xuICByZXR1cm4gc2hhcGVSb3dzQ29sWzBdICsgJ18nICsgc2hhcGVSb3dzQ29sWzFdO1xufVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQge0dQR1BVQ29udGV4dH0gZnJvbSAnLi9ncGdwdV9jb250ZXh0JztcbmltcG9ydCAqIGFzIHVuYXJ5b3BfZ3B1IGZyb20gJy4vdW5hcnlvcF9ncHUnO1xuXG4vKipcbiAqIFNpbmVcbiAqL1xuZnVuY3Rpb24gZ2V0U2luVW5hcnlPcCgpOiBzdHJpbmcge1xuICByZXR1cm4gYFxuICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoc2luKHZhbHVlKSwgMCwgMCwgMCk7XG4gIGA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTaW5GcmFnbWVudFNoYWRlclNvdXJjZSgpOiBzdHJpbmcge1xuICByZXR1cm4gdW5hcnlvcF9ncHUuZ2V0RnJhZ21lbnRTaGFkZXJTb3VyY2UoZ2V0U2luVW5hcnlPcCgpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNpbihcbiAgICBncGdwdTogR1BHUFVDb250ZXh0LCBzaW5Qcm9ncmFtOiBXZWJHTFByb2dyYW0sIGE6IFdlYkdMVGV4dHVyZSxcbiAgICByb3dzOiBudW1iZXIsIGNvbHVtbnM6IG51bWJlciwgcmVzdWx0OiBXZWJHTFRleHR1cmUpIHtcbiAgdW5hcnlvcF9ncHUudW5hcnlPcChncGdwdSwgc2luUHJvZ3JhbSwgYSwgcm93cywgY29sdW1ucywgcmVzdWx0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwbG9hZFNpbkRvd25sb2FkKFxuICAgIGE6IEZsb2F0MzJBcnJheSwgcm93czogbnVtYmVyLCBjb2x1bW5zOiBudW1iZXIpOiBGbG9hdDMyQXJyYXkge1xuICByZXR1cm4gdW5hcnlvcF9ncHUudXBsb2FkVW5hcnlPcERvd25sb2FkKGEsIHJvd3MsIGNvbHVtbnMsIGdldFNpblVuYXJ5T3AoKSk7XG59XG5cbi8qKlxuICogVGFuaFxuICovXG5mdW5jdGlvbiBnZXRUYW5oVW5hcnlPcCgpOiBzdHJpbmcge1xuICByZXR1cm4gYFxuICAgIGZsb2F0IGUyeCA9IGV4cCgtMi4wICogdmFsdWUpO1xuICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoKDEuMCAtIGUyeCkgLyAoMS4wICsgZTJ4KSwgMCwgMCwgMCk7XG4gIGA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUYW5oRnJhZ21lbnRTaGFkZXJTb3VyY2UoKTogc3RyaW5nIHtcbiAgcmV0dXJuIHVuYXJ5b3BfZ3B1LmdldEZyYWdtZW50U2hhZGVyU291cmNlKGdldFRhbmhVbmFyeU9wKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGFuaChcbiAgICBncGdwdTogR1BHUFVDb250ZXh0LCB0YW5oUHJvZ3JhbTogV2ViR0xQcm9ncmFtLCBhOiBXZWJHTFRleHR1cmUsXG4gICAgcm93czogbnVtYmVyLCBjb2x1bW5zOiBudW1iZXIsIHJlc3VsdDogV2ViR0xUZXh0dXJlKSB7XG4gIHVuYXJ5b3BfZ3B1LnVuYXJ5T3AoZ3BncHUsIHRhbmhQcm9ncmFtLCBhLCByb3dzLCBjb2x1bW5zLCByZXN1bHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBsb2FkVGFuaERvd25sb2FkKFxuICAgIGE6IEZsb2F0MzJBcnJheSwgcm93czogbnVtYmVyLCBjb2x1bW5zOiBudW1iZXIpOiBGbG9hdDMyQXJyYXkge1xuICByZXR1cm4gdW5hcnlvcF9ncHUudXBsb2FkVW5hcnlPcERvd25sb2FkKGEsIHJvd3MsIGNvbHVtbnMsIGdldFRhbmhVbmFyeU9wKCkpO1xufVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQge0dQR1BVQ29udGV4dH0gZnJvbSAnLi9ncGdwdV9jb250ZXh0JztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZyYWdtZW50U2hhZGVyU291cmNlKHJlc3VsdE9wOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gYFxuICAgIHByZWNpc2lvbiBoaWdocCBmbG9hdDtcbiAgICB1bmlmb3JtIHNhbXBsZXIyRCBtYXRyaXhBO1xuICAgIHZhcnlpbmcgdmVjMiByZXN1bHRVVjtcblxuICAgIHZvaWQgbWFpbigpIHtcbiAgICAgIGZsb2F0IHZhbHVlID0gdGV4dHVyZTJEKG1hdHJpeEEsIHJlc3VsdFVWKS5yO1xuICAgICAgJHtyZXN1bHRPcH1cbiAgICB9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuYXJ5T3AoXG4gICAgZ3BncHU6IEdQR1BVQ29udGV4dCwgdW5hcnlPcFByb2dyYW06IFdlYkdMUHJvZ3JhbSwgYTogV2ViR0xUZXh0dXJlLFxuICAgIHJvd3M6IG51bWJlciwgY29sdW1uczogbnVtYmVyLCByZXN1bHQ6IFdlYkdMVGV4dHVyZSkge1xuICBncGdwdS5zZXRPdXRwdXRNYXRyaXhUZXh0dXJlKHJlc3VsdCwgcm93cywgY29sdW1ucyk7XG4gIGdwZ3B1LnNldFByb2dyYW0odW5hcnlPcFByb2dyYW0pO1xuICBncGdwdS5zZXRJbnB1dE1hdHJpeFRleHR1cmUoYSwgJ21hdHJpeEEnLCAwKTtcbiAgZ3BncHUuZXhlY3V0ZVByb2dyYW0oKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwbG9hZFVuYXJ5T3BEb3dubG9hZChcbiAgICBhOiBGbG9hdDMyQXJyYXksIHJvd3M6IG51bWJlciwgY29sdW1uczogbnVtYmVyLFxuICAgIHJlc3VsdE9wOiBzdHJpbmcpOiBGbG9hdDMyQXJyYXkge1xuICBjb25zdCBncGdwdSA9IG5ldyBHUEdQVUNvbnRleHQoKTtcbiAgY29uc3QgZnJhZ21lbnRTaGFkZXJTcmMgPSBnZXRGcmFnbWVudFNoYWRlclNvdXJjZShyZXN1bHRPcCk7XG4gIGNvbnN0IHByb2dyYW06IFdlYkdMUHJvZ3JhbSA9IGdwZ3B1LmNyZWF0ZVByb2dyYW0oZnJhZ21lbnRTaGFkZXJTcmMpO1xuICBjb25zdCBhVGV4dHVyZTogV2ViR0xUZXh0dXJlID0gZ3BncHUuY3JlYXRlTWF0cml4VGV4dHVyZShyb3dzLCBjb2x1bW5zKTtcbiAgY29uc3QgcmVzdWx0VGV4dHVyZTogV2ViR0xUZXh0dXJlID0gZ3BncHUuY3JlYXRlTWF0cml4VGV4dHVyZShyb3dzLCBjb2x1bW5zKTtcbiAgZ3BncHUudXBsb2FkTWF0cml4VG9UZXh0dXJlKGFUZXh0dXJlLCByb3dzLCBjb2x1bW5zLCBhKTtcbiAgdW5hcnlPcChncGdwdSwgcHJvZ3JhbSwgYVRleHR1cmUsIHJvd3MsIGNvbHVtbnMsIHJlc3VsdFRleHR1cmUpO1xuICBjb25zdCByZXN1bHQgPSBncGdwdS5kb3dubG9hZE1hdHJpeEZyb21UZXh0dXJlKHJlc3VsdFRleHR1cmUsIHJvd3MsIGNvbHVtbnMpO1xuICBncGdwdS5kZWxldGVNYXRyaXhUZXh0dXJlKGFUZXh0dXJlKTtcbiAgZ3BncHUuZGVsZXRlTWF0cml4VGV4dHVyZShyZXN1bHRUZXh0dXJlKTtcbiAgZ3BncHUuZGVsZXRlUHJvZ3JhbShwcm9ncmFtKTtcbiAgZ3BncHUuZGlzcG9zZSgpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5sZXQgVVNFX1dFQkdMMl9XSEVOX0FWQUlMQUJMRSA9IGZhbHNlO1xubGV0IFdFQkdMMl9FTkFCTEVEOiBib29sZWFufHVuZGVmaW5lZCA9IG51bGwhO1xubGV0IE1BWF9URVhUVVJFX1NJWkU6IG51bWJlciA9IG51bGwhO1xuXG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4uLy4uL3V0aWwnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFdlYkdMQ29udGV4dEF0dHJpYnV0ZXMge1xuICBhbHBoYT86IGJvb2xlYW47XG4gIGFudGlhbGlhcz86IGJvb2xlYW47XG4gIHByZW11bHRpcGxpZWRBbHBoYT86IGJvb2xlYW47XG4gIHByZXNlcnZlRHJhd2luZ0J1ZmZlcj86IGJvb2xlYW47XG4gIGRlcHRoPzogYm9vbGVhbjtcbiAgc3RlbmNpbD86IGJvb2xlYW47XG4gIGZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQ/OiBib29sZWFuO1xufVxuXG4vKiogQGhpZGRlbiAqL1xuZXhwb3J0IGNvbnN0IElTX05BTl9TSEFERVJfRlVOQyA9IGBcbmJvb2wgaXNOYU4oZmxvYXQgdmFsKSB7XG4gIHJldHVybiB2YWwgPT0gdmFsID8gZmFsc2UgOiB0cnVlO1xufVxuYDtcblxuZXhwb3J0IGludGVyZmFjZSBXZWJHTExvc2VDb250ZXh0RXh0ZW5zaW9uIHsgbG9zZUNvbnRleHQoKTogdm9pZDsgfVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlV2ViR0xSZW5kZXJpbmdDb250ZXh0KGF0dHJpYnV0ZXM6IFdlYkdMQ29udGV4dEF0dHJpYnV0ZXMpOlxuICAgIFdlYkdMUmVuZGVyaW5nQ29udGV4dCB7XG4gIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICBjYW52YXMud2lkdGggPSAxO1xuICBjYW52YXMuaGVpZ2h0ID0gMTtcbiAgcmV0dXJuIGNyZWF0ZVdlYkdMUmVuZGVyaW5nQ29udGV4dEZyb21DYW52YXMoY2FudmFzLCBhdHRyaWJ1dGVzKTtcbn1cblxuLyoqXG4gKiBGb3JjZSB0aGUgbGlicmFyeSB0byBwcmVmZXIgV2ViR0wgMS4wIGluc3RlYWQgb2YgV2ViR0wgMi4wIGV2ZW4gd2hlbiBXZWJHTFxuICogMi4wIGlzIGF2YWlsYWJsZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZWZlcldlYkdMMSgpIHtcbiAgVVNFX1dFQkdMMl9XSEVOX0FWQUlMQUJMRSA9IGZhbHNlO1xuICBXRUJHTDJfRU5BQkxFRCA9IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBQcmVmZXIgV2ViR0wgMi4wIHRvIFdlYkdMIDEuMC4gVGhpcyBpcyB0aGUgZGVmYXVsdCBjb25maWd1cmF0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJlZmVyV2ViR0wyKCkge1xuICBVU0VfV0VCR0wyX1dIRU5fQVZBSUxBQkxFID0gdHJ1ZTtcbiAgV0VCR0wyX0VOQUJMRUQgPSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1dlYkdMMkVuYWJsZWQoKSB7XG4gIGlmICghVVNFX1dFQkdMMl9XSEVOX0FWQUlMQUJMRSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChXRUJHTDJfRU5BQkxFRCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgdGVtcENhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGNvbnN0IGdsID0gdGVtcENhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbDInKTtcbiAgICBpZiAoZ2wgIT0gbnVsbCkge1xuICAgICAgV0VCR0wyX0VOQUJMRUQgPSB0cnVlO1xuXG4gICAgICBjb25zdCBsb3NlQ29udGV4dEV4dGVuc2lvbiA9XG4gICAgICAgICAgZ2V0RXh0ZW5zaW9uT3JUaHJvdyhcbiAgICAgICAgICAgICAgZ2wgYXMgV2ViR0xSZW5kZXJpbmdDb250ZXh0LCAnV0VCR0xfbG9zZV9jb250ZXh0JykgYXNcbiAgICAgICAgICBXZWJHTExvc2VDb250ZXh0RXh0ZW5zaW9uO1xuICAgICAgbG9zZUNvbnRleHRFeHRlbnNpb24ubG9zZUNvbnRleHQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgV0VCR0wyX0VOQUJMRUQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFdFQkdMMl9FTkFCTEVEO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlV2ViR0xSZW5kZXJpbmdDb250ZXh0RnJvbUNhbnZhcyhcbiAgICBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LFxuICAgIGF0dHJpYnV0ZXM6IFdlYkdMQ29udGV4dEF0dHJpYnV0ZXMpOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQge1xuICBsZXQgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDtcbiAgaWYgKGlzV2ViR0wyRW5hYmxlZCgpKSB7XG4gICAgZ2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wyJywgYXR0cmlidXRlcykgYXMgV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xuICB9IGVsc2Uge1xuICAgIGdsID0gKGNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcsIGF0dHJpYnV0ZXMpIHx8XG4gICAgICAgICAgY2FudmFzLmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcsIGF0dHJpYnV0ZXMpKSBhc1xuICAgICAgICBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XG4gIH1cblxuICBpZiAoZ2wgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgV2ViR0wuJyk7XG4gIH1cbiAgcmV0dXJuIGdsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsbEFuZENoZWNrPFQ+KGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIGZ1bmM6ICgpID0+IFQpOiBUIHtcbiAgY29uc3QgcmV0dXJuVmFsdWUgPSBmdW5jKCk7XG4gIGNoZWNrV2ViR0xFcnJvcihnbCk7XG4gIHJldHVybiByZXR1cm5WYWx1ZTtcbn1cblxubGV0IHdlYkdMRGVidWdFcnJvckNoZWNraW5nRW5hYmxlZCA9IGZhbHNlO1xuXG5leHBvcnQgZnVuY3Rpb24gZW5hYmxlRGVidWdXZWJHTEVycm9yQ2hlY2tpbmcoZW5hYmxlZDogYm9vbGVhbikge1xuICB3ZWJHTERlYnVnRXJyb3JDaGVja2luZ0VuYWJsZWQgPSBlbmFibGVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tXZWJHTEVycm9yKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcbiAgaWYgKHdlYkdMRGVidWdFcnJvckNoZWNraW5nRW5hYmxlZCkge1xuICAgIGNvbnN0IGVycm9yID0gZ2wuZ2V0RXJyb3IoKTtcbiAgICBpZiAoZXJyb3IgIT09IGdsLk5PX0VSUk9SKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dlYkdMIEVycm9yOiAnICsgZ2V0V2ViR0xFcnJvck1lc3NhZ2UoZ2wsIGVycm9yKSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRXZWJHTEVycm9yTWVzc2FnZShcbiAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBzdGF0dXM6IG51bWJlcik6IHN0cmluZyB7XG4gIHN3aXRjaCAoc3RhdHVzKSB7XG4gICAgY2FzZSBnbC5OT19FUlJPUjpcbiAgICAgIHJldHVybiAnTk9fRVJST1InO1xuICAgIGNhc2UgZ2wuSU5WQUxJRF9FTlVNOlxuICAgICAgcmV0dXJuICdJTlZBTElEX0VOVU0nO1xuICAgIGNhc2UgZ2wuSU5WQUxJRF9WQUxVRTpcbiAgICAgIHJldHVybiAnSU5WQUxJRF9WQUxVRSc7XG4gICAgY2FzZSBnbC5JTlZBTElEX09QRVJBVElPTjpcbiAgICAgIHJldHVybiAnSU5WQUxJRF9PUEVSQVRJT04nO1xuICAgIGNhc2UgZ2wuSU5WQUxJRF9GUkFNRUJVRkZFUl9PUEVSQVRJT046XG4gICAgICByZXR1cm4gJ0lOVkFMSURfRlJBTUVCVUZGRVJfT1BFUkFUSU9OJztcbiAgICBjYXNlIGdsLk9VVF9PRl9NRU1PUlk6XG4gICAgICByZXR1cm4gJ09VVF9PRl9NRU1PUlknO1xuICAgIGNhc2UgZ2wuQ09OVEVYVF9MT1NUX1dFQkdMOlxuICAgICAgcmV0dXJuICdDT05URVhUX0xPU1RfV0VCR0wnO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJ1Vua25vd24gZXJyb3IgY29kZSAnICsgc3RhdHVzO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFeHRlbnNpb25PclRocm93KFxuICAgIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIGV4dGVuc2lvbk5hbWU6IHN0cmluZyk6IHt9IHtcbiAgcmV0dXJuIHRocm93SWZOdWxsPHt9PihcbiAgICAgIGdsLCAoKSA9PiBnbC5nZXRFeHRlbnNpb24oZXh0ZW5zaW9uTmFtZSksXG4gICAgICAnRXh0ZW5zaW9uIFwiJyArIGV4dGVuc2lvbk5hbWUgKyAnXCIgbm90IHN1cHBvcnRlZCBvbiB0aGlzIGJyb3dzZXIuJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVWZXJ0ZXhTaGFkZXIoXG4gICAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgdmVydGV4U2hhZGVyU291cmNlOiBzdHJpbmcpOiBXZWJHTFNoYWRlciB7XG4gIGNvbnN0IHZlcnRleFNoYWRlcjogV2ViR0xTaGFkZXIgPSB0aHJvd0lmTnVsbDxXZWJHTFNoYWRlcj4oXG4gICAgICBnbCwgKCkgPT4gZ2wuY3JlYXRlU2hhZGVyKGdsLlZFUlRFWF9TSEFERVIpLFxuICAgICAgJ1VuYWJsZSB0byBjcmVhdGUgdmVydGV4IFdlYkdMU2hhZGVyLicpO1xuICBjYWxsQW5kQ2hlY2soZ2wsICgpID0+IGdsLnNoYWRlclNvdXJjZSh2ZXJ0ZXhTaGFkZXIsIHZlcnRleFNoYWRlclNvdXJjZSkpO1xuICBjYWxsQW5kQ2hlY2soZ2wsICgpID0+IGdsLmNvbXBpbGVTaGFkZXIodmVydGV4U2hhZGVyKSk7XG4gIGlmIChnbC5nZXRTaGFkZXJQYXJhbWV0ZXIodmVydGV4U2hhZGVyLCBnbC5DT01QSUxFX1NUQVRVUykgPT09IGZhbHNlKSB7XG4gICAgY29uc29sZS5sb2coZ2wuZ2V0U2hhZGVySW5mb0xvZyh2ZXJ0ZXhTaGFkZXIpKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBjb21waWxlIHZlcnRleCBzaGFkZXIuJyk7XG4gIH1cbiAgcmV0dXJuIHZlcnRleFNoYWRlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50U2hhZGVyKFxuICAgIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIGZyYWdtZW50U2hhZGVyU291cmNlOiBzdHJpbmcpOiBXZWJHTFNoYWRlciB7XG4gIGNvbnN0IGZyYWdtZW50U2hhZGVyOiBXZWJHTFNoYWRlciA9IHRocm93SWZOdWxsPFdlYkdMU2hhZGVyPihcbiAgICAgIGdsLCAoKSA9PiBnbC5jcmVhdGVTaGFkZXIoZ2wuRlJBR01FTlRfU0hBREVSKSxcbiAgICAgICdVbmFibGUgdG8gY3JlYXRlIGZyYWdtZW50IFdlYkdMU2hhZGVyLicpO1xuICBjYWxsQW5kQ2hlY2soZ2wsICgpID0+IGdsLnNoYWRlclNvdXJjZShmcmFnbWVudFNoYWRlciwgZnJhZ21lbnRTaGFkZXJTb3VyY2UpKTtcbiAgY2FsbEFuZENoZWNrKGdsLCAoKSA9PiBnbC5jb21waWxlU2hhZGVyKGZyYWdtZW50U2hhZGVyKSk7XG4gIGlmIChnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoZnJhZ21lbnRTaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSA9PT0gZmFsc2UpIHtcbiAgICBjb25zb2xlLmxvZyhnbC5nZXRTaGFkZXJJbmZvTG9nKGZyYWdtZW50U2hhZGVyKSk7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gY29tcGlsZSBmcmFnbWVudCBzaGFkZXIuJyk7XG4gIH1cbiAgcmV0dXJuIGZyYWdtZW50U2hhZGVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUHJvZ3JhbShnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KTogV2ViR0xQcm9ncmFtIHtcbiAgcmV0dXJuIHRocm93SWZOdWxsPFdlYkdMUHJvZ3JhbT4oXG4gICAgICBnbCwgKCkgPT4gZ2wuY3JlYXRlUHJvZ3JhbSgpLCAnVW5hYmxlIHRvIGNyZWF0ZSBXZWJHTFByb2dyYW0uJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5rUHJvZ3JhbShnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBwcm9ncmFtOiBXZWJHTFByb2dyYW0pIHtcbiAgY2FsbEFuZENoZWNrKGdsLCAoKSA9PiBnbC5saW5rUHJvZ3JhbShwcm9ncmFtKSk7XG4gIGlmIChnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLkxJTktfU1RBVFVTKSA9PT0gZmFsc2UpIHtcbiAgICBjb25zb2xlLmxvZyhnbC5nZXRQcm9ncmFtSW5mb0xvZyhwcm9ncmFtKSk7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gbGluayB2ZXJ0ZXggYW5kIGZyYWdtZW50IHNoYWRlcnMuJyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlUHJvZ3JhbShcbiAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBwcm9ncmFtOiBXZWJHTFByb2dyYW0pIHtcbiAgY2FsbEFuZENoZWNrKGdsLCAoKSA9PiBnbC52YWxpZGF0ZVByb2dyYW0ocHJvZ3JhbSkpO1xuICBpZiAoZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5WQUxJREFURV9TVEFUVVMpID09PSBmYWxzZSkge1xuICAgIGNvbnNvbGUubG9nKGdsLmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NoYWRlciBwcm9ncmFtIHZhbGlkYXRpb24gZmFpbGVkLicpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdGF0aWNWZXJ0ZXhCdWZmZXIoXG4gICAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgZGF0YTogRmxvYXQzMkFycmF5KTogV2ViR0xCdWZmZXIge1xuICBjb25zdCBidWZmZXI6IFdlYkdMQnVmZmVyID0gdGhyb3dJZk51bGw8V2ViR0xCdWZmZXI+KFxuICAgICAgZ2wsICgpID0+IGdsLmNyZWF0ZUJ1ZmZlcigpLCAnVW5hYmxlIHRvIGNyZWF0ZSBXZWJHTEJ1ZmZlcicpO1xuICBjYWxsQW5kQ2hlY2soZ2wsICgpID0+IGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXIpKTtcbiAgY2FsbEFuZENoZWNrKGdsLCAoKSA9PiBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgZGF0YSwgZ2wuU1RBVElDX0RSQVcpKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0YXRpY0luZGV4QnVmZmVyKFxuICAgIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIGRhdGE6IFVpbnQxNkFycmF5KTogV2ViR0xCdWZmZXIge1xuICBjb25zdCBidWZmZXI6IFdlYkdMQnVmZmVyID0gdGhyb3dJZk51bGw8V2ViR0xCdWZmZXI+KFxuICAgICAgZ2wsICgpID0+IGdsLmNyZWF0ZUJ1ZmZlcigpLCAnVW5hYmxlIHRvIGNyZWF0ZSBXZWJHTEJ1ZmZlcicpO1xuICBjYWxsQW5kQ2hlY2soZ2wsICgpID0+IGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGJ1ZmZlcikpO1xuICBjYWxsQW5kQ2hlY2soXG4gICAgICBnbCwgKCkgPT4gZ2wuYnVmZmVyRGF0YShnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgZGF0YSwgZ2wuU1RBVElDX0RSQVcpKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5TWF4VGV4dHVyZVNpemUoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCk6IG51bWJlciB7XG4gIGlmIChNQVhfVEVYVFVSRV9TSVpFICE9IG51bGwpIHtcbiAgICByZXR1cm4gTUFYX1RFWFRVUkVfU0laRTtcbiAgfVxuICBNQVhfVEVYVFVSRV9TSVpFID1cbiAgICAgIGNhbGxBbmRDaGVjayhnbCwgKCkgPT4gZ2whLmdldFBhcmFtZXRlcihnbCEuTUFYX1RFWFRVUkVfU0laRSkpO1xuICByZXR1cm4gTUFYX1RFWFRVUkVfU0laRTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENoYW5uZWxzUGVyVGV4dHVyZSgpOiBudW1iZXIge1xuICBpZiAoaXNXZWJHTDJFbmFibGVkKCkpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuICByZXR1cm4gNDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRleHR1cmUoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCk6IFdlYkdMVGV4dHVyZSB7XG4gIHJldHVybiB0aHJvd0lmTnVsbDxXZWJHTFRleHR1cmU+KFxuICAgICAgZ2wsICgpID0+IGdsLmNyZWF0ZVRleHR1cmUoKSwgJ1VuYWJsZSB0byBjcmVhdGUgV2ViR0xUZXh0dXJlLicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVUZXh0dXJlU2l6ZShcbiAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xuICBjb25zdCBtYXhUZXh0dXJlU2l6ZTogbnVtYmVyID0gcXVlcnlNYXhUZXh0dXJlU2l6ZShnbCk7XG4gIGlmICgod2lkdGggPD0gMCkgfHwgKGhlaWdodCA8PSAwKSkge1xuICAgIGNvbnN0IHJlcXVlc3RlZCA9ICdbJyArIHdpZHRoICsgJ3gnICsgaGVpZ2h0ICsgJ10nO1xuICAgIHRocm93IG5ldyBFcnJvcignUmVxdWVzdGVkIHRleHR1cmUgc2l6ZSAnICsgcmVxdWVzdGVkICsgJyBpcyBpbnZhbGlkLicpO1xuICB9XG4gIGlmICgod2lkdGggPiBtYXhUZXh0dXJlU2l6ZSkgfHwgKGhlaWdodCA+IG1heFRleHR1cmVTaXplKSkge1xuICAgIGNvbnN0IHJlcXVlc3RlZCA9ICdbJyArIHdpZHRoICsgJ3gnICsgaGVpZ2h0ICsgJ10nO1xuICAgIGNvbnN0IG1heCA9ICdbJyArIG1heFRleHR1cmVTaXplICsgJ3gnICsgbWF4VGV4dHVyZVNpemUgKyAnXSc7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnUmVxdWVzdGVkIHRleHR1cmUgc2l6ZSAnICsgcmVxdWVzdGVkICtcbiAgICAgICAgJyBncmVhdGVyIHRoYW4gV2ViR0wgbWF4aW11bSBvbiB0aGlzIGJyb3dzZXIgLyBHUFUgJyArIG1heCArICcuJyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZyYW1lYnVmZmVyKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpOiBXZWJHTEZyYW1lYnVmZmVyIHtcbiAgcmV0dXJuIHRocm93SWZOdWxsPFdlYkdMRnJhbWVidWZmZXI+KFxuICAgICAgZ2wsICgpID0+IGdsLmNyZWF0ZUZyYW1lYnVmZmVyKCksICdVbmFibGUgdG8gY3JlYXRlIFdlYkdMRnJhbWVidWZmZXIuJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBiaW5kVmVydGV4QnVmZmVyVG9Qcm9ncmFtQXR0cmlidXRlKFxuICAgIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIHByb2dyYW06IFdlYkdMUHJvZ3JhbSwgYXR0cmlidXRlOiBzdHJpbmcsXG4gICAgYnVmZmVyOiBXZWJHTEJ1ZmZlciwgYXJyYXlFbnRyaWVzUGVySXRlbTogbnVtYmVyLCBpdGVtU3RyaWRlSW5CeXRlczogbnVtYmVyLFxuICAgIGl0ZW1PZmZzZXRJbkJ5dGVzOiBudW1iZXIpIHtcbiAgY29uc3QgbG9jID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgYXR0cmlidXRlKTtcbiAgaWYgKGxvYyA9PT0gLTEpIHtcbiAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ1VuYWJsZSB0byBnZXQgYXR0cmlidXRlIFwiJyArIGF0dHJpYnV0ZSArICdcIiBvbiBXZWJHTFByb2dyYW0uJyk7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgIChlcnJvciBhcyBhbnkpLm5hbWVkVmVydGV4QXR0cmlidXRlTm90Rm91bmQgPSBhdHRyaWJ1dGU7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbiAgY2FsbEFuZENoZWNrKGdsLCAoKSA9PiBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyKSk7XG4gIGNhbGxBbmRDaGVjayhcbiAgICAgIGdsLFxuICAgICAgKCkgPT4gZ2wudmVydGV4QXR0cmliUG9pbnRlcihcbiAgICAgICAgICBsb2MsIGFycmF5RW50cmllc1Blckl0ZW0sIGdsLkZMT0FULCBmYWxzZSwgaXRlbVN0cmlkZUluQnl0ZXMsXG4gICAgICAgICAgaXRlbU9mZnNldEluQnl0ZXMpKTtcbiAgY2FsbEFuZENoZWNrKGdsLCAoKSA9PiBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShsb2MpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJpbmRUZXh0dXJlVW5pdChcbiAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCB0ZXh0dXJlOiBXZWJHTFRleHR1cmUsIHRleHR1cmVVbml0OiBudW1iZXIpIHtcbiAgdmFsaWRhdGVUZXh0dXJlVW5pdChnbCwgdGV4dHVyZVVuaXQpO1xuICBjYWxsQW5kQ2hlY2soZ2wsICgpID0+IGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTAgKyB0ZXh0dXJlVW5pdCkpO1xuICBjYWxsQW5kQ2hlY2soZ2wsICgpID0+IGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuYmluZFRleHR1cmVVbml0KFxuICAgIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIHRleHR1cmVVbml0OiBudW1iZXIpIHtcbiAgdmFsaWRhdGVUZXh0dXJlVW5pdChnbCwgdGV4dHVyZVVuaXQpO1xuICBjYWxsQW5kQ2hlY2soZ2wsICgpID0+IGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTAgKyB0ZXh0dXJlVW5pdCkpO1xuICBjYWxsQW5kQ2hlY2soZ2wsICgpID0+IGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFByb2dyYW1Vbmlmb3JtTG9jYXRpb25PclRocm93KFxuICAgIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIHByb2dyYW06IFdlYkdMUHJvZ3JhbSxcbiAgICB1bmlmb3JtTmFtZTogc3RyaW5nKTogV2ViR0xVbmlmb3JtTG9jYXRpb24ge1xuICByZXR1cm4gdGhyb3dJZk51bGw8V2ViR0xVbmlmb3JtTG9jYXRpb24+KFxuICAgICAgZ2wsICgpID0+IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCB1bmlmb3JtTmFtZSksXG4gICAgICAndW5pZm9ybSBcIicgKyB1bmlmb3JtTmFtZSArICdcIiBub3QgcHJlc2VudCBpbiBwcm9ncmFtLicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmluZFRleHR1cmVUb1Byb2dyYW1Vbmlmb3JtU2FtcGxlcihcbiAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBwcm9ncmFtOiBXZWJHTFByb2dyYW0sIHRleHR1cmU6IFdlYkdMVGV4dHVyZSxcbiAgICB1bmlmb3JtU2FtcGxlck5hbWU6IHN0cmluZywgdGV4dHVyZVVuaXQ6IG51bWJlcikge1xuICBjYWxsQW5kQ2hlY2soZ2wsICgpID0+IGJpbmRUZXh0dXJlVW5pdChnbCwgdGV4dHVyZSwgdGV4dHVyZVVuaXQpKTtcbiAgY29uc3Qgc2FtcGxlckxvY2F0aW9uID1cbiAgICAgIGdldFByb2dyYW1Vbmlmb3JtTG9jYXRpb25PclRocm93KGdsLCBwcm9ncmFtLCB1bmlmb3JtU2FtcGxlck5hbWUpO1xuICBjYWxsQW5kQ2hlY2soZ2wsICgpID0+IGdsLnVuaWZvcm0xaShzYW1wbGVyTG9jYXRpb24sIHRleHR1cmVVbml0KSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBiaW5kQ2FudmFzVG9GcmFtZWJ1ZmZlcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KSB7XG4gIGNhbGxBbmRDaGVjayhnbCwgKCkgPT4gZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBudWxsKSk7XG4gIGNhbGxBbmRDaGVjayhnbCwgKCkgPT4gZ2wudmlld3BvcnQoMCwgMCwgZ2wuY2FudmFzLndpZHRoLCBnbC5jYW52YXMuaGVpZ2h0KSk7XG4gIGNhbGxBbmRDaGVjayhnbCwgKCkgPT4gZ2wuc2Npc3NvcigwLCAwLCBnbC5jYW52YXMud2lkdGgsIGdsLmNhbnZhcy5oZWlnaHQpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJpbmRDb2xvclRleHR1cmVUb0ZyYW1lYnVmZmVyKFxuICAgIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIHRleHR1cmU6IFdlYkdMVGV4dHVyZSxcbiAgICBmcmFtZWJ1ZmZlcjogV2ViR0xGcmFtZWJ1ZmZlcikge1xuICBjYWxsQW5kQ2hlY2soZ2wsICgpID0+IGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZnJhbWVidWZmZXIpKTtcbiAgY2FsbEFuZENoZWNrKFxuICAgICAgZ2wsXG4gICAgICAoKSA9PiBnbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChcbiAgICAgICAgICBnbC5GUkFNRUJVRkZFUiwgZ2wuQ09MT1JfQVRUQUNITUVOVDAsIGdsLlRFWFRVUkVfMkQsIHRleHR1cmUsIDApKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuYmluZENvbG9yVGV4dHVyZUZyb21GcmFtZWJ1ZmZlcihcbiAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBmcmFtZWJ1ZmZlcjogV2ViR0xGcmFtZWJ1ZmZlcikge1xuICBjYWxsQW5kQ2hlY2soZ2wsICgpID0+IGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZnJhbWVidWZmZXIpKTtcbiAgY2FsbEFuZENoZWNrKFxuICAgICAgZ2wsXG4gICAgICAoKSA9PiBnbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChcbiAgICAgICAgICBnbC5GUkFNRUJVRkZFUiwgZ2wuQ09MT1JfQVRUQUNITUVOVDAsIGdsLlRFWFRVUkVfMkQsIG51bGwsIDApKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlRnJhbWVidWZmZXIoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCkge1xuICBjb25zdCBzdGF0dXMgPSBnbC5jaGVja0ZyYW1lYnVmZmVyU3RhdHVzKGdsLkZSQU1FQlVGRkVSKTtcbiAgaWYgKHN0YXR1cyAhPT0gZ2wuRlJBTUVCVUZGRVJfQ09NUExFVEUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdFcnJvciBiaW5kaW5nIGZyYW1lYnVmZmVyOiAnICsgZ2V0RnJhbWVidWZmZXJFcnJvck1lc3NhZ2UoZ2wsIHN0YXR1cykpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGcmFtZWJ1ZmZlckVycm9yTWVzc2FnZShcbiAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBzdGF0dXM6IG51bWJlcik6IHN0cmluZyB7XG4gIHN3aXRjaCAoc3RhdHVzKSB7XG4gICAgY2FzZSBnbC5GUkFNRUJVRkZFUl9JTkNPTVBMRVRFX0FUVEFDSE1FTlQ6XG4gICAgICByZXR1cm4gJ0ZSQU1FQlVGRkVSX0lOQ09NUExFVEVfQVRUQUNITUVOVCc7XG4gICAgY2FzZSBnbC5GUkFNRUJVRkZFUl9JTkNPTVBMRVRFX01JU1NJTkdfQVRUQUNITUVOVDpcbiAgICAgIHJldHVybiAnRlJBTUVCVUZGRVJfSU5DT01QTEVURV9NSVNTSU5HX0FUVEFDSE1FTlQnO1xuICAgIGNhc2UgZ2wuRlJBTUVCVUZGRVJfSU5DT01QTEVURV9ESU1FTlNJT05TOlxuICAgICAgcmV0dXJuICdGUkFNRUJVRkZFUl9JTkNPTVBMRVRFX0RJTUVOU0lPTlMnO1xuICAgIGNhc2UgZ2wuRlJBTUVCVUZGRVJfVU5TVVBQT1JURUQ6XG4gICAgICByZXR1cm4gJ0ZSQU1FQlVGRkVSX1VOU1VQUE9SVEVEJztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICd1bmtub3duIGVycm9yICcgKyBzdGF0dXM7XG4gIH1cbn1cblxuZnVuY3Rpb24gdGhyb3dJZk51bGw8VD4oXG4gICAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgcmV0dXJuVE9yTnVsbDogKCkgPT4gVCB8IG51bGwsXG4gICAgZmFpbHVyZU1lc3NhZ2U6IHN0cmluZyk6IFQge1xuICBjb25zdCB0T3JOdWxsOiBUfG51bGwgPSBjYWxsQW5kQ2hlY2soZ2wsICgpID0+IHJldHVyblRPck51bGwoKSk7XG4gIGlmICh0T3JOdWxsID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZmFpbHVyZU1lc3NhZ2UpO1xuICB9XG4gIHJldHVybiB0T3JOdWxsIGFzIFQ7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVGV4dHVyZVVuaXQoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgdGV4dHVyZVVuaXQ6IG51bWJlcikge1xuICBjb25zdCBtYXhUZXh0dXJlVW5pdCA9IGdsLk1BWF9DT01CSU5FRF9URVhUVVJFX0lNQUdFX1VOSVRTIC0gMTtcbiAgY29uc3QgZ2xUZXh0dXJlVW5pdCA9IHRleHR1cmVVbml0ICsgZ2wuVEVYVFVSRTA7XG4gIGlmIChnbFRleHR1cmVVbml0IDwgZ2wuVEVYVFVSRTAgfHwgZ2xUZXh0dXJlVW5pdCA+IG1heFRleHR1cmVVbml0KSB7XG4gICAgY29uc3QgdGV4dHVyZVVuaXRSYW5nZSA9ICdbZ2wuVEVYVFVSRTAsIGdsLlRFWFRVUkUnICsgbWF4VGV4dHVyZVVuaXQgKyAnXSc7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd0ZXh0dXJlVW5pdCBtdXN0IGJlIGluICcgKyB0ZXh0dXJlVW5pdFJhbmdlICsgJy4nKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGV4dHVyZVNoYXBlRnJvbUxvZ2ljYWxTaGFwZShcbiAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBsb2dpY2FsU2hhcGU6IG51bWJlcltdLFxuICAgIHByZWZlcnJlZFRleFNoYXBlPzogW251bWJlciwgbnVtYmVyXSk6IFtudW1iZXIsIG51bWJlcl0ge1xuICBjb25zdCBtYXhUZXhTaXplID0gcXVlcnlNYXhUZXh0dXJlU2l6ZShnbCk7XG4gIGNvbnN0IHNpemUgPSB1dGlsLnNpemVGcm9tU2hhcGUobG9naWNhbFNoYXBlKTtcbiAgaWYgKHByZWZlcnJlZFRleFNoYXBlICE9IG51bGwpIHtcbiAgICBjb25zdCBzaXplUHJlZmVycmVkID0gdXRpbC5zaXplRnJvbVNoYXBlKHByZWZlcnJlZFRleFNoYXBlKTtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgc2l6ZSA9PT0gc2l6ZVByZWZlcnJlZCxcbiAgICAgICAgYFNpemUgb2Ygc2hhcGUgKCR7c2l6ZX0pIG11c3QgbWF0Y2ggc2l6ZSBvZiBgICtcbiAgICAgICAgICAgIGBwcmVmZXJyZWRTaGFwZSAoJHtzaXplUHJlZmVycmVkfSlgKTtcbiAgICBpZiAocHJlZmVycmVkVGV4U2hhcGVbMF0gPD0gbWF4VGV4U2l6ZSAmJlxuICAgICAgICBwcmVmZXJyZWRUZXhTaGFwZVsxXSA8PSBtYXhUZXhTaXplKSB7XG4gICAgICByZXR1cm4gcHJlZmVycmVkVGV4U2hhcGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGxvZ2ljYWxTaGFwZS5sZW5ndGggPD0gMSAmJiBzaXplIDw9IG1heFRleFNpemUpIHtcbiAgICByZXR1cm4gW3NpemUsIDFdO1xuICB9IGVsc2UgaWYgKFxuICAgICAgbG9naWNhbFNoYXBlLmxlbmd0aCA9PT0gMiAmJiBsb2dpY2FsU2hhcGVbMF0gPD0gbWF4VGV4U2l6ZSAmJlxuICAgICAgbG9naWNhbFNoYXBlWzFdIDw9IG1heFRleFNpemUpIHtcbiAgICByZXR1cm4gbG9naWNhbFNoYXBlIGFzIFtudW1iZXIsIG51bWJlcl07XG4gIH0gZWxzZSBpZiAoXG4gICAgICBsb2dpY2FsU2hhcGUubGVuZ3RoID09PSAzICYmIGxvZ2ljYWxTaGFwZVswXSA8PSBtYXhUZXhTaXplICYmXG4gICAgICBsb2dpY2FsU2hhcGVbMV0gKiBsb2dpY2FsU2hhcGVbMl0gPD0gbWF4VGV4U2l6ZSkge1xuICAgIHJldHVybiBbbG9naWNhbFNoYXBlWzBdLCBsb2dpY2FsU2hhcGVbMV0gKiBsb2dpY2FsU2hhcGVbMl1dO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB1dGlsLnNpemVUb1NxdWFyaXNoU2hhcGUoc2l6ZSk7XG4gIH1cbn1cbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0IHtBZGROb2RlLCBBcmdNYXhFcXVhbHNOb2RlLCBBcmdNYXhOb2RlLCBDb25jYXQzRE5vZGUsIENvbnZvbHV0aW9uMkROb2RlLCBEaXZpZGVOb2RlLCBFeHBOb2RlLCBGdXNlZExpbmVhckNvbWJpbmF0aW9uTm9kZSwgR3JhcGgsIExvZ05vZGUsIE1hdE11bE5vZGUsIE1heFBvb2xOb2RlLCBNZWFuU3F1YXJlZENvc3ROb2RlLCBNdWx0aXBseU5vZGUsIE5vZGUsIFJlZHVjZVN1bU5vZGUsIFJlTFVOb2RlLCBSZXNoYXBlTm9kZSwgU2lnbW9pZE5vZGUsIFNvZnRtYXhDcm9zc0VudHJvcHlDb3N0Tm9kZSwgU29mdG1heE5vZGUsIFNwbGl0Tm9kZSwgU3F1YXJlTm9kZSwgU3VidHJhY3ROb2RlLCBUYW5ITm9kZSwgVGVuc29yfSBmcm9tICcuL2dyYXBoJztcbmltcG9ydCAqIGFzIGdyYXBoX3V0aWwgZnJvbSAnLi9ncmFwaF91dGlsJztcbmltcG9ydCB7QWRkfSBmcm9tICcuL29wcy9hZGQnO1xuaW1wb3J0IHtBcmdNYXh9IGZyb20gJy4vb3BzL2FyZ21heCc7XG5pbXBvcnQge0FyZ01heEVxdWFsc30gZnJvbSAnLi9vcHMvYXJnbWF4ZXF1YWxzJztcbmltcG9ydCB7Q29uY2F0M0R9IGZyb20gJy4vb3BzL2NvbmNhdDNkJztcbmltcG9ydCB7Q29udm9sdXRpb24yRH0gZnJvbSAnLi9vcHMvY29udm9sdXRpb24nO1xuaW1wb3J0IHtEaXZpZGV9IGZyb20gJy4vb3BzL2RpdmlkZSc7XG5pbXBvcnQge1JlTFUsIFNpZ21vaWQsIFNxdWFyZSwgVGFuSH0gZnJvbSAnLi9vcHMvZWxlbWVudF93aXNlX2FjdGl2YXRpb24nO1xuaW1wb3J0IHtNZWFuU3F1YXJlZENvc3R9IGZyb20gJy4vb3BzL2VsZW1lbnRfd2lzZV9jb3N0JztcbmltcG9ydCB7RXhwfSBmcm9tICcuL29wcy9leHAnO1xuaW1wb3J0IHtMaW5lYXJDb21iaW5hdGlvbn0gZnJvbSAnLi9vcHMvbGluZWFyX2NvbWJpbmF0aW9uJztcbmltcG9ydCB7TG9nfSBmcm9tICcuL29wcy9sb2cnO1xuaW1wb3J0IHtNYXRNdWx9IGZyb20gJy4vb3BzL21hdG11bCc7XG5pbXBvcnQge01heFBvb2x9IGZyb20gJy4vb3BzL21heF9wb29sJztcbmltcG9ydCB7TXVsdGlwbHl9IGZyb20gJy4vb3BzL211bHRpcGx5JztcbmltcG9ydCB7T3BlcmF0aW9ufSBmcm9tICcuL29wcy9vcCc7XG5pbXBvcnQge1JlZHVjZVN1bX0gZnJvbSAnLi9vcHMvcmVkdWNlX3N1bSc7XG5pbXBvcnQge1Jlc2hhcGV9IGZyb20gJy4vb3BzL3Jlc2hhcGUnO1xuaW1wb3J0IHtTb2Z0bWF4LCBTb2Z0bWF4Q3Jvc3NFbnRyb3B5Q29zdH0gZnJvbSAnLi9vcHMvc29mdG1heCc7XG5pbXBvcnQge1NwbGl0fSBmcm9tICcuL29wcy9zcGxpdCc7XG5pbXBvcnQge1N1YnRyYWN0fSBmcm9tICcuL29wcy9zdWJ0cmFjdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBlbWl0RnJvbUdyYXBoTm9kZXMobm9kZXM6IE5vZGVbXSk6IE9wZXJhdGlvbltdIHtcbiAgY29uc3Qgb3BzOiBPcGVyYXRpb25bXSA9IFtdO1xuICBub2Rlcy5mb3JFYWNoKG5vZGUgPT4gQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkob3BzLCBlbWl0T3BGcm9tTm9kZShub2RlKSkpO1xuICByZXR1cm4gb3BzO1xufVxuXG5mdW5jdGlvbiBlbWl0T3BGcm9tTm9kZShub2RlOiBOb2RlKTogT3BlcmF0aW9uW10ge1xuICBpZiAobm9kZSBpbnN0YW5jZW9mIFJlc2hhcGVOb2RlKSB7XG4gICAgcmV0dXJuIFtuZXcgUmVzaGFwZShub2RlLmlucHV0c1tSZXNoYXBlTm9kZS5YXSwgbm9kZS5vdXRwdXQpXTtcbiAgfSBlbHNlIGlmIChub2RlIGluc3RhbmNlb2YgTWF0TXVsTm9kZSkge1xuICAgIGNvbnN0IHgxID0gbm9kZS5pbnB1dHNbTWF0TXVsTm9kZS5YMV07XG4gICAgY29uc3QgeDIgPSBub2RlLmlucHV0c1tNYXRNdWxOb2RlLlgyXTtcbiAgICByZXR1cm4gW25ldyBNYXRNdWwoeDEsIHgyLCBub2RlLm91dHB1dCldO1xuICB9IGVsc2UgaWYgKG5vZGUgaW5zdGFuY2VvZiBDb252b2x1dGlvbjJETm9kZSkge1xuICAgIGNvbnN0IHcgPSBub2RlLmlucHV0c1tDb252b2x1dGlvbjJETm9kZS5XXTtcbiAgICBjb25zdCB4ID0gbm9kZS5pbnB1dHNbQ29udm9sdXRpb24yRE5vZGUuWF07XG4gICAgY29uc3QgYiA9IG5vZGUuaW5wdXRzW0NvbnZvbHV0aW9uMkROb2RlLkJdO1xuICAgIHJldHVybiBbbmV3IENvbnZvbHV0aW9uMkQoXG4gICAgICAgIHcsIHgsIGIsIG5vZGUub3V0cHV0LCBub2RlLmZpZWxkU2l6ZSwgbm9kZS5vdXRwdXREZXB0aCwgbm9kZS5zdHJpZGUsXG4gICAgICAgIG5vZGUuemVyb1BhZCldO1xuICB9IGVsc2UgaWYgKG5vZGUgaW5zdGFuY2VvZiBNYXhQb29sTm9kZSkge1xuICAgIGNvbnN0IHggPSBub2RlLmlucHV0c1tNYXhQb29sTm9kZS5YXTtcbiAgICByZXR1cm4gW25ldyBNYXhQb29sKFxuICAgICAgICB4LCBub2RlLm91dHB1dCwgbm9kZS5maWVsZFNpemUsIG5vZGUuc3RyaWRlLCBub2RlLnplcm9QYWQpXTtcbiAgfSBlbHNlIGlmIChub2RlIGluc3RhbmNlb2YgRXhwTm9kZSkge1xuICAgIHJldHVybiBbbmV3IEV4cChub2RlLmlucHV0c1tFeHBOb2RlLlhdLCBub2RlLm91dHB1dCldO1xuICB9IGVsc2UgaWYgKG5vZGUgaW5zdGFuY2VvZiBMb2dOb2RlKSB7XG4gICAgcmV0dXJuIFtuZXcgTG9nKG5vZGUuaW5wdXRzW0xvZ05vZGUuWF0sIG5vZGUub3V0cHV0KV07XG4gIH0gZWxzZSBpZiAobm9kZSBpbnN0YW5jZW9mIFJlTFVOb2RlKSB7XG4gICAgcmV0dXJuIFtuZXcgUmVMVShub2RlLmlucHV0c1tSZUxVTm9kZS5YXSwgbm9kZS5vdXRwdXQpXTtcbiAgfSBlbHNlIGlmIChub2RlIGluc3RhbmNlb2YgVGFuSE5vZGUpIHtcbiAgICByZXR1cm4gW25ldyBUYW5IKG5vZGUuaW5wdXRzW1RhbkhOb2RlLlhdLCBub2RlLm91dHB1dCldO1xuICB9IGVsc2UgaWYgKG5vZGUgaW5zdGFuY2VvZiBTaWdtb2lkTm9kZSkge1xuICAgIHJldHVybiBbbmV3IFNpZ21vaWQobm9kZS5pbnB1dHNbU2lnbW9pZE5vZGUuWF0sIG5vZGUub3V0cHV0KV07XG4gIH0gZWxzZSBpZiAobm9kZSBpbnN0YW5jZW9mIFNvZnRtYXhDcm9zc0VudHJvcHlDb3N0Tm9kZSkge1xuICAgIGNvbnN0IHggPSBub2RlLmlucHV0c1tTb2Z0bWF4Q3Jvc3NFbnRyb3B5Q29zdE5vZGUuWF07XG4gICAgY29uc3QgdGFyZ2V0ID0gbm9kZS5pbnB1dHNbU29mdG1heENyb3NzRW50cm9weUNvc3ROb2RlLlRBUkdFVF07XG4gICAgcmV0dXJuIFtuZXcgU29mdG1heENyb3NzRW50cm9weUNvc3QoeCwgdGFyZ2V0LCBub2RlLm91dHB1dCldO1xuICB9IGVsc2UgaWYgKG5vZGUgaW5zdGFuY2VvZiBTb2Z0bWF4Tm9kZSkge1xuICAgIHJldHVybiBbbmV3IFNvZnRtYXgobm9kZS5pbnB1dHNbU29mdG1heE5vZGUuWF0sIG5vZGUub3V0cHV0KV07XG4gIH0gZWxzZSBpZiAobm9kZSBpbnN0YW5jZW9mIE1lYW5TcXVhcmVkQ29zdE5vZGUpIHtcbiAgICBjb25zdCBsYWJlbCA9IG5vZGUuaW5wdXRzW01lYW5TcXVhcmVkQ29zdE5vZGUuTEFCRUxdO1xuICAgIGNvbnN0IHByZWRpY3Rpb24gPSBub2RlLmlucHV0c1tNZWFuU3F1YXJlZENvc3ROb2RlLlBSRURJQ1RJT05dO1xuICAgIHJldHVybiBbbmV3IE1lYW5TcXVhcmVkQ29zdChsYWJlbCwgcHJlZGljdGlvbiwgbm9kZS5vdXRwdXQpXTtcbiAgfSBlbHNlIGlmIChub2RlIGluc3RhbmNlb2YgQXJnTWF4RXF1YWxzTm9kZSkge1xuICAgIHJldHVybiBbbmV3IEFyZ01heEVxdWFscyhcbiAgICAgICAgbm9kZS5pbnB1dHNbQXJnTWF4RXF1YWxzTm9kZS5YMV0sIG5vZGUuaW5wdXRzW0FyZ01heEVxdWFsc05vZGUuWDJdLFxuICAgICAgICBub2RlLm91dHB1dCldO1xuICB9IGVsc2UgaWYgKG5vZGUgaW5zdGFuY2VvZiBBcmdNYXhOb2RlKSB7XG4gICAgcmV0dXJuIFtuZXcgQXJnTWF4KG5vZGUueCwgbm9kZS5vdXRwdXQpXTtcbiAgfSBlbHNlIGlmIChub2RlIGluc3RhbmNlb2YgRnVzZWRMaW5lYXJDb21iaW5hdGlvbk5vZGUpIHtcbiAgICByZXR1cm4gW25ldyBMaW5lYXJDb21iaW5hdGlvbihcbiAgICAgICAgbm9kZS5pbnB1dHNbRnVzZWRMaW5lYXJDb21iaW5hdGlvbk5vZGUuVDFdLFxuICAgICAgICBub2RlLmlucHV0c1tGdXNlZExpbmVhckNvbWJpbmF0aW9uTm9kZS5UMl0sXG4gICAgICAgIG5vZGUuaW5wdXRzW0Z1c2VkTGluZWFyQ29tYmluYXRpb25Ob2RlLkMxXSxcbiAgICAgICAgbm9kZS5pbnB1dHNbRnVzZWRMaW5lYXJDb21iaW5hdGlvbk5vZGUuQzJdLCBub2RlLm91dHB1dCldO1xuICB9IGVsc2UgaWYgKG5vZGUgaW5zdGFuY2VvZiBDb25jYXQzRE5vZGUpIHtcbiAgICByZXR1cm4gW25ldyBDb25jYXQzRChcbiAgICAgICAgbm9kZS5pbnB1dHNbQ29uY2F0M0ROb2RlLlgxXSwgbm9kZS5pbnB1dHNbQ29uY2F0M0ROb2RlLlgyXSwgbm9kZS5heGlzLFxuICAgICAgICBub2RlLm91dHB1dCldO1xuICB9IGVsc2UgaWYgKG5vZGUgaW5zdGFuY2VvZiBTcXVhcmVOb2RlKSB7XG4gICAgcmV0dXJuIFtuZXcgU3F1YXJlKG5vZGUuaW5wdXRzW1NxdWFyZU5vZGUuWF0sIG5vZGUub3V0cHV0KV07XG4gIH0gZWxzZSBpZiAobm9kZSBpbnN0YW5jZW9mIEFkZE5vZGUpIHtcbiAgICByZXR1cm4gW25ldyBBZGQoXG4gICAgICAgIG5vZGUuaW5wdXRzW0FkZE5vZGUuVDFdLCBub2RlLmlucHV0c1tBZGROb2RlLlQyXSwgbm9kZS5vdXRwdXQpXTtcbiAgfSBlbHNlIGlmIChub2RlIGluc3RhbmNlb2YgU3VidHJhY3ROb2RlKSB7XG4gICAgcmV0dXJuIFtuZXcgU3VidHJhY3QoXG4gICAgICAgIG5vZGUuaW5wdXRzW1N1YnRyYWN0Tm9kZS5UMV0sIG5vZGUuaW5wdXRzW1N1YnRyYWN0Tm9kZS5UMl0sXG4gICAgICAgIG5vZGUub3V0cHV0KV07XG4gIH0gZWxzZSBpZiAobm9kZSBpbnN0YW5jZW9mIE11bHRpcGx5Tm9kZSkge1xuICAgIHJldHVybiBbbmV3IE11bHRpcGx5KFxuICAgICAgICBub2RlLmlucHV0c1tNdWx0aXBseU5vZGUuVDFdLCBub2RlLmlucHV0c1tNdWx0aXBseU5vZGUuVDJdLFxuICAgICAgICBub2RlLm91dHB1dCldO1xuICB9IGVsc2UgaWYgKG5vZGUgaW5zdGFuY2VvZiBEaXZpZGVOb2RlKSB7XG4gICAgcmV0dXJuIFtuZXcgRGl2aWRlKFxuICAgICAgICBub2RlLmlucHV0c1tEaXZpZGVOb2RlLlQxXSwgbm9kZS5pbnB1dHNbRGl2aWRlTm9kZS5UMl0sIG5vZGUub3V0cHV0KV07XG4gIH0gZWxzZSBpZiAobm9kZSBpbnN0YW5jZW9mIFNwbGl0Tm9kZSkge1xuICAgIHJldHVybiBbbmV3IFNwbGl0KG5vZGUuaW5wdXRzW1NwbGl0Tm9kZS5YXSwgbm9kZS5vdXRwdXRzKV07XG4gIH0gZWxzZSBpZiAobm9kZSBpbnN0YW5jZW9mIFJlZHVjZVN1bU5vZGUpIHtcbiAgICByZXR1cm4gW25ldyBSZWR1Y2VTdW0obm9kZS5pbnB1dHNbUmVkdWNlU3VtTm9kZS5YXSwgbm9kZS5vdXRwdXQpXTtcbiAgfSBlbHNlIGlmIChncmFwaF91dGlsLmlzSW5wdXROb2RlKG5vZGUpKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IGVsc2Uge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICB0aHJvdyBFcnJvcignVW5zdXBwb3J0ZWQgbm9kZSB0eXBlOiAnICsgKG5vZGUuY29uc3RydWN0b3IgYXMgYW55KS5uYW1lKTtcbiAgfVxufVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnLi4vZ3JhcGgnO1xuaW1wb3J0ICogYXMgZ3JhcGhfdXRpbCBmcm9tICcuLi9ncmFwaF91dGlsJztcbmltcG9ydCB7TkRBcnJheU1hdGh9IGZyb20gJy4uL21hdGgvbWF0aCc7XG5pbXBvcnQge05EQXJyYXksIFNjYWxhcn0gZnJvbSAnLi4vbWF0aC9uZGFycmF5JztcbmltcG9ydCB7VGVuc29yQXJyYXlNYXB9IGZyb20gJy4uL3RlbnNvcl9hcnJheV9tYXAnO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuLi91dGlsJztcblxuaW1wb3J0IHtPcGVyYXRpb259IGZyb20gJy4vb3AnO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIEFkZCBleHRlbmRzIE9wZXJhdGlvbiB7XG4gIHByaXZhdGUgZHlTaXplU2NhbGFyOiBTY2FsYXI7XG5cbiAgLyoqIEVsZW1lbnQtd2lzZSBhZGQgb3BlcmF0aW9uLiBCcm9hZGNhc3RzIGlmIG9uZSBvZiB0aGUgdGVuc29ycyBpcyBzY2FsYXIuICovXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgcHJpdmF0ZSB4MVRlbnNvcjogVGVuc29yLCBwcml2YXRlIHgyVGVuc29yOiBUZW5zb3IsXG4gICAgICBwcml2YXRlIHlUZW5zb3I6IFRlbnNvcikge1xuICAgIHN1cGVyKCk7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIHV0aWwuc2l6ZUZyb21TaGFwZSh4MVRlbnNvci5zaGFwZSkgPT09IDEgfHxcbiAgICAgICAgICAgIHV0aWwuc2l6ZUZyb21TaGFwZSh4MlRlbnNvci5zaGFwZSkgPT09IDEgfHxcbiAgICAgICAgICAgIHV0aWwuYXJyYXlzRXF1YWwoeDFUZW5zb3Iuc2hhcGUsIHgyVGVuc29yLnNoYXBlKSxcbiAgICAgICAgJ09uZSBvZiB0MSBvciB0MiBtdXN0IGJlIGEgc2NhbGFyLCBvciB0MSBhbmQgdDIgbXVzdCBoYXZlICcgK1xuICAgICAgICAgICAgJ3RoZSBzYW1lIHNoYXBlJyk7XG4gIH1cblxuICBmZWVkRm9yd2FyZChtYXRoOiBOREFycmF5TWF0aCwgaW5mZXJlbmNlQXJyYXlzOiBUZW5zb3JBcnJheU1hcCkge1xuICAgIGNvbnN0IHgxID0gaW5mZXJlbmNlQXJyYXlzLmdldCh0aGlzLngxVGVuc29yKTtcbiAgICBjb25zdCB4MiA9IGluZmVyZW5jZUFycmF5cy5nZXQodGhpcy54MlRlbnNvcik7XG5cbiAgICBtYXRoLnNjb3BlKChrZWVwKSA9PiB7XG4gICAgICBsZXQgcmVzdWx0OiBOREFycmF5O1xuICAgICAgaWYgKHV0aWwuaXNTY2FsYXJTaGFwZSh4MS5zaGFwZSkpIHtcbiAgICAgICAgcmVzdWx0ID0gbWF0aC5zY2FsYXJQbHVzQXJyYXkoeDEsIHgyKTtcbiAgICAgIH0gZWxzZSBpZiAodXRpbC5pc1NjYWxhclNoYXBlKHgyLnNoYXBlKSkge1xuICAgICAgICByZXN1bHQgPSBtYXRoLnNjYWxhclBsdXNBcnJheSh4MiwgeDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gbWF0aC5hZGQoeDEsIHgyKTtcbiAgICAgIH1cbiAgICAgIGluZmVyZW5jZUFycmF5cy5zZXQodGhpcy55VGVuc29yLCBrZWVwKHJlc3VsdCkpO1xuICAgIH0pO1xuICB9XG5cbiAgYmFja1Byb3AoXG4gICAgICBtYXRoOiBOREFycmF5TWF0aCwgaW5mZXJlbmNlQXJyYXlzOiBUZW5zb3JBcnJheU1hcCxcbiAgICAgIGdyYWRpZW50QXJyYXlzOiBUZW5zb3JBcnJheU1hcCkge1xuICAgIGNvbnN0IHgxID0gaW5mZXJlbmNlQXJyYXlzLmdldCh0aGlzLngxVGVuc29yKTtcbiAgICBjb25zdCB4MiA9IGluZmVyZW5jZUFycmF5cy5nZXQodGhpcy54MlRlbnNvcik7XG4gICAgY29uc3QgZHkgPSBncmFkaWVudEFycmF5cy5nZXQodGhpcy55VGVuc29yKTtcblxuICAgIG1hdGguc2NvcGUoKGtlZXApID0+IHtcbiAgICAgIGlmIChncmFwaF91dGlsLnNob3VsZEJhY2tQcm9wKHRoaXMueDFUZW5zb3IpKSB7XG4gICAgICAgIGlmICh1dGlsLmlzU2NhbGFyU2hhcGUodGhpcy54MVRlbnNvci5zaGFwZSkpIHtcbiAgICAgICAgICBjb25zdCBzdW0gPSBtYXRoLnN1bShkeSk7XG4gICAgICAgICAgaWYgKHRoaXMuZHlTaXplU2NhbGFyID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZHlTaXplU2NhbGFyID0gU2NhbGFyLm5ldyhkeS5zaXplKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZ3JhZGllbnRBcnJheXMuc2V0KFxuICAgICAgICAgICAgICB0aGlzLngxVGVuc29yLCBrZWVwKG1hdGguZGl2aWRlKHN1bSwgdGhpcy5keVNpemVTY2FsYXIpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ3JhZGllbnRBcnJheXMuc2V0KHRoaXMueDFUZW5zb3IsIGR5KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZ3JhcGhfdXRpbC5zaG91bGRCYWNrUHJvcCh0aGlzLngyVGVuc29yKSkge1xuICAgICAgICBpZiAodXRpbC5pc1NjYWxhclNoYXBlKHRoaXMueDJUZW5zb3Iuc2hhcGUpKSB7XG4gICAgICAgICAgY29uc3Qgc3VtID0gbWF0aC5zdW0oZHkpO1xuICAgICAgICAgIGlmICh0aGlzLmR5U2l6ZVNjYWxhciA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmR5U2l6ZVNjYWxhciA9IFNjYWxhci5uZXcoZHkuc2l6ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGdyYWRpZW50QXJyYXlzLnNldChcbiAgICAgICAgICAgICAgdGhpcy54MlRlbnNvciwga2VlcChtYXRoLmRpdmlkZShzdW0sIHRoaXMuZHlTaXplU2NhbGFyKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdyYWRpZW50QXJyYXlzLnNldCh0aGlzLngyVGVuc29yLCBkeSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgaWYgKHRoaXMuZHlTaXplU2NhbGFyICE9IG51bGwpIHtcbiAgICAgIHRoaXMuZHlTaXplU2NhbGFyLmRpc3Bvc2UoKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4uL2dyYXBoJztcbmltcG9ydCB7TkRBcnJheU1hdGh9IGZyb20gJy4uL21hdGgvbWF0aCc7XG5pbXBvcnQge0FycmF5MUQsIEFycmF5MkQsIE5EQXJyYXksIFNjYWxhcn0gZnJvbSAnLi4vbWF0aC9uZGFycmF5JztcbmltcG9ydCB7VGVuc29yQXJyYXlNYXB9IGZyb20gJy4uL3RlbnNvcl9hcnJheV9tYXAnO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuLi91dGlsJztcblxuaW1wb3J0IHtPcGVyYXRpb259IGZyb20gJy4vb3AnO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIEFyZ01heCBleHRlbmRzIE9wZXJhdGlvbiB7XG4gIC8qKlxuICAgKiBBbiBBcmdNYXggb3BlcmF0aW9uLlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB4VGVuc29yOiBUZW5zb3IsIHByaXZhdGUgeVRlbnNvcjogVGVuc29yKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGZlZWRGb3J3YXJkKG1hdGg6IE5EQXJyYXlNYXRoLCBpbmZlcmVuY2VBcnJheXM6IFRlbnNvckFycmF5TWFwKSB7XG4gICAgY29uc3QgeCA9IGluZmVyZW5jZUFycmF5cy5nZXQodGhpcy54VGVuc29yKTtcbiAgICBtYXRoLnNjb3BlKChrZWVwKSA9PiB7XG4gICAgICBpbmZlcmVuY2VBcnJheXMuc2V0KHRoaXMueVRlbnNvciwga2VlcChtYXRoLmFyZ01heCh4KSkpO1xuICAgIH0pO1xuICB9XG5cbiAgYmFja1Byb3AoXG4gICAgICBtYXRoOiBOREFycmF5TWF0aCwgaW5mZXJlbmNlQXJyYXlzOiBUZW5zb3JBcnJheU1hcCxcbiAgICAgIGdyYWRpZW50QXJyYXlzOiBUZW5zb3JBcnJheU1hcCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQXJnTWF4IGJhY2twcm9wIHVuaW1wbGVtZW50ZWQnKTtcbiAgfVxufVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnLi4vZ3JhcGgnO1xuaW1wb3J0IHtOREFycmF5TWF0aH0gZnJvbSAnLi4vbWF0aC9tYXRoJztcbmltcG9ydCB7QXJyYXkxRCwgQXJyYXkyRCwgTkRBcnJheSwgU2NhbGFyfSBmcm9tICcuLi9tYXRoL25kYXJyYXknO1xuaW1wb3J0IHtUZW5zb3JBcnJheU1hcH0gZnJvbSAnLi4vdGVuc29yX2FycmF5X21hcCc7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4uL3V0aWwnO1xuXG5pbXBvcnQge09wZXJhdGlvbn0gZnJvbSAnLi9vcCc7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgQXJnTWF4RXF1YWxzIGV4dGVuZHMgT3BlcmF0aW9uIHtcbiAgLyoqXG4gICAqIEFuIEFyZ01heEVxdWFscyBvcGVyYXRpb24uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICAgIHByaXZhdGUgeDFUZW5zb3I6IFRlbnNvciwgcHJpdmF0ZSB4MlRlbnNvcjogVGVuc29yLFxuICAgICAgcHJpdmF0ZSB5VGVuc29yOiBUZW5zb3IpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgZmVlZEZvcndhcmQobWF0aDogTkRBcnJheU1hdGgsIGluZmVyZW5jZUFycmF5czogVGVuc29yQXJyYXlNYXApIHtcbiAgICBjb25zdCB4MSA9IGluZmVyZW5jZUFycmF5cy5nZXQodGhpcy54MVRlbnNvcik7XG4gICAgY29uc3QgeDIgPSBpbmZlcmVuY2VBcnJheXMuZ2V0KHRoaXMueDJUZW5zb3IpO1xuICAgIG1hdGguc2NvcGUoKGtlZXApID0+IHtcbiAgICAgIGluZmVyZW5jZUFycmF5cy5zZXQodGhpcy55VGVuc29yLCBrZWVwKG1hdGguYXJnTWF4RXF1YWxzKHgxLCB4MikpKTtcbiAgICB9KTtcbiAgfVxuXG4gIGJhY2tQcm9wKFxuICAgICAgbWF0aDogTkRBcnJheU1hdGgsIGluZmVyZW5jZUFycmF5czogVGVuc29yQXJyYXlNYXAsXG4gICAgICBncmFkaWVudEFycmF5czogVGVuc29yQXJyYXlNYXApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0FyZ01heEVxdWFscyBiYWNrcHJvcCB1bmltcGxlbWVudGVkJyk7XG4gIH1cbn1cbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4uL2dyYXBoJztcbmltcG9ydCAqIGFzIGNvbmNhdDNkX3V0aWwgZnJvbSAnLi4vbWF0aC9jb25jYXQzZF91dGlsJztcbmltcG9ydCB7TkRBcnJheU1hdGh9IGZyb20gJy4uL21hdGgvbWF0aCc7XG5pbXBvcnQge0FycmF5M0QsIE5EQXJyYXl9IGZyb20gJy4uL21hdGgvbmRhcnJheSc7XG5pbXBvcnQge1RlbnNvckFycmF5TWFwfSBmcm9tICcuLi90ZW5zb3JfYXJyYXlfbWFwJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi4vdXRpbCc7XG5cbmltcG9ydCB7T3BlcmF0aW9ufSBmcm9tICcuL29wJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBDb25jYXQzRCBleHRlbmRzIE9wZXJhdGlvbiB7XG4gIC8qKlxuICAgKiBBIENvbmNhdCAzRCBvcGVyYXRpb24uXG4gICAqXG4gICAqIENvbmNhdHMgdHdvIDNEIHRlbnNvcnMgYWxvbmcgYW4gYXhpcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgcHJpdmF0ZSB4MVRlbnNvcjogVGVuc29yLCBwcml2YXRlIHgyVGVuc29yOiBUZW5zb3IsIHByaXZhdGUgYXhpczogbnVtYmVyLFxuICAgICAgcHJpdmF0ZSB5VGVuc29yOiBUZW5zb3IpIHtcbiAgICBzdXBlcigpO1xuICAgIGNvbmNhdDNkX3V0aWwuYXNzZXJ0Q29uY2F0M0RTaGFwZXNNYXRjaChcbiAgICAgICAgeDFUZW5zb3Iuc2hhcGUsIHgyVGVuc29yLnNoYXBlLCBheGlzKTtcbiAgfVxuXG4gIGZlZWRGb3J3YXJkKG1hdGg6IE5EQXJyYXlNYXRoLCBpbmZlcmVuY2VBcnJheXM6IFRlbnNvckFycmF5TWFwKSB7XG4gICAgY29uc3QgeDEgPSBpbmZlcmVuY2VBcnJheXMuZ2V0KHRoaXMueDFUZW5zb3IpIGFzIEFycmF5M0Q7XG4gICAgY29uc3QgeDIgPSBpbmZlcmVuY2VBcnJheXMuZ2V0KHRoaXMueDJUZW5zb3IpIGFzIEFycmF5M0Q7XG5cbiAgICBtYXRoLnNjb3BlKChrZWVwKSA9PiB7XG4gICAgICBjb25zdCBjb25jYXRSZXN1bHQgPSBtYXRoLmNvbmNhdDNEKHgxLCB4MiwgdGhpcy5heGlzKTtcbiAgICAgIGluZmVyZW5jZUFycmF5cy5zZXQodGhpcy55VGVuc29yLCBrZWVwKGNvbmNhdFJlc3VsdCkpO1xuICAgIH0pO1xuICB9XG5cbiAgYmFja1Byb3AoXG4gICAgICBtYXRoOiBOREFycmF5TWF0aCwgaW5mZXJlbmNlQXJyYXlzOiBUZW5zb3JBcnJheU1hcCxcbiAgICAgIGdyYWRpZW50QXJyYXlzOiBUZW5zb3JBcnJheU1hcCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQ29uY2F0M0QgYmFja3Byb3Agbm90IGltcGxlbWVudGVkLicpO1xuICB9XG59XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCB7VGVuc29yfSBmcm9tICcuLi9ncmFwaCc7XG5pbXBvcnQgKiBhcyBjb252X3V0aWwgZnJvbSAnLi4vbWF0aC9jb252X3V0aWwnO1xuaW1wb3J0IHtNYXRyaXhPcmllbnRhdGlvbiwgTkRBcnJheU1hdGh9IGZyb20gJy4uL21hdGgvbWF0aCc7XG5pbXBvcnQge0FycmF5MUQsIEFycmF5MkQsIEFycmF5M0QsIEFycmF5NEQsIE5EQXJyYXksIFNjYWxhcn0gZnJvbSAnLi4vbWF0aC9uZGFycmF5JztcbmltcG9ydCB7VGVuc29yQXJyYXlNYXB9IGZyb20gJy4uL3RlbnNvcl9hcnJheV9tYXAnO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuLi91dGlsJztcblxuaW1wb3J0IHtPcGVyYXRpb259IGZyb20gJy4vb3AnO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbnZvbHV0aW9uMkQgZXh0ZW5kcyBPcGVyYXRpb24ge1xuICBwcml2YXRlIHplcm9QYWQ6IG51bWJlcjtcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIGNvbnZvbHV0aW9uIG9wIHdpdGggdGhlIHNwZWNpZmllZCBwcm9wZXJ0aWVzLlxuICAgKlxuICAgKiBAcGFyYW0gaW5wdXRTaGFwZSBUaGUgc2hhcGUgb2YgdGhlIGlucHV0IG5kYXJyYXkuXG4gICAqIEBwYXJhbSBmaWVsZFNpemUgVGhlIHNpemUgb2YgdGhlIGZpbHRlciAocm93cy9jb2xzIG9mIHNsaWRpbmcgd2luZG93KS5cbiAgICogQHBhcmFtIG91dHB1dERlcHRoIFRoZSBkZXB0aCBvZiB0aGUgb3V0cHV0IChOdW1iZXIgb2YgZmlsdGVycykuXG4gICAqIEBwYXJhbSBzdHJpZGUgSG93IG1hbnkgcGl4ZWxzIHRvIHNoaWZ0IHRoZSBmaWx0ZXIgYnkgd2hlbiBzbGlkaW5nLlxuICAgKiAgICAgRGVmYXVsdHMgdG8gMS5cbiAgICogQHBhcmFtIHplcm9QYWQgSG93IG1hbnkgcGl4ZWxzIHRvIHBhZCB0aGUgaW5wdXQgZnJvbSBlYWNoIHNpZGUuIERlZmF1bHRzIHRvXG4gICAqICAgICBhIHZhbHVlIHNvIHRoYXQgdGhlIHJvd3MgYW5kIGNvbHVtbnMgb2YgdGhlIG91dHB1dCBuZGFycmF5IGlzXG4gICAqICAgICB0aGUgc2FtZSBhcyB0aGUgaW5wdXQgbmRhcnJheS5cbiAgICogQHBhcmFtIHdlaWdodHMgT3B0aW9uYWwuIFRoZSB3ZWlnaHRzIG9mIHRoZSBmaWx0ZXJzLlxuICAgKiBAcGFyYW0gYmlhc2VzIE9wdGlvbmFsLiBUaGUgYmlhcyB0ZXJtcyBvZiB0aGUgZmlsdGVycy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgcHJpdmF0ZSB3VGVuc29yOiBUZW5zb3IsIHByaXZhdGUgeFRlbnNvcjogVGVuc29yLCBwcml2YXRlIGJUZW5zb3I6IFRlbnNvcixcbiAgICAgIHByaXZhdGUgeVRlbnNvcjogVGVuc29yLCBwcml2YXRlIGZpZWxkU2l6ZTogbnVtYmVyLFxuICAgICAgcHJpdmF0ZSBvdXRwdXREZXB0aDogbnVtYmVyLCBwcml2YXRlIHN0cmlkZSA9IDEsIHplcm9QYWQ/OiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuYXNzZXJ0V2VpZ2h0c1NoYXBlKHdUZW5zb3Iuc2hhcGUpO1xuICAgIHRoaXMuemVyb1BhZCA9IHplcm9QYWQgIT0gbnVsbCA/XG4gICAgICAgIHplcm9QYWQgOlxuICAgICAgICBjb252X3V0aWwuY29tcHV0ZURlZmF1bHRQYWQoXG4gICAgICAgICAgICB0aGlzLnhUZW5zb3Iuc2hhcGUgYXMgW251bWJlciwgbnVtYmVyLCBudW1iZXJdLCB0aGlzLmZpZWxkU2l6ZSxcbiAgICAgICAgICAgIHRoaXMuc3RyaWRlKTtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgdXRpbC5pc0ludCh0aGlzLnplcm9QYWQpLFxuICAgICAgICBgVGhlIHplcm8gcGFkZGluZyAoJHt0aGlzLnplcm9QYWR9KSBtdXN0IGJlIGFuIGludGVnZXIuIENoYW5nZSB0aGUgYCArXG4gICAgICAgICAgICBgc3RyaWRlIGFuZC9vciB6ZXJvIHBhZCBwYXJhbWV0ZXJzYCk7XG4gIH1cblxuICBmZWVkRm9yd2FyZChtYXRoOiBOREFycmF5TWF0aCwgaW5mZXJlbmNlQXJyYXlzOiBUZW5zb3JBcnJheU1hcCkge1xuICAgIGNvbnN0IHdlaWdodHMgPSBpbmZlcmVuY2VBcnJheXMuZ2V0KHRoaXMud1RlbnNvcikgYXMgQXJyYXk0RDtcbiAgICBjb25zdCBiaWFzZXMgPSBpbmZlcmVuY2VBcnJheXMuZ2V0KHRoaXMuYlRlbnNvcikgYXMgQXJyYXkxRDtcbiAgICBjb25zdCB4ID0gaW5mZXJlbmNlQXJyYXlzLmdldCh0aGlzLnhUZW5zb3IpIGFzIEFycmF5M0Q7XG5cbiAgICBtYXRoLnNjb3BlKChrZWVwKSA9PiB7XG4gICAgICBpbmZlcmVuY2VBcnJheXMuc2V0KFxuICAgICAgICAgIHRoaXMueVRlbnNvcixcbiAgICAgICAgICBrZWVwKG1hdGguY29udjJkKHgsIHdlaWdodHMsIGJpYXNlcywgdGhpcy5zdHJpZGUsIHRoaXMuemVyb1BhZCkpKTtcbiAgICB9KTtcbiAgfVxuXG4gIGJhY2tQcm9wKFxuICAgICAgbWF0aDogTkRBcnJheU1hdGgsIGluZmVyZW5jZUFycmF5czogVGVuc29yQXJyYXlNYXAsXG4gICAgICBncmFkaWVudEFycmF5czogVGVuc29yQXJyYXlNYXApIHtcbiAgICBjb25zdCB3ZWlnaHRzID0gaW5mZXJlbmNlQXJyYXlzLmdldCh0aGlzLndUZW5zb3IpIGFzIEFycmF5NEQ7XG4gICAgY29uc3QgeCA9IGluZmVyZW5jZUFycmF5cy5nZXQodGhpcy54VGVuc29yKSBhcyBBcnJheTNEO1xuICAgIGNvbnN0IGR5ID0gZ3JhZGllbnRBcnJheXMuZ2V0KHRoaXMueVRlbnNvcikgYXMgQXJyYXkzRDtcblxuICAgIG1hdGguc2NvcGUoKGtlZXApID0+IHtcbiAgICAgIGNvbnN0IHtkdywgZGIsIGR4fSA9XG4gICAgICAgICAgbWF0aC5jb252MmRCYWNrUHJvcCh4LCBkeSwgd2VpZ2h0cywgdGhpcy5zdHJpZGUsIHRoaXMuemVyb1BhZCk7XG4gICAgICBncmFkaWVudEFycmF5cy5zZXQodGhpcy53VGVuc29yLCBrZWVwKGR3KSk7XG4gICAgICBncmFkaWVudEFycmF5cy5zZXQodGhpcy5iVGVuc29yLCBrZWVwKGRiKSk7XG4gICAgICBncmFkaWVudEFycmF5cy5zZXQodGhpcy54VGVuc29yLCBrZWVwKGR4KSk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGFzc2VydFdlaWdodHNTaGFwZSh3ZWlnaHRzU2hhcGU6IG51bWJlcltdKSB7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIHdlaWdodHNTaGFwZVswXSA9PT0gdGhpcy5maWVsZFNpemUgJiZcbiAgICAgICAgICAgIHdlaWdodHNTaGFwZVsxXSA9PT0gdGhpcy5maWVsZFNpemUgJiZcbiAgICAgICAgICAgIHdlaWdodHNTaGFwZVsyXSA9PT0gdGhpcy54VGVuc29yLnNoYXBlWzJdICYmXG4gICAgICAgICAgICB3ZWlnaHRzU2hhcGVbM10gPT09IHRoaXMub3V0cHV0RGVwdGgsXG4gICAgICAgIGB3ZWlnaHRzIG11c3QgYmUgb2Ygc2hhcGUgWyR7dGhpcy5maWVsZFNpemV9LCR7dGhpcy5maWVsZFNpemV9LGAgK1xuICAgICAgICAgICAgYCR7dGhpcy54VGVuc29yLnNoYXBlWzJdfSwke3RoaXMub3V0cHV0RGVwdGh9XSBidXQgdGhleSBhcmUgb2ZgICtcbiAgICAgICAgICAgIGBzaGFwZSBbJHt3ZWlnaHRzU2hhcGV9XWApO1xuICB9XG59XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCB7VGVuc29yfSBmcm9tICcuLi9ncmFwaCc7XG5pbXBvcnQgKiBhcyBncmFwaF91dGlsIGZyb20gJy4uL2dyYXBoX3V0aWwnO1xuaW1wb3J0IHtOREFycmF5TWF0aH0gZnJvbSAnLi4vbWF0aC9tYXRoJztcbmltcG9ydCB7TkRBcnJheSwgU2NhbGFyfSBmcm9tICcuLi9tYXRoL25kYXJyYXknO1xuaW1wb3J0IHtUZW5zb3JBcnJheU1hcH0gZnJvbSAnLi4vdGVuc29yX2FycmF5X21hcCc7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4uL3V0aWwnO1xuXG5pbXBvcnQge09wZXJhdGlvbn0gZnJvbSAnLi9vcCc7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgRGl2aWRlIGV4dGVuZHMgT3BlcmF0aW9uIHtcbiAgcHJpdmF0ZSBvbmVzOiBOREFycmF5O1xuXG4gIC8qKlxuICAgKiBFbGVtZW50LXdpc2UgZGl2aWRlIG9wZXJhdGlvbi4gQnJvYWRjYXN0cyBpZiBvbmUgb2YgdGhlIHRlbnNvcnMgaXNcbiAgICogc2NhbGFyLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgICBwcml2YXRlIHgxVGVuc29yOiBUZW5zb3IsIHByaXZhdGUgeDJUZW5zb3I6IFRlbnNvcixcbiAgICAgIHByaXZhdGUgeVRlbnNvcjogVGVuc29yKSB7XG4gICAgc3VwZXIoKTtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgdXRpbC5zaXplRnJvbVNoYXBlKHgxVGVuc29yLnNoYXBlKSA9PT0gMSB8fFxuICAgICAgICAgICAgdXRpbC5zaXplRnJvbVNoYXBlKHgyVGVuc29yLnNoYXBlKSA9PT0gMSB8fFxuICAgICAgICAgICAgdXRpbC5hcnJheXNFcXVhbCh4MVRlbnNvci5zaGFwZSwgeDJUZW5zb3Iuc2hhcGUpLFxuICAgICAgICAnT25lIG9mIHQxIG9yIHQyIG11c3QgYmUgYSBzY2FsYXIsIG9yIHQxIGFuZCB0MiBtdXN0IGhhdmUgJyArXG4gICAgICAgICAgICAndGhlIHNhbWUgc2hhcGUnKTtcbiAgfVxuXG4gIGZlZWRGb3J3YXJkKG1hdGg6IE5EQXJyYXlNYXRoLCBpbmZlcmVuY2VBcnJheXM6IFRlbnNvckFycmF5TWFwKSB7XG4gICAgY29uc3QgdDEgPSBpbmZlcmVuY2VBcnJheXMuZ2V0KHRoaXMueDFUZW5zb3IpO1xuICAgIGNvbnN0IHQyID0gaW5mZXJlbmNlQXJyYXlzLmdldCh0aGlzLngyVGVuc29yKTtcblxuICAgIG1hdGguc2NvcGUoKGtlZXApID0+IHtcbiAgICAgIGxldCByZXN1bHQ6IE5EQXJyYXk7XG4gICAgICBpZiAodXRpbC5pc1NjYWxhclNoYXBlKHQxLnNoYXBlKSkge1xuICAgICAgICByZXN1bHQgPSBtYXRoLnNjYWxhckRpdmlkZWRCeUFycmF5KHQxLCB0Mik7XG4gICAgICB9IGVsc2UgaWYgKHV0aWwuaXNTY2FsYXJTaGFwZSh0Mi5zaGFwZSkpIHtcbiAgICAgICAgcmVzdWx0ID0gbWF0aC5hcnJheURpdmlkZWRCeVNjYWxhcih0MSwgdDIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gbWF0aC5kaXZpZGUodDEsIHQyKTtcbiAgICAgIH1cbiAgICAgIGluZmVyZW5jZUFycmF5cy5zZXQodGhpcy55VGVuc29yLCBrZWVwKHJlc3VsdCkpO1xuICAgIH0pO1xuICB9XG5cbiAgYmFja1Byb3AoXG4gICAgICBtYXRoOiBOREFycmF5TWF0aCwgaW5mZXJlbmNlQXJyYXlzOiBUZW5zb3JBcnJheU1hcCxcbiAgICAgIGdyYWRpZW50QXJyYXlzOiBUZW5zb3JBcnJheU1hcCkge1xuICAgIGNvbnN0IHgxID0gaW5mZXJlbmNlQXJyYXlzLmdldCh0aGlzLngxVGVuc29yKTtcbiAgICBjb25zdCB4MiA9IGluZmVyZW5jZUFycmF5cy5nZXQodGhpcy54MlRlbnNvcik7XG4gICAgY29uc3QgZHkgPSBncmFkaWVudEFycmF5cy5nZXQodGhpcy55VGVuc29yKTtcblxuICAgIGNvbnN0IHgxSXNTY2FsYXIgPSB1dGlsLmlzU2NhbGFyU2hhcGUoeDEuc2hhcGUpO1xuICAgIGNvbnN0IHgySXNTY2FsYXIgPSB1dGlsLmlzU2NhbGFyU2hhcGUoeDIuc2hhcGUpO1xuXG4gICAgbWF0aC5zY29wZSgoa2VlcCkgPT4ge1xuICAgICAgaWYgKGdyYXBoX3V0aWwuc2hvdWxkQmFja1Byb3AodGhpcy54MVRlbnNvcikpIHtcbiAgICAgICAgaWYgKHgxSXNTY2FsYXIpIHtcbiAgICAgICAgICBjb25zdCBkaXYgPSBtYXRoLmRpdmlkZShkeSwgeDIpO1xuXG4gICAgICAgICAgZ3JhZGllbnRBcnJheXMuc2V0KHRoaXMueDFUZW5zb3IsIGtlZXAobWF0aC5zdW0oZGl2KSkpO1xuXG4gICAgICAgICAgZGl2LmRpc3Bvc2UoKTtcbiAgICAgICAgfSBlbHNlIGlmICh4MklzU2NhbGFyKSB7XG4gICAgICAgICAgZ3JhZGllbnRBcnJheXMuc2V0KFxuICAgICAgICAgICAgICB0aGlzLngxVGVuc29yLCBrZWVwKG1hdGguYXJyYXlEaXZpZGVkQnlTY2FsYXIoZHksIHgyKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdyYWRpZW50QXJyYXlzLnNldCh0aGlzLngxVGVuc29yLCBrZWVwKG1hdGguZGl2aWRlKGR5LCB4MikpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZ3JhcGhfdXRpbC5zaG91bGRCYWNrUHJvcCh0aGlzLngyVGVuc29yKSkge1xuICAgICAgICAvLyBkeDIgPSAtMSAqIHgxICogeDIgXiAtMi5cbiAgICAgICAgY29uc3QgeDJTcXVhcmVkID0gbWF0aC5lbGVtZW50V2lzZU11bCh4MiwgeDIpO1xuXG4gICAgICAgIGxldCB4MU92ZXJYMlNxdWFyZWQ6IE5EQXJyYXk7XG4gICAgICAgIGlmICh4MklzU2NhbGFyKSB7XG4gICAgICAgICAgeDFPdmVyWDJTcXVhcmVkID0gbWF0aC5hcnJheURpdmlkZWRCeVNjYWxhcih4MSwgeDJTcXVhcmVkKTtcbiAgICAgICAgfSBlbHNlIGlmICh4MUlzU2NhbGFyKSB7XG4gICAgICAgICAgeDFPdmVyWDJTcXVhcmVkID0gbWF0aC5zY2FsYXJEaXZpZGVkQnlBcnJheSh4MSwgeDJTcXVhcmVkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB4MU92ZXJYMlNxdWFyZWQgPSBtYXRoLmRpdmlkZSh4MSwgeDJTcXVhcmVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGR4MiA9IG1hdGgubmVnKHgxT3ZlclgyU3F1YXJlZCk7XG4gICAgICAgIGNvbnN0IGR5VGltZXNEZXJpdmF0aXZlID0gbWF0aC5lbGVtZW50V2lzZU11bChkeSwgZHgyKTtcblxuICAgICAgICBpZiAoeDJJc1NjYWxhcikge1xuICAgICAgICAgIGdyYWRpZW50QXJyYXlzLnNldCh0aGlzLngyVGVuc29yLCBrZWVwKG1hdGguc3VtKGR5VGltZXNEZXJpdmF0aXZlKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdyYWRpZW50QXJyYXlzLnNldCh0aGlzLngyVGVuc29yLCBrZWVwKGR5VGltZXNEZXJpdmF0aXZlKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnLi4vZ3JhcGgnO1xuaW1wb3J0IHtBY3RpdmF0aW9uRnVuY3Rpb24sIFJlTFVGdW5jLCBTaWdtb2lkRnVuYywgU3F1YXJlRnVuYywgVGFuSEZ1bmN9IGZyb20gJy4uL21hdGgvYWN0aXZhdGlvbl9mdW5jdGlvbnMnO1xuaW1wb3J0IHtOREFycmF5TWF0aH0gZnJvbSAnLi4vbWF0aC9tYXRoJztcbmltcG9ydCB7TkRBcnJheX0gZnJvbSAnLi4vbWF0aC9uZGFycmF5JztcbmltcG9ydCB7VGVuc29yQXJyYXlNYXB9IGZyb20gJy4uL3RlbnNvcl9hcnJheV9tYXAnO1xuXG5pbXBvcnQge09wZXJhdGlvbn0gZnJvbSAnLi9vcCc7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgRWxlbWVudFdpc2VBY3RpdmF0aW9uIGV4dGVuZHMgT3BlcmF0aW9uIHtcbiAgY29uc3RydWN0b3IoXG4gICAgICBwcm90ZWN0ZWQgeFRlbnNvcjogVGVuc29yLCBwcm90ZWN0ZWQgeVRlbnNvcjogVGVuc29yLFxuICAgICAgcHJpdmF0ZSBmdW5jOiBBY3RpdmF0aW9uRnVuY3Rpb24pIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgZmVlZEZvcndhcmQobWF0aDogTkRBcnJheU1hdGgsIGluZmVyZW5jZUFycmF5czogVGVuc29yQXJyYXlNYXApIHtcbiAgICBjb25zdCB4ID0gaW5mZXJlbmNlQXJyYXlzLmdldCh0aGlzLnhUZW5zb3IpO1xuXG4gICAgbWF0aC5zY29wZSgoa2VlcCkgPT4ge1xuICAgICAgaW5mZXJlbmNlQXJyYXlzLnNldCh0aGlzLnlUZW5zb3IsIGtlZXAodGhpcy5mdW5jLm91dHB1dChtYXRoLCB4KSkpO1xuICAgIH0pO1xuICB9XG5cbiAgYmFja1Byb3AoXG4gICAgICBtYXRoOiBOREFycmF5TWF0aCwgaW5mZXJlbmNlQXJyYXlzOiBUZW5zb3JBcnJheU1hcCxcbiAgICAgIGdyYWRpZW50QXJyYXlzOiBUZW5zb3JBcnJheU1hcCkge1xuICAgIC8vIGRFL2R4X2kgPSBzdW1faiBkRS9keV9qICogZHlfai9keF9pXG4gICAgLy8gICAgICAgICA9IGRFL2R5X2kgKiBkeV9pL2R4X2lcbiAgICBjb25zdCB4ID0gaW5mZXJlbmNlQXJyYXlzLmdldCh0aGlzLnhUZW5zb3IpO1xuICAgIGNvbnN0IHkgPSBpbmZlcmVuY2VBcnJheXMuZ2V0KHRoaXMueVRlbnNvcik7XG4gICAgY29uc3QgZHkgPSBncmFkaWVudEFycmF5cy5nZXQodGhpcy55VGVuc29yKTtcblxuICAgIG1hdGguc2NvcGUoKGtlZXApID0+IHtcbiAgICAgIGNvbnN0IGR5ZHggPSB0aGlzLmZ1bmMuZGVyKG1hdGgsIHgsIHkpO1xuICAgICAgZ3JhZGllbnRBcnJheXMuc2V0KHRoaXMueFRlbnNvciwga2VlcChtYXRoLmVsZW1lbnRXaXNlTXVsKGR5LCBkeWR4KSkpO1xuICAgICAgZHlkeC5kaXNwb3NlKCk7XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBSZUxVIGV4dGVuZHMgRWxlbWVudFdpc2VBY3RpdmF0aW9uIHtcbiAgY29uc3RydWN0b3IoeFRlbnNvcjogVGVuc29yLCB5VGVuc29yOiBUZW5zb3IpIHtcbiAgICBzdXBlcih4VGVuc29yLCB5VGVuc29yLCBuZXcgUmVMVUZ1bmMoKSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBUYW5IIGV4dGVuZHMgRWxlbWVudFdpc2VBY3RpdmF0aW9uIHtcbiAgY29uc3RydWN0b3IoeFRlbnNvcjogVGVuc29yLCB5VGVuc29yOiBUZW5zb3IpIHtcbiAgICBzdXBlcih4VGVuc29yLCB5VGVuc29yLCBuZXcgVGFuSEZ1bmMoKSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBTaWdtb2lkIGV4dGVuZHMgRWxlbWVudFdpc2VBY3RpdmF0aW9uIHtcbiAgY29uc3RydWN0b3IoeFRlbnNvcjogVGVuc29yLCB5VGVuc29yOiBUZW5zb3IpIHtcbiAgICBzdXBlcih4VGVuc29yLCB5VGVuc29yLCBuZXcgU2lnbW9pZEZ1bmMoKSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBTcXVhcmUgZXh0ZW5kcyBFbGVtZW50V2lzZUFjdGl2YXRpb24ge1xuICBjb25zdHJ1Y3Rvcih4VGVuc29yOiBUZW5zb3IsIHlUZW5zb3I6IFRlbnNvcikge1xuICAgIHN1cGVyKHhUZW5zb3IsIHlUZW5zb3IsIG5ldyBTcXVhcmVGdW5jKCkpO1xuICB9XG59XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCB7VGVuc29yfSBmcm9tICcuLi9ncmFwaCc7XG5pbXBvcnQgKiBhcyBncmFwaF91dGlsIGZyb20gJy4uL2dyYXBoX3V0aWwnO1xuaW1wb3J0IHtFbGVtZW50V2lzZUNvc3RGdW5jdGlvbiwgU3F1YXJlQ29zdEZ1bmN9IGZyb20gJy4uL21hdGgvY29zdF9mdW5jdGlvbnMnO1xuaW1wb3J0IHtOREFycmF5TWF0aH0gZnJvbSAnLi4vbWF0aC9tYXRoJztcbmltcG9ydCB7QXJyYXkxRCwgTkRBcnJheSwgU2NhbGFyfSBmcm9tICcuLi9tYXRoL25kYXJyYXknO1xuaW1wb3J0IHtUZW5zb3JBcnJheU1hcH0gZnJvbSAnLi4vdGVuc29yX2FycmF5X21hcCc7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4uL3V0aWwnO1xuXG5pbXBvcnQge09wZXJhdGlvbn0gZnJvbSAnLi9vcCc7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgRWxlbWVudFdpc2VDb3N0PFQgZXh0ZW5kcyBOREFycmF5PiBleHRlbmRzIE9wZXJhdGlvbiB7XG4gIHByaXZhdGUgb25lT3Zlck5TY2FsYXI6IFNjYWxhcjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIHByb3RlY3RlZCB4MVRlbnNvcjogVGVuc29yLCBwcm90ZWN0ZWQgeDJUZW5zb3I6IFRlbnNvcixcbiAgICAgIHByb3RlY3RlZCB5VGVuc29yOiBUZW5zb3IsIHByb3RlY3RlZCBmdW5jOiBFbGVtZW50V2lzZUNvc3RGdW5jdGlvbikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5vbmVPdmVyTlNjYWxhciA9IFNjYWxhci5uZXcoMSAvIHV0aWwuc2l6ZUZyb21TaGFwZSh4MVRlbnNvci5zaGFwZSkpO1xuICB9XG5cbiAgZmVlZEZvcndhcmQobWF0aDogTkRBcnJheU1hdGgsIGluZmVyZW5jZUFycmF5czogVGVuc29yQXJyYXlNYXApIHtcbiAgICBjb25zdCB4MSA9IGluZmVyZW5jZUFycmF5cy5nZXQodGhpcy54MVRlbnNvcik7XG4gICAgY29uc3QgeDIgPSBpbmZlcmVuY2VBcnJheXMuZ2V0KHRoaXMueDJUZW5zb3IpO1xuXG4gICAgbWF0aC5zY29wZSgoa2VlcCkgPT4ge1xuICAgICAgY29uc3QgZWxlbWVudFdpc2VDb3N0ID0gdGhpcy5mdW5jLmNvc3QobWF0aCwgeDEsIHgyKTtcbiAgICAgIGNvbnN0IHN1bSA9IG1hdGguc3VtKGVsZW1lbnRXaXNlQ29zdCk7XG4gICAgICBjb25zdCByZXN1bHQgPSBtYXRoLnNjYWxhclRpbWVzQXJyYXkodGhpcy5vbmVPdmVyTlNjYWxhciwgc3VtKTtcbiAgICAgIGluZmVyZW5jZUFycmF5cy5zZXQodGhpcy55VGVuc29yLCBrZWVwKHJlc3VsdCkpO1xuICAgIH0pO1xuICB9XG5cbiAgYmFja1Byb3AoXG4gICAgICBtYXRoOiBOREFycmF5TWF0aCwgaW5mZXJlbmNlQXJyYXlzOiBUZW5zb3JBcnJheU1hcCxcbiAgICAgIGdyYWRpZW50QXJyYXlzOiBUZW5zb3JBcnJheU1hcCkge1xuICAgIGNvbnN0IHgxID0gaW5mZXJlbmNlQXJyYXlzLmdldCh0aGlzLngxVGVuc29yKTtcbiAgICBjb25zdCB4MiA9IGluZmVyZW5jZUFycmF5cy5nZXQodGhpcy54MlRlbnNvcik7XG5cbiAgICBtYXRoLnNjb3BlKChrZWVwKSA9PiB7XG4gICAgICBpZiAoZ3JhcGhfdXRpbC5zaG91bGRCYWNrUHJvcCh0aGlzLngxVGVuc29yKSkge1xuICAgICAgICBncmFkaWVudEFycmF5cy5zZXQodGhpcy54MVRlbnNvciwga2VlcCh0aGlzLmZ1bmMuZGVyKG1hdGgsIHgxLCB4MikpKTtcbiAgICAgIH1cbiAgICAgIGlmIChncmFwaF91dGlsLnNob3VsZEJhY2tQcm9wKHRoaXMueDJUZW5zb3IpKSB7XG4gICAgICAgIGdyYWRpZW50QXJyYXlzLnNldCh0aGlzLngyVGVuc29yLCBrZWVwKHRoaXMuZnVuYy5kZXIobWF0aCwgeDIsIHgxKSkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICB0aGlzLmZ1bmMuZGlzcG9zZSgpO1xuICAgIHRoaXMub25lT3Zlck5TY2FsYXIuZGlzcG9zZSgpO1xuICB9XG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgTWVhblNxdWFyZWRDb3N0IGV4dGVuZHMgRWxlbWVudFdpc2VDb3N0PEFycmF5MUQ+IHtcbiAgY29uc3RydWN0b3IoeDFUZW5zb3I6IFRlbnNvciwgeDJUZW5zb3I6IFRlbnNvciwgeVRlbnNvcjogVGVuc29yKSB7XG4gICAgc3VwZXIoeDFUZW5zb3IsIHgyVGVuc29yLCB5VGVuc29yLCBuZXcgU3F1YXJlQ29zdEZ1bmMoKSk7XG4gIH1cbn1cbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4uL2dyYXBoJztcbmltcG9ydCAqIGFzIGdyYXBoX3V0aWwgZnJvbSAnLi4vZ3JhcGhfdXRpbCc7XG5pbXBvcnQge05EQXJyYXlNYXRofSBmcm9tICcuLi9tYXRoL21hdGgnO1xuaW1wb3J0IHtOREFycmF5LCBTY2FsYXJ9IGZyb20gJy4uL21hdGgvbmRhcnJheSc7XG5pbXBvcnQge1RlbnNvckFycmF5TWFwfSBmcm9tICcuLi90ZW5zb3JfYXJyYXlfbWFwJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi4vdXRpbCc7XG5cbmltcG9ydCB7T3BlcmF0aW9ufSBmcm9tICcuL29wJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBFeHAgZXh0ZW5kcyBPcGVyYXRpb24ge1xuICAvKipcbiAgICogRXhwb25lbnRhdGlvbiBvcGVyYXRpb24gLSBlXnguXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHhUZW5zb3I6IFRlbnNvciwgcHJpdmF0ZSB5VGVuc29yOiBUZW5zb3IpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgZmVlZEZvcndhcmQobWF0aDogTkRBcnJheU1hdGgsIGluZmVyZW5jZUFycmF5czogVGVuc29yQXJyYXlNYXApIHtcbiAgICBjb25zdCB4ID0gaW5mZXJlbmNlQXJyYXlzLmdldCh0aGlzLnhUZW5zb3IpO1xuXG4gICAgbWF0aC5zY29wZSgoa2VlcCkgPT4ge1xuICAgICAgaW5mZXJlbmNlQXJyYXlzLnNldCh0aGlzLnlUZW5zb3IsIGtlZXAobWF0aC5leHAoeCkpKTtcbiAgICB9KTtcbiAgfVxuXG4gIGJhY2tQcm9wKFxuICAgICAgbWF0aDogTkRBcnJheU1hdGgsIGluZmVyZW5jZUFycmF5czogVGVuc29yQXJyYXlNYXAsXG4gICAgICBncmFkaWVudEFycmF5czogVGVuc29yQXJyYXlNYXApIHtcbiAgICBjb25zdCB5ID0gaW5mZXJlbmNlQXJyYXlzLmdldCh0aGlzLnlUZW5zb3IpO1xuICAgIGNvbnN0IGR5ID0gZ3JhZGllbnRBcnJheXMuZ2V0KHRoaXMueVRlbnNvcik7XG5cbiAgICBtYXRoLnNjb3BlKChrZWVwKSA9PiB7XG4gICAgICBpZiAoZ3JhcGhfdXRpbC5zaG91bGRCYWNrUHJvcCh0aGlzLnhUZW5zb3IpKSB7XG4gICAgICAgIGdyYWRpZW50QXJyYXlzLnNldCh0aGlzLnhUZW5zb3IsIGtlZXAobWF0aC5lbGVtZW50V2lzZU11bCh5LCBkeSkpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnLi4vZ3JhcGgnO1xuaW1wb3J0ICogYXMgZ3JhcGhfdXRpbCBmcm9tICcuLi9ncmFwaF91dGlsJztcbmltcG9ydCB7TkRBcnJheU1hdGh9IGZyb20gJy4uL21hdGgvbWF0aCc7XG5pbXBvcnQge05EQXJyYXl9IGZyb20gJy4uL21hdGgvbmRhcnJheSc7XG5pbXBvcnQge1RlbnNvckFycmF5TWFwfSBmcm9tICcuLi90ZW5zb3JfYXJyYXlfbWFwJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi4vdXRpbCc7XG5cbmltcG9ydCB7T3BlcmF0aW9ufSBmcm9tICcuL29wJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBMaW5lYXJDb21iaW5hdGlvbiBleHRlbmRzIE9wZXJhdGlvbiB7XG4gIC8qKlxuICAgKiBBIDItdGVuc29yIGxpbmVhciBjb21iaW5hdGlvbiBvcGVyYXRpb24uXG4gICAqXG4gICAqIENvbWJpbmVzIHRlbnNvcnMgeDEgYW5kIHgyIChvZiB0aGUgc2FtZSBzaGFwZSkgd2l0aCB3ZWlnaHRzIGMxICYgYzI7XG4gICAqIENvbXB1dGVzIGMxKngxICsgYzIqeDIuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICAgIHByaXZhdGUgeDFUZW5zb3I6IFRlbnNvciwgcHJpdmF0ZSB4MlRlbnNvcjogVGVuc29yLFxuICAgICAgcHJpdmF0ZSBjMVRlbnNvcjogVGVuc29yLCBwcml2YXRlIGMyVGVuc29yOiBUZW5zb3IsXG4gICAgICBwcml2YXRlIG91dFRlbnNvcjogVGVuc29yKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGZlZWRGb3J3YXJkKG1hdGg6IE5EQXJyYXlNYXRoLCBpbmZlcmVuY2VBcnJheXM6IFRlbnNvckFycmF5TWFwKSB7XG4gICAgY29uc3QgeDEgPSBpbmZlcmVuY2VBcnJheXMuZ2V0KHRoaXMueDFUZW5zb3IpO1xuICAgIGNvbnN0IHgyID0gaW5mZXJlbmNlQXJyYXlzLmdldCh0aGlzLngyVGVuc29yKTtcbiAgICBjb25zdCBjMSA9IGluZmVyZW5jZUFycmF5cy5nZXQodGhpcy5jMVRlbnNvcikuYXNTY2FsYXIoKTtcbiAgICBjb25zdCBjMiA9IGluZmVyZW5jZUFycmF5cy5nZXQodGhpcy5jMlRlbnNvcikuYXNTY2FsYXIoKTtcblxuICAgIG1hdGguc2NvcGUoKGtlZXApID0+IHtcbiAgICAgIGluZmVyZW5jZUFycmF5cy5zZXQoXG4gICAgICAgICAgdGhpcy5vdXRUZW5zb3IsIGtlZXAobWF0aC5zY2FsZWRBcnJheUFkZChjMSwgeDEsIGMyLCB4MikpKTtcbiAgICB9KTtcbiAgfVxuXG4gIGJhY2tQcm9wKFxuICAgICAgbWF0aDogTkRBcnJheU1hdGgsIGluZmVyZW5jZUFycmF5czogVGVuc29yQXJyYXlNYXAsXG4gICAgICBncmFkaWVudEFycmF5czogVGVuc29yQXJyYXlNYXApIHtcbiAgICBjb25zdCB4MSA9IGluZmVyZW5jZUFycmF5cy5nZXQodGhpcy54MVRlbnNvcik7XG4gICAgY29uc3QgeDIgPSBpbmZlcmVuY2VBcnJheXMuZ2V0KHRoaXMueDJUZW5zb3IpO1xuICAgIGNvbnN0IGMxID0gaW5mZXJlbmNlQXJyYXlzLmdldCh0aGlzLmMxVGVuc29yKTtcbiAgICBjb25zdCBjMiA9IGluZmVyZW5jZUFycmF5cy5nZXQodGhpcy5jMlRlbnNvcik7XG4gICAgY29uc3QgZHkgPSBncmFkaWVudEFycmF5cy5nZXQodGhpcy5vdXRUZW5zb3IpO1xuXG4gICAgbWF0aC5zY29wZSgoa2VlcCkgPT4ge1xuICAgICAgaWYgKGdyYXBoX3V0aWwuc2hvdWxkQmFja1Byb3AodGhpcy54MVRlbnNvcikpIHtcbiAgICAgICAgZ3JhZGllbnRBcnJheXMuc2V0KHRoaXMueDFUZW5zb3IsIGtlZXAobWF0aC5zY2FsYXJUaW1lc0FycmF5KGMxLCBkeSkpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGdyYXBoX3V0aWwuc2hvdWxkQmFja1Byb3AodGhpcy54MlRlbnNvcikpIHtcbiAgICAgICAgZ3JhZGllbnRBcnJheXMuc2V0KHRoaXMueDJUZW5zb3IsIGtlZXAobWF0aC5zY2FsYXJUaW1lc0FycmF5KGMyLCBkeSkpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGdyYXBoX3V0aWwuc2hvdWxkQmFja1Byb3AodGhpcy5jMVRlbnNvcikpIHtcbiAgICAgICAgY29uc3QgZG90UHJvZHVjdDEgPSBtYXRoLmVsZW1lbnRXaXNlTXVsKHgxLCBkeSk7XG4gICAgICAgIGdyYWRpZW50QXJyYXlzLnNldCh0aGlzLmMxVGVuc29yLCBrZWVwKG1hdGguc3VtKGRvdFByb2R1Y3QxKSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZ3JhcGhfdXRpbC5zaG91bGRCYWNrUHJvcCh0aGlzLmMyVGVuc29yKSkge1xuICAgICAgICBjb25zdCBkb3RQcm9kdWN0MiA9IG1hdGguZWxlbWVudFdpc2VNdWwoeDIsIGR5KTtcbiAgICAgICAgZ3JhZGllbnRBcnJheXMuc2V0KHRoaXMuYzJUZW5zb3IsIGtlZXAobWF0aC5zdW0oZG90UHJvZHVjdDIpKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4uL2dyYXBoJztcbmltcG9ydCAqIGFzIGdyYXBoX3V0aWwgZnJvbSAnLi4vZ3JhcGhfdXRpbCc7XG5pbXBvcnQge05EQXJyYXlNYXRofSBmcm9tICcuLi9tYXRoL21hdGgnO1xuaW1wb3J0IHtOREFycmF5LCBTY2FsYXJ9IGZyb20gJy4uL21hdGgvbmRhcnJheSc7XG5pbXBvcnQge1RlbnNvckFycmF5TWFwfSBmcm9tICcuLi90ZW5zb3JfYXJyYXlfbWFwJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi4vdXRpbCc7XG5cbmltcG9ydCB7T3BlcmF0aW9ufSBmcm9tICcuL29wJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBMb2cgZXh0ZW5kcyBPcGVyYXRpb24ge1xuICAvKipcbiAgICogTmF0dXJhbCBsb2cgb3BlcmF0aW9uIC0gbG4oeClcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgeFRlbnNvcjogVGVuc29yLCBwcml2YXRlIHlUZW5zb3I6IFRlbnNvcikge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBmZWVkRm9yd2FyZChtYXRoOiBOREFycmF5TWF0aCwgaW5mZXJlbmNlQXJyYXlzOiBUZW5zb3JBcnJheU1hcCkge1xuICAgIGNvbnN0IHggPSBpbmZlcmVuY2VBcnJheXMuZ2V0KHRoaXMueFRlbnNvcik7XG5cbiAgICBtYXRoLnNjb3BlKChrZWVwKSA9PiB7XG4gICAgICBpbmZlcmVuY2VBcnJheXMuc2V0KHRoaXMueVRlbnNvciwga2VlcChtYXRoLmxvZyh4KSkpO1xuICAgIH0pO1xuICB9XG5cbiAgYmFja1Byb3AoXG4gICAgICBtYXRoOiBOREFycmF5TWF0aCwgaW5mZXJlbmNlQXJyYXlzOiBUZW5zb3JBcnJheU1hcCxcbiAgICAgIGdyYWRpZW50QXJyYXlzOiBUZW5zb3JBcnJheU1hcCkge1xuICAgIGNvbnN0IHggPSBpbmZlcmVuY2VBcnJheXMuZ2V0KHRoaXMueFRlbnNvcik7XG4gICAgY29uc3QgZHkgPSBncmFkaWVudEFycmF5cy5nZXQodGhpcy55VGVuc29yKTtcblxuICAgIG1hdGguc2NvcGUoKGtlZXApID0+IHtcbiAgICAgIGlmIChncmFwaF91dGlsLnNob3VsZEJhY2tQcm9wKHRoaXMueFRlbnNvcikpIHtcbiAgICAgICAgZ3JhZGllbnRBcnJheXMuc2V0KHRoaXMueFRlbnNvciwga2VlcChtYXRoLmRpdmlkZShkeSwgeCkpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnLi4vZ3JhcGgnO1xuaW1wb3J0ICogYXMgZ3JhcGhfdXRpbCBmcm9tICcuLi9ncmFwaF91dGlsJztcbmltcG9ydCB7TWF0cml4T3JpZW50YXRpb24sIE5EQXJyYXlNYXRofSBmcm9tICcuLi9tYXRoL21hdGgnO1xuaW1wb3J0IHtBcnJheTFELCBBcnJheTJELCBOREFycmF5fSBmcm9tICcuLi9tYXRoL25kYXJyYXknO1xuaW1wb3J0IHtUZW5zb3JBcnJheU1hcH0gZnJvbSAnLi4vdGVuc29yX2FycmF5X21hcCc7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4uL3V0aWwnO1xuXG5pbXBvcnQge09wZXJhdGlvbn0gZnJvbSAnLi9vcCc7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgTWF0TXVsIGV4dGVuZHMgT3BlcmF0aW9uIHtcbiAgY29uc3RydWN0b3IoXG4gICAgICBwcml2YXRlIHgxVGVuc29yOiBUZW5zb3IsIHByaXZhdGUgeDJUZW5zb3I6IFRlbnNvcixcbiAgICAgIHByaXZhdGUgeVRlbnNvcjogVGVuc29yKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGZlZWRGb3J3YXJkKG1hdGg6IE5EQXJyYXlNYXRoLCBpbmZlcmVuY2VBcnJheXM6IFRlbnNvckFycmF5TWFwKSB7XG4gICAgY29uc3QgeDEgPSBpbmZlcmVuY2VBcnJheXMuZ2V0KHRoaXMueDFUZW5zb3IpO1xuICAgIGNvbnN0IHgyID0gaW5mZXJlbmNlQXJyYXlzLmdldCh0aGlzLngyVGVuc29yKTtcblxuICAgIG1hdGguc2NvcGUoKGtlZXApID0+IHtcbiAgICAgIGlmICh4MS5zaGFwZS5sZW5ndGggPT09IDIgJiYgeDIuc2hhcGUubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIGluZmVyZW5jZUFycmF5cy5zZXQoXG4gICAgICAgICAgICB0aGlzLnlUZW5zb3IsIGtlZXAobWF0aC5tYXRNdWwoeDEgYXMgQXJyYXkyRCwgeDIgYXMgQXJyYXkyRCkpKTtcbiAgICAgIH0gZWxzZSBpZiAoeDEuc2hhcGUubGVuZ3RoID09PSAyICYmIHgyLnNoYXBlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBpbmZlcmVuY2VBcnJheXMuc2V0KFxuICAgICAgICAgICAgdGhpcy55VGVuc29yLFxuICAgICAgICAgICAga2VlcChtYXRoLm1hdHJpeFRpbWVzVmVjdG9yKHgxIGFzIEFycmF5MkQsIHgyIGFzIEFycmF5MUQpKSk7XG4gICAgICB9IGVsc2UgaWYgKHgxLnNoYXBlLmxlbmd0aCA9PT0gMSAmJiB4Mi5zaGFwZS5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgaW5mZXJlbmNlQXJyYXlzLnNldChcbiAgICAgICAgICAgIHRoaXMueVRlbnNvcixcbiAgICAgICAgICAgIGtlZXAobWF0aC52ZWN0b3JUaW1lc01hdHJpeCh4MSBhcyBBcnJheTFELCB4MiBhcyBBcnJheTJEKSkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgYmFja1Byb3AoXG4gICAgICBtYXRoOiBOREFycmF5TWF0aCwgaW5mZXJlbmNlQXJyYXlzOiBUZW5zb3JBcnJheU1hcCxcbiAgICAgIGdyYWRpZW50QXJyYXlzOiBUZW5zb3JBcnJheU1hcCkge1xuICAgIGxldCB4MSA9IGluZmVyZW5jZUFycmF5cy5nZXQodGhpcy54MVRlbnNvcik7XG4gICAgbGV0IHgyID0gaW5mZXJlbmNlQXJyYXlzLmdldCh0aGlzLngyVGVuc29yKTtcbiAgICBsZXQgZHkgPSBncmFkaWVudEFycmF5cy5nZXQodGhpcy55VGVuc29yKTtcblxuICAgIGlmICh4MS5zaGFwZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIHgxID0geDEucmVzaGFwZShbMSwgeDEuc2l6ZV0pO1xuICAgICAgZHkgPSBkeS5yZXNoYXBlKFsxLCBkeS5zaXplXSk7XG4gICAgfVxuICAgIGlmICh4Mi5zaGFwZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIHgyID0geDIucmVzaGFwZShbeDIuc2l6ZSwgMV0pO1xuICAgICAgZHkgPSBkeS5yZXNoYXBlKFtkeS5zaXplLCAxXSk7XG4gICAgfVxuXG4gICAgbWF0aC5zY29wZSgoa2VlcCkgPT4ge1xuICAgICAgLy8geSA9IHgxICogeDJcbiAgICAgIC8vIGR4MSA9IGR5ICogeDJUXG4gICAgICAvLyBkeDIgPSB4MVQgKiBkeVxuICAgICAgaWYgKGdyYXBoX3V0aWwuc2hvdWxkQmFja1Byb3AodGhpcy54MVRlbnNvcikpIHtcbiAgICAgICAgY29uc3QgZHgxID0gbWF0aC5tYXRNdWwoXG4gICAgICAgICAgICBkeSBhcyBBcnJheTJELCB4MiBhcyBBcnJheTJELCBNYXRyaXhPcmllbnRhdGlvbi5SRUdVTEFSLFxuICAgICAgICAgICAgTWF0cml4T3JpZW50YXRpb24uVFJBTlNQT1NFRCk7XG4gICAgICAgIGdyYWRpZW50QXJyYXlzLnNldChcbiAgICAgICAgICAgIHRoaXMueDFUZW5zb3IsXG4gICAgICAgICAgICBrZWVwKHRoaXMueDFUZW5zb3Iuc2hhcGUubGVuZ3RoID09PSAxID8gZHgxLmFzMUQoKSA6IGR4MSkpO1xuICAgICAgfVxuICAgICAgaWYgKGdyYXBoX3V0aWwuc2hvdWxkQmFja1Byb3AodGhpcy54MlRlbnNvcikpIHtcbiAgICAgICAgY29uc3QgZHgyID0gbWF0aC5tYXRNdWwoXG4gICAgICAgICAgICB4MSBhcyBBcnJheTJELCBkeSBhcyBBcnJheTJELCBNYXRyaXhPcmllbnRhdGlvbi5UUkFOU1BPU0VELFxuICAgICAgICAgICAgTWF0cml4T3JpZW50YXRpb24uUkVHVUxBUik7XG4gICAgICAgIGdyYWRpZW50QXJyYXlzLnNldChcbiAgICAgICAgICAgIHRoaXMueDJUZW5zb3IsXG4gICAgICAgICAgICBrZWVwKHRoaXMueDJUZW5zb3Iuc2hhcGUubGVuZ3RoID09PSAxID8gZHgyLmFzMUQoKSA6IGR4MikpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCB7VGVuc29yfSBmcm9tICcuLi9ncmFwaCc7XG5pbXBvcnQgKiBhcyBjb252X3V0aWwgZnJvbSAnLi4vbWF0aC9jb252X3V0aWwnO1xuaW1wb3J0IHtOREFycmF5TWF0aH0gZnJvbSAnLi4vbWF0aC9tYXRoJztcbmltcG9ydCB7QXJyYXkyRCwgQXJyYXkzRCwgTkRBcnJheX0gZnJvbSAnLi4vbWF0aC9uZGFycmF5JztcbmltcG9ydCB7VGVuc29yQXJyYXlNYXB9IGZyb20gJy4uL3RlbnNvcl9hcnJheV9tYXAnO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuLi91dGlsJztcblxuaW1wb3J0IHtPcGVyYXRpb259IGZyb20gJy4vb3AnO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIE1heFBvb2wgZXh0ZW5kcyBPcGVyYXRpb24ge1xuICBwcml2YXRlIHBhZDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgcHJpdmF0ZSB4VGVuc29yOiBUZW5zb3IsIHByaXZhdGUgeVRlbnNvcjogVGVuc29yLFxuICAgICAgcHJpdmF0ZSBmaWVsZFNpemU6IG51bWJlciwgcHJpdmF0ZSBzdHJpZGUgPSAxLCBwYWQ/OiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgaWYgKHBhZCAhPSBudWxsKSB7XG4gICAgICB0aGlzLnBhZCA9IHBhZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wYWQgPSBjb252X3V0aWwuY29tcHV0ZURlZmF1bHRQYWQoXG4gICAgICAgICAgeFRlbnNvci5zaGFwZSBhcyBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0sIHRoaXMuZmllbGRTaXplLFxuICAgICAgICAgIHRoaXMuc3RyaWRlKTtcbiAgICB9XG5cbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgdXRpbC5pc0ludCh0aGlzLnBhZCksXG4gICAgICAgIGBUaGUgemVybyBwYWRkaW5nICgke3RoaXMucGFkfSkgbXVzdCBiZSBhbiBpbnRlZ2VyLiBDaGFuZ2UgdGhlIGAgK1xuICAgICAgICAgICAgYHN0cmlkZSBhbmQvb3IgemVybyBwYWQgcGFyYW1ldGVyc2ApO1xuICB9XG5cbiAgZmVlZEZvcndhcmQobWF0aDogTkRBcnJheU1hdGgsIGluZmVyZW5jZUFycmF5czogVGVuc29yQXJyYXlNYXApIHtcbiAgICBjb25zdCB4ID0gaW5mZXJlbmNlQXJyYXlzLmdldCh0aGlzLnhUZW5zb3IpIGFzIEFycmF5M0Q7XG4gICAgbWF0aC5zY29wZSgoa2VlcCkgPT4ge1xuICAgICAgaW5mZXJlbmNlQXJyYXlzLnNldChcbiAgICAgICAgICB0aGlzLnlUZW5zb3IsXG4gICAgICAgICAga2VlcChtYXRoLm1heFBvb2woeCwgdGhpcy5maWVsZFNpemUsIHRoaXMuc3RyaWRlLCB0aGlzLnBhZCkpKTtcbiAgICB9KTtcbiAgfVxuXG4gIGJhY2tQcm9wKFxuICAgICAgbWF0aDogTkRBcnJheU1hdGgsIGluZmVyZW5jZUFycmF5czogVGVuc29yQXJyYXlNYXAsXG4gICAgICBncmFkaWVudEFycmF5czogVGVuc29yQXJyYXlNYXApIHtcbiAgICBjb25zdCB4ID0gaW5mZXJlbmNlQXJyYXlzLmdldCh0aGlzLnhUZW5zb3IpIGFzIEFycmF5M0Q7XG4gICAgY29uc3QgZHkgPSBncmFkaWVudEFycmF5cy5nZXQodGhpcy55VGVuc29yKSBhcyBBcnJheTNEO1xuXG4gICAgbWF0aC5zY29wZSgoa2VlcCkgPT4ge1xuICAgICAgZ3JhZGllbnRBcnJheXMuc2V0KFxuICAgICAgICAgIHRoaXMueFRlbnNvcixcbiAgICAgICAgICBrZWVwKG1hdGgubWF4UG9vbEJhY2twcm9wKFxuICAgICAgICAgICAgICBkeSwgeCwgdGhpcy5maWVsZFNpemUsIHRoaXMuc3RyaWRlLCB0aGlzLnBhZCkpKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnLi4vZ3JhcGgnO1xuaW1wb3J0ICogYXMgZ3JhcGhfdXRpbCBmcm9tICcuLi9ncmFwaF91dGlsJztcbmltcG9ydCB7TkRBcnJheU1hdGh9IGZyb20gJy4uL21hdGgvbWF0aCc7XG5pbXBvcnQge05EQXJyYXksIFNjYWxhcn0gZnJvbSAnLi4vbWF0aC9uZGFycmF5JztcbmltcG9ydCB7VGVuc29yQXJyYXlNYXB9IGZyb20gJy4uL3RlbnNvcl9hcnJheV9tYXAnO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuLi91dGlsJztcblxuaW1wb3J0IHtPcGVyYXRpb259IGZyb20gJy4vb3AnO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIE11bHRpcGx5IGV4dGVuZHMgT3BlcmF0aW9uIHtcbiAgLyoqXG4gICAqIEVsZW1lbnQtd2lzZSBtdWx0aXBseSBvcGVyYXRpb24uIEJyb2FkY2FzdHMgaWYgb25lIG9mIHRoZSB0ZW5zb3JzIGlzXG4gICAqIHNjYWxhci5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgcHJpdmF0ZSB4MVRlbnNvcjogVGVuc29yLCBwcml2YXRlIHgyVGVuc29yOiBUZW5zb3IsXG4gICAgICBwcml2YXRlIHlUZW5zb3I6IFRlbnNvcikge1xuICAgIHN1cGVyKCk7XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIHV0aWwuc2l6ZUZyb21TaGFwZSh4MVRlbnNvci5zaGFwZSkgPT09IDEgfHxcbiAgICAgICAgICAgIHV0aWwuc2l6ZUZyb21TaGFwZSh4MlRlbnNvci5zaGFwZSkgPT09IDEgfHxcbiAgICAgICAgICAgIHV0aWwuYXJyYXlzRXF1YWwoeDFUZW5zb3Iuc2hhcGUsIHgyVGVuc29yLnNoYXBlKSxcbiAgICAgICAgJ09uZSBvZiB0MSBvciB0MiBtdXN0IGJlIGEgc2NhbGFyLCBvciB0MSBhbmQgdDIgbXVzdCBoYXZlICcgK1xuICAgICAgICAgICAgJ3RoZSBzYW1lIHNoYXBlJyk7XG4gIH1cblxuICBmZWVkRm9yd2FyZChtYXRoOiBOREFycmF5TWF0aCwgaW5mZXJlbmNlQXJyYXlzOiBUZW5zb3JBcnJheU1hcCkge1xuICAgIGNvbnN0IHQxID0gaW5mZXJlbmNlQXJyYXlzLmdldCh0aGlzLngxVGVuc29yKTtcbiAgICBjb25zdCB0MiA9IGluZmVyZW5jZUFycmF5cy5nZXQodGhpcy54MlRlbnNvcik7XG5cbiAgICBtYXRoLnNjb3BlKChrZWVwKSA9PiB7XG4gICAgICBsZXQgcmVzdWx0OiBOREFycmF5O1xuICAgICAgaWYgKHV0aWwuaXNTY2FsYXJTaGFwZSh0MS5zaGFwZSkpIHtcbiAgICAgICAgcmVzdWx0ID0gbWF0aC5zY2FsYXJUaW1lc0FycmF5KHQxLCB0Mik7XG4gICAgICB9IGVsc2UgaWYgKHV0aWwuaXNTY2FsYXJTaGFwZSh0Mi5zaGFwZSkpIHtcbiAgICAgICAgcmVzdWx0ID0gbWF0aC5zY2FsYXJUaW1lc0FycmF5KHQyLCB0MSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBtYXRoLmVsZW1lbnRXaXNlTXVsKHQxLCB0Mik7XG4gICAgICB9XG4gICAgICBpbmZlcmVuY2VBcnJheXMuc2V0KHRoaXMueVRlbnNvciwga2VlcChyZXN1bHQpKTtcbiAgICB9KTtcbiAgfVxuXG4gIGJhY2tQcm9wKFxuICAgICAgbWF0aDogTkRBcnJheU1hdGgsIGluZmVyZW5jZUFycmF5czogVGVuc29yQXJyYXlNYXAsXG4gICAgICBncmFkaWVudEFycmF5czogVGVuc29yQXJyYXlNYXApIHtcbiAgICBjb25zdCB4MSA9IGluZmVyZW5jZUFycmF5cy5nZXQodGhpcy54MVRlbnNvcik7XG4gICAgY29uc3QgeDIgPSBpbmZlcmVuY2VBcnJheXMuZ2V0KHRoaXMueDJUZW5zb3IpO1xuICAgIGNvbnN0IGR5ID0gZ3JhZGllbnRBcnJheXMuZ2V0KHRoaXMueVRlbnNvcik7XG5cbiAgICBtYXRoLnNjb3BlKChrZWVwKSA9PiB7XG4gICAgICBpZiAoZ3JhcGhfdXRpbC5zaG91bGRCYWNrUHJvcCh0aGlzLngxVGVuc29yKSkge1xuICAgICAgICBpZiAodXRpbC5pc1NjYWxhclNoYXBlKHRoaXMueDFUZW5zb3Iuc2hhcGUpKSB7XG4gICAgICAgICAgY29uc3QgbXVsID0gbWF0aC5lbGVtZW50V2lzZU11bChkeSwgeDIpO1xuXG4gICAgICAgICAgZ3JhZGllbnRBcnJheXMuc2V0KHRoaXMueDFUZW5zb3IsIGtlZXAobWF0aC5zdW0obXVsKSkpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAodXRpbC5pc1NjYWxhclNoYXBlKHgyLnNoYXBlKSkge1xuICAgICAgICAgIGdyYWRpZW50QXJyYXlzLnNldChcbiAgICAgICAgICAgICAgdGhpcy54MVRlbnNvciwga2VlcChtYXRoLnNjYWxhclRpbWVzQXJyYXkoeDIsIGR5KSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdyYWRpZW50QXJyYXlzLnNldCh0aGlzLngxVGVuc29yLCBrZWVwKG1hdGguZWxlbWVudFdpc2VNdWwoeDIsIGR5KSkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChncmFwaF91dGlsLnNob3VsZEJhY2tQcm9wKHRoaXMueDJUZW5zb3IpKSB7XG4gICAgICAgIGlmICh1dGlsLmlzU2NhbGFyU2hhcGUodGhpcy54MlRlbnNvci5zaGFwZSkpIHtcbiAgICAgICAgICBjb25zdCBtdWwgPSBtYXRoLmVsZW1lbnRXaXNlTXVsKGR5LCB4MSk7XG5cbiAgICAgICAgICBncmFkaWVudEFycmF5cy5zZXQodGhpcy54MlRlbnNvciwga2VlcChtYXRoLnN1bShtdWwpKSk7XG5cbiAgICAgICAgfSBlbHNlIGlmICh1dGlsLmlzU2NhbGFyU2hhcGUoeDEuc2hhcGUpKSB7XG4gICAgICAgICAgZ3JhZGllbnRBcnJheXMuc2V0KFxuICAgICAgICAgICAgICB0aGlzLngyVGVuc29yLCBrZWVwKG1hdGguc2NhbGFyVGltZXNBcnJheSh4MSwgZHkpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ3JhZGllbnRBcnJheXMuc2V0KHRoaXMueDJUZW5zb3IsIGtlZXAobWF0aC5lbGVtZW50V2lzZU11bCh4MSwgZHkpKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQge05EQXJyYXlNYXRofSBmcm9tICcuLi9tYXRoL21hdGgnO1xuaW1wb3J0IHtOREFycmF5LCBTY2FsYXJ9IGZyb20gJy4uL21hdGgvbmRhcnJheSc7XG5pbXBvcnQge1RlbnNvckFycmF5TWFwfSBmcm9tICcuLi90ZW5zb3JfYXJyYXlfbWFwJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBPcGVyYXRpb24ge1xuICBhYnN0cmFjdCBmZWVkRm9yd2FyZChtYXRoOiBOREFycmF5TWF0aCwgaW5mZXJlbmNlQXJyYXlzOiBUZW5zb3JBcnJheU1hcCk6XG4gICAgICB2b2lkO1xuXG4gIGFic3RyYWN0IGJhY2tQcm9wKFxuICAgICAgbWF0aDogTkRBcnJheU1hdGgsIGluZmVyZW5jZUFycmF5czogVGVuc29yQXJyYXlNYXAsXG4gICAgICBncmFkaWVudEFycmF5czogVGVuc29yQXJyYXlNYXApOiB2b2lkO1xuXG4gIGRpc3Bvc2VUcmFuc2llbnRBcnJheXMoXG4gICAgICBpbmZlcmVuY2VBcnJheXM6IFRlbnNvckFycmF5TWFwLCBncmFkaWVudEFycmF5czogVGVuc29yQXJyYXlNYXApIHt9XG5cbiAgZGlzcG9zZSgpIHt9XG59XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCB7VGVuc29yfSBmcm9tICcuLi9ncmFwaCc7XG5pbXBvcnQgKiBhcyBncmFwaF91dGlsIGZyb20gJy4uL2dyYXBoX3V0aWwnO1xuaW1wb3J0IHtOREFycmF5TWF0aH0gZnJvbSAnLi4vbWF0aC9tYXRoJztcbmltcG9ydCB7TkRBcnJheX0gZnJvbSAnLi4vbWF0aC9uZGFycmF5JztcbmltcG9ydCB7VGVuc29yQXJyYXlNYXB9IGZyb20gJy4uL3RlbnNvcl9hcnJheV9tYXAnO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuLi91dGlsJztcblxuaW1wb3J0IHtPcGVyYXRpb259IGZyb20gJy4vb3AnO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIFJlZHVjZVN1bSBleHRlbmRzIE9wZXJhdGlvbiB7XG4gIC8qKiBFbGVtZW50LXdpc2UgYWRkIG9wZXJhdGlvbi4gQnJvYWRjYXN0cyBpZiBvbmUgb2YgdGhlIHRlbnNvcnMgaXMgc2NhbGFyLiAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHg6IFRlbnNvciwgcHJpdmF0ZSBvdXRUZW5zb3I6IFRlbnNvcikge1xuICAgIHN1cGVyKCk7XG4gICAgdXRpbC5hc3NlcnRTaGFwZXNNYXRjaChvdXRUZW5zb3Iuc2hhcGUsIFtdKTtcbiAgfVxuXG4gIHByaXZhdGUgb25lczogTkRBcnJheTtcblxuICBmZWVkRm9yd2FyZChtYXRoOiBOREFycmF5TWF0aCwgaW5mZXJlbmNlQXJyYXlzOiBUZW5zb3JBcnJheU1hcCkge1xuICAgIGNvbnN0IHggPSBpbmZlcmVuY2VBcnJheXMuZ2V0KHRoaXMueCk7XG5cbiAgICBtYXRoLnNjb3BlKChrZWVwKSA9PiB7XG4gICAgICBpbmZlcmVuY2VBcnJheXMuc2V0KHRoaXMub3V0VGVuc29yLCBrZWVwKG1hdGguc3VtKHgpKSk7XG4gICAgfSk7XG4gIH1cblxuICBiYWNrUHJvcChcbiAgICAgIG1hdGg6IE5EQXJyYXlNYXRoLCBpbmZlcmVuY2VBcnJheXM6IFRlbnNvckFycmF5TWFwLFxuICAgICAgZ3JhZGllbnRBcnJheXM6IFRlbnNvckFycmF5TWFwKSB7XG4gICAgaWYgKCFncmFwaF91dGlsLnNob3VsZEJhY2tQcm9wKHRoaXMueCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBtYXRoLnNjb3BlKChrZWVwKSA9PiB7XG4gICAgICBjb25zdCBkeSA9IGdyYWRpZW50QXJyYXlzLmdldCh0aGlzLm91dFRlbnNvcik7XG4gICAgICBpZiAodGhpcy5vbmVzID09IG51bGwpIHtcbiAgICAgICAgY29uc3QgeEFycmF5ID0gaW5mZXJlbmNlQXJyYXlzLmdldCh0aGlzLngpO1xuICAgICAgICB0aGlzLm9uZXMgPSBOREFycmF5Lnplcm9zTGlrZSh4QXJyYXkpO1xuICAgICAgICB0aGlzLm9uZXMuZmlsbCgxKTtcbiAgICAgIH1cbiAgICAgIGdyYWRpZW50QXJyYXlzLnNldCh0aGlzLngsIGtlZXAobWF0aC5zY2FsYXJUaW1lc0FycmF5KGR5LCB0aGlzLm9uZXMpKSk7XG4gICAgfSk7XG4gIH1cbn1cbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4uL2dyYXBoJztcbmltcG9ydCB7TkRBcnJheU1hdGh9IGZyb20gJy4uL21hdGgvbWF0aCc7XG5pbXBvcnQge05EQXJyYXl9IGZyb20gJy4uL21hdGgvbmRhcnJheSc7XG5pbXBvcnQge1RlbnNvckFycmF5TWFwfSBmcm9tICcuLi90ZW5zb3JfYXJyYXlfbWFwJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi4vdXRpbCc7XG5cbmltcG9ydCB7T3BlcmF0aW9ufSBmcm9tICcuL29wJztcblxuZXhwb3J0IGNsYXNzIFJlc2hhcGU8VDEgZXh0ZW5kcyBOREFycmF5LCBUMiBleHRlbmRzIE5EQXJyYXk+IGV4dGVuZHMgT3BlcmF0aW9uIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSB4VGVuc29yOiBUZW5zb3IsIHByaXZhdGUgeVRlbnNvcjogVGVuc29yKSB7XG4gICAgc3VwZXIoKTtcbiAgICBjb25zdCB4U2l6ZSA9IHV0aWwuc2l6ZUZyb21TaGFwZSh4VGVuc29yLnNoYXBlKTtcbiAgICBjb25zdCB5U2l6ZSA9IHV0aWwuc2l6ZUZyb21TaGFwZSh5VGVuc29yLnNoYXBlKTtcbiAgICB1dGlsLmFzc2VydChcbiAgICAgICAgeFNpemUgPT09IHlTaXplLFxuICAgICAgICBgVGhlIGlucHV0IHNpemUgKCR7eFNpemV9KSBhbmQgb3V0cHV0IHNpemUgKCR7eVNpemV9KSBtdXN0IG1hdGNoYCk7XG4gIH1cblxuICBmZWVkRm9yd2FyZChtYXRoOiBOREFycmF5TWF0aCwgaW5mZXJlbmNlQXJyYXlzOiBUZW5zb3JBcnJheU1hcCkge1xuICAgIGNvbnN0IHggPSBpbmZlcmVuY2VBcnJheXMuZ2V0KHRoaXMueFRlbnNvcikgYXMgVDE7XG5cbiAgICBtYXRoLnNjb3BlKChrZWVwKSA9PiB7XG4gICAgICBpbmZlcmVuY2VBcnJheXMuc2V0KFxuICAgICAgICAgIHRoaXMueVRlbnNvciwga2VlcChtYXRoLnJlc2hhcGU8VDEsIFQyPih4LCB0aGlzLnlUZW5zb3Iuc2hhcGUpKSk7XG4gICAgfSk7XG4gIH1cblxuICBiYWNrUHJvcChcbiAgICAgIG1hdGg6IE5EQXJyYXlNYXRoLCBpbmZlcmVuY2VBcnJheXM6IFRlbnNvckFycmF5TWFwLFxuICAgICAgZ3JhZGllbnRBcnJheXM6IFRlbnNvckFycmF5TWFwKSB7XG4gICAgY29uc3QgZHkgPSBncmFkaWVudEFycmF5cy5nZXQodGhpcy55VGVuc29yKSBhcyBUMjtcblxuICAgIG1hdGguc2NvcGUoKGtlZXApID0+IHtcbiAgICAgIGdyYWRpZW50QXJyYXlzLnNldChcbiAgICAgICAgICB0aGlzLnhUZW5zb3IsIGtlZXAobWF0aC5yZXNoYXBlPFQyLCBUMT4oZHksIHRoaXMueFRlbnNvci5zaGFwZSkpKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnLi4vZ3JhcGgnO1xuaW1wb3J0IHtOREFycmF5TWF0aH0gZnJvbSAnLi4vbWF0aC9tYXRoJztcbmltcG9ydCB7QXJyYXkxRCwgTkRBcnJheSwgU2NhbGFyfSBmcm9tICcuLi9tYXRoL25kYXJyYXknO1xuaW1wb3J0IHtUZW5zb3JBcnJheU1hcH0gZnJvbSAnLi4vdGVuc29yX2FycmF5X21hcCc7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4uL3V0aWwnO1xuXG5pbXBvcnQge09wZXJhdGlvbn0gZnJvbSAnLi9vcCc7XG5cbmV4cG9ydCBjbGFzcyBTb2Z0bWF4IGV4dGVuZHMgT3BlcmF0aW9uIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsb2dpdHNUZW5zb3I6IFRlbnNvciwgcHJpdmF0ZSBvdXRwdXQ6IFRlbnNvcikge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBmZWVkRm9yd2FyZChtYXRoOiBOREFycmF5TWF0aCwgaW5mZXJlbmNlQXJyYXlzOiBUZW5zb3JBcnJheU1hcCkge1xuICAgIGNvbnN0IGxvZ2l0cyA9IGluZmVyZW5jZUFycmF5cy5nZXQodGhpcy5sb2dpdHNUZW5zb3IpIGFzIEFycmF5MUQ7XG4gICAgcmV0dXJuIG1hdGguc2NvcGUoKGtlZXApID0+IHtcbiAgICAgIGluZmVyZW5jZUFycmF5cy5zZXQodGhpcy5vdXRwdXQsIGtlZXAobWF0aC5zb2Z0bWF4KGxvZ2l0cykpKTtcbiAgICB9KTtcbiAgfVxuXG4gIGJhY2tQcm9wKCkge1xuICAgIHRocm93IEVycm9yKCdTb2Z0bWF4IGJhY2twcm9wIGlzIG5vdCB5ZXQgaW1wbGVtZW50ZWQnKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU29mdG1heENyb3NzRW50cm9weUNvc3QgZXh0ZW5kcyBPcGVyYXRpb24ge1xuICBjb25zdHJ1Y3RvcihcbiAgICAgIHByaXZhdGUgbG9naXRzVGVuc29yOiBUZW5zb3IsIHByaXZhdGUgbGFiZWxUZW5zb3I6IFRlbnNvcixcbiAgICAgIHByaXZhdGUgeVRlbnNvcjogVGVuc29yKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnNvZnRtYXhUZW5zb3IgPSBuZXcgVGVuc29yKGxvZ2l0c1RlbnNvci5zaGFwZSk7XG4gIH1cblxuICBmZWVkRm9yd2FyZChtYXRoOiBOREFycmF5TWF0aCwgaW5mZXJlbmNlQXJyYXlzOiBUZW5zb3JBcnJheU1hcCkge1xuICAgIGNvbnN0IGxvZ2l0cyA9IGluZmVyZW5jZUFycmF5cy5nZXQodGhpcy5sb2dpdHNUZW5zb3IpIGFzIEFycmF5MUQ7XG4gICAgY29uc3QgbGFiZWwgPSBpbmZlcmVuY2VBcnJheXMuZ2V0KHRoaXMubGFiZWxUZW5zb3IpIGFzIEFycmF5MUQ7XG5cbiAgICBtYXRoLnNjb3BlKChrZWVwKSA9PiB7XG4gICAgICBjb25zdCBzb2Z0bWF4UmVzdWx0ID0gbWF0aC5zb2Z0bWF4KGxvZ2l0cyk7XG5cbiAgICAgIGluZmVyZW5jZUFycmF5cy5zZXQodGhpcy5zb2Z0bWF4VGVuc29yLCBrZWVwKHNvZnRtYXhSZXN1bHQpKTtcbiAgICAgIGluZmVyZW5jZUFycmF5cy5zZXQoXG4gICAgICAgICAgdGhpcy55VGVuc29yLFxuICAgICAgICAgIGtlZXAoY3Jvc3NFbnRyb3B5Q29zdChtYXRoLCBzb2Z0bWF4UmVzdWx0LCBsYWJlbCwgdGhpcy5lcHNpbG9uKSkpO1xuICAgIH0pO1xuICB9XG5cbiAgYmFja1Byb3AoXG4gICAgICBtYXRoOiBOREFycmF5TWF0aCwgaW5mZXJlbmNlQXJyYXlzOiBUZW5zb3JBcnJheU1hcCxcbiAgICAgIGdyYWRpZW50QXJyYXlzOiBUZW5zb3JBcnJheU1hcCkge1xuICAgIGNvbnN0IHNvZnRtYXggPSBpbmZlcmVuY2VBcnJheXMuZ2V0KHRoaXMuc29mdG1heFRlbnNvcik7XG4gICAgY29uc3QgbGFiZWwgPSBpbmZlcmVuY2VBcnJheXMuZ2V0KHRoaXMubGFiZWxUZW5zb3IpO1xuXG4gICAgbWF0aC5zY29wZSgoa2VlcCkgPT4ge1xuICAgICAgZ3JhZGllbnRBcnJheXMuc2V0KHRoaXMubG9naXRzVGVuc29yLCBrZWVwKG1hdGguc3ViKHNvZnRtYXgsIGxhYmVsKSkpO1xuICAgIH0pO1xuICB9XG5cbiAgZGlzcG9zZVRyYW5zaWVudEFycmF5cyhcbiAgICAgIGluZmVyZW5jZUFycmF5czogVGVuc29yQXJyYXlNYXAsIGdyYWRpZW50QXJyYXlzOiBUZW5zb3JBcnJheU1hcCkge1xuICAgIGluZmVyZW5jZUFycmF5cy5kaXNwb3NlQXJyYXkodGhpcy5zb2Z0bWF4VGVuc29yKTtcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5lcHNpbG9uLmRpc3Bvc2UoKTtcbiAgfVxuXG4gIHByaXZhdGUgc29mdG1heFRlbnNvcjogVGVuc29yO1xuICBwcml2YXRlIGVwc2lsb24gPSBTY2FsYXIubmV3KDFlLTUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3Jvc3NFbnRyb3B5Q29zdChcbiAgICBtYXRoOiBOREFycmF5TWF0aCwgeTogQXJyYXkxRCwgdGFyZ2V0OiBBcnJheTFELCBlcHNpbG9uOiBTY2FsYXIpOiBTY2FsYXIge1xuICB1dGlsLmFzc2VydChcbiAgICAgIHkuc2l6ZSA9PT0gdGFyZ2V0LnNpemUsICdUaGUgb3V0cHV0IGFuZCB0YXJnZXQgbXVzdCBiZSB0aGUgc2FtZSBzaXplJyk7XG5cbiAgcmV0dXJuIG1hdGguc2NvcGUoKCkgPT4ge1xuICAgIGNvbnN0IHlQbHVzRXBzID0gbWF0aC5zY2FsYXJQbHVzQXJyYXkoZXBzaWxvbiwgeSk7XG4gICAgY29uc3QgbG9nT3V0cHV0ID0gbWF0aC5sb2coeVBsdXNFcHMpO1xuICAgIGNvbnN0IHRhckxvZ091dHB1dCA9IG1hdGguZWxlbWVudFdpc2VNdWwodGFyZ2V0LCBsb2dPdXRwdXQpO1xuICAgIGNvbnN0IGNvc3RWZWN0b3IgPSBtYXRoLm5lZyh0YXJMb2dPdXRwdXQpO1xuICAgIHJldHVybiBtYXRoLnN1bShjb3N0VmVjdG9yKTtcbiAgfSk7XG59XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCB7VGVuc29yfSBmcm9tICcuLi9ncmFwaCc7XG5pbXBvcnQgKiBhcyBncmFwaF91dGlsIGZyb20gJy4uL2dyYXBoX3V0aWwnO1xuaW1wb3J0IHtOREFycmF5TWF0aH0gZnJvbSAnLi4vbWF0aC9tYXRoJztcbmltcG9ydCB7TkRBcnJheSwgU2NhbGFyfSBmcm9tICcuLi9tYXRoL25kYXJyYXknO1xuaW1wb3J0IHtUZW5zb3JBcnJheU1hcH0gZnJvbSAnLi4vdGVuc29yX2FycmF5X21hcCc7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4uL3V0aWwnO1xuXG5pbXBvcnQge09wZXJhdGlvbn0gZnJvbSAnLi9vcCc7XG5cbi8qKlxuICogU3BsaXQgb3BzIGFyZSB1c2VkIHRvIGFjY3VtdWxhdGUgYmFja3Byb3AgZGVyaXZhdGl2ZXMgd2hlbiBhIG5vZGUncyBvdXRwdXRcbiAqIHRlbnNvciBpcyBjb25zdW1lZCBieSBtdWx0aXBsZSBub2Rlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFNwbGl0IGV4dGVuZHMgT3BlcmF0aW9uIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbnB1dDogVGVuc29yLCBwcml2YXRlIG91dHB1dHM6IFRlbnNvcltdKSB7XG4gICAgc3VwZXIoKTtcbiAgICBvdXRwdXRzLmZvckVhY2gob3V0cHV0ID0+IHtcbiAgICAgIHV0aWwuYXNzZXJ0U2hhcGVzTWF0Y2goaW5wdXQuc2hhcGUsIG91dHB1dC5zaGFwZSk7XG4gICAgfSk7XG4gIH1cblxuICBmZWVkRm9yd2FyZChtYXRoOiBOREFycmF5TWF0aCwgaW5mZXJlbmNlQXJyYXlzOiBUZW5zb3JBcnJheU1hcCkge1xuICAgIGNvbnN0IGlucHV0QXJyYXkgPSBpbmZlcmVuY2VBcnJheXMuZ2V0KHRoaXMuaW5wdXQpO1xuICAgIHRoaXMub3V0cHV0cy5mb3JFYWNoKG91dHB1dCA9PiB7XG4gICAgICBpbmZlcmVuY2VBcnJheXMuc2V0KG91dHB1dCwgaW5wdXRBcnJheSk7XG4gICAgfSk7XG4gIH1cblxuICBiYWNrUHJvcChcbiAgICAgIG1hdGg6IE5EQXJyYXlNYXRoLCBpbmZlcmVuY2VBcnJheXM6IFRlbnNvckFycmF5TWFwLFxuICAgICAgZ3JhZGllbnRBcnJheXM6IFRlbnNvckFycmF5TWFwKSB7XG4gICAgaWYgKCFncmFwaF91dGlsLnNob3VsZEJhY2tQcm9wKHRoaXMuaW5wdXQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbWF0aC5zY29wZSgoa2VlcCkgPT4ge1xuICAgICAgbGV0IGR4ID0gbWF0aC5hZGQoXG4gICAgICAgICAgZ3JhZGllbnRBcnJheXMuZ2V0KHRoaXMub3V0cHV0c1swXSksXG4gICAgICAgICAgZ3JhZGllbnRBcnJheXMuZ2V0KHRoaXMub3V0cHV0c1sxXSkpO1xuICAgICAgLy8gU3VtIGFjcm9zcyBhbGwgdGhlIGRlcml2YXRpdmVzIG9mIHRoZSBjb25zdW1lcnMgb2YgdGhpcyBub2RlLlxuICAgICAgdGhpcy5vdXRwdXRzLnNsaWNlKDIpLmZvckVhY2gob3V0cHV0ID0+IHtcbiAgICAgICAgZHggPSBtYXRoLmFkZChkeCwgZ3JhZGllbnRBcnJheXMuZ2V0KG91dHB1dCkpO1xuICAgICAgfSk7XG4gICAgICBncmFkaWVudEFycmF5cy5zZXQodGhpcy5pbnB1dCwga2VlcChkeCkpO1xuICAgIH0pO1xuICB9XG59XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCB7VGVuc29yfSBmcm9tICcuLi9ncmFwaCc7XG5pbXBvcnQgKiBhcyBncmFwaF91dGlsIGZyb20gJy4uL2dyYXBoX3V0aWwnO1xuaW1wb3J0IHtOREFycmF5TWF0aH0gZnJvbSAnLi4vbWF0aC9tYXRoJztcbmltcG9ydCB7TkRBcnJheSwgU2NhbGFyfSBmcm9tICcuLi9tYXRoL25kYXJyYXknO1xuaW1wb3J0IHtUZW5zb3JBcnJheU1hcH0gZnJvbSAnLi4vdGVuc29yX2FycmF5X21hcCc7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4uL3V0aWwnO1xuXG5pbXBvcnQge09wZXJhdGlvbn0gZnJvbSAnLi9vcCc7XG5cbmV4cG9ydCBjbGFzcyBTdWJ0cmFjdCBleHRlbmRzIE9wZXJhdGlvbiB7XG4gIHByaXZhdGUgZHlTaXplU2NhbGFyOiBTY2FsYXI7XG5cbiAgLyoqXG4gICAqIEVsZW1lbnQtd2lzZSBzdWJ0cmFjdCBvcGVyYXRpb24uIEJyb2FkY2FzdHMgaWYgb25lIG9mIHRoZSB0ZW5zb3JzIGlzXG4gICAqIHNjYWxhci5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgcHJpdmF0ZSB0MTogVGVuc29yLCBwcml2YXRlIHQyOiBUZW5zb3IsIHByaXZhdGUgb3V0VGVuc29yOiBUZW5zb3IpIHtcbiAgICBzdXBlcigpO1xuICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICB1dGlsLnNpemVGcm9tU2hhcGUodDEuc2hhcGUpID09PSAxIHx8XG4gICAgICAgICAgICB1dGlsLnNpemVGcm9tU2hhcGUodDIuc2hhcGUpID09PSAxIHx8XG4gICAgICAgICAgICB1dGlsLmFycmF5c0VxdWFsKHQxLnNoYXBlLCB0Mi5zaGFwZSksXG4gICAgICAgICdPbmUgb2YgdDEgb3IgdDIgbXVzdCBiZSBhIHNjYWxhciwgb3IgdDEgYW5kIHQyIG11c3QgaGF2ZSAnICtcbiAgICAgICAgICAgICd0aGUgc2FtZSBzaGFwZScpO1xuICB9XG5cbiAgZmVlZEZvcndhcmQobWF0aDogTkRBcnJheU1hdGgsIGluZmVyZW5jZUFycmF5czogVGVuc29yQXJyYXlNYXApIHtcbiAgICBjb25zdCB0MSA9IGluZmVyZW5jZUFycmF5cy5nZXQodGhpcy50MSk7XG4gICAgY29uc3QgdDIgPSBpbmZlcmVuY2VBcnJheXMuZ2V0KHRoaXMudDIpO1xuXG4gICAgbWF0aC5zY29wZSgoa2VlcCkgPT4ge1xuICAgICAgbGV0IHJlc3VsdDogTkRBcnJheTtcbiAgICAgIGlmICh1dGlsLmlzU2NhbGFyU2hhcGUodDEuc2hhcGUpKSB7XG4gICAgICAgIHJlc3VsdCA9IG1hdGguc2NhbGFyTWludXNBcnJheSh0MSwgdDIpO1xuICAgICAgfSBlbHNlIGlmICh1dGlsLmlzU2NhbGFyU2hhcGUodDIuc2hhcGUpKSB7XG4gICAgICAgIHJlc3VsdCA9IG1hdGguYXJyYXlNaW51c1NjYWxhcih0MSwgdDIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gbWF0aC5zdWIodDEsIHQyKTtcbiAgICAgIH1cbiAgICAgIGluZmVyZW5jZUFycmF5cy5zZXQodGhpcy5vdXRUZW5zb3IsIGtlZXAocmVzdWx0KSk7XG4gICAgfSk7XG4gIH1cblxuICBiYWNrUHJvcChcbiAgICAgIG1hdGg6IE5EQXJyYXlNYXRoLCBpbmZlcmVuY2VBcnJheXM6IFRlbnNvckFycmF5TWFwLFxuICAgICAgZ3JhZGllbnRBcnJheXM6IFRlbnNvckFycmF5TWFwKSB7XG4gICAgY29uc3QgdDEgPSBpbmZlcmVuY2VBcnJheXMuZ2V0KHRoaXMudDEpO1xuICAgIGNvbnN0IHQyID0gaW5mZXJlbmNlQXJyYXlzLmdldCh0aGlzLnQyKTtcbiAgICBjb25zdCBkeSA9IGdyYWRpZW50QXJyYXlzLmdldCh0aGlzLm91dFRlbnNvcik7XG5cbiAgICBtYXRoLnNjb3BlKChrZWVwKSA9PiB7XG4gICAgICBpZiAoZ3JhcGhfdXRpbC5zaG91bGRCYWNrUHJvcCh0aGlzLnQxKSkge1xuICAgICAgICBpZiAodXRpbC5pc1NjYWxhclNoYXBlKHRoaXMudDEuc2hhcGUpKSB7XG4gICAgICAgICAgY29uc3Qgc3VtID0gbWF0aC5zdW0oZHkpO1xuICAgICAgICAgIGlmICh0aGlzLmR5U2l6ZVNjYWxhciA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmR5U2l6ZVNjYWxhciA9IFNjYWxhci5uZXcoZHkuc2l6ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGdyYWRpZW50QXJyYXlzLnNldChcbiAgICAgICAgICAgICAgdGhpcy50MSwga2VlcChtYXRoLmRpdmlkZShzdW0sIHRoaXMuZHlTaXplU2NhbGFyKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdyYWRpZW50QXJyYXlzLnNldCh0aGlzLnQxLCBrZWVwKGR5KSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGdyYXBoX3V0aWwuc2hvdWxkQmFja1Byb3AodGhpcy50MikpIHtcbiAgICAgICAgaWYgKHV0aWwuaXNTY2FsYXJTaGFwZSh0aGlzLnQyLnNoYXBlKSkge1xuICAgICAgICAgIGNvbnN0IHN1bSA9IG1hdGguc3VtKGR5KTtcbiAgICAgICAgICBjb25zdCBuZWdTdW0gPSBtYXRoLm5lZyhzdW0pO1xuICAgICAgICAgIGlmICh0aGlzLmR5U2l6ZVNjYWxhciA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmR5U2l6ZVNjYWxhciA9IFNjYWxhci5uZXcoZHkuc2l6ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGdyYWRpZW50QXJyYXlzLnNldChcbiAgICAgICAgICAgICAgdGhpcy50Miwga2VlcChtYXRoLmRpdmlkZShuZWdTdW0sIHRoaXMuZHlTaXplU2NhbGFyKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdyYWRpZW50QXJyYXlzLnNldCh0aGlzLnQyLCBrZWVwKG1hdGgubmVnKGR5KSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIGlmICh0aGlzLmR5U2l6ZVNjYWxhciAhPSBudWxsKSB7XG4gICAgICB0aGlzLmR5U2l6ZVNjYWxhci5kaXNwb3NlKCk7XG4gICAgfVxuICB9XG59XG4iLCIvKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmltcG9ydCB7Tm9kZSwgVGVuc29yLCBWYXJpYWJsZU5vZGV9IGZyb20gJy4vZ3JhcGgnO1xuaW1wb3J0IHtOREFycmF5TWF0aH0gZnJvbSAnLi9tYXRoL21hdGgnO1xuaW1wb3J0IHtTZXNzaW9uUnVudGltZX0gZnJvbSAnLi9zZXNzaW9uJztcbmltcG9ydCB7VGVuc29yQXJyYXlNYXB9IGZyb20gJy4vdGVuc29yX2FycmF5X21hcCc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBPcHRpbWl6ZXIge1xuICBwcm90ZWN0ZWQgdmFyaWFibGVOb2RlczogVmFyaWFibGVOb2RlW107XG4gIHByb3RlY3RlZCBzcGVjaWZpZWRWYXJpYWJsZU5vZGVzOiBWYXJpYWJsZU5vZGVbXXxudWxsO1xuXG4gIGNvbnN0cnVjdG9yKHNwZWNpZmllZFZhcmlhYmxlTGlzdD86IE5vZGVbXSkge1xuICAgIGlmIChzcGVjaWZpZWRWYXJpYWJsZUxpc3QgIT0gbnVsbCkge1xuICAgICAgdGhpcy5zcGVjaWZpZWRWYXJpYWJsZU5vZGVzID0gc3BlY2lmaWVkVmFyaWFibGVMaXN0IGFzIFZhcmlhYmxlTm9kZVtdO1xuICAgIH1cbiAgfVxuXG4gIGFic3RyYWN0IGJlZm9yZUJhdGNoKFxuICAgICAgbWF0aDogTkRBcnJheU1hdGgsIGJhdGNoU2l6ZTogbnVtYmVyLCBydW50aW1lOiBTZXNzaW9uUnVudGltZSxcbiAgICAgIGFjdGl2YXRpb25BcnJheU1hcDogVGVuc29yQXJyYXlNYXAsXG4gICAgICBncmFkaWVudEFycmF5TWFwOiBUZW5zb3JBcnJheU1hcCk6IHZvaWQ7XG5cbiAgYWJzdHJhY3QgYWZ0ZXJFeGFtcGxlKFxuICAgICAgbWF0aDogTkRBcnJheU1hdGgsIHJ1bnRpbWU6IFNlc3Npb25SdW50aW1lLFxuICAgICAgYWN0aXZhdGlvbkFycmF5TWFwOiBUZW5zb3JBcnJheU1hcCxcbiAgICAgIGdyYWRpZW50QXJyYXlNYXA6IFRlbnNvckFycmF5TWFwKTogdm9pZDtcblxuICBhYnN0cmFjdCBhZnRlckJhdGNoKFxuICAgICAgbWF0aDogTkRBcnJheU1hdGgsIGJhdGNoU2l6ZTogbnVtYmVyLCBydW50aW1lOiBTZXNzaW9uUnVudGltZSxcbiAgICAgIGFjdGl2YXRpb25BcnJheU1hcDogVGVuc29yQXJyYXlNYXAsXG4gICAgICBncmFkaWVudEFycmF5TWFwOiBUZW5zb3JBcnJheU1hcCk6IHZvaWQ7XG5cbiAgYWJzdHJhY3QgZGlzcG9zZSgpOiB2b2lkO1xufVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG4vKipcbiAqIERlZmF1bHQgY29tcGFyaXNvbiBmdW5jdGlvbiBmb3IgdGhlIHByaW9yaXR5IHF1ZXVlLlxuICogQHBhcmFtIGEgVGhlIGZpcnN0IGVsZW1lbnQgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSBiIFRoZSBzZWNvbmQgZWxlbWVudCB0byBjb21wYXJlLlxuICogQHJldHVybiBcImEgPiBiXCIgcmV0dXJucyA+IDAuIFwiYSA8IGJcIiByZXR1cm5zIDwgMC4gXCJhID09PSBiXCIgcmV0dXJucyAwLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdENvbXBhcmU8VD4oYTogVCwgYjogVCk6IG51bWJlciB7XG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIDA7XG4gIH0gZWxzZSBpZiAoYSA8IGIpIHtcbiAgICByZXR1cm4gLTE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbn1cblxuLyoqXG4gKiBBIENvbXBhcmF0b3IgaXMgYSB1c2VyLXByb3ZpZGVkIGZ1bmN0aW9uIHRoYXQgY29tcGFyZXMgdHdvIFQgaW5zdGFuY2VzLiBUaGVcbiAqIGNvbnZlbnRpb24gZm9yIGRlZmF1bHRDb21wYXJlIGlzIGV4cGVjdGVkIHRvIGJlIGZvbGxvd2VkIHRvIG1haW50YWluIHRoZVxuICogYmluYXJ5IG1pbi1oZWFwIGludGVncml0eS5cbiAqIEBwYXJhbSBhIFRoZSBmaXJzdCBlbGVtZW50IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0gYiBUaGUgc2Vjb25kIGVsZW1lbnQgdG8gY29tcGFyZS5cbiAqL1xuZXhwb3J0IHR5cGUgQ29tcGFyYXRvcjxUPiA9IChhOiBULCBiOiBUKSA9PiBudW1iZXI7XG5cbi8qKlxuICogSW5kZXhPYnNlcnZlciBpcyBhIHVzZXItcHJvdmlkZWQgY2FsbGJhY2sgdGhhdCBpbmZvcm1zIHRoZSBjYWxsZXIgd2hlbiBhblxuICogZWxlbWVudCBpbiB0aGUgcHJpb3JpdHkgcXVldWUncyBiaW5hcnkgbWluLWhlYXAgaGFzIGJlZW4gcmVsb2NhdGVkLlxuICogQHBhcmFtIHQgVGhlIGVsZW1lbnQgdGhhdCB3YXMgcmVsb2NhdGVkLlxuICogQHBhcmFtIG5ld0luZGV4IFRoZSBuZXcgbG9jYXRpb24gaW4gdGhlIGJpbmFyeSBtaW4taGVhcCBvZiB0aGUgZWxlbWVudC5cbiAqL1xuZXhwb3J0IHR5cGUgSW5kZXhPYnNlcnZlcjxUPiA9ICh0OiBULCBuZXdJbmRleDogbnVtYmVyKSA9PiB2b2lkO1xuXG4vKipcbiAqIEEgcHJpb3JpdHkgcXVldWUsIGltcGxlbWVudGVkIGluIHRlcm1zIG9mIGEgYmluYXJ5IG1pbi1oZWFwLiBMb3dlciBwcmlvcml0eVxuICogbnVtYmVycyBhcmUgY29uc2lkZXJlZCBoaWdoZXIgcHJpb3JpdHkuXG4gKiBlbnF1ZXVlLCBkZXF1ZXVlLCBhbmQgdXBkYXRlIGFyZSBhbGwgTyhsb2cgTikgd2l0aCByZXNwZWN0IHRvIHRoZSBudW1iZXIgb2ZcbiAqIGVsZW1lbnRzIGluIHRoZSBxdWV1ZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFByaW9yaXR5UXVldWU8VD4ge1xuICBwcml2YXRlIGhlYXA6IFRbXSA9IFtdO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0gY29tcGFyYXRvciBBIGZ1bmN0aW9uIHRoYXQgY29tcGFyZXMgdHdvIHF1ZXVlIGVsZW1lbnRzLlxuICAgKiBAcGFyYW0gaW5kZXhPYnNlcnZlciBBbiBvcHRpb25hbCBjYWxsYmFjayByYWlzZWQgd2hlbiB0aGUgcHJpb3JpdHkgcXVldWVcbiAgICogY2hhbmdlcyB0aGUgb3JkZXIgb2YgZWxlbWVudHMgaW4gaXRzIG1pbi1oZWFwLiBVc2VmdWwgZm9yIHRyYWNraW5nIHRoZVxuICAgKiBwb3NpdGlvbnMgb2YgZWxlbWVudHMgdGhhdCBuZWVkIHVwZGF0aW5nLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgICBwcml2YXRlIGNvbXBhcmF0b3I6IENvbXBhcmF0b3I8VD4sXG4gICAgICBwcml2YXRlIGluZGV4T2JzZXJ2ZXI/OiBJbmRleE9ic2VydmVyPFQ+KSB7fVxuXG4gIC8qKlxuICAgKiBBZGQgYW4gZWxlbWVudCB0byB0aGUgcHJpb3JpdHkgcXVldWUuXG4gICAqIEBwYXJhbSB0IFRoZSBlbGVtZW50IHRvIGVucXVldWUuXG4gICAqL1xuICBlbnF1ZXVlKHQ6IFQpIHtcbiAgICB0aGlzLmhlYXAucHVzaCh0KTtcbiAgICB0aGlzLm9uSW5kZXhDaGFuZ2VkKHQsIHRoaXMuaGVhcC5sZW5ndGggLSAxKTtcbiAgICB0aGlzLnNpZnRVcCh0aGlzLmhlYXAubGVuZ3RoIC0gMSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFuIGVsZW1lbnQgZnJvbSB0aGUgcHJpb3JpdHkgcXVldWUuXG4gICAqIEByZXR1cm4gVGhlIGVsZW1lbnQgaW4gdGhlIHByaW9yaXR5IHF1ZXVlIHdpdGggdGhlIGhpZ2hlc3QgcHJpb3JpdHlcbiAgICogKGxvd2VzdCBudW1lcmljIHByaW9yaXR5IHZhbHVlKS5cbiAgICovXG4gIGRlcXVldWUoKTogVCB7XG4gICAgaWYgKHRoaXMuZW1wdHkoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdkZXF1ZXVlIGNhbGxlZCBvbiBlbXB0eSBwcmlvcml0eSBxdWV1ZS4nKTtcbiAgICB9XG4gICAgY29uc3QgdCA9IHRoaXMuaGVhcFswXTtcbiAgICB0aGlzLnN3YXAoMCwgdGhpcy5oZWFwLmxlbmd0aCAtIDEpO1xuICAgIHRoaXMuaGVhcC5wb3AoKTtcbiAgICB0aGlzLnNpZnREb3duKDApO1xuICAgIHJldHVybiB0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYW4gZWxlbWVudCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4LiBUaGlzIGNhbiBiZSBhIGZ1bGwgZWxlbWVudFxuICAgKiByZXBsYWNlbWVudCwgb3IgaXQgY2FuIGJlIGFuIGluLXBsYWNlIHVwZGF0ZS4gVGhlIHByaW9yaXR5IGlzIGFzc3VtZWQgdG8gYmVcbiAgICogY2hhbmdlZCwgYW5kIHRoZSBpbnRlcm5hbCBzdG9yYWdlIGlzIHVwZGF0ZWQuIFRoaXMgZnVuY3Rpb24gaXMgb25seSB1c2VmdWxcbiAgICogaWYgdGhlIHN0b3JhZ2UgaW5kZXggb2YgdGhlIHVwZGF0ZWQgZWxlbWVudCBpcyBrbm93bjsgY29uc3RydWN0IHRoZVxuICAgKiBQcmlvcml0eVF1ZXVlIHdpdGggYW4gSW5kZXhPYnNlcnZlciB0byB0cmFjayBlbGVtZW50IGxvY2F0aW9ucy5cbiAgICogQHBhcmFtIG5ld1QgVGhlIG5ldyBlbGVtZW50IHRvIHJlcGxhY2UgaW4gdGhlIHByaW9yaXR5IHF1ZXVlLlxuICAgKiBAcGFyYW0gaW5kZXggVGhlIGluZGV4IHRvIGluc2VydCB0aGUgbmV3IGVsZW1lbnQgaW50by5cbiAgICovXG4gIHVwZGF0ZShuZXdUOiBULCBpbmRleDogbnVtYmVyKSB7XG4gICAgLyogSWYgdGhlIGVsZW1lbnQgaXMgYXQgdGhlIHZlcnkgZW5kIG9mIHRoZSBoZWFwLCBubyBzaWZ0aW5nIGlzIG5lY2Vzc2FyeSxcbiAgICAgKiBpdCBjYW4gYmUgc2FmZWx5IHJlbW92ZWQuICovXG4gICAgY29uc3QgbGFzdCA9IChpbmRleCA9PT0gdGhpcy5oZWFwLmxlbmd0aCAtIDEpO1xuICAgIGlmICghbGFzdCkge1xuICAgICAgdGhpcy5zd2FwKGluZGV4LCB0aGlzLmhlYXAubGVuZ3RoIC0gMSk7XG4gICAgfVxuICAgIHRoaXMuaGVhcC5wb3AoKTtcbiAgICBpZiAoIWxhc3QpIHtcbiAgICAgIC8qIFRoZSBlbGVtZW50IGF0ICdpbmRleCcgaGFzIGJlZW4gcmVtb3ZlZCwgYW5kIHJlcGxhY2VkIHdpdGggd2hhdGV2ZXIgd2FzXG4gICAgICAgKiBhdCB0aGUgZW5kIG9mIHRoZSBoZWFwLiBTaW5jZSB0aGF0IGVsZW1lbnQgbWlnaHQgaGF2ZSBjb21lIGZyb20gYVxuICAgICAgICogZGlmZmVyZW50IHN1YnRyZWUgKGFuZCBub3QgYmUgYSBkaXJlY3QgZGVzY2VuZGFudCBvZiB0aGUgbm9kZSBhdFxuICAgICAgICogJ2luZGV4JyksIHdlIG1pZ2h0IG5lZWQgdG8gc2lmdCB0aGlzIG5ldyB2YWx1ZSB1cCBpbnN0ZWFkIG9mIGRvd24uIFRlc3RcbiAgICAgICAqIGJvdGggZGlyZWN0aW9ucywgYW5kIHNpZnQgdG8gd2hlcmV2ZXIgdGhlIG5vZGUgbmVlZHMgdG8gZ28uXG4gICAgICAgKi9cbiAgICAgIGlmICh0aGlzLnNpZnRVcEluZGV4KGluZGV4KSAhPT0gLTEpIHtcbiAgICAgICAgdGhpcy5zaWZ0VXAoaW5kZXgpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnNpZnREb3duSW5kZXgoaW5kZXgpICE9PSAtMSkge1xuICAgICAgICB0aGlzLnNpZnREb3duKGluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5lbnF1ZXVlKG5ld1QpO1xuICB9XG5cbiAgLyoqXG4gICAqIFByZWRpY2F0ZSBmb3IgdGVzdGluZyB3aGV0aGVyIHRoZSBQcmlvcml0eVF1ZXVlIGlzIGVtcHR5LlxuICAgKiBAcmV0dXJuIFRydWUgaWYgdGhlIFByaW9yaXR5UXVldWUgaXMgZW1wdHksIG90aGVyd2lzZSBGYWxzZS5cbiAgICovXG4gIGVtcHR5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmhlYXAubGVuZ3RoID09PSAwO1xuICB9XG5cbiAgcHJpdmF0ZSBvbkluZGV4Q2hhbmdlZCh0OiBULCBuZXdJbmRleDogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuaW5kZXhPYnNlcnZlcikge1xuICAgICAgdGhpcy5pbmRleE9ic2VydmVyKHQsIG5ld0luZGV4KTtcbiAgICB9XG4gIH1cblxuICAvKlxuICAgKiBTdGFuZGFyZCB6ZXJvLWluZGV4ZWQgYmluYXJ5IGhlYXAgYXJyYXkgbGF5b3V0OlxuICAgKiAgIFBhcmVudChOKSA9IEZsb29yKChOIC0gMSkgLyAyKVxuICAgKiAgIExlZnRDaGlsZChOKSA9IChOICogMikgKyAxXG4gICAqICAgUmlnaHRDaGlsZChOKSA9IChOICogMikgKyAyXG4gICAqL1xuXG4gIHByaXZhdGUgZ2V0UGFyZW50SW5kZXgoaW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIHJldHVybiBNYXRoLmZsb29yKChpbmRleCAtIDEpIC8gMik7XG4gIH1cblxuICBwcml2YXRlIGdldExlZnRDaGlsZEluZGV4KGluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IGNhbmRpZGF0ZSA9IGluZGV4ICogMiArIDE7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSA8IHRoaXMuaGVhcC5sZW5ndGggPyBjYW5kaWRhdGUgOiAtMTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0UmlnaHRDaGlsZEluZGV4KGluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IGNhbmRpZGF0ZSA9IGluZGV4ICogMiArIDI7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSA8IHRoaXMuaGVhcC5sZW5ndGggPyBjYW5kaWRhdGUgOiAtMTtcbiAgfVxuXG4gIHByaXZhdGUgc2lmdFVwSW5kZXgoaW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgY29uc3QgcGFyZW50SW5kZXggPSB0aGlzLmdldFBhcmVudEluZGV4KGluZGV4KTtcbiAgICBpZiAocGFyZW50SW5kZXggPT09IC0xKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGlmICh0aGlzLmNvbXBhcmUocGFyZW50SW5kZXgsIGluZGV4KSA+IDApIHtcbiAgICAgIHJldHVybiBwYXJlbnRJbmRleDtcbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgcHJpdmF0ZSBzaWZ0VXAoaW5kZXg6IG51bWJlcikge1xuICAgIGxldCBzaWZ0SW5kZXggPSB0aGlzLnNpZnRVcEluZGV4KGluZGV4KTtcbiAgICB3aGlsZSAoc2lmdEluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5zd2FwKGluZGV4LCBzaWZ0SW5kZXgpO1xuICAgICAgaW5kZXggPSBzaWZ0SW5kZXg7XG4gICAgICBzaWZ0SW5kZXggPSB0aGlzLnNpZnRVcEluZGV4KGluZGV4KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNpZnREb3duSW5kZXgoaW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKGluZGV4ID49IHRoaXMuaGVhcC5sZW5ndGgpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgbGV0IGxhcmdlc3RDaGlsZEluZGV4ID0gaW5kZXg7XG4gICAgY29uc3QgbGVmdENoaWxkSW5kZXggPSB0aGlzLmdldExlZnRDaGlsZEluZGV4KGluZGV4KTtcbiAgICBpZiAoKGxlZnRDaGlsZEluZGV4ICE9PSAtMSkgJiZcbiAgICAgICAgKHRoaXMuY29tcGFyZShsZWZ0Q2hpbGRJbmRleCwgbGFyZ2VzdENoaWxkSW5kZXgpIDwgMCkpIHtcbiAgICAgIGxhcmdlc3RDaGlsZEluZGV4ID0gbGVmdENoaWxkSW5kZXg7XG4gICAgfVxuICAgIGNvbnN0IHJpZ2h0Q2hpbGRJbmRleCA9IHRoaXMuZ2V0UmlnaHRDaGlsZEluZGV4KGluZGV4KTtcbiAgICBpZiAoKHJpZ2h0Q2hpbGRJbmRleCAhPT0gLTEpICYmXG4gICAgICAgICh0aGlzLmNvbXBhcmUocmlnaHRDaGlsZEluZGV4LCBsYXJnZXN0Q2hpbGRJbmRleCkgPCAwKSkge1xuICAgICAgbGFyZ2VzdENoaWxkSW5kZXggPSByaWdodENoaWxkSW5kZXg7XG4gICAgfVxuICAgIHJldHVybiAobGFyZ2VzdENoaWxkSW5kZXggPT09IGluZGV4KSA/IC0xIDogbGFyZ2VzdENoaWxkSW5kZXg7XG4gIH1cblxuICBwcml2YXRlIHNpZnREb3duKGluZGV4OiBudW1iZXIpIHtcbiAgICBsZXQgc2lmdEluZGV4ID0gdGhpcy5zaWZ0RG93bkluZGV4KGluZGV4KTtcbiAgICB3aGlsZSAoc2lmdEluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5zd2FwKGluZGV4LCBzaWZ0SW5kZXgpO1xuICAgICAgaW5kZXggPSBzaWZ0SW5kZXg7XG4gICAgICBzaWZ0SW5kZXggPSB0aGlzLnNpZnREb3duSW5kZXgoaW5kZXgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY29tcGFyZShhSW5kZXg6IG51bWJlciwgYkluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmNvbXBhcmF0b3IodGhpcy5oZWFwW2FJbmRleF0sIHRoaXMuaGVhcFtiSW5kZXhdKTtcbiAgfVxuXG4gIHByaXZhdGUgc3dhcChhOiBudW1iZXIsIGI6IG51bWJlcikge1xuICAgIGNvbnN0IHRlbXAgPSB0aGlzLmhlYXBbYV07XG4gICAgdGhpcy5oZWFwW2FdID0gdGhpcy5oZWFwW2JdO1xuICAgIHRoaXMuaGVhcFtiXSA9IHRlbXA7XG4gICAgdGhpcy5vbkluZGV4Q2hhbmdlZCh0aGlzLmhlYXBbYV0sIGEpO1xuICAgIHRoaXMub25JbmRleENoYW5nZWQodGhpcy5oZWFwW2JdLCBiKTtcbiAgfVxufVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQge0dyYXBoLCBOb2RlLCBUZW5zb3J9IGZyb20gJy4vZ3JhcGgnO1xuaW1wb3J0ICogYXMgZ3JhcGhfdXRpbCBmcm9tICcuL2dyYXBoX3V0aWwnO1xuaW1wb3J0IHtJbnB1dFByb3ZpZGVyfSBmcm9tICcuL2lucHV0X3Byb3ZpZGVyJztcbmltcG9ydCB7TkRBcnJheU1hdGh9IGZyb20gJy4vbWF0aC9tYXRoJztcbmltcG9ydCB7TkRBcnJheSwgU2NhbGFyfSBmcm9tICcuL21hdGgvbmRhcnJheSc7XG5pbXBvcnQgKiBhcyBvcGVyYXRpb25fZW1pdHRlciBmcm9tICcuL29wZXJhdGlvbl9lbWl0dGVyJztcbmltcG9ydCB7T3BlcmF0aW9ufSBmcm9tICcuL29wcy9vcCc7XG5pbXBvcnQge09wdGltaXplcn0gZnJvbSAnLi9vcHRpbWl6ZXInO1xuaW1wb3J0ICogYXMgc2Vzc2lvbl91dGlsIGZyb20gJy4vc2Vzc2lvbl91dGlsJztcbmltcG9ydCB7VGVuc29yQXJyYXlNYXB9IGZyb20gJy4vdGVuc29yX2FycmF5X21hcCc7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4vdXRpbCc7XG5cbi8qKlxuICogRmVlZEVudHJ5IGFzc29jaWF0ZXMgYSB0ZW5zb3Igd2l0aCB1c2VyLXByb3ZpZGVkIE5EQXJyYXkgZGF0YS5cbiAqL1xuZXhwb3J0IHR5cGUgRmVlZEVudHJ5ID0ge1xuICB0ZW5zb3I6IFRlbnNvcixcbiAgZGF0YTogTkRBcnJheXxJbnB1dFByb3ZpZGVyXG59O1xuXG4vKipcbiAqIEEgRmVlZERpY3Rpb25hcnkgaG9sZHMgYSBtYXAgZnJvbSB0ZW5zb3JzIHRvIHVzZXItcHJvdmlkZWQgTkRBcnJheXMuIEZlZWRcbiAqIGRpY3Rpb25hcmllcyByZXByZXNlbnQgdGhlICdlbnRyeSBwb2ludHMnIG9mIGV2YWx1YXRpb24sIHNpbmNlIGdyYXBoIG5vZGVzXG4gKiB0aGF0IGFyZSByZXBsYWNlZCBieSBmZWVkcyBkb24ndCBuZWVkIHRvIGhhdmUgdGhlaXIgaW5wdXQgbm9kZXMgZXZhbHVhdGVkLlxuICogRmVlZCBkaWN0aW9uYXJpZXMgdXN1YWxseSBwcm92aWRlIE5EQXJyYXkgZGF0YSBmb3IgUGxhY2Vob2xkZXIgbm9kZXMsIGJ1dCBhbnlcbiAqIG5vZGUgaW4gdGhlIGdyYXBoIGNhbiBiZSByZXBsYWNlZCBieSBhIGZlZWQgZGljdGlvbmFyeSBlbnRyeS5cbiAqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBGZWVkRGljdGlvbmFyeSB7XG4gIGRpY3Q6IHtbdGVuc29ySUQ6IG51bWJlcl06IEZlZWRFbnRyeX0gPSB7fTtcblxuICAvKipcbiAgICogT3B0aW9uYWxseSBjb25zdHJ1Y3QgYSBGZWVkRGljdGlvbmFyeSBmcm9tIGFuIGFycmF5IG9mIGVudHJpZXMuXG4gICAqIEBwYXJhbSBmZWVkRW50cmllcyBPcHRpb25hbCBhcnJheSBvZiBGZWVkRW50cnkgb2JqZWN0cy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGZlZWRFbnRyaWVzPzogRmVlZEVudHJ5W10pIHtcbiAgICBpZiAoZmVlZEVudHJpZXMpIHtcbiAgICAgIGZlZWRFbnRyaWVzLmZvckVhY2goZW50cnkgPT4gdGhpcy5kaWN0W2VudHJ5LnRlbnNvci5pZF0gPSBlbnRyeSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBlbnVtIENvc3RSZWR1Y3Rpb24ge1xuICBOT05FLFxuICBTVU0sXG4gIE1FQU5cbn1cblxuLyoqXG4gKiBBIFNlc3Npb24gbWFpbnRhaW5zIHRoZSBydW50aW1lIHN0YXRlIHJlcXVpcmVkIHRvIGVmZmljaWVudGx5IGV2YWx1YXRlIG5vZGVzLlxuICogT24gdGhlaXIgb3duLCBncmFwaCBvYmplY3RzIGFyZSB2ZXJ5IGxpZ2h0d2VpZ2h0IGxvZ2ljYWwgdG9wb2xvZ2llczsgdGhleVxuICogaGF2ZSBubyByZWxhdGlvbnNoaXAgd2l0aCB0aGUgR1BVLiBTZXNzaW9ucyBlbmNhcHN1bGF0ZSB0aGUgZXZhbHVhdGlvbiBvZlxuICogbm9kZXMsIHRoZSBtYW5hZ2VtZW50IG9mIEdQVSByZXNvdXJjZXMsIHRoZSBjYWNoaW5nIG9mIGV2YWx1YXRpb24gcGF0aHMsIGFuZFxuICogYW55dGhpbmcgZWxzZSByZXF1aXJlZCB0byBldmFsdWF0ZSBvciB0cmFpbiBhIG5ldHdvcmsuXG4gKi9cbmV4cG9ydCBjbGFzcyBTZXNzaW9uIHtcbiAgLyoqXG4gICAqIEBwYXJhbSBncmFwaCBUaGUgZ3JhcGggdG8gYXNzb2NpYXRlIHdpdGggdGhpcyBTZXNzaW9uLlxuICAgKiBAcGFyYW0gbWF0aCBUaGUgTkRBcnJheU1hdGggaW50ZXJmYWNlIHRoYXQgdGhpcyBTZXNzaW9uIHNob3VsZCB1c2UuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGdyYXBoOiBHcmFwaCwgcHJpdmF0ZSBtYXRoOiBOREFycmF5TWF0aCkge31cblxuICAvKipcbiAgICogUmVsZWFzZSBhbGwgc3lzdGVtIHJlc291cmNlcyBhc3NvY2lhdGVkIHdpdGggdGhpcyBTZXNzaW9uLlxuICAgKi9cbiAgZGlzcG9zZSgpIHtcbiAgICB0aGlzLmFjdGl2YXRpb25BcnJheU1hcC5kaXNwb3NlKCk7XG4gICAgT2JqZWN0LmtleXModGhpcy5ydW50aW1lQ2FjaGUpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGNvbnN0IHJ1bnRpbWUgPSB0aGlzLnJ1bnRpbWVDYWNoZVtrZXldO1xuICAgICAgaWYgKHJ1bnRpbWUub3BlcmF0aW9ucykge1xuICAgICAgICBydW50aW1lLm9wZXJhdGlvbnMuZm9yRWFjaChvcCA9PiBvcC5kaXNwb3NlKCkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMucnVudGltZUNhY2hlID0ge307XG4gICAgaWYgKHRoaXMuYmF0Y2hTaXplU2NhbGFyICE9IG51bGwpIHtcbiAgICAgIHRoaXMuYmF0Y2hTaXplU2NhbGFyLmRpc3Bvc2UoKTtcbiAgICB9XG4gICAgdGhpcy5vbmVTY2FsYXIuZGlzcG9zZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEV2YWx1YXRlIGEgbGlzdCBvZiB0ZW5zb3JzLCB1c2luZyB0aGUgcHJvdmlkZWQgZmVlZCBlbnRyaWVzIHRvIHByb3ZpZGVcbiAgICogdXBzdHJlYW0gTkRBcnJheSBpbnB1dC5cbiAgICogV2hlbiB1c2luZyBhIGBOREFycmF5TWF0aGAgb2JqZWN0IGluIHNhZmUgbW9kZSB0aGlzIG11c3QgYmUgdXNlZCBpbiBhXG4gICAqIG1hdGguc2NvcGUoKS5cbiAgICogQHBhcmFtIHRlbnNvcnMgVGhlIGxpc3Qgb2YgdGVuc29ycyB0byBldmFsdWF0ZS5cbiAgICogQHBhcmFtIGZlZWRFbnRyaWVzIExpc3Qgb2YgYEZlZWRFbnRyeWAgdG8gcmVhZCB3aGVuIHJlcGxhY2luZyBncmFwaFxuICAgKiB0ZW5zb3JzIHdpdGggTkRBcnJheXMuXG4gICAqIEByZXR1cm4gVGhlIGNvbXB1dGVkIHZhbHVlcyBvZiB0aGUgdGVuc29ycy5cbiAgICovXG4gIGV2YWxBbGwodGVuc29yczogVGVuc29yW10sIGZlZWRFbnRyaWVzOiBGZWVkRW50cnlbXSk6IE5EQXJyYXlbXSB7XG4gICAgcmV0dXJuIHRoaXMubWF0aC5zY29wZSgoKSA9PiB7XG4gICAgICBjb25zdCBmZWVkID0gbmV3IEZlZWREaWN0aW9uYXJ5KGZlZWRFbnRyaWVzKTtcbiAgICAgIGNvbnN0IHJ1bnRpbWUgPSB0aGlzLmdldE9yQ3JlYXRlUnVudGltZSh0ZW5zb3JzLCBmZWVkKTtcblxuICAgICAgY29uc3QgYWN0aXZhdGlvbnMgPSB0aGlzLmFjdGl2YXRpb25BcnJheU1hcDtcblxuICAgICAgc2Vzc2lvbl91dGlsLmRpc3Bvc2VBbmRJbml0aWFsaXplT3BlcmF0aW9uT3V0cHV0cyhcbiAgICAgICAgICBydW50aW1lLm5vZGVzLCBhY3RpdmF0aW9ucyk7XG4gICAgICBzZXNzaW9uX3V0aWwuZGlzcG9zZVRyYW5zaWVudE9wZXJhdGlvbkFycmF5cyhcbiAgICAgICAgICBydW50aW1lLm9wZXJhdGlvbnMsIHRoaXMuYWN0aXZhdGlvbkFycmF5TWFwLCB0aGlzLmdyYWRpZW50QXJyYXlNYXApO1xuXG4gICAgICBzZXNzaW9uX3V0aWwuYWRkUGVyc2lzdGVudEFycmF5c1RvVGVuc29yQXJyYXlNYXAoXG4gICAgICAgICAgcnVudGltZS5ub2RlcywgYWN0aXZhdGlvbnMpO1xuICAgICAgc2Vzc2lvbl91dGlsLmxvYWRJbnB1dHNGcm9tRmVlZERpY3Rpb25hcnlUb1RlbnNvckFycmF5TWFwKFxuICAgICAgICAgIGZlZWQsIGFjdGl2YXRpb25zLCB0aGlzLm1hdGgpO1xuXG4gICAgICBydW50aW1lLm9wZXJhdGlvbnMuZm9yRWFjaChvcCA9PiBvcC5mZWVkRm9yd2FyZCh0aGlzLm1hdGgsIGFjdGl2YXRpb25zKSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdHMgPSB0ZW5zb3JzLm1hcCh4ID0+IGFjdGl2YXRpb25zLmdldCh4KSk7XG4gICAgICB0ZW5zb3JzLmZvckVhY2goeCA9PiBhY3RpdmF0aW9ucy5kZWxldGUoeCkpO1xuXG4gICAgICBzZXNzaW9uX3V0aWwucmVsZWFzZUZlZWREaWN0aW9uYXJ5SW5wdXRzRnJvbVRlbnNvckFycmF5TWFwKFxuICAgICAgICAgIGZlZWQsIGFjdGl2YXRpb25zLCB0aGlzLm1hdGgpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFdmFsdWF0ZSBhIHRlbnNvciwgdXNpbmcgdGhlIHByb3ZpZGVkIGZlZWQgZW50cmllcyB0byBwcm92aWRlXG4gICAqIHVwc3RyZWFtIE5EQXJyYXkgaW5wdXQuXG4gICAqXG4gICAqIEBwYXJhbSB0ZW5zb3IgVGhlIHRlbnNvciB0byBldmFsdWF0ZS5cbiAgICogQHBhcmFtIGZlZWRFbnRyaWVzIExpc3Qgb2YgYEZlZWRFbnRyeWAgdG8gcmVhZCB3aGVuIHJlcGxhY2luZyBncmFwaFxuICAgKiB0ZW5zb3JzIHdpdGggTkRBcnJheXMuXG4gICAqIEByZXR1cm4gVGhlIGNvbXB1dGVkIHZhbHVlIG9mIHRoZSB0ZW5zb3IuXG4gICAqL1xuICBldmFsKHRlbnNvcjogVGVuc29yLCBmZWVkRW50cmllczogRmVlZEVudHJ5W10pOiBOREFycmF5IHtcbiAgICByZXR1cm4gdGhpcy5ldmFsQWxsKFt0ZW5zb3JdLCBmZWVkRW50cmllcylbMF07XG4gIH1cblxuICAvKipcbiAgICogVHJhaW5zIGEgYmF0Y2guXG4gICAqIFJldHVybnMgYSByZWR1Y2VkIGNvc3QgaWYgdGhlIGNvc3RSZWR1Y3Rpb24gcGFyYW1ldGVyIGlzIHNldC5cbiAgICogV2hlbiB1c2luZyBhIGBOREFycmF5TWF0aGAgb2JqZWN0IGluIHNhZmUgbW9kZSB0aGlzIG11c3QgYmUgdXNlZCBpbiBhXG4gICAqIG1hdGguc2NvcGUoKS5cbiAgICogQHBhcmFtIGNvc3RUZW5zb3IgQSB0ZW5zb3IgcmVwcmVzZW50aW5nIHRoZSBjb3N0IHRvIG9wdGltaXplLiBTaG91bGQgYmUgYVxuICAgKiBzY2FsYXIuXG4gICAqIEBwYXJhbSBmZWVkRW50cmllcyBGZWVkIGVudHJpZXMgZm9yIHRoaXMgdHJhaW4gcnVuLiBQcm92aWRlcyBpbnB1dHMuXG4gICAqIEBwYXJhbSBiYXRjaFNpemUgQmF0Y2ggc2l6ZSBmb3IgdGhpcyB0cmFpbiBsb29wLlxuICAgKiBAcGFyYW0gb3B0aW1pemVyIEFuIG9wdGltaXplciB0byBwZXJmb3JtIHdlaWdodCB1cGRhdGVzLlxuICAgKiBAcGFyYW0gY29zdFJlZHVjdGlvbiBBbiBvcHRpb24gdG8gYWxsb3cgdGhlIHVzZXIgdG8gZ2V0IGEgc3VtbWVkLCBhdmVyYWdlZCxcbiAgICogb3Igbm8gY29zdCBiYWNrLlxuICAgKiBAcmV0dXJuIFRoZSByZWR1Y2VkIGNvc3QsIGlmIGNvc3QgcmVkdWN0aW9uIGlzIG5vdCBOT05FLiBUaGUgdXNlciBpc1xuICAgKiByZXNwb25zaWJsZSBmb3IgZGlzcG9zaW5nIHRoZSBjb3N0IE5EQXJyYXkgYmV0d2VlbiB0cmFpbiBsb29wcy5cbiAgICovXG4gIHRyYWluKFxuICAgICAgY29zdFRlbnNvcjogVGVuc29yLCBmZWVkRW50cmllczogRmVlZEVudHJ5W10sIGJhdGNoU2l6ZTogbnVtYmVyLFxuICAgICAgb3B0aW1pemVyOiBPcHRpbWl6ZXIsIGNvc3RSZWR1Y3Rpb24gPSBDb3N0UmVkdWN0aW9uLk5PTkUpOiBTY2FsYXIge1xuICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICB1dGlsLmlzU2NhbGFyU2hhcGUoY29zdFRlbnNvci5zaGFwZSksXG4gICAgICAgICdDb3N0IHRlbnNvciBmb3IgdHJhaW5pbmcgbXVzdCBiZSBhIHNjYWxhciB2YWx1ZS4nKTtcblxuICAgIGlmICh0aGlzLnByZXZCYXRjaFNpemUgIT09IGJhdGNoU2l6ZSkge1xuICAgICAgdGhpcy5wcmV2QmF0Y2hTaXplID0gYmF0Y2hTaXplO1xuICAgICAgdGhpcy5iYXRjaFNpemVTY2FsYXIgPSBTY2FsYXIubmV3KGJhdGNoU2l6ZSk7XG4gICAgfVxuXG4gICAgY29uc3QgZmVlZCA9IG5ldyBGZWVkRGljdGlvbmFyeShmZWVkRW50cmllcyk7XG4gICAgc2Vzc2lvbl91dGlsLnRocm93SWZGZWVkRGljdGlvbmFyeUNvbnRhaW5zTkRBcnJheXMoZmVlZCk7XG5cbiAgICBjb25zdCBydW50aW1lID0gdGhpcy5nZXRPckNyZWF0ZVJ1bnRpbWUoW2Nvc3RUZW5zb3JdLCBmZWVkKTtcbiAgICBjb25zdCBpbmZlcmVuY2VPcGVyYXRpb25zID0gcnVudGltZS5vcGVyYXRpb25zO1xuICAgIGNvbnN0IGJhY2tQcm9wT3BlcmF0aW9ucyA9IHJ1bnRpbWUub3BlcmF0aW9ucy5zbGljZSgpLnJldmVyc2UoKTtcbiAgICBjb25zdCBhY3RpdmF0aW9ucyA9IHRoaXMuYWN0aXZhdGlvbkFycmF5TWFwO1xuICAgIGNvbnN0IGdyYWRpZW50cyA9IHRoaXMuZ3JhZGllbnRBcnJheU1hcDtcbiAgICBncmFkaWVudHMuc2V0KGNvc3RUZW5zb3IsIHRoaXMub25lU2NhbGFyKTtcblxuICAgIHNlc3Npb25fdXRpbC5hZGRQZXJzaXN0ZW50QXJyYXlzVG9UZW5zb3JBcnJheU1hcChcbiAgICAgICAgcnVudGltZS5ub2RlcywgYWN0aXZhdGlvbnMpO1xuXG4gICAgb3B0aW1pemVyLmJlZm9yZUJhdGNoKFxuICAgICAgICB0aGlzLm1hdGgsIGJhdGNoU2l6ZSwgcnVudGltZSwgYWN0aXZhdGlvbnMsIGdyYWRpZW50cyk7XG5cbiAgICByZXR1cm4gdGhpcy5tYXRoLnNjb3BlKChrZWVwLCB0cmFjaykgPT4ge1xuICAgICAgbGV0IGNvc3QgPSB0cmFjayhTY2FsYXIubmV3KDApKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiYXRjaFNpemU7ICsraSkge1xuICAgICAgICBzZXNzaW9uX3V0aWwuZGlzcG9zZUFuZEluaXRpYWxpemVPcGVyYXRpb25PdXRwdXRzKFxuICAgICAgICAgICAgcnVudGltZS5ub2RlcywgYWN0aXZhdGlvbnMpO1xuICAgICAgICBzZXNzaW9uX3V0aWwuZGlzcG9zZUFuZEluaXRpYWxpemVPcGVyYXRpb25JbnB1dEdyYWRpZW50cyhcbiAgICAgICAgICAgIHJ1bnRpbWUubm9kZXMsIGdyYWRpZW50cyk7XG4gICAgICAgIHNlc3Npb25fdXRpbC5kaXNwb3NlVHJhbnNpZW50T3BlcmF0aW9uQXJyYXlzKFxuICAgICAgICAgICAgcnVudGltZS5vcGVyYXRpb25zLCBhY3RpdmF0aW9ucywgZ3JhZGllbnRzKTtcblxuICAgICAgICBzZXNzaW9uX3V0aWwubG9hZElucHV0c0Zyb21GZWVkRGljdGlvbmFyeVRvVGVuc29yQXJyYXlNYXAoXG4gICAgICAgICAgICBmZWVkLCBhY3RpdmF0aW9ucywgdGhpcy5tYXRoKTtcblxuICAgICAgICBpbmZlcmVuY2VPcGVyYXRpb25zLmZvckVhY2goXG4gICAgICAgICAgICBvcCA9PiBvcC5mZWVkRm9yd2FyZCh0aGlzLm1hdGgsIGFjdGl2YXRpb25zKSk7XG4gICAgICAgIGJhY2tQcm9wT3BlcmF0aW9ucy5mb3JFYWNoKFxuICAgICAgICAgICAgb3AgPT4gb3AuYmFja1Byb3AodGhpcy5tYXRoLCBhY3RpdmF0aW9ucywgZ3JhZGllbnRzKSk7XG5cbiAgICAgICAgb3B0aW1pemVyLmFmdGVyRXhhbXBsZSh0aGlzLm1hdGgsIHJ1bnRpbWUsIGFjdGl2YXRpb25zLCBncmFkaWVudHMpO1xuXG4gICAgICAgIHNlc3Npb25fdXRpbC5yZWxlYXNlRmVlZERpY3Rpb25hcnlJbnB1dHNGcm9tVGVuc29yQXJyYXlNYXAoXG4gICAgICAgICAgICBmZWVkLCBhY3RpdmF0aW9ucywgdGhpcy5tYXRoKTtcblxuICAgICAgICBjb3N0ID0gdGhpcy51cGRhdGVDb3N0Rm9yRXhhbXBsZShcbiAgICAgICAgICAgIGNvc3QsIGFjdGl2YXRpb25zLmdldChjb3N0VGVuc29yKSwgY29zdFJlZHVjdGlvbik7XG4gICAgICB9XG5cbiAgICAgIG9wdGltaXplci5hZnRlckJhdGNoKFxuICAgICAgICAgIHRoaXMubWF0aCwgYmF0Y2hTaXplLCBydW50aW1lLCBhY3RpdmF0aW9ucywgZ3JhZGllbnRzKTtcblxuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlQ29zdEZvckJhdGNoKGNvc3QsIGNvc3RSZWR1Y3Rpb24pO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVDb3N0Rm9yRXhhbXBsZShcbiAgICAgIHRvdGFsQ29zdDogU2NhbGFyLCBjdXJyQ29zdDogU2NhbGFyLFxuICAgICAgY29zdFJlZHVjdGlvbjogQ29zdFJlZHVjdGlvbik6IFNjYWxhciB7XG4gICAgaWYgKGNvc3RSZWR1Y3Rpb24gPT09IENvc3RSZWR1Y3Rpb24uTUVBTiB8fFxuICAgICAgICBjb3N0UmVkdWN0aW9uID09PSBDb3N0UmVkdWN0aW9uLlNVTSkge1xuICAgICAgcmV0dXJuIHRoaXMubWF0aC5hZGQodG90YWxDb3N0LCBjdXJyQ29zdCk7XG4gICAgfVxuICAgIHJldHVybiB0b3RhbENvc3Q7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZUNvc3RGb3JCYXRjaCh0b3RhbENvc3Q6IFNjYWxhciwgY29zdFJlZHVjdGlvbjogQ29zdFJlZHVjdGlvbik6XG4gICAgICBTY2FsYXIge1xuICAgIGlmIChjb3N0UmVkdWN0aW9uID09PSBDb3N0UmVkdWN0aW9uLk1FQU4pIHtcbiAgICAgIHJldHVybiB0aGlzLm1hdGguZGl2aWRlKHRvdGFsQ29zdCwgdGhpcy5iYXRjaFNpemVTY2FsYXIpO1xuICAgIH1cbiAgICByZXR1cm4gdG90YWxDb3N0O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRPckNyZWF0ZVJ1bnRpbWUodGVuc29yczogVGVuc29yW10sIGZlZWQ6IEZlZWREaWN0aW9uYXJ5KTpcbiAgICAgIFNlc3Npb25SdW50aW1lIHtcbiAgICBjb25zdCBrZXkgPSB0aGlzLm1ha2VSdW50aW1lQ2FjaGVLZXkodGVuc29ycywgZmVlZCk7XG4gICAgbGV0IHJ1bnRpbWUgPSB0aGlzLnJ1bnRpbWVDYWNoZVtrZXldO1xuICAgIGlmIChydW50aW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGxldCBub2RlcyA9XG4gICAgICAgICAgc2Vzc2lvbl91dGlsLmdldE9yZGVyZWRFdmFsdWF0aW9uU2V0RnJvbUV2YWxUZW5zb3IodGVuc29ycywgZmVlZCk7XG4gICAgICAvLyBJbiBpbmZlcmVuY2UgbW9kZSBzcGxpdCBub2RlcyBhcmUgbm90IG5lZWRlZCwgYnV0IHRoZWlyIGNvc3QgaXNcbiAgICAgIC8vIG5lZ2xpZ2libGUsIGFuZCBhbHdheXMgYWRkaW5nIHRoZW0gaW4gYWxsb3dzIGZvciBjYWNoaW5nIG9mIDEgcnVudGltZVxuICAgICAgLy8gZm9yIGJvdGggdHJhaW4vZXZhbC5cbiAgICAgIG5vZGVzID0gc2Vzc2lvbl91dGlsLmFkZFNwbGl0Tm9kZXMobm9kZXMpO1xuICAgICAgc2Vzc2lvbl91dGlsLnJlbW92ZUZlZWREaWN0aW9uYXJ5Tm9kZXNGcm9tRXZhbHVhdGlvblNldChmZWVkLCBub2Rlcyk7XG4gICAgICBzZXNzaW9uX3V0aWwudGhyb3dFcnJvcklmRXZhbHVhdGlvblNldENvbnRhaW5zUGxhY2Vob2xkZXJOb2Rlcyhub2Rlcyk7XG4gICAgICBjb25zdCBvcGVyYXRpb25zID0gb3BlcmF0aW9uX2VtaXR0ZXIuZW1pdEZyb21HcmFwaE5vZGVzKG5vZGVzKTtcbiAgICAgIHJ1bnRpbWUgPSB7bm9kZXMsIG9wZXJhdGlvbnN9O1xuICAgICAgdGhpcy5ydW50aW1lQ2FjaGVba2V5XSA9IHJ1bnRpbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJ1bnRpbWU7XG4gIH1cblxuICBwcml2YXRlIG1ha2VSdW50aW1lQ2FjaGVLZXkodGVuc29yczogVGVuc29yW10sIGZlZWQ6IEZlZWREaWN0aW9uYXJ5KTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGVuc29ycy5tYXAoeCA9PiB4LmlkKS5zb3J0KCkuam9pbignXycpICsgJ19fJyArXG4gICAgICAgIE9iamVjdC5rZXlzKGZlZWQuZGljdCkuc29ydCgpLmpvaW4oJ18nKTtcbiAgfVxuXG4gIC8qKiBNYXBzIGVhY2ggb3V0cHV0IHRlbnNvciBvZiB0aGUgZ3JhcGggdG8gaXRzIGFjdGl2YXRpb24gdmFsdWUuICovXG4gIGFjdGl2YXRpb25BcnJheU1hcCA9IG5ldyBUZW5zb3JBcnJheU1hcCgpO1xuICAvKiogTWFwcyBlYWNoIHRlbnNvciBvZiB0aGUgZ3JhcGggdG8gaXRzIGRlcml2YXRpdmUgd3J0IHRoZSBjb3N0IGZ1bmN0aW9uLiAqL1xuICBncmFkaWVudEFycmF5TWFwID0gbmV3IFRlbnNvckFycmF5TWFwKCk7XG4gIHByaXZhdGUgcnVudGltZUNhY2hlOiB7W2tleTogc3RyaW5nXTogU2Vzc2lvblJ1bnRpbWV9ID0ge307XG4gIC8qKiBCYXRjaCBzaXplIG9mIHRoZSBwcmV2aW91cyB0cmFpbigpIGNhbGwuICovXG4gIHByaXZhdGUgcHJldkJhdGNoU2l6ZTogbnVtYmVyO1xuICBwcml2YXRlIGJhdGNoU2l6ZVNjYWxhcjogU2NhbGFyO1xuICBwcml2YXRlIG9uZVNjYWxhciA9IFNjYWxhci5uZXcoMSk7XG59XG5cbi8qKiBAaGlkZGVuICovXG5leHBvcnQgdHlwZSBTZXNzaW9uUnVudGltZSA9IHtcbiAgbm9kZXM6IE5vZGVbXTsgb3BlcmF0aW9uczogT3BlcmF0aW9uW107XG59O1xuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQge0NvbnN0YW50Tm9kZSwgTm9kZSwgUGxhY2Vob2xkZXJOb2RlLCBTcGxpdE5vZGUsIFRlbnNvciwgVmFyaWFibGVOb2RlfSBmcm9tICcuL2dyYXBoJztcbmltcG9ydCAqIGFzIGdyYXBoX3V0aWwgZnJvbSAnLi9ncmFwaF91dGlsJztcbmltcG9ydCB7SW5wdXRQcm92aWRlcn0gZnJvbSAnLi9pbnB1dF9wcm92aWRlcic7XG5pbXBvcnQge05EQXJyYXlNYXRofSBmcm9tICcuL21hdGgvbWF0aCc7XG5pbXBvcnQge05EQXJyYXl9IGZyb20gJy4vbWF0aC9uZGFycmF5JztcbmltcG9ydCB7T3BlcmF0aW9ufSBmcm9tICcuL29wcy9vcCc7XG5pbXBvcnQge0ZlZWREaWN0aW9uYXJ5fSBmcm9tICcuL3Nlc3Npb24nO1xuaW1wb3J0IHtUZW5zb3JBcnJheU1hcH0gZnJvbSAnLi90ZW5zb3JfYXJyYXlfbWFwJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi91dGlsJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIGdyYXBoIG5vZGVzIHRoYXQgc3RvcCB0cmF2ZXJzYWwsIGJhc2VkIG9uIHRoZSBjb250ZW50c1xuICogb2YgdGhlIHByb3ZpZGVkIEZlZWREaWN0aW9uYXJ5LiBUaGlzIGlzIGEgc2ltcGxlIDE6MSBleHRyYWN0aW9uIG9mIG5vZGVzIGZyb21cbiAqIHRoZSBGZWVkRGljdGlvbmFyeS5cbiAqXG4gKiBAaGlkZGVuXG4gKiBAcGFyYW0gZmVlZERpY3Rpb25hcnkgVGhlIEZlZWREaWN0aW9uYXJ5IHRvIHNjYW4gZm9yIHRlcm1pbmF0aW9uIG5vZGVzLlxuICogQHJldHVybiBhbiBhcnJheSBvZiBOb2RlcyB3aGljaCBoYWx0IHRyYXZlcnNhbCB3aGVuIHZpc2l0ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUZXJtaW5hdGluZ05vZGVzRnJvbUZlZWREaWN0aW9uYXJ5KFxuICAgIGZlZWREaWN0aW9uYXJ5OiBGZWVkRGljdGlvbmFyeSk6IE5vZGVbXSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhmZWVkRGljdGlvbmFyeS5kaWN0KVxuICAgICAgLm1hcCh0ZW5zb3JJRCA9PiBmZWVkRGljdGlvbmFyeS5kaWN0Wyt0ZW5zb3JJRF0udGVuc29yLm5vZGUpO1xufVxuXG4vKipcbiAqIEdpdmVuIGEgdGVuc29yIGFuZCBhIGZlZWQgZGljdGlvbmFyeSwgY29tcHV0ZXMgdGhlIHNldCBvZiBub2RlcyB0aGF0IG5lZWQgdG9cbiAqIGJlIGV2YWx1YXRlZCB0byBwZXJmb3JtIGluZmVyZW5jZS5cbiAqXG4gKiBAaGlkZGVuXG4gKiBAcGFyYW0gZXZhbFRlbnNvcnMgVGhlIGxpc3Qgb2YgdGVuc29ycyB0byBldmVudHVhbGx5IGJlIGV2YWx1YXRlZC5cbiAqIEBwYXJhbSBmZWVkRGljdGlvbmFyeSBUaGUgcG9wdWxhdGVkIGZlZWQgZGljdGlvbmFyeS5cbiAqIEByZXR1cm4gVGhlIHNldCBvZiBub2RlcyB0byBldmFsdWF0ZSwgaW4gZXZhbHVhdGlvbiBvcmRlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE9yZGVyZWRFdmFsdWF0aW9uU2V0RnJvbUV2YWxUZW5zb3IoXG4gICAgZXZhbFRlbnNvcnM6IFRlbnNvcltdLCBmZWVkRGljdGlvbmFyeTogRmVlZERpY3Rpb25hcnkpOiBOb2RlW10ge1xuICBjb25zdCB0ZXJtaW5hdGluZ05vZGVzID1cbiAgICAgIGdldFRlcm1pbmF0aW5nTm9kZXNGcm9tRmVlZERpY3Rpb25hcnkoZmVlZERpY3Rpb25hcnkpO1xuICBjb25zdCBldmFsTm9kZXMgPSBldmFsVGVuc29ycy5tYXAoeCA9PiB4Lm5vZGUpO1xuICBjb25zdCB1bm9yZGVyZWRFdmFsdWF0aW9uU2V0ID1cbiAgICAgIGdyYXBoX3V0aWwuZ2V0VW5vcmRlcmVkRXZhbHVhdGlvblNldChldmFsTm9kZXMsIHRlcm1pbmF0aW5nTm9kZXMpO1xuICBjb25zdCBvcmRlcmVkRXZhbHVhdGlvblNldCA9XG4gICAgICBncmFwaF91dGlsLmdldE9yZGVyZWRFdmFsdWF0aW9uU2V0KHVub3JkZXJlZEV2YWx1YXRpb25TZXQpO1xuICByZXR1cm4gb3JkZXJlZEV2YWx1YXRpb25TZXQ7XG59XG5cbi8qKlxuICogVHJhdmVyc2VzIHRoZSBwcm92aWRlZCBub2RlIGFycmF5IGFuZCBhZGRzIGFsbCBwZXJzaXN0ZW50IG5vZGUgTkRBcnJheXMgdG9cbiAqIHRoZSBwcm92aWRlZCBUZW5zb3JBcnJheU1hcC5cbiAqXG4gKiBAaGlkZGVuXG4gKiBAcGFyYW0gZXZhbHVhdGlvblNldCBUaGUgYXJyYXkgb2Ygbm9kZXMgdG8gc2Nhbi5cbiAqIEBwYXJhbSB0ZW5zb3JBcnJheU1hcCBUaGUgbWFwIHRoYXQgcmVjZWl2ZXMgdGhlIE5EQXJyYXlzIGZyb20gcGVyc2lzdGVudFxuICogbm9kZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRQZXJzaXN0ZW50QXJyYXlzVG9UZW5zb3JBcnJheU1hcChcbiAgICBldmFsdWF0aW9uU2V0OiBOb2RlW10sIHRlbnNvckFycmF5TWFwOiBUZW5zb3JBcnJheU1hcCkge1xuICBldmFsdWF0aW9uU2V0LmZvckVhY2gobm9kZSA9PiB7XG4gICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBWYXJpYWJsZU5vZGUgfHwgbm9kZSBpbnN0YW5jZW9mIENvbnN0YW50Tm9kZSkge1xuICAgICAgdGVuc29yQXJyYXlNYXAuc2V0KG5vZGUub3V0cHV0LCBub2RlLmRhdGEpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFyaWFibGVOb2Rlc0Zyb21FdmFsdWF0aW9uU2V0KGV2YWx1YXRpb25TZXQ6IE5vZGVbXSk6XG4gICAgVmFyaWFibGVOb2RlW10ge1xuICBjb25zdCBub2RlczogVmFyaWFibGVOb2RlW10gPSBbXTtcbiAgZXZhbHVhdGlvblNldC5mb3JFYWNoKG5vZGUgPT4ge1xuICAgIGlmIChub2RlIGluc3RhbmNlb2YgVmFyaWFibGVOb2RlKSB7XG4gICAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBub2Rlcztcbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0aHJvd0lmRmVlZERpY3Rpb25hcnlDb250YWluc05EQXJyYXlzKFxuICAgIGZlZWREaWN0aW9uYXJ5OiBGZWVkRGljdGlvbmFyeSkge1xuICBPYmplY3Qua2V5cyhmZWVkRGljdGlvbmFyeS5kaWN0KS5mb3JFYWNoKHRlbnNvcklEID0+IHtcbiAgICBpZiAoZmVlZERpY3Rpb25hcnkuZGljdFsrdGVuc29ySURdLmRhdGEgaW5zdGFuY2VvZiBOREFycmF5KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ3RyYWluaW5nIHJlcXVpcmVzIEZlZWREaWN0aW9uYXJ5IGVudHJpZXMgdG8gYmUgSW5wdXRQcm92aWRlcnMnICtcbiAgICAgICAgICAnYW5kIG5vdCBOREFycmF5cy4nKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvYWRJbnB1dHNGcm9tRmVlZERpY3Rpb25hcnlUb1RlbnNvckFycmF5TWFwKFxuICAgIGJhdGNoRmVlZDogRmVlZERpY3Rpb25hcnksIGFjdGl2YXRpb25zOiBUZW5zb3JBcnJheU1hcCwgbWF0aDogTkRBcnJheU1hdGgpIHtcbiAgT2JqZWN0LmtleXMoYmF0Y2hGZWVkLmRpY3QpLmZvckVhY2godGVuc29ySUQgPT4ge1xuICAgIGNvbnN0IGZlZWRFbnRyeSA9IGJhdGNoRmVlZC5kaWN0Wyt0ZW5zb3JJRF07XG5cbiAgICBsZXQgZGF0YTogTkRBcnJheTtcbiAgICBpZiAoZmVlZEVudHJ5LmRhdGEgaW5zdGFuY2VvZiBOREFycmF5KSB7XG4gICAgICBkYXRhID0gZmVlZEVudHJ5LmRhdGEgYXMgTkRBcnJheTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcHJvdmlkZXIgPSBmZWVkRW50cnkuZGF0YSBhcyBJbnB1dFByb3ZpZGVyO1xuICAgICAgZGF0YSA9IHByb3ZpZGVyLmdldE5leHRDb3B5KG1hdGgpO1xuICAgIH1cblxuICAgIHV0aWwuYXNzZXJ0KFxuICAgICAgICB1dGlsLmFycmF5c0VxdWFsKGZlZWRFbnRyeS50ZW5zb3Iuc2hhcGUsIGRhdGEuc2hhcGUpLFxuICAgICAgICBgRXJyb3IgbG9hZGluZyBGZWVkRW50cnk6IGZlZWRpbmcgTkRBcnJheSBvZiBzaGFwZSAke2RhdGEuc2hhcGV9IGAgK1xuICAgICAgICAgICAgYGRvZXMgbm90IG1hdGNoIFRlbnNvciAoaWQ6ICR7ZmVlZEVudHJ5LnRlbnNvci5pZH0pIHNoYXBlOiBgICtcbiAgICAgICAgICAgIGAke2ZlZWRFbnRyeS50ZW5zb3Iuc2hhcGV9LmApO1xuICAgIGFjdGl2YXRpb25zLnNldChmZWVkRW50cnkudGVuc29yLCBkYXRhKTtcbiAgfSk7XG59XG5cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWxlYXNlRmVlZERpY3Rpb25hcnlJbnB1dHNGcm9tVGVuc29yQXJyYXlNYXAoXG4gICAgYmF0Y2hGZWVkOiBGZWVkRGljdGlvbmFyeSwgYWN0aXZhdGlvbnM6IFRlbnNvckFycmF5TWFwLCBtYXRoOiBOREFycmF5TWF0aCkge1xuICBPYmplY3Qua2V5cyhiYXRjaEZlZWQuZGljdCkuZm9yRWFjaCh0ZW5zb3JJRCA9PiB7XG4gICAgY29uc3QgZmVlZEVudHJ5ID0gYmF0Y2hGZWVkLmRpY3RbK3RlbnNvcklEXTtcblxuICAgIGlmICghKGZlZWRFbnRyeS5kYXRhIGluc3RhbmNlb2YgTkRBcnJheSkpIHtcbiAgICAgIGNvbnN0IHByb3ZpZGVyID0gZmVlZEVudHJ5LmRhdGEgYXMgSW5wdXRQcm92aWRlcjtcblxuICAgICAgY29uc3QgZmVlZEVudHJ5QXJyYXkgPSBhY3RpdmF0aW9ucy5nZXQoZmVlZEVudHJ5LnRlbnNvcik7XG4gICAgICBwcm92aWRlci5kaXNwb3NlQ29weShtYXRoLCBmZWVkRW50cnlBcnJheSk7XG4gICAgfVxuXG4gICAgYWN0aXZhdGlvbnMuZGVsZXRlKGZlZWRFbnRyeS50ZW5zb3IpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBub2RlcyBmcm9tIHRoZSBwcm92aWRlZCBOb2RlIGFycmF5IHdob3NlIG91dHB1dCB0ZW5zb3JzIGV4aXN0IGluXG4gKiB0aGUgcHJvdmlkZWQgZmVlZCBkaWN0aW9uYXJ5LiBBZnRlciBjYWxsaW5nIHRoaXMsIHRoZSBOb2RlIGFycmF5IHNob3VsZFxuICogY29udGFpbiB6ZXJvIFBsYWNlaG9sZGVyIG5vZGVzLCBvciB0aGUgdXNlciBoYXMgZmFpbGVkIHRvIHByb3ZpZGUgYSBmZWVkIGZvclxuICogYSBQbGFjZWhvbGRlciBub2RlLlxuICpcbiAqIEBoaWRkZW5cbiAqIEBwYXJhbSBmZWVkRGljdGlvbmFyeSBUaGUgRmVlZERpY3Rpb25hcnkgdG8gcHJvY2Vzcy5cbiAqIEBwYXJhbSBldmFsdWF0aW9uU2V0IFRoZSBhcnJheSBvZiBub2RlcyB0byByZW1vdmUgaW5wdXQgbm9kZXMgZnJvbS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUZlZWREaWN0aW9uYXJ5Tm9kZXNGcm9tRXZhbHVhdGlvblNldChcbiAgICBmZWVkRGljdGlvbmFyeTogRmVlZERpY3Rpb25hcnksIGV2YWx1YXRpb25TZXQ6IE5vZGVbXSkge1xuICBsZXQgaSA9IDA7XG4gIHdoaWxlIChpIDwgZXZhbHVhdGlvblNldC5sZW5ndGgpIHtcbiAgICBjb25zdCBub2RlID0gZXZhbHVhdGlvblNldFtpXTtcbiAgICBpZiAoZmVlZERpY3Rpb25hcnkuZGljdFtub2RlLm91dHB1dC5pZF0gIT0gbnVsbCkge1xuICAgICAgZXZhbHVhdGlvblNldC5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICsraTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwb3NlcyBhbnkgTkRBcnJheXMgb24gdGhlIHRlbnNvckFycmF5TWFwIGZyb20gb3BlcmF0aW9uIG91dHB1dHMgYW5kIHNldHNcbiAqIHRoZSB2YWx1ZSB0byBudWxsLlxuICpcbiAqIEBoaWRkZW5cbiAqIEBwYXJhbSBldmFsdWF0aW9uU2V0IFRoZSBzZXQgb2Ygbm9kZXMgdG8gYmUgZXZhbHVhdGVkLlxuICogQHBhcmFtIHRlbnNvckFycmF5TWFwIFRoZSBtYXAgdG8gZGlzcG9zZSBhbmQgaW5pdGlhbGl6ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3Bvc2VBbmRJbml0aWFsaXplT3BlcmF0aW9uT3V0cHV0cyhcbiAgICBldmFsdWF0aW9uU2V0OiBOb2RlW10sIHRlbnNvckFycmF5TWFwOiBUZW5zb3JBcnJheU1hcCkge1xuICBldmFsdWF0aW9uU2V0LmZvckVhY2gobm9kZSA9PiB7XG4gICAgaWYgKCFncmFwaF91dGlsLmlzSW5wdXROb2RlKG5vZGUpKSB7XG4gICAgICBpZiAoIWdyYXBoX3V0aWwuaXNQYXNzdGhyb3VnaE5vZGUobm9kZSwgdGVuc29yQXJyYXlNYXApKSB7XG4gICAgICAgIHRlbnNvckFycmF5TWFwLmRpc3Bvc2VBcnJheShub2RlLm91dHB1dCk7XG4gICAgICB9XG4gICAgICB0ZW5zb3JBcnJheU1hcC5zZXQobm9kZS5vdXRwdXQsIG51bGwpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogRGlzcG9zZXMgYW55IE5EQXJyYXlzIG9uIHRoZSB0ZW5zb3JBcnJheU1hcCBmcm9tIGRlcml2YXRpdmVzIG9mIG9wZXJhdGlvblxuICogaW5wdXRzIGFuZCBzZXRzIHRoZSB2YWx1ZSB0byBudWxsLlxuICpcbiAqIEBoaWRkZW5cbiAqIEBwYXJhbSBldmFsdWF0aW9uU2V0IFRoZSBzZXQgb2Ygbm9kZXMgdG8gYmUgZXZhbHVhdGVkLlxuICogQHBhcmFtIGdyYWRpZW50cyBUaGUgZ3JhZGllbnQgbWFwIHRvIGRpc3Bvc2UgYW5kIGluaXRpYWxpemUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaXNwb3NlQW5kSW5pdGlhbGl6ZU9wZXJhdGlvbklucHV0R3JhZGllbnRzKFxuICAgIGV2YWx1YXRpb25TZXQ6IE5vZGVbXSwgZ3JhZGllbnRzOiBUZW5zb3JBcnJheU1hcCkge1xuICBldmFsdWF0aW9uU2V0LmZvckVhY2gobm9kZSA9PiB7XG4gICAgT2JqZWN0LmtleXMobm9kZS5pbnB1dHMpLmZvckVhY2goaW5wdXROYW1lID0+IHtcbiAgICAgIGNvbnN0IGlucHV0ID0gbm9kZS5pbnB1dHNbaW5wdXROYW1lXTtcbiAgICAgIGlmIChncmFkaWVudHMuZ2V0KGlucHV0LCB0cnVlKSAhPT0gZ3JhZGllbnRzLmdldChub2RlLm91dHB1dCwgdHJ1ZSkpIHtcbiAgICAgICAgZ3JhZGllbnRzLmRpc3Bvc2VBcnJheShpbnB1dCk7XG4gICAgICB9XG4gICAgICBncmFkaWVudHMuc2V0KGlucHV0LCBudWxsKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cblxuLyoqXG4gKiBDYWxscyB1bmRlcmx5aW5nIG9wZXJhdGlvbiBkaXNwb3NlVHJhbnNpZW50QXJyYXlzIG1ldGhvZHMgd2hpY2ggY2xlYW4gdXAgYW55XG4gKiBOREFycmF5cyB3aGljaCBvcGVyYXRpb25zIG1heSBoYXZlIGNyZWF0ZWQgZHVyaW5nIGEgcnVuLlxuICpcbiAqIEBoaWRkZW5cbiAqIEBwYXJhbSBvcGVyYXRpb25Ob2RlcyBUaGUgYXJyYXkgb2YgTm9kZXMgdG8gdHJhdmVyc2UuXG4gKiBAcGFyYW0gb3V0cHV0VGVuc29yIFRoZSB0ZW5zb3IgYmVpbmcgZXZhbHVhdGVkLlxuICogQHBhcmFtIG1hcCBUaGUgVGVuc29yQXJyYXlNYXAgdG8gb3BlcmF0ZSBvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3Bvc2VUcmFuc2llbnRPcGVyYXRpb25BcnJheXMoXG4gICAgb3BlcmF0aW9uczogT3BlcmF0aW9uW10sIGFjdGl2YXRpb25zOiBUZW5zb3JBcnJheU1hcCxcbiAgICBncmFkaWVudHM6IFRlbnNvckFycmF5TWFwKSB7XG4gIG9wZXJhdGlvbnMuZm9yRWFjaChvcCA9PiBvcC5kaXNwb3NlVHJhbnNpZW50QXJyYXlzKGFjdGl2YXRpb25zLCBncmFkaWVudHMpKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlcyB0aGUgcHJvdmlkZWQgTm9kZSBhcnJheSBhbmQgdGhyb3dzIGFuIGV4Y2VwdGlvbiBpZiB0aGVyZSBhcmUgYW55XG4gKiBQbGFjZWhvbGRlciBub2RlcyBwcmVzZW50LiBDYWxsIGFmdGVyIHRoZSBldmFsdWF0aW9uIHNldCBoYXMgYmVlbiBwcnVuZWQgd2l0aFxuICogdGhlIGFjY29tcGFueWluZyBGZWVkRGljdGlvbmFyeSB0byBlbnN1cmUgdGhhdCBhbGwgaW5wdXRzIGhhdmUgYmVlbiByZXNvbHZlZC5cbiAqXG4gKiBAaGlkZGVuXG4gKiBAcGFyYW0gZXZhbHVhdGlvblNldCBUaGUgYXJyYXkgb2Ygbm9kZXMgdG8gc2Nhbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRocm93RXJyb3JJZkV2YWx1YXRpb25TZXRDb250YWluc1BsYWNlaG9sZGVyTm9kZXMoXG4gICAgZXZhbHVhdGlvblNldDogTm9kZVtdKSB7XG4gIGV2YWx1YXRpb25TZXQuZm9yRWFjaChub2RlID0+IHtcbiAgICBpZiAobm9kZSBpbnN0YW5jZW9mIFBsYWNlaG9sZGVyTm9kZSkge1xuICAgICAgY29uc3Qgc2hhcGUgPSAnWycgKyBub2RlLm91dHB1dC5zaGFwZS5qb2luKCcsICcpICsgJ10nO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdQbGFjZWhvbGRlciBub2RlIFwiJyArIG5vZGUubmFtZSArICdcIiAnICsgc2hhcGUgK1xuICAgICAgICAgICcgbm90IHByZXNlbnQgaW4gZmVlZCBkaWN0aW9uYXJ5LicpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogSW5qZWN0cyBzcGxpdHMgbm9kZXMgYWZ0ZXIgZXZlcnkgbm9kZSB0aGF0IGhhcyBtdWx0aXBsZSBjb25zdW1lcnMuXG4gKlxuICogQGhpZGRlblxuICogQHBhcmFtIG5vZGVzIFRoZSBub2RlIGxpc3QgaW4gZXZhbHVhdGlvbiBvcmRlci5cbiAqIEByZXR1cm4gVGhlIG5vZGUgbGlzdCB3aXRoIHNwbGl0IG5vZGVzIGluamVjdGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkU3BsaXROb2Rlcyhub2RlczogTm9kZVtdKTogTm9kZVtdIHtcbiAgY29uc3Qgbm9kZUlkVG9OdW1Db25zdW1lcnM6IG51bWJlcltdID0gW107XG4gIGNvbnN0IG5vZGVJZFRvU3BsaXROb2RlOiB7W25vZGVJZDogbnVtYmVyXTogU3BsaXROb2RlfSA9IHt9O1xuXG4gIC8vIEZpbmQgbm9kZXMgdGhhdCBoYXZlIG11bHRpcGxlIGNvbnN1bWVycy5cbiAgbm9kZXMuZm9yRWFjaChub2RlID0+IHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMobm9kZS5pbnB1dHMpO1xuICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgY29uc3QgaW5wdXRUZW5zb3IgPSBub2RlLmlucHV0c1trZXldO1xuICAgICAgY29uc3QgaW5wdXQgPSBpbnB1dFRlbnNvci5ub2RlO1xuICAgICAgaWYgKG5vZGVJZFRvTnVtQ29uc3VtZXJzW2lucHV0LmlkXSA9PSBudWxsKSB7XG4gICAgICAgIG5vZGVJZFRvTnVtQ29uc3VtZXJzW2lucHV0LmlkXSA9IDA7XG4gICAgICB9XG4gICAgICBub2RlSWRUb051bUNvbnN1bWVyc1tpbnB1dC5pZF0rKztcbiAgICAgIGlmIChub2RlSWRUb051bUNvbnN1bWVyc1tpbnB1dC5pZF0gPiAxICYmXG4gICAgICAgICAgbm9kZUlkVG9TcGxpdE5vZGVbaW5wdXQuaWRdID09IG51bGwpIHtcbiAgICAgICAgbm9kZUlkVG9TcGxpdE5vZGVbaW5wdXQuaWRdID0gbmV3IFNwbGl0Tm9kZShpbnB1dC5ncmFwaCwgaW5wdXRUZW5zb3IpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICAvLyBJbmplY3QgYSBzcGxpdCBub2RlIGFmdGVyIGVhY2ggbm9kZSB0aGF0IGhhcyBtdWx0aXBsZSBjb25zdW1lcnMgYW5kXG4gIC8vIHJld2lyZSB0aGUgaW5wdXRzIG9mIHRoZSBjb25zdW1lcnMgdG8gY29uc3VtZSB0aGUgb3V0cHV0IHRlbnNvcnMgb2YgdGhlXG4gIC8vIHNwbGl0IG5vZGUgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgbm9kZS4gRWFjaCBjb25zdW1lciBjb25zdW1lcyBhXG4gIC8vIGRpZmZlcmVudCBvdXRwdXQgdGVuc29yIHNvIHRoYXQgZGVyaXZhdGl2ZXMgYXJlIG5vdCBvdmVyd3JpdHRlbi5cbiAgLy8geC0tPnkgIGJlY29tZXMgeC0tPnMtLT55ICAgd2hlcmUgeSBjb25zdW1lcyB0aGUgMXN0IG91dHB1dCB0ZW5zb3Igb2Ygc1xuICAvLyB8LS0+eiAgICAgICAgICAgICAgfC0tPnogICAgIGFuZCB6IGNvbnN1bWVzIHRoZSAybmQgb3V0cHV0IHRlbnNvciBvZiBzXG4gIGNvbnN0IG5ld05vZGVzOiBOb2RlW10gPSBbXTtcbiAgbm9kZXMuZm9yRWFjaChub2RlID0+IHtcbiAgICBuZXdOb2Rlcy5wdXNoKG5vZGUpO1xuICAgIGlmIChub2RlLmlkIGluIG5vZGVJZFRvU3BsaXROb2RlKSB7XG4gICAgICBjb25zdCBzcGxpdE5vZGUgPSBub2RlSWRUb1NwbGl0Tm9kZVtub2RlLmlkXTtcbiAgICAgIG5ld05vZGVzLnB1c2goc3BsaXROb2RlKTtcbiAgICB9XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG5vZGUuaW5wdXRzKTtcbiAgICBrZXlzLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGNvbnN0IGlucHV0VGVuc29yID0gbm9kZS5pbnB1dHNba2V5XTtcbiAgICAgIGNvbnN0IGlucHV0SWQgPSBpbnB1dFRlbnNvci5ub2RlLmlkO1xuICAgICAgaWYgKGlucHV0SWQgaW4gbm9kZUlkVG9TcGxpdE5vZGUpIHtcbiAgICAgICAgbm9kZS5pbnB1dHNba2V5XSA9IG5vZGVJZFRvU3BsaXROb2RlW2lucHV0SWRdLmdldE5ld091dHB1dFRlbnNvcigpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIG5ld05vZGVzO1xufVxuIiwiLyogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5pbXBvcnQge05vZGUsIFRlbnNvciwgVmFyaWFibGVOb2RlfSBmcm9tICcuL2dyYXBoJztcbmltcG9ydCB7TkRBcnJheU1hdGh9IGZyb20gJy4vbWF0aC9tYXRoJztcbmltcG9ydCB7TkRBcnJheSwgU2NhbGFyfSBmcm9tICcuL21hdGgvbmRhcnJheSc7XG5pbXBvcnQge09wdGltaXplcn0gZnJvbSAnLi9vcHRpbWl6ZXInO1xuaW1wb3J0IHtTZXNzaW9uUnVudGltZX0gZnJvbSAnLi9zZXNzaW9uJztcbmltcG9ydCAqIGFzIHNlc3Npb25fdXRpbCBmcm9tICcuL3Nlc3Npb25fdXRpbCc7XG5pbXBvcnQge1RlbnNvckFycmF5TWFwfSBmcm9tICcuL3RlbnNvcl9hcnJheV9tYXAnO1xuXG5leHBvcnQgY2xhc3MgU0dET3B0aW1pemVyIGV4dGVuZHMgT3B0aW1pemVyIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsZWFybmluZ1JhdGU6IG51bWJlciwgc3BlY2lmaWVkVmFyaWFibGVMaXN0PzogTm9kZVtdKSB7XG4gICAgc3VwZXIoc3BlY2lmaWVkVmFyaWFibGVMaXN0KTtcbiAgfVxuXG4gIGJlZm9yZUJhdGNoKFxuICAgICAgbWF0aDogTkRBcnJheU1hdGgsIGJhdGNoU2l6ZTogbnVtYmVyLCBydW50aW1lOiBTZXNzaW9uUnVudGltZSxcbiAgICAgIGFjdGl2YXRpb25BcnJheU1hcDogVGVuc29yQXJyYXlNYXAsIGdyYWRpZW50QXJyYXlNYXA6IFRlbnNvckFycmF5TWFwKSB7XG4gICAgdGhpcy52YXJpYWJsZU5vZGVzID0gdGhpcy5zcGVjaWZpZWRWYXJpYWJsZU5vZGVzID09IG51bGwgP1xuICAgICAgICBzZXNzaW9uX3V0aWwuZ2V0VmFyaWFibGVOb2Rlc0Zyb21FdmFsdWF0aW9uU2V0KHJ1bnRpbWUubm9kZXMpIDpcbiAgICAgICAgdGhpcy5zcGVjaWZpZWRWYXJpYWJsZU5vZGVzO1xuICAgIGlmIChiYXRjaFNpemUgIT09IHRoaXMucHJldkJhdGNoU2l6ZSkge1xuICAgICAgdGhpcy5wcmV2QmF0Y2hTaXplID0gYmF0Y2hTaXplO1xuICAgICAgdGhpcy5jID0gU2NhbGFyLm5ldygtdGhpcy5sZWFybmluZ1JhdGUgLyBiYXRjaFNpemUpO1xuICAgIH1cbiAgICB0aGlzLnZhcmlhYmxlTm9kZXMuZm9yRWFjaChcbiAgICAgICAgbm9kZSA9PiB0aGlzLnZhcmlhYmxlR3JhZGllbnRzLnNldChcbiAgICAgICAgICAgIG5vZGUub3V0cHV0LCBOREFycmF5Lnplcm9zKG5vZGUub3V0cHV0LnNoYXBlKSkpO1xuICB9XG5cbiAgYWZ0ZXJFeGFtcGxlKFxuICAgICAgbWF0aDogTkRBcnJheU1hdGgsIHJ1bnRpbWU6IFNlc3Npb25SdW50aW1lLFxuICAgICAgYWN0aXZhdGlvbkFycmF5TWFwOiBUZW5zb3JBcnJheU1hcCwgZ3JhZGllbnRBcnJheU1hcDogVGVuc29yQXJyYXlNYXApIHtcbiAgICBtYXRoLnNjb3BlKChrZWVwKSA9PiB7XG4gICAgICB0aGlzLnZhcmlhYmxlTm9kZXMhLmZvckVhY2gobm9kZSA9PiB7XG4gICAgICAgIGNvbnN0IGdyYWRpZW50ID0gZ3JhZGllbnRBcnJheU1hcC5nZXQobm9kZS5vdXRwdXQpO1xuICAgICAgICBjb25zdCBhY2N1bXVsYXRlZEdyYWRpZW50ID0gdGhpcy52YXJpYWJsZUdyYWRpZW50cy5nZXQobm9kZS5vdXRwdXQpO1xuICAgICAgICB0aGlzLnZhcmlhYmxlR3JhZGllbnRzLnNldChcbiAgICAgICAgICAgIG5vZGUub3V0cHV0LCBrZWVwKG1hdGguYWRkKGdyYWRpZW50LCBhY2N1bXVsYXRlZEdyYWRpZW50KSkpO1xuICAgICAgICBhY2N1bXVsYXRlZEdyYWRpZW50LmRpc3Bvc2UoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgYWZ0ZXJCYXRjaChcbiAgICAgIG1hdGg6IE5EQXJyYXlNYXRoLCBiYXRjaFNpemU6IG51bWJlciwgcnVudGltZTogU2Vzc2lvblJ1bnRpbWUsXG4gICAgICBhY3RpdmF0aW9uQXJyYXlNYXA6IFRlbnNvckFycmF5TWFwLCBncmFkaWVudEFycmF5TWFwOiBUZW5zb3JBcnJheU1hcCkge1xuICAgIG1hdGguc2NvcGUoKGtlZXApID0+IHtcbiAgICAgIHRoaXMudmFyaWFibGVOb2RlcyEuZm9yRWFjaChub2RlID0+IHtcbiAgICAgICAgY29uc3Qgb2xkVmFyaWFibGUgPSBhY3RpdmF0aW9uQXJyYXlNYXAuZ2V0KG5vZGUub3V0cHV0KTtcbiAgICAgICAgY29uc3QgZ3JhZGllbnQgPSB0aGlzLnZhcmlhYmxlR3JhZGllbnRzLmdldChub2RlLm91dHB1dCk7XG4gICAgICAgIGNvbnN0IHZhcmlhYmxlID1cbiAgICAgICAgICAgIG1hdGguc2NhbGVkQXJyYXlBZGQodGhpcy5jISwgZ3JhZGllbnQsIHRoaXMub25lISwgb2xkVmFyaWFibGUpO1xuICAgICAgICBhY3RpdmF0aW9uQXJyYXlNYXAuc2V0KG5vZGUub3V0cHV0LCBrZWVwKHZhcmlhYmxlKSk7XG4gICAgICAgIG5vZGUuZGF0YSA9IHZhcmlhYmxlO1xuXG4gICAgICAgIG9sZFZhcmlhYmxlLmRpc3Bvc2UoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy52YXJpYWJsZUdyYWRpZW50cy5kaXNwb3NlKCk7XG4gICAgdGhpcy52YXJpYWJsZUdyYWRpZW50cyA9IG5ldyBUZW5zb3JBcnJheU1hcCgpO1xuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICBpZiAodGhpcy5jICE9IG51bGwpIHtcbiAgICAgIHRoaXMuYy5kaXNwb3NlKCk7XG4gICAgfVxuICAgIHRoaXMub25lLmRpc3Bvc2UoKTtcbiAgfVxuXG4gIHNldExlYXJuaW5nUmF0ZShsZWFybmluZ1JhdGU6IG51bWJlcikge1xuICAgIHRoaXMubGVhcm5pbmdSYXRlID0gbGVhcm5pbmdSYXRlO1xuICB9XG5cbiAgcHJpdmF0ZSB2YXJpYWJsZUdyYWRpZW50cyA9IG5ldyBUZW5zb3JBcnJheU1hcCgpO1xuICBwcml2YXRlIHByZXZCYXRjaFNpemU6IG51bWJlcjtcbiAgcHJpdmF0ZSBvbmUgPSBTY2FsYXIubmV3KDEpO1xuICBwcml2YXRlIGM6IFNjYWxhcjtcbn1cbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4vZ3JhcGgnO1xuaW1wb3J0IHtOREFycmF5fSBmcm9tICcuL21hdGgvbmRhcnJheSc7XG5cbi8qKlxuICogVGVuc29yQXJyYXlNYXAgaXMgYW4gaW50ZXJuYWwgbWFwIGZyb20gVGVuc29yIElEcyB0byBOREFycmF5cy4gU2luY2UgTkRBcnJheXNcbiAqIGNhbiBiZSBiYWNrZWQgYnkgV2ViR0wgdGV4dHVyZXMsIHRoZSBUZW5zb3JBcnJheU1hcCBpcyBvbmx5IHVzZWQgaW5zaWRlIG9mIGFcbiAqIFNlc3Npb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBUZW5zb3JBcnJheU1hcCB7XG4gIC8qKlxuICAgKiBBZGQgb3IgcmVwbGFjZSBhbiBlbnRyeSBpbiB0aGUgbWFwLlxuICAgKiBAcGFyYW0gdGVuc29yIFRoZSB0ZW5zb3Iga2V5LlxuICAgKiBAcGFyYW0gYXJyYXkgVGhlIE5EQXJyYXkgdmFsdWUsIGNhbiBiZSBudWxsLlxuICAgKi9cbiAgc2V0KHRlbnNvcjogVGVuc29yLCBhcnJheTogTkRBcnJheXxudWxsKSB7XG4gICAgdGhpcy5kaWN0W3RlbnNvci5pZF0gPSBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBOREFycmF5IGFzc29jaWF0ZWQgd2l0aCB0aGUgcHJvdmlkZWQgdGVuc29yLiBXaWxsIHRocm93IGFuXG4gICAqIGV4Y2VwdGlvbiBpZiB0aGUgdGVuc29yIGlzIG5vdCBhIGtleSBpbiB0aGUgbWFwLCBvciBpZiB0aGUgYXNzb2NpYXRlZFxuICAgKiBOREFycmF5IGlzIG51bGwuXG4gICAqIEBwYXJhbSB0ZW5zb3IgVGhlIHRlbnNvciBrZXkuXG4gICAqIEBwYXJhbSBza2lwQ2hlY2tzIEZhbHNlIGJ5IGRlZmF1bHQuIElmIHRydWUgd2lsbCBza2lwIGFsbCBjaGVja3MuXG4gICAqIEByZXR1cm4gVGhlIE5EQXJyYXkgYXNzb2NpYXRlZCB3aXRoIHRoZSB0ZW5zb3IuXG4gICAqL1xuICBnZXQodGVuc29yOiBUZW5zb3IsIHNraXBDaGVja3MgPSBmYWxzZSk6IE5EQXJyYXkge1xuICAgIGlmICghc2tpcENoZWNrcyAmJiB0aGlzLmRpY3RbdGVuc29yLmlkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RlbnNvciAnICsgdGVuc29yLmlkICsgJyBub3QgaW4gYXJyYXkgbWFwLicpO1xuICAgIH1cbiAgICBjb25zdCBuZGEgPSB0aGlzLmRpY3RbdGVuc29yLmlkXTtcbiAgICBpZiAoIXNraXBDaGVja3MgJiYgbmRhID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RlbnNvciAnICsgdGVuc29yLmlkICsgJyBoYXMgbnVsbCBhcnJheS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIG5kYSE7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIHRlbnNvci9OREFycmF5IHBhaXIgZnJvbSB0aGUgbWFwLlxuICAgKiBAcGFyYW0gdGVuc29yIFRoZSB0ZW5zb3Iga2V5LlxuICAgKi9cbiAgZGVsZXRlKHRlbnNvcjogVGVuc29yKSB7XG4gICAgZGVsZXRlIHRoaXMuZGljdFt0ZW5zb3IuaWRdO1xuICB9XG5cbiAgZGlzcG9zZUFycmF5KHRlbnNvcjogVGVuc29yKSB7XG4gICAgaWYgKHRoaXMuZGljdFt0ZW5zb3IuaWRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbmRhID0gdGhpcy5kaWN0W3RlbnNvci5pZF07XG4gICAgaWYgKG5kYSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBuZGEuZGlzcG9zZSgpO1xuICAgIHRoaXMuZGljdFt0ZW5zb3IuaWRdID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIFRoZSBudW1iZXIgb2YgdGVuc29yL05EQXJyYXkgcGFpcnMgaW4gdGhlIG1hcC5cbiAgICovXG4gIHNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5kaWN0KS5sZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICogSXRlcmF0ZSBvdmVyIGFsbCBjb250YWluZWQgTkRBcnJheSB2YWx1ZXMgYW5kIGRpc3Bvc2UgdGhlbS5cbiAgICovXG4gIGRpc3Bvc2UoKSB7XG4gICAgT2JqZWN0LmtleXModGhpcy5kaWN0KS5mb3JFYWNoKHRlbnNvcklEID0+IHtcbiAgICAgIGNvbnN0IG5kYSA9IHRoaXMuZGljdFsrdGVuc29ySURdO1xuICAgICAgaWYgKG5kYSkge1xuICAgICAgICBuZGEuZGlzcG9zZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuZGljdCA9IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRlc3RzIHRvIHNlZSBpZiBhIHRlbnNvciBoYXMgYSBudWxsIGFzc29jaWF0ZWQgd2l0aCBpdC4gVGhyb3dzXG4gICAqIGlmIHRoZSB0ZW5zb3IgaXMgbm90IGEga2V5IGluIHRoZSBtYXAuXG4gICAqIEBwYXJhbSB0ZW5zb3IgVGhlIHRlbnNvciBrZXkuXG4gICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgYXNzb2NpYXRlZCBOREFycmF5IGlzIG51bGwsIGVsc2UgRmFsc2UuXG4gICAqL1xuICBoYXNOdWxsQXJyYXkodGVuc29yOiBUZW5zb3IpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5kaWN0W3RlbnNvci5pZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd0ZW5zb3IgJyArIHRlbnNvci5pZCArICcgbm90IGluIGFycmF5IG1hcC4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZGljdFt0ZW5zb3IuaWRdID09PSBudWxsO1xuICB9XG5cbiAgcHJpdmF0ZSBkaWN0OiB7W3RlbnNvcklEOiBudW1iZXJdOiBOREFycmF5IHwgbnVsbH0gPSB7fTtcbn1cbiIsIi8qIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuZXhwb3J0IHR5cGUgVmVjdG9yID0gbnVtYmVyW10gfCBGbG9hdDY0QXJyYXkgfCBGbG9hdDMyQXJyYXkgfCBJbnQzMkFycmF5IHxcbiAgICBJbnQ4QXJyYXkgfCBJbnQxNkFycmF5O1xuXG4vKiogU2h1ZmZsZXMgdGhlIGFycmF5IHVzaW5nIEZpc2hlci1ZYXRlcyBhbGdvcml0aG0uICovXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG5leHBvcnQgZnVuY3Rpb24gc2h1ZmZsZShhcnJheTogYW55W118VWludDMyQXJyYXl8SW50MzJBcnJheXxcbiAgICAgICAgICAgICAgICAgICAgICAgIEZsb2F0MzJBcnJheSk6IHZvaWQge1xuICBsZXQgY291bnRlciA9IGFycmF5Lmxlbmd0aDtcbiAgbGV0IHRlbXAgPSAwO1xuICBsZXQgaW5kZXggPSAwO1xuICAvLyBXaGlsZSB0aGVyZSBhcmUgZWxlbWVudHMgaW4gdGhlIGFycmF5XG4gIHdoaWxlIChjb3VudGVyID4gMCkge1xuICAgIC8vIFBpY2sgYSByYW5kb20gaW5kZXhcbiAgICBpbmRleCA9IChNYXRoLnJhbmRvbSgpICogY291bnRlcikgfCAwO1xuICAgIC8vIERlY3JlYXNlIGNvdW50ZXIgYnkgMVxuICAgIGNvdW50ZXItLTtcbiAgICAvLyBBbmQgc3dhcCB0aGUgbGFzdCBlbGVtZW50IHdpdGggaXRcbiAgICB0ZW1wID0gYXJyYXlbY291bnRlcl07XG4gICAgYXJyYXlbY291bnRlcl0gPSBhcnJheVtpbmRleF07XG4gICAgYXJyYXlbaW5kZXhdID0gdGVtcDtcbiAgfVxufVxuXG4vKiogQ2xhbXBzIGEgdmFsdWUgdG8gYSBzcGVjaWZpZWQgcmFuZ2UuICovXG5leHBvcnQgZnVuY3Rpb24gY2xhbXAobWluOiBudW1iZXIsIHg6IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXIge1xuICByZXR1cm4gTWF0aC5tYXgobWluLCBNYXRoLm1pbih4LCBtYXgpKTtcbn1cblxuLyoqIFJldHVybnMgYSBzYW1wbGUgZnJvbSBhIHVuaWZvcm0gW2EsIGJdIGRpc3RyaWJ1dGlvbi4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYW5kVW5pZm9ybShhOiBudW1iZXIsIGI6IG51bWJlcikge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKSAqIChiIC0gYSkgKyBhO1xufVxuXG4vKipcbiAqIFNhbXBsZXMgZnJvbSBhIGdhdXNzaWFuIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiBAcGFyYW0gbWVhbiBUaGUgbWVhbi4gRGVmYXVsdCBpcyAwLlxuICogQHBhcmFtIHN0ZERldiBUaGUgc3RhbmRhcmQgZGV2aWF0aW9uLiBEZWZhdWx0IGlzIDEuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYW5kR2F1c3MobWVhbiA9IDAsIHN0ZERldiA9IDEsIHRydW5jYXRlZCA9IGZhbHNlKTogbnVtYmVyIHtcbiAgbGV0IHYxOiBudW1iZXIsIHYyOiBudW1iZXIsIHM6IG51bWJlcjtcbiAgZG8ge1xuICAgIHYxID0gMiAqIE1hdGgucmFuZG9tKCkgLSAxO1xuICAgIHYyID0gMiAqIE1hdGgucmFuZG9tKCkgLSAxO1xuICAgIHMgPSB2MSAqIHYxICsgdjIgKiB2MjtcbiAgfSB3aGlsZSAocyA+IDEpO1xuXG4gIGNvbnN0IHJlc3VsdCA9IE1hdGguc3FydCgtMiAqIE1hdGgubG9nKHMpIC8gcykgKiB2MTtcbiAgaWYgKHRydW5jYXRlZCAmJiByZXN1bHQgPiAyKSB7XG4gICAgcmV0dXJuIHJhbmRHYXVzcyhtZWFuLCBzdGREZXYsIHRydWUpO1xuICB9XG4gIHJldHVybiBtZWFuICsgc3RkRGV2ICogcmVzdWx0O1xufVxuXG4vKiogUmV0dXJucyBzcXVhcmVkIGV1Y2xlZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWN0b3JzLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3RTcXVhcmVkKGE6IFZlY3RvciwgYjogVmVjdG9yKTogbnVtYmVyIHtcbiAgbGV0IHJlc3VsdCA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGRpZmYgPSBhW2ldIC0gYltpXTtcbiAgICByZXN1bHQgKz0gZGlmZiAqIGRpZmY7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydChleHByOiBib29sZWFuLCBtc2c6IHN0cmluZykge1xuICBpZiAoIWV4cHIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0U2hhcGVzTWF0Y2goXG4gICAgc2hhcGVBOiBudW1iZXJbXSwgc2hhcGVCOiBudW1iZXJbXSwgZXJyb3JNZXNzYWdlUHJlZml4ID0gJycpOiB2b2lkIHtcbiAgYXNzZXJ0KFxuICAgICAgYXJyYXlzRXF1YWwoc2hhcGVBLCBzaGFwZUIpLFxuICAgICAgZXJyb3JNZXNzYWdlUHJlZml4ICsgYFNoYXBlcyAke3NoYXBlQX0gYW5kICR7c2hhcGVCfSBtdXN0IG1hdGNoYCk7XG59XG5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbmV4cG9ydCBmdW5jdGlvbiBmbGF0dGVuKGFycjogYW55W10sIHJldD86IG51bWJlcltdKTogbnVtYmVyW10ge1xuICByZXQgPSAocmV0ID09PSB1bmRlZmluZWQgPyBbXSA6IHJldCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXJyW2ldKSkge1xuICAgICAgZmxhdHRlbihhcnJbaV0sIHJldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldC5wdXNoKGFycltpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmV4cG9ydCB0eXBlIEFycmF5RGF0YSA9IG51bWJlcnxudW1iZXJbXXxudW1iZXJbXVtdfG51bWJlcltdW11bXXxudW1iZXJbXVtdW11bXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGluZmVyU2hhcGUoYXJyOiBBcnJheURhdGEpOiBudW1iZXJbXSB7XG4gIGNvbnN0IHNoYXBlOiBudW1iZXJbXSA9IFtdO1xuICB3aGlsZSAoYXJyIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICBzaGFwZS5wdXNoKGFyci5sZW5ndGgpO1xuICAgIGFyciA9IGFyclswXTtcbiAgfVxuICByZXR1cm4gc2hhcGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaXplRnJvbVNoYXBlKHNoYXBlOiBudW1iZXJbXSk6IG51bWJlciB7XG4gIGlmIChzaGFwZS5sZW5ndGggPT09IDApIHtcbiAgICAvLyBTY2FsYXIuXG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgbGV0IHNpemUgPSBzaGFwZVswXTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBzaGFwZS5sZW5ndGg7IGkrKykge1xuICAgIHNpemUgKj0gc2hhcGVbaV07XG4gIH1cbiAgcmV0dXJuIHNpemU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NjYWxhclNoYXBlKHNoYXBlOiBudW1iZXJbXSk6IGJvb2xlYW4ge1xuICByZXR1cm4gc2hhcGUubGVuZ3RoID09PSAwO1xufVxuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG5leHBvcnQgZnVuY3Rpb24gYXJyYXlzRXF1YWwobjE6IGFueVtdfEZsb2F0MzJBcnJheSwgbjI6IGFueVtdfEZsb2F0MzJBcnJheSkge1xuICBpZiAobjEubGVuZ3RoICE9PSBuMi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBuMS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChuMVtpXSAhPT0gbjJbaV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0ludChhOiBudW1iZXIpOiBib29sZWFuIHtcbiAgcmV0dXJuIGEgJSAxID09PSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGFuaCh4OiBudW1iZXIpOiBudW1iZXIge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gIGlmICgoTWF0aCBhcyBhbnkpLnRhbmggIT0gbnVsbCkge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICByZXR1cm4gKE1hdGggYXMgYW55KS50YW5oKHgpO1xuICB9XG4gIGlmICh4ID09PSBJbmZpbml0eSkge1xuICAgIHJldHVybiAxO1xuICB9IGVsc2UgaWYgKHggPT09IC1JbmZpbml0eSkge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBlMnggPSBNYXRoLmV4cCgyICogeCk7XG4gICAgcmV0dXJuIChlMnggLSAxKSAvIChlMnggKyAxKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2l6ZVRvU3F1YXJpc2hTaGFwZShzaXplOiBudW1iZXIpOiBbbnVtYmVyLCBudW1iZXJdIHtcbiAgZm9yIChsZXQgYSA9IE1hdGguZmxvb3IoTWF0aC5zcXJ0KHNpemUpKTsgYSA+IDE7IC0tYSkge1xuICAgIGlmIChzaXplICUgYSA9PT0gMCkge1xuICAgICAgcmV0dXJuIFthLCBzaXplIC8gYV07XG4gICAgfVxuICB9XG4gIHJldHVybiBbMSwgc2l6ZV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTaHVmZmxlZEluZGljZXMobjogbnVtYmVyKTogVWludDMyQXJyYXkge1xuICBjb25zdCBzaHVmZmxlZEluZGljZXMgPSBuZXcgVWludDMyQXJyYXkobik7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgc2h1ZmZsZWRJbmRpY2VzW2ldID0gaTtcbiAgfVxuICBzaHVmZmxlKHNodWZmbGVkSW5kaWNlcyk7XG4gIHJldHVybiBzaHVmZmxlZEluZGljZXM7XG59XG4iXX0=
